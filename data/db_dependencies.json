{
    "dependencies": {
        "1": {
            "owner": "psf",
            "name": "requests",
            "version": "2.26.0",
            "id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        }
    },
    "issues": {
        "1": {
            "html_url": "https://github.com/psf/requests/issues/2235",
            "id": 43205423,
            "number": 2235,
            "title": "chunk size error for unicode content",
            "created_at": "2014-09-19T05:27:53Z",
            "updated_at": "2014-10-10T16:46:04Z",
            "closed_at": null,
            "body": "I found this code in requests/adapters.py (latest version installed by pip): \n\nhttps://github.com/kennethreitz/requests/blob/master/requests/adapters.py#L383\n\n``` python\nfor i in request.body:                                                     \n       low_conn.send(hex(len(i))[2:].encode('utf-8'))\n```\n\nif `i` is a unicode,  the low_conn send utf8 encoding byte string, but the chunk size is wrong.\nI think it should change to:\n\n``` python\nif isinstance(i, unicode):\n  i = i.encode('utf8')\nlow_conn.send(hex(len(i))[2:].encode('utf-8'))\n```\n",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "ilovenwd",
                "id": 32542,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2235/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56139143",
                    "id": 56139143,
                    "created_at": "2014-09-19T06:18:31Z",
                    "updated_at": "2014-09-19T06:18:31Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for raising this!\n\nI don't think we should do that, however. If you've passed us a unicode string we should not be guessing at what text encoding you want to use in the body. I think I'd be happier not accepting unicode at all in this case, rather than guessing that 'UTF-8' is what is meant.\n\nThis is a bit of a thorny issue though, because that reduces our compatibility: we've implicitly allowed it in the past. Maybe force a decode to ASCII instead? (A choice which is almost certain to work.)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56139143/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56139152",
                    "id": 56139152,
                    "created_at": "2014-09-19T06:18:42Z",
                    "updated_at": "2014-09-19T06:18:42Z",
                    "author_association": "MEMBER",
                    "body": "@sigmavirus24, can I get your thoughts here?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56139152/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56177297",
                    "id": 56177297,
                    "created_at": "2014-09-19T13:34:22Z",
                    "updated_at": "2014-09-19T13:34:22Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So while my instinct is to insist the user give us everything as a bytes object (and I don't think it's entirely unreasonable), we actively encourage users to do:\n\n``` python\nrequests.post(url,\n              data=json.dumps({'my': 'json', 'data': 'here'}),\n              headers={'Content-Type': 'application/json'})\n```\n\nIf we don't handle this in requests, at least for some deprecation period, we will be forcing users to do:\n\n``` python\nrequests.post(url,\n              data=json.dumps({'my': 'json', 'data': 'here'}).encode('utf-8'),\n              headers={'Content-Type': 'application/json'})\n```\n\nI'm sure the number of people passing JSON to `data` is not insignificant. I guess I'm in favor of using a Warning and transitioning to forcing this. This use case I outlined will also become obsolete soon because requests will be handling `json.dumps` for users. Which reminds me...\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56177297/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56296656",
                    "id": 56296656,
                    "created_at": "2014-09-21T11:58:16Z",
                    "updated_at": "2014-09-21T12:01:50Z",
                    "author_association": "NONE",
                    "body": "UTF8 is the most reasonable default.\nBesides, python3 string defaults to unicode, many data read from db/http is auto convert to unicode(default utf8).\nso, why not accept utf8 as default unicode encoding?\nThe python standard library ALREADY AUTO convert unicode to utf8 when write to socket.\n(that why the chunk size is wrong, but the chunk body is ok)\n\n@sigmavirus24 this bug only appears when using generator as data (chunked encoding)\npost data=unicode works because \n\n> The python standard library ALREADY AUTO convert unicode to utf8 when write to socket.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56296656/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ilovenwd",
                        "id": 32542,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56296906",
                    "id": 56296906,
                    "created_at": "2014-09-21T12:09:33Z",
                    "updated_at": "2014-09-21T12:09:33Z",
                    "author_association": "MEMBER",
                    "body": "> The python standard library ALREADY AUTO convert unicode to utf8 when write to socket. (that why the chunk size is wrong, not the chunk body)\n\nNot in Python 3 it doesn't:\n\n``` python\nPython 3.4.1 (default, Aug 25 2014, 11:56:02) \n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import socket\n>>> s = socket.create_connection(('mkcert.org', 80))\n>>> s.write(\"unicode string\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'str' does not support the buffer interface\n```\n\nIn fact, it doesn't even work in Python 2 on my machine:\n\n``` python\nPython 2.7.8 (default, Aug 25 2014, 11:53:26) \n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import socket\n>>> s = socket.create_connection(('mkcert.org', 80))\n>>> s.send(u\"unicode string with \u00dcB\u0130TAK\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xdc' in position 20: ordinal not in range(128)\n```\n\nThe answer to 'why not accept utf8 as default encoding' is because that mistake is exactly what causes this problem in the first place. There is no 'default encoding', there's only right and wrong. We cannot and should not guess in this regard. It makes no sense to send unicode bytes on a socket.\n\nSometimes, we can guess. JSON has a set of well-defined text encodings, so we can pick one of those. But you could be sending text in _any_ encoding, and we have no way to guess. Getting weird server errors is worse than us blowing up and saying \"you have to give us binary data!\"\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56296906/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56299555",
                    "id": 56299555,
                    "created_at": "2014-09-21T14:00:31Z",
                    "updated_at": "2014-09-21T14:00:31Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Getting weird server errors is worse than us blowing up and saying \"you have to give us binary data!\"\n\nYeah I'm surprised we haven't had more bug reports about this frankly. Like I said, I think we should follow a deprecation pattern for this behaviour for 2.5 and 2.6, then make it default in 2.7 (or 3.0).\n- I think we should issue a `DeprecationWarning` when we receive `data` whose type is not `bytes`. We should then immediately try to encode the data for the user.\n- For the case that @ilovenwd is encountering (using a generator) we should issue _1_ deprecation warning after the first chunk and then encode the data for the user.\n- In the case of the user passing a file(-like) object to `data`, we should check the mode to ensure it was opened with `'b'` or is an instance/subclass of `BytesIO`. This case is tougher because some portions of it may be handled by the generator case (i.e., some users don't define `__len__` on `BytesIO` subclasses and so they're treated as generators.).\n\nOnce we have a `json` parameter, we can confidently handle that ourselves, for the user.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56299555/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "tldr": "The issue is about a bug in the Requests library where it strips double slashes in URLs, breaking AWS S3 presigned URLs and potentially other services.",
                "security_relevancy": "2",
                "security_relevancy_reasoning": "The issue does not indicate any direct security vulnerabilities or concerns. It is more of a compatibility and regression issue that could potentially impact certain services like AWS S3 presigned URLs. While it may not be a critical security concern, it could still lead to unexpected behavior and potential service disruptions.",
                "issue_label": [
                    "compatibility",
                    "url-handling",
                    "aws-s3"
                ],
                "issue_label_reasoning": "The issue is related to compatibility problems with the Requests library, specifically around how it handles URLs and the impact on AWS S3 presigned URLs. Therefore, the appropriate labels are \"compatibility\", \"url-handling\", and \"aws-s3\".",
                "positivity_negativity": "3",
                "positivity_negativity_reasoning": "The discussion in the issue comments is mostly factual and neutral, with the maintainers and contributors discussing the problem and potential solutions. There are no signs of a highly negative or disruptive discussion, but it also lacks a very positive and constructive tone. The overall discussion seems to be focused on understanding and resolving the issue.",
                "bug_label": [
                    "regression",
                    "breaking-change"
                ],
                "bug_label_reasoning": "The issue indicates that the behavior of stripping double slashes in URLs is a regression or breaking change introduced in a newer version of the Requests library. This is causing compatibility issues with certain services like AWS S3 presigned URLs. Therefore, the appropriate bug labels are \"regression\" and \"breaking-change\"."
            }
        },
        "2": {
            "html_url": "https://github.com/psf/requests/issues/2233",
            "id": 43191940,
            "number": 2233,
            "title": "Refactoring exception hierarchy",
            "created_at": "2014-09-19T00:00:11Z",
            "updated_at": "2016-01-26T10:17:01Z",
            "closed_at": null,
            "body": "This was mentioned in #2230 as a project for requests 3.0, but it probably should get its own thread.\n\nI wrote a lot of words about what I'd like exception hierarchy to look like, here:\n\nhttps://gist.github.com/kevinburke/b98e053a4bf9835c67bb\n",
            "author_association": "CONTRIBUTOR",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "kevinburke",
                "id": 234019,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2233/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56139306",
                    "id": 56139306,
                    "created_at": "2014-09-19T06:21:29Z",
                    "updated_at": "2014-09-19T06:21:29Z",
                    "author_association": "MEMBER",
                    "body": "I am in principle a strong +1 on this work. It's most definitely a breaking change, however.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56139306/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/57944576",
                    "id": 57944576,
                    "created_at": "2014-10-05T17:13:03Z",
                    "updated_at": "2014-10-05T17:13:03Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'm starting to collect issues and features for a potential 3.0 release.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/57944576/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/174736830",
                    "id": 174736830,
                    "created_at": "2016-01-25T23:59:53Z",
                    "updated_at": "2016-01-25T23:59:53Z",
                    "author_association": "NONE",
                    "body": "Since it seems like a 3.0 release is drawing closer I'm just raising awareness to this issue which seems rather interesting. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/174736830/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jonathan-s",
                        "id": 2124818,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/174760620",
                    "id": 174760620,
                    "created_at": "2016-01-26T01:33:36Z",
                    "updated_at": "2016-01-26T01:33:43Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Thanks @jonathan-s. Those of us interested in this were already aware of requests 3.0 drawing close.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/174760620/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/174942668",
                    "id": 174942668,
                    "created_at": "2016-01-26T10:17:01Z",
                    "updated_at": "2016-01-26T10:17:01Z",
                    "author_association": "NONE",
                    "body": "Ah, sorry I missed that the 3.0.0 milestone had already been added that's keeping track of the issues for 3.0.0. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/174942668/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jonathan-s",
                        "id": 2124818,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "tldr": "The issue discusses a proposal to refactor the exception hierarchy in the Requests library, which is a breaking change for version 3.0.",
                "security_relevancy": "1",
                "security_relevancy_reasoning": "The issue does not indicate any security or vulnerability concerns. It is focused on a refactoring of the exception hierarchy, which is an internal change and does not directly impact the security of the library.",
                "issue_label": [
                    "enhancement",
                    "breaking-change"
                ],
                "issue_label_reasoning": [
                    "The issue is proposing a change to the exception hierarchy, which would be considered an enhancement to the library's functionality. It is not a bug fix or a new feature, but rather an improvement to the existing codebase.",
                    "The issue mentions that the proposed changes would be a breaking change for version 3.0 of the Requests library. This is an important consideration for the maintainers and users of the library."
                ],
                "positivity_negativity": "3",
                "positivity_negativity_reasoning": "The discussion in the comments is mostly neutral and factual, with the contributors acknowledging the need for the changes and the potential impact on the library. There are no signs of a negative or disruptive discussion."
            }
        },
        "3": {
            "html_url": "https://github.com/psf/requests/issues/2155",
            "id": 39202386,
            "number": 2155,
            "title": "Streaming gzipped responses",
            "created_at": "2014-07-31T14:55:22Z",
            "updated_at": "2018-09-24T09:33:32Z",
            "closed_at": null,
            "body": "I need to process big XML responses as a stream. The uncompressed responses can be multiple hundred megabytes in size, so loading them entirely into memory before handing them to the XML parser is not an option.\n\nI'm using lxml to parse and I just hand the `response.raw` to its `iterparse()` function, as described somewhere in the requests docs. This works fine for uncompressed responses.\n\nUnfortunately, the API I'm calling isn't particularly good. So it will sometimes return `Content-Encoding: gzip` even if I explicitly ask for uncompressed data. Also, the compression ratio on these extremely repetitive and verbose XML files is really good (10x+), so I'd really like to make use of compressed responses.\n\nIs this possible with requests? I couldn't find it in the documentation. Researching deeper into urllib3, its [HTTPResponse.read()](https://github.com/shazow/urllib3/blob/master/urllib3/response.py#L140) method seems to support a `decode_content` parameter. If not set, urllib3 falls back to what's set in the constructor. When requests calls the constructor in [requests.adapters.HTTPAdapter.send()](https://github.com/kennethreitz/requests/blob/fe693c492242ae532211e0c173324f09ca8cf227/requests/adapters.py#L343), it explicitly sets `decode_content` to False.\n\nIs there a reason why requests does that?\n\nStrangely, `iter_content()` actually sets `decode_content=True` while reading. Why here? It all appears a bit arbitrary. I don't really understand the motivation for doing it one way here and another way there.  \nPersonally, I can't really use `iter_content()` of course because I need a file-like object for lxml.\n\nI previously wrote my own file-like object that I can hook in between requests and lxml, but of course buffering is hard and I feel like smarter people than me have written this before, so I'd prefer to not have to roll my own.\n\nWhat's your advice how to handle this? Should requests be changed to default to setting `decode_content=True` in urllib3?\n",
            "author_association": "NONE",
            "comments": 10,
            "state": "open",
            "user": {
                "login": "hheimbuerger",
                "id": 159414,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2155/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50771010",
                    "id": 50771010,
                    "created_at": "2014-07-31T15:01:38Z",
                    "updated_at": "2014-07-31T15:01:38Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "No it should not default to setting that for a wide variety of reasons. What you should do is use `functools.partial` to replace the `read` method on the response (or just wrap it another way) so that you do something like:\n\n``` python\nresponse.raw.read = functools.partial(response.raw.read, decode_content=True)\n```\n\nand then pass `response.raw` to your parser.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50771010/reactions",
                        "total_count": 7,
                        "+1": 6,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50885814",
                    "id": 50885814,
                    "created_at": "2014-08-01T13:48:51Z",
                    "updated_at": "2014-08-01T13:48:51Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 Thanks, that's definitely an elegant solution to the problem I outlined above!\n\nI would recommend adding that to requests' documentation, e.g. in the FAQ: http://docs.python-requests.org/en/latest/community/faq/#encoded-data  \nCurrently, the statement \"Requests automatically decompresses gzip-encoded responses\" is not correct for the `stream=True` case and can lead to surprises.\n\nAs for my problem, as you've read on the [urllib3 issue](https://github.com/shazow/urllib3/issues/437), the urllib3 implementation of the gzip decompression has its own little quirks I have to work around in my code, but that is no longer a problem for requests.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50885814/reactions",
                        "total_count": 5,
                        "+1": 4,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hheimbuerger",
                        "id": 159414,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50887575",
                    "id": 50887575,
                    "created_at": "2014-08-01T14:03:50Z",
                    "updated_at": "2014-08-01T14:03:50Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> but that is no longer a problem for requests.\n\nAs in you feel this can be closed?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50887575/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50887791",
                    "id": 50887791,
                    "created_at": "2014-08-01T14:05:43Z",
                    "updated_at": "2014-08-01T14:05:43Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 I believe it should be documented, as the current documentation is incorrect.\n\nBut if you disagree with that, yes, close away!\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50887791/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hheimbuerger",
                        "id": 159414,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50888322",
                    "id": 50888322,
                    "created_at": "2014-08-01T14:10:15Z",
                    "updated_at": "2014-08-01T14:10:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The documentation could be clearer. To me (and this is entirely because I'm a core developer) the first paragraph speaks to the 90% of users who will never touch the raw response, while the second paragraph contradicts the first in saying \"but if you need to access the raw data, it's there for you\". Like I said, that's apparent to me, but I can see how that could be made clearer. I'll work on that tonight.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50888322/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50891684",
                    "id": 50891684,
                    "created_at": "2014-08-01T14:39:40Z",
                    "updated_at": "2014-08-01T14:39:40Z",
                    "author_association": "NONE",
                    "body": "For me, it's more that I would have interpreted \"raw data\" as \"raw payload\", i.e. a decompressed stream. I just have to read it in whatever chunks I need. As opposed to `.content`, which is a decompressed blob (also the payload, but in a different form).\n\nThe actual decompression feels like a concern of the HTTP library to me\u2014an implementation detail of HTTP if you will, one that I would expect requests to abstract away. Whether I read the payload from requests as a stream or as a prefetched blob of data wouldn't make a difference. Either way, requests would abstract the implementation detail 'compression'.\n\n(This assumption was also at the core of my original request to default `decode_content` to `True`. Of course now that I see what a leaky abstraction this is, I'm no longer suggesting that.)\n\nBut yeah, I absolutely agree that 99% of your users will never be affected by this detail.\n\nFeel free to close this issue.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50891684/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hheimbuerger",
                        "id": 159414,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50893660",
                    "id": 50893660,
                    "created_at": "2014-08-01T14:56:06Z",
                    "updated_at": "2014-08-01T14:56:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So this actually leads to something that's been rattling around in my head for a while and which I haven't proposed yet because it would be a significant API change.\n\nI don't like the fact that we suggest people use `r.raw` because it's an object which we don't document and it's an object provided by `urllib3` (which we've claimed in the past is more of an implementation detail). With that in mind, I've been toying with the idea of providing methods on a `Response` object which just proxy to the `urllib3` methods (`read` would just proxy to `raw.read`, etc.). This gives us extra flexibility around `urllib3` and allows us to handle (on behalf of the users) an API change in `urllib3` (which historically has almost never been a problem, so there isn't any urgency in that).\n\nWith that said, we already have enough methods on a Response object in my opinion and growing our API isn't ideal. The best API is the API from which there's nothing left to remove. So I'm continuously on the fence about this.\n\n---\n\n> This assumption was also at the core of my original request to default decode_content to True. Of course now that I see what a leaky abstraction this is, I'm no longer suggesting that.\n\nFor others who find this and may not be certain why this is true, allow me to explain.\n\nThere are several users of requests who turn off automatic decompression to validate the length of a response, or to do other important things with it. One consumer of the former kind is OpenStack. Many of the OpenStack clients validate the `Content-Length` header sent to the client and the actual length of the body received. To them, handling decompression is a fair trade-off to be certain they're receiving and handling a valid response.\n\nAnother consumer is Betamax (or really any tool that (re)constructs Response objects) because when it is handling the full process of making a totally valid response, it needs the content to be in the compressed format.\n\nI'm sure there are others that neither @Lukasa or I know about that also rely heavily on this behaviour.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50893660/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/67687973",
                    "id": 67687973,
                    "created_at": "2014-12-19T19:50:51Z",
                    "updated_at": "2014-12-19T19:50:51Z",
                    "author_association": "NONE",
                    "body": "Hit the same issue today, and ended up making the same assumption as there is no other way to stream responses at the moment.\n\nRather than multiple new methods on Response why not a single new attribute e.g. `response.stream` which would play the same role of proxy to `.raw`? It would also nicely mirror the `stream=True` setting/parameter, and would not affect users needing the current `.raw` behavior.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/67687973/reactions",
                        "total_count": 11,
                        "+1": 10,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 1,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "masklinn",
                        "id": 6993,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287628933",
                    "id": 287628933,
                    "created_at": "2017-03-19T16:36:26Z",
                    "updated_at": "2017-03-19T16:36:26Z",
                    "author_association": "NONE",
                    "body": "I've done this in the past\r\n\r\n```python\r\nr = requests.get('url', stream=True)\r\nr.raw.decode_content = True\r\n...\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287628933/reactions",
                        "total_count": 16,
                        "+1": 16,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "reubano",
                        "id": 157864,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/423920384",
                    "id": 423920384,
                    "created_at": "2018-09-24T09:33:08Z",
                    "updated_at": "2018-09-24T09:33:32Z",
                    "author_association": "NONE",
                    "body": "Note that the [workaround](https://github.com/requests/requests/issues/2155#issuecomment-50771010) by @sigmavirus24 breaks the semantics of the `tell` method, which will return incorrect offsets.\r\n\r\nI ran into this when streaming a response as a resumable upload into the Google Cloud Storage API, which uses `tell()` to figure out the number of bytes that were just read ([here](https://github.com/GoogleCloudPlatform/google-resumable-media-python/blob/50f4c4d22cdaea71c794639226e819197f11f555/google/resumable_media/_upload.py#L804)).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/423920384/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ttencate",
                        "id": 90930,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "tldr": "The issue is about streaming gzipped responses in the Requests library, where the current behavior of not automatically decompressing the response can lead to issues when using the raw response object with other libraries like lxml.",
                "security_relevancy": "2",
                "security_relevancy_reasoning": "The issue does not indicate any security vulnerabilities or critical security concerns. It is primarily about the handling of compressed responses and the interaction with other libraries, which is more of a functional/compatibility issue rather than a security problem.",
                "issue_label": [
                    "compatibility",
                    "url-handling",
                    "documentation"
                ],
                "issue_label_reasoning": [
                    "The issue is about the compatibility between the Requests library and other libraries like lxml when dealing with compressed responses, so a \"compatibility\" label is appropriate.",
                    "The issue also touches on the handling of URLs, specifically the stripping of double slashes, which can break certain services like AWS S3 presigned URLs, so a \"url-handling\" label is also relevant.",
                    "The discussion also suggests that the current documentation around the handling of compressed responses is not clear, and could be improved, so a \"documentation\" label is also appropriate."
                ],
                "positivity_negativity": "3",
                "positivity_negativity_reasoning": "The discussion is mostly factual and neutral, with the user providing a clear description of the problem and suggesting a potential solution. There are no signs of a highly negative or disruptive discussion, but also no strong positive or constructive suggestions, hence a neutral score of 3 is appropriate.",
                "bug_label": [
                    "regression",
                    "breaking-change"
                ],
                "bug_label_reasoning": "The issue indicates that a change in the Requests library (version 2.32.0) has introduced a regression, where the stripping of double slashes in URLs breaks certain functionality, like AWS S3 presigned URLs. This can be considered a \"regression\" and a \"breaking-change\" issue, which warrants the inclusion of these bug labels."
            }
        },
        "4": {
            "html_url": "https://github.com/psf/requests/issues/2109",
            "id": 36326374,
            "number": 2109,
            "title": "[idea] Change how we merge request and session settings",
            "created_at": "2014-06-23T20:09:09Z",
            "updated_at": "2014-10-05T17:15:42Z",
            "closed_at": null,
            "body": "# Problem\n\nCurrently, tools (e.g., [openstack/python-swiftclient](https://github.com/openstack/python-swiftclient/blob/3d0de79e26e2aa6285742c60aca3c164e9c2fbb9/swiftclient/client.py#L942..L945)) fight how requests sets the `Content-Type` header for a request. Notice that if the user of swiftclient doesn't provide their own `content_type` then the library sets the header's value to `''`. Ideally, setting `None` in a situation like this (where the Session has no default `Content-Type`) would prevent the request preparation from setting its own `Content-Type` header. This doesn't work because the per-session and per-request settings are [merged at the session level](https://github.com/kennethreitz/requests/blob/master/requests/sessions.py#L361).\n# Potential solutions\n## Split the responsibility of merging settings\n\nThe merge at the session level could just take care of ensuring that the per-request settings have priority while waiting for the request preparation to remove `None`s. The downside of this behaviour is that it breaks backwards compatibility. Why? Consider the following:\n\n``` python\nimport requests\n\ns = requests.Session()\ns.headers['Content-Type'] = 'application/json'\ns.post(url, data={'some': 'formdata'}, headers={'Content-Type': None})\n```\n\nThis allows for requests to detect that it is in fact `application/x-www-form-urlencoded` by removing the default set by the session. Keeping backwards compatibility would mean that we would have to do extra work while merging settings on the session-level. We would have to check if the header was set on the session level, and then we would delete headers with value `None`, otherwise, persist the `None` value. This is clearly a lot of extra logic.\n## Create a constant/singleton to mean \"Do not autogenerate any of this for me\"\n\nWe could potentially expose a new constant or singleton in requests to allow users to specify when they want to prevent requests from handling it for them. I dislike this idea a lot, but it's potentially easier to implement and a bit more explicit than overloading the already overloaded meaning of `None` in this context.\n",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "sigmavirus24",
                "id": 240830,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2109/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [],
            "issue_summarization": {
                "summary_issue": ""
            }
        },
        "5": {
            "html_url": "https://github.com/psf/requests/issues/2086",
            "id": 35202262,
            "number": 2086,
            "title": "Remove ISO-8859-1 charset fallback",
            "created_at": "2014-06-07T06:54:12Z",
            "updated_at": "2018-02-07T16:04:07Z",
            "closed_at": null,
            "body": "For a long time we've had a fallback value in `response.encoding` of `ISO-8859-1`, because RFC 2616 told us to. RFC 2616 is now obsolete, replaced by RFCs 7230, 7231, 7232, 7233, 7234, and 7235. The authoritative RFC on this issue is RFC 7231, which has this to say:\n\n> The default charset of ISO-8859-1 for text media types has been removed; the default is now whatever the media type definition says.\n\nThe media type definitions for `text/*` are most recently affected by RFC 6657, which has this to say:\n\n> In accordance with option (a) above, registrations for \"text/*\" media types that can transport charset information inside the corresponding payloads (such as \"text/html\" and \"text/xml\") SHOULD NOT specify the use of a \"charset\" parameter, nor any default value, in order to avoid conflicting interpretations should the \"charset\" parameter value and the value specified in the payload disagree.\n\nI checked the registration for `text/html` [here](https://www.iana.org/assignments/media-types/media-types.xhtml#text). Unsurprisingly, it provides no default values. It does allow a charset parameter which overrides anything in the content itself.\n\nI propose the following changes:\n1. Remove the ISO-8859-1 fallback, as it's no longer valid (being only enforced by RFC 2616). We should _definitely_ do this.\n2. Consider writing a module that has the appropriate fallback encodings for other `text/*` content and use them where appropriate. This isn't vital, just is a \"might be nice\".\n3. Begin checking HTML content for meta tags again, in order to appropriately fall back. This is controversial, and we'll want @kennethreitz to consider it carefully.\n",
            "author_association": "MEMBER",
            "comments": 37,
            "state": "open",
            "user": {
                "login": "Lukasa",
                "id": 1382556,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2086/reactions",
                "total_count": 5,
                "+1": 5,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45438713",
                    "id": 45438713,
                    "created_at": "2014-06-08T14:56:11Z",
                    "updated_at": "2014-06-08T14:58:31Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Remove the ISO-8859-1 fallback, as it's no longer valid (being only enforced by RFC 2616). We should definitely do this.\n\nI agree that we should remove the fallback. I do wonder how we should handle `Response#text` in the event that the server does not specify a charset (in anyway, including the meta tags of the body). Should we disable `Response#text` conditionally either through an exception or something else? Not doing so will rely more heavily on chardet, which I have decreasing confidence in given the number of new encodings it does not detect.\n\n> Consider writing a module that has the appropriate fallback encodings for other text/\\* content and use them where appropriate. This isn't vital, just is a \"might be nice\".\n\nGiven that this is not guaranteed to be included in requests, I'm fine with adding it to the toolbelt, that said. I'm also okay with making this a separate package so users can just use that with out having to install the rest of the toolbelt. That, however, is a separate discussion.\n\n> Begin checking HTML content for meta tags again, in order to appropriately fall back. This is controversial, and we'll want @kennethreitz to consider it carefully.\n\nWe still have a method to do this in `utils`, right? I don't like the idea in the slightest, but it won't cost extra effort. That said, we have to make sure any charset provided in the media type takes precedence.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45438713/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45440773",
                    "id": 45440773,
                    "created_at": "2014-06-08T16:09:16Z",
                    "updated_at": "2014-06-08T16:09:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Upon reading more int RFC 7231, specifically [Section 3.1.1.5](https://tools.ietf.org/html/rfc7231#section-3.1.1.5) I think the third option should ideally be opt-in, not opt-out. My specific reasoning for this is:\n\n> Clients that do so _[examine a payload's content]_  risk drawing incorrect conclusions, which might expose additional security risks (e.g., \"privilege escalation\").\n\nTaken from the same section I linked above.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45440773/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45440987",
                    "id": 45440987,
                    "created_at": "2014-06-08T16:18:06Z",
                    "updated_at": "2014-06-08T16:18:06Z",
                    "author_association": "MEMBER",
                    "body": "Agreed from a correctness perspective, but I wonder if @kennethreitz is going to want it from a usability perspective.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45440987/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45441361",
                    "id": 45441361,
                    "created_at": "2014-06-08T16:34:57Z",
                    "updated_at": "2014-06-08T16:34:57Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I wonder how easy it would be to prop up a simple app to demonstrate the security risks involved to give a concrete example why not to do it.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45441361/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45887423",
                    "id": 45887423,
                    "created_at": "2014-06-12T12:56:18Z",
                    "updated_at": "2014-06-12T12:56:18Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "If only `1.)` is going to be implemented, i guess `r.encoding = None` and requests will use chardet?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45887423/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "untitaker",
                        "id": 837573,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45889162",
                    "id": 45889162,
                    "created_at": "2014-06-12T13:13:56Z",
                    "updated_at": "2014-06-12T13:13:56Z",
                    "author_association": "MEMBER",
                    "body": "Correct. =)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45889162/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45892369",
                    "id": 45892369,
                    "created_at": "2014-06-12T13:41:25Z",
                    "updated_at": "2014-06-12T13:41:25Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "That's how it works now, so I don't think we'd change that.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45892369/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/46131317",
                    "id": 46131317,
                    "created_at": "2014-06-15T23:23:44Z",
                    "updated_at": "2014-06-15T23:23:44Z",
                    "author_association": "NONE",
                    "body": "> I wonder how easy it would be to prop up a simple app to demonstrate the security risks involved to give a concrete example why not to do it.\n\nLook up all the UTF-7 XSS attacks. (None work in any current browser, as everyone simply dropped UTF-7 sniffing \u2014 and most UTF-7 support entirely \u2014 to avoid making sites thus vulnerable.)\n\nIn a very real sense, using chardet is _worse_ than option three above \u2014 it will make different conclusions to what any implementation following a specification defining how to sniff the content would (and both HTML and XML provide such a specification). The only safe thing to do is if you don't know how to determine the charset is to not try. You can probably support the vast majority of users by implementing the (standardised) HTML and XML character encoding detection algorithms.\n\n> I checked the registration for text/html here. Unsurprisingly, it provides no default values. It does allow a charset parameter which overrides anything in the content itself.\n\nHmm, the registration (which is included inline in the HTML spec) contradicts the HTML spec itself \u2014 per the HTML spec, UTF-8/UTF-16 BOMs are given precedence over the MIME type. I've filed [bug 26100](https://www.w3.org/Bugs/Public/show_bug.cgi?id=26100) for that.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/46131317/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/48657986",
                    "id": 48657986,
                    "created_at": "2014-07-10T20:15:11Z",
                    "updated_at": "2014-07-10T20:15:11Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hmmm....\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/48657986/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/54065536",
                    "id": 54065536,
                    "created_at": "2014-09-01T14:25:28Z",
                    "updated_at": "2014-09-01T14:25:35Z",
                    "author_association": "NONE",
                    "body": "http://html5.org/tools/web-apps-tracker?from=8723&to=8724 fixes the IANA registration in the HTML spec to match the body of it. It now reads:\n\n> The charset parameter may be provided to specify the document's character encoding, overriding any character encoding declarations in the document other than a Byte Order Mark (BOM). The parameter's value must be one of the labels of the character encoding used to serialise the file. [ENCODING]\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/54065536/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/76007287",
                    "id": 76007287,
                    "created_at": "2015-02-25T17:17:19Z",
                    "updated_at": "2015-02-25T17:17:49Z",
                    "author_association": "NONE",
                    "body": "Hello,\n\nI just got hit by this reading XML files which were encoded as UTF8. On OSX the content type was being returned as 'application/xml' but on linux it was set to 'text/xml' therefore the requests lib assumed its default encoding of 'ISO-8859-1' as 'text' was in the content. Most XML files will be encoded in UTF8 so setting the encoding as 'ISO-8859-1' for 'text/xml' content is surely wrong as discussed.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/76007287/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "erowan",
                        "id": 400114,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77347475",
                    "id": 77347475,
                    "created_at": "2015-03-05T11:19:23Z",
                    "updated_at": "2015-03-05T11:19:23Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Just because an RFC specifies something, doesn't mean we should do it. Especially if it makes the code crazy.\n\nI believe that our current behavior is elegant and actually works quite effectively. Is this not the case?\n\nAs always, what does Chrome do?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77347475/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77349267",
                    "id": 77349267,
                    "created_at": "2015-03-05T11:34:15Z",
                    "updated_at": "2015-03-05T11:34:15Z",
                    "author_association": "MEMBER",
                    "body": "Chrome introspects the HTML, a position we've always decided we don't want to do. We could optionally add support for hooks to do content-type specific encoding heuristics if we wanted. We already kinda do that for JSON, it might not hurt to do it more generally for other content types.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77349267/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77556798",
                    "id": 77556798,
                    "created_at": "2015-03-06T13:16:45Z",
                    "updated_at": "2015-03-06T13:16:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Grumble. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77556798/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77565791",
                    "id": 77565791,
                    "created_at": "2015-03-06T14:23:16Z",
                    "updated_at": "2015-03-06T14:23:16Z",
                    "author_association": "NONE",
                    "body": "Note the HTML case is even worse than that, really. Because the pre-scan in browsers just looks at the first 1024 bytes or there abouts, and the parser itself can then change it.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77565791/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77785456",
                    "id": 77785456,
                    "created_at": "2015-03-09T00:45:55Z",
                    "updated_at": "2015-03-09T00:45:55Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I still feel like our current behavior is a great implementation. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77785456/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77821444",
                    "id": 77821444,
                    "created_at": "2015-03-09T09:20:23Z",
                    "updated_at": "2015-03-09T09:20:23Z",
                    "author_association": "MEMBER",
                    "body": "Ok. =)\n\nHow about I knock up a proposal for smarter encoding heuristics, that takes certain known content-types and attempts to gently introspect them for their encodings. At least then we'll have something concrete to discuss.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77821444/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/159119676",
                    "id": 159119676,
                    "created_at": "2015-11-24T01:13:02Z",
                    "updated_at": "2015-11-24T01:13:18Z",
                    "author_association": "NONE",
                    "body": "@Lukasa  @kennethreitz \nHey guys, for the time being, I don't think we have a obvious solution yet, but can we at least make this `ISO-8859-1` optional? \n\n```\n    if 'text' in content_type:\n        return 'ISO-8859-1'\n```\n\nThis looks way too brutal. Some parameters like `Session(auto_encoding=False)` would be nice. What do you guys think?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/159119676/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "est",
                        "id": 23570,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/159189806",
                    "id": 159189806,
                    "created_at": "2015-11-24T08:03:31Z",
                    "updated_at": "2015-11-24T08:03:31Z",
                    "author_association": "MEMBER",
                    "body": "@est ISO-8859-1 _is_ optional, you can simply set `response.encoding` yourself. It's a one-line change. =)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/159189806/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164829260",
                    "id": 164829260,
                    "created_at": "2015-12-15T17:07:37Z",
                    "updated_at": "2015-12-15T17:07:52Z",
                    "author_association": "NONE",
                    "body": "@Lukasa But you can't determine whether the initial `response.encoding` came from the `Content-Type` header or whether it's the `ISO-8859-1` fallback, which means if you want to avoid the fallback you have to start parsing the `Content-Type` header yourself, and that's quite a lot of extra complexity all of a sudden.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164829260/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164829905",
                    "id": 164829905,
                    "created_at": "2015-12-15T17:10:11Z",
                    "updated_at": "2015-12-15T17:10:11Z",
                    "author_association": "MEMBER",
                    "body": "@gsnedders Sure you can. `if 'charset' in response.headers['Content-Type']`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164829905/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164831618",
                    "id": 164831618,
                    "created_at": "2015-12-15T17:16:58Z",
                    "updated_at": "2015-12-15T17:16:58Z",
                    "author_association": "NONE",
                    "body": "While yes, that works under the assumption the other party is doing something sane, it doesn't work in the face of madness and something like `text/html; foo=charset`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164831618/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164832662",
                    "id": 164832662,
                    "created_at": "2015-12-15T17:21:18Z",
                    "updated_at": "2015-12-15T17:21:18Z",
                    "author_association": "MEMBER",
                    "body": "@gsnedders Try `if 'charset=' in response.headers['Content-Type']`. At this point we're out of 'crazy' and into 'invalid formatting'.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164832662/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164835667",
                    "id": 164835667,
                    "created_at": "2015-12-15T17:32:28Z",
                    "updated_at": "2015-12-15T17:32:28Z",
                    "author_association": "NONE",
                    "body": "@Lukasa uh, I thought there was whitespace (or rather what 2616 had as implicit *LWS) allowed around the equals, apparently not.\n\nThe grammar appears to be:\n\n```\n     media-type = type \"/\" subtype *( OWS \";\" OWS parameter )\n     type       = token\n     subtype    = token\n\n   The type/subtype MAY be followed by parameters in the form of\n   name=value pairs.\n\n     parameter      = token \"=\" ( token / quoted-string )\n```\n\nSo I guess the only issue here is something like `text/html; foo=\"charset=bar\"`.\n\nFWIW, html5lib's API changes are going to make the correct behaviour with requests require something like:\n\n``` python\nr = requests.get('https://api.github.com/events')\ne = response.encoding if 'charset=' in response.headers['Content-Type'] else None\ntree = html5lib.parse(r.content, transport_encoding=e)\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164835667/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164838185",
                    "id": 164838185,
                    "created_at": "2015-12-15T17:43:10Z",
                    "updated_at": "2015-12-15T17:43:10Z",
                    "author_association": "MEMBER",
                    "body": "That seems reasonable. =)\n\nFWIW, in requests 3.0.0 we'll reconsider this, or at least consider adding some way of working out what decision we made.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164838185/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/170237579",
                    "id": 170237579,
                    "created_at": "2016-01-09T12:52:06Z",
                    "updated_at": "2016-01-09T12:52:06Z",
                    "author_association": "NONE",
                    "body": "Interesting discussion.\n\n> I still feel like our current behavior is a great implementation.\n\nIf I may, a counterexample. I use requests to extract the `<title>` from a requested document, and here is facebook.com.\n\n``` python\n>>> import requests\n>>> r = requests.get(\"https://www.facebook.com/mathiassundin/posts/10153748227675479\")\n>>> r.encoding\n'ISO-8859-1'\n>>> import re\n>>> m = re.search('<title[^>]*>\\s*(.+?)\\s*<\\/title>', r.text, re.IGNORECASE|re.MULTILINE)\n>>> m.group(1)\nu'Mathias Sundin - M\\xc3\\xa5nga roliga samtal mellan Tony Blair och... | Facebook'\n>>> r.headers['Content-Type']\n'text/html'\n```\n\nApparently they don't specify the encoding in their headers. But they do in the HTML (`<meta charset=\"utf-8\" />`, full example at https://gist.github.com/dentarg/f13ef7cc0ce55753faf6).\n\nAs mentioned in #2161, \"requests aren't a HTML library\", and I can understand that point of view. Perhaps I should be looking into parsing the HTML with some library that also can take the specified encoding into consideration.\n\nThank you for your work on requests. I'm looking forward to 3.0.0.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/170237579/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dentarg",
                        "id": 42626,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/170244645",
                    "id": 170244645,
                    "created_at": "2016-01-09T14:50:11Z",
                    "updated_at": "2016-01-09T14:50:11Z",
                    "author_association": "MEMBER",
                    "body": "@dentarg That's not really a counter example: it's an example of why this system works.\n\nThe guidance from the IETF is that for all text/\\* encodings, one of the following things MUST be true:\n- the peer MUST send a `charset` in the content-type\n- the content MUST carry an encoding specifier in it (HTML, XML)\n\nRequests' default behaviour here works well: in the case of XML and HTML, ISO-8859-1 is guaranteed to safely decode the text well enough to let you see the `<meta>` tag. Anyone working with HTML really should go looking for that tag, because servers almost never correctly advertise the content type of the HTML they deliver, but the HTML itself is usually (though sadly not always) right. \n\nThe behaviour requests has right now is probably less prone to failure with HTML than the one proposed for 3.0.0, and part of me does wonder if we should try to solve this more by documentation than by code change.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/170244645/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/170251057",
                    "id": 170251057,
                    "created_at": "2016-01-09T15:16:18Z",
                    "updated_at": "2016-01-09T15:16:18Z",
                    "author_association": "NONE",
                    "body": "Yes, perhaps documentation is the way forward.\n\nI can share my experience. I'm a very new user of requests, and I haven't looked at all the documentation for requests, but I have looked some. The [requests website](http://docs.python-requests.org/en/latest/) have this in the code snippet on the front page:\n\n``` python\n>>> r.encoding\n'utf-8'\n```\n\nThat information, combined with me somehow (maybe from browsing issues here on GitHub) finding out that requests uses chardet, gave me the impression that requests would solve the charset/encoding problem for me \"all the way\".\n\nOnce I found the [right documentation](http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html#Beautiful%20Soup%20Gives%20You%20Unicode,%20Dammit), it was straightforward to workaround the limitations with another library. I can fully understand that requests just want to be the HTTP parser, not the HTML parser.\n\nAll that said, let me share some short examples where I think the ISO-8859-1 fallback might cause some unexpected behavior.\n\n``` python\n>>> import requests\n>>> r = requests.get(\"https://www.facebook.com/mathiassundin/posts/10153748227675479\")\n>>> from bs4 import BeautifulSoup\n```\n\nYou can't use `r.text`:\n\n``` python\n>>> print BeautifulSoup(r.text, \"html5lib\", from_encoding=\"\").title.text\nMathias Sundin - M\u00c3\u00a5nga roliga samtal mellan Tony Blair och... | Facebook\n```\n\n``` python\n>>> print BeautifulSoup(r.text, \"html5lib\", from_encoding=r.encoding).title.text\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/site-packages/bs4/__init__.py\", line 215, in __init__\n    self._feed()\n  File \"/usr/local/lib/python2.7/site-packages/bs4/__init__.py\", line 239, in _feed\n    self.builder.feed(self.markup)\n  File \"/usr/local/lib/python2.7/site-packages/bs4/builder/_html5lib.py\", line 50, in feed\n    doc = parser.parse(markup, encoding=self.user_specified_encoding)\n  File \"/usr/local/lib/python2.7/site-packages/html5lib/html5parser.py\", line 236, in parse\n    parseMeta=parseMeta, useChardet=useChardet)\n  File \"/usr/local/lib/python2.7/site-packages/html5lib/html5parser.py\", line 89, in _parse\n    parser=self, **kwargs)\n  File \"/usr/local/lib/python2.7/site-packages/html5lib/tokenizer.py\", line 40, in __init__\n    self.stream = HTMLInputStream(stream, encoding, parseMeta, useChardet)\n  File \"/usr/local/lib/python2.7/site-packages/html5lib/inputstream.py\", line 144, in HTMLInputStream\n    raise TypeError(\"Cannot explicitly set an encoding with a unicode string\")\nTypeError: Cannot explicitly set an encoding with a unicode string\n```\n\nYou need to use `r.content`, but if requests have fallen back to ISO-8859-1, `r.encoding` will cause trouble:\n\n``` python\n>>> print BeautifulSoup(r.content, \"html5lib\", from_encoding=r.encoding).title.text\nMathias Sundin - M\u00c3\u00a5nga roliga samtal mellan Tony Blair och... | Facebook\n```\n\nWorking as intended:\n\n``` python\n>>> print BeautifulSoup(r.content, \"html5lib\", from_encoding=\"\").title.text\nMathias Sundin - M\u00e5nga roliga samtal mellan Tony Blair och... | Facebook\n```\n\n``` python\n>>> print BeautifulSoup(r.content, \"html5lib\", from_encoding=\"utf-8\").title.text\nMathias Sundin - M\u00e5nga roliga samtal mellan Tony Blair och... | Facebook\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/170251057/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dentarg",
                        "id": 42626,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/170257475",
                    "id": 170257475,
                    "created_at": "2016-01-09T16:22:31Z",
                    "updated_at": "2016-01-09T16:22:31Z",
                    "author_association": "MEMBER",
                    "body": "So here we hit a problem, which is that we can't really document the way Requests interacts with every possible tool you may want to use it with: there are just too many possibilities! So instead we try to provide general documentation.\n\nThe best advice I can give is that the more specific the tool, the more likely it can handle bytes as an input and DTRT with them. BeautifulSoup is a HTML tool and so can almost certainly take a stream of arbitrary bytes and find the relevant `meta` tag (and indeed, it can), so you can just pass it `r.content`. The same would be true if you were passing it to an XML library, or to a JSON library, or to anything else like that.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/170257475/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/202769182",
                    "id": 202769182,
                    "created_at": "2016-03-29T08:03:08Z",
                    "updated_at": "2016-03-29T08:03:16Z",
                    "author_association": "NONE",
                    "body": "> Requests' default behaviour here works well: in the case of XML and HTML, ISO-8859-1 is guaranteed to safely decode the text well enough to let you see the `<meta>` tag. \n\nSadly, that isn't true, because of UTF-16. In both cases, they should be able to handle BOMs. Furthermore, a conforming XML parser should be able to handle a UTF-16 encoded `<?xml version=\"1.0\" encoding=\"UTF-16\">` with no preceding BOM.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/202769182/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "tldr": "The issue is about removing the ISO-8859-1 fallback encoding in the Requests library, as it is no longer valid according to the updated RFCs. The discussion also covers potential security risks and handling of character encoding in HTML and XML content.",
                "security_relevancy": "2",
                "security_relevancy_reasoning": "The issue does not directly indicate any critical security concerns, but there are some discussions around potential security risks related to improper handling of character encoding. Specifically, the comments mention that examining the content's encoding can expose security risks like \"privilege escalation\". However, the overall impact seems limited, as the issue is more focused on improving the library's behavior rather than addressing a known vulnerability.",
                "issue_label": [
                    "compatibility",
                    "url-handling",
                    "documentation"
                ],
                "issue_label_reasoning": "The issue is primarily about improving the compatibility of the Requests library with updated RFCs and standards, particularly around handling character encoding in HTTP responses. It also touches on URL handling, as the change in encoding behavior could impact certain use cases like AWS S3 presigned URLs. Additionally, the discussion suggests that improving the documentation around the library's encoding behavior could be beneficial.",
                "positivity_negativity": "3",
                "positivity_negativity_reasoning": "The discussion is mostly factual and constructive, with the contributors providing technical analysis and suggestions for improving the library's behavior. While there are some concerns raised, the overall tone is neutral and focused on finding the best solution. There are no signs of a highly negative or disruptive discussion.",
                "bug_label": [
                    "regression",
                    "breaking-change"
                ],
                "bug_label_reasoning": "The issue indicates that the proposed change to remove the ISO-8859-1 fallback could be considered a regression or breaking change, as it may impact existing use cases and integrations that rely on the current behavior. The comments discuss the potential impact on services like AWS S3 and the need to carefully consider the implications of such a change."
            }
        },
        "6": {
            "html_url": "https://github.com/psf/requests/issues/2061",
            "id": 34191133,
            "number": 2061,
            "title": "Making https proxies easier to deal with",
            "created_at": "2014-05-23T16:35:02Z",
            "updated_at": "2021-02-28T04:03:09Z",
            "closed_at": null,
            "body": "I'm trying to add support for proxies to conda, in particular, automatically prompting for a username and password on a 407. For http proxies, it's all fine. I can detect the 407 error code on `HTTPError` from `raise_for_status` and inject `HTTPProxyAuth` and try again.\n\nBut for https, it raises `ConnectionError` on `get`. Adding `HTTPProxyAuth` does not work. I have to parse the URL and add it in as `https://username:password@proxy:port`. `urlparse` does not make this particularly easy.\n\nFurthermore, the only way I can tell to actually detect the the `ConnectionError` is a 407 is to do\n\n``` py\ntry:\n    # do request\nexcept ConnectionError as e:\n    if \"407\" in str(e):\n        # get username and password\n```\n",
            "author_association": "NONE",
            "comments": 19,
            "state": "open",
            "user": {
                "login": "asmeurer",
                "id": 71486,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2061/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44033663",
                    "id": 44033663,
                    "created_at": "2014-05-23T16:40:46Z",
                    "updated_at": "2014-05-23T16:40:46Z",
                    "author_association": "MEMBER",
                    "body": "This was briefly discussed in IRC, [as seen here](https://botbot.me/freenode/python-requests/2014-05-23/?msg=15109663&page=1). This GitHub issue encompasses a number of problems. Let's enumerate them.\n1. `HTTPProxyAuth` doesn't work for tunneling proxies. Yes, that's true, and that's because tunneling proxies are fundamentally a very different beast to your standard proxy, involving the CONNECT request and all kinds of funky nonsense. Our auth paradigm doesn't map to this special case.\n   \n   My proposal here is actually to get rid of `HTTPProxyAuth` altogether. I hate it. We have had auth-in-the-proxy-url for a long time now, so it's not like it's the only way to do it. Additionally, it provides better conceptual abstraction: all auth handlers now apply auth to the _origin_, not to intermediaries. I like that distinction.\n2. If you aren't authed to a tunneling proxy, you receive a `ConnectionError` on the method call rather than getting the 407 back. This is again because of the way `httplib` is designed for tunneling proxies. I think we can improve this situation by getting `urllib3` to throw an appropriate exception which we catch and wrap. We can't move the exception to `.raise_for_status()` because that would require a `httplib` rewrite (or something truly evil), but at least we can make it easier to work out what happened.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44033663/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44033682",
                    "id": 44033682,
                    "created_at": "2014-05-23T16:40:54Z",
                    "updated_at": "2014-05-23T16:40:54Z",
                    "author_association": "MEMBER",
                    "body": "@shazow, are you open to doing part 2?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44033682/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44035272",
                    "id": 44035272,
                    "created_at": "2014-05-23T16:55:27Z",
                    "updated_at": "2014-05-23T16:55:27Z",
                    "author_association": "NONE",
                    "body": "Well, in this case, the `response` attribute of the `ConnectionError` is `None`. If it were the same as with HTTPError, I could just handle them uniformly. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44035272/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44035421",
                    "id": 44035421,
                    "created_at": "2014-05-23T16:57:06Z",
                    "updated_at": "2014-05-23T16:57:06Z",
                    "author_association": "MEMBER",
                    "body": "I don't think it can be, logistically: we don't have a response in hand. This is all handled transparently by `httplib`. Because it's terrible.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44035421/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44052639",
                    "id": 44052639,
                    "created_at": "2014-05-23T19:45:31Z",
                    "updated_at": "2014-05-23T19:45:31Z",
                    "author_association": "NONE",
                    "body": "Another possibly unrelated issue (I can open a new issue). If you mutate the `proxies` attribute of a `Session` object, the new value isn't used. So if you want to redo the request with the fixed proxies (\"fixed\" meaning including authentication credentials), you have to do\n\n``` py\ndef dostuff(url, session=None):\n     session = session or Session() # Actually a custom Session subclass\n     ...\n     try:\n        resp = session.get(url, proxies=session.proxies) # I shouldn't have to include the proxies in get() here; they are already in session.proxies!\n        resp.raise_for_status\n     except HTTPError as e:\n        if e.response.status_code == 407:\n            # Get username and password and put it on the proxy url\n            session.proxies['http'] = fixes_proxy_url\n            # Try again\n            dostuff(url, session=session)\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44052639/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44055352",
                    "id": 44055352,
                    "created_at": "2014-05-23T20:14:04Z",
                    "updated_at": "2014-05-23T20:14:04Z",
                    "author_association": "NONE",
                    "body": "And more to the point, that's a lot of logic to repeat every time I do a `get` (it's actually more, because I also have to check for `ConnectionError`). It would be nice if requests just had a way to automatically prompt the user for proxy authentication and retry the request. \n\nBut I'll be happy to just get these basic issues ironed out first. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44055352/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44081660",
                    "id": 44081660,
                    "created_at": "2014-05-24T08:49:37Z",
                    "updated_at": "2014-05-24T08:49:37Z",
                    "author_association": "MEMBER",
                    "body": "Uh...as far as I can see on a quick code read, we absolutely pick up the proxy settings from the Session. What makes you think we're not?\n\nAs for 'prompting' for proxy auth, that's not going to happen, it's simply not requests' job.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44081660/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44088278",
                    "id": 44088278,
                    "created_at": "2014-05-24T14:08:44Z",
                    "updated_at": "2014-05-24T14:09:25Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Uh...as far as I can see on a quick code read, we absolutely pick up the proxy settings from the Session. What makes you think we're not?\n\nMy guess would be that once we have made a request with a proxy, e.g., we've used the `http` proxy, then if @asmeurer changes the list of proxies it isn't fixed because we're using the same `HTTPAdapter` which hits [lines 209 through 215](https://github.com/kennethreitz/requests/blob/a7c218480d7acf1e866e07fde0627d05fb77fbc1/requests/adapters.py#L209..L215). Notice that if `http` is already in `self.proxy_manager` we don't do anything. Since it is, the new proxy is ignored. I haven't attempted to test if that's in fact the case, but that's my first guess as to what might be causing the behaviour that @asmeurer is seeing.\n\n> As for 'prompting' for proxy auth, that's not going to happen, it's simply not requests' job.\n\nI agree.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44088278/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44096194",
                    "id": 44096194,
                    "created_at": "2014-05-24T18:51:26Z",
                    "updated_at": "2014-05-24T18:51:26Z",
                    "author_association": "NONE",
                    "body": "> As for 'prompting' for proxy auth, that's not going to happen, it's simply not requests' job.\n\nThat's unfortunate. It seems that a lot of http libraries take this view, which is why every application that connects to the internet has to implement its own proxy authentication (I don't use proxies, but I've noticed this pattern). \n\nAny thoughts on how requests could make this easier? A callback mechanism?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44096194/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44127117",
                    "id": 44127117,
                    "created_at": "2014-05-25T09:49:22Z",
                    "updated_at": "2014-05-25T09:49:22Z",
                    "author_association": "MEMBER",
                    "body": "Requests should absolutely allow you to apply auth if you hadn't before.\n\nAs for making it easier to make the same request with auth for the proxy, the reason HTTP libraries generally don't is because we don't know what people are going to want. In requests case, this is sufficiently unusual that adding a mechanism would have two effects:\n1. Disappointing the people who wanted another way to add the proxy auth if they needed to.\n2. Require us to maintain a code path used by a tiny fraction of our users. \n\nFor that reason, we assume that users who need to re-make a request will do it themselves. \n\nThe auth stuff makes that harder, so we should fix it, but otherwise I think that's the end of it. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44127117/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44141997",
                    "id": 44141997,
                    "created_at": "2014-05-25T18:34:08Z",
                    "updated_at": "2014-05-25T18:34:08Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So I want to be sure I'm understanding everyone's concerns here properly:\n\n@asmeurer when you say you'd like requests to prompt for proxy auth, do you mean you'd like us to literally use `raw_input` (or `input` in the case of Python 3)? I'm pretty sure that's not what you want and that's not something we'll ever support. Further, I'm not quite certain how we would properly implement a callback system for this particular case since the only other system like it in requests relies on having a response which we don't have in this case.\n\nThat said, we've had a troubled history (which @Lukasa knows much better than I) dealing with HTTPS Proxy Authentication. If there were a better way of handling them, we would have already implemented it (I'd like to think).\n\nThis discussion should remain in this issue. Your other problem @asmeurer (in which mutating a Session's proxies does not affect subsequent requests should be a separate issue). I'm trying to think of a good way to handle that case since I think I've located the problem above.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44141997/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44143540",
                    "id": 44143540,
                    "created_at": "2014-05-25T19:40:04Z",
                    "updated_at": "2014-05-25T19:40:04Z",
                    "author_association": "NONE",
                    "body": "Sure I'll open a new issue for the Session thing.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44143540/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44143598",
                    "id": 44143598,
                    "created_at": "2014-05-25T19:42:14Z",
                    "updated_at": "2014-05-25T19:42:14Z",
                    "author_association": "NONE",
                    "body": "https://github.com/kennethreitz/requests/issues/2063\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44143598/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44185623",
                    "id": 44185623,
                    "created_at": "2014-05-26T12:42:43Z",
                    "updated_at": "2014-05-26T12:42:43Z",
                    "author_association": "MEMBER",
                    "body": "The situation with HTTPS proxy authentication remains like this:\n- Tunneling HTTPS over a proxy involves sending a request to the proxy with the CONNECT verb that establishes a TCP tunnel through the proxy, then sending the _actual_ request over TLS over that TCP tunnel.\n- This procedure is not done by using `httplib` to send that first request, but by using its `tunnel` functionality.\n- This functionality is enabled at the connection level, not at the request/response level.\n- Requests Auth Handlers act at the request/response level.\n- Thus, ProxyAuth for HTTPS over proxy _cannot_ be handled by an auth handler.\n\nI appreciate this is unfortunate, but there's simply no way around it: it needs to be done the way it's currently being done, or we need to special-case the Proxy Auth handler to mean something special. I don't want to do that because the Proxy Auth handler is semantically out of place: it applies authentication to the proxy, not to the origin. Given that you may _also_ want to authenticate the origin, and that we don't allow multiple auth handlers, applying the Proxy Auth handler impedes your ability to do any other kind.\n\nBest to have proxy authentication credentials come in on the `proxies` dictionary.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44185623/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44203843",
                    "id": 44203843,
                    "created_at": "2014-05-26T16:47:57Z",
                    "updated_at": "2014-05-26T16:47:57Z",
                    "author_association": "NONE",
                    "body": "Ok, I agree that this is the wrong place for it. ProxyAuth did seem strange to me, for the reason you cited. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44203843/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44307163",
                    "id": 44307163,
                    "created_at": "2014-05-27T17:26:05Z",
                    "updated_at": "2014-05-27T17:26:05Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Not sure if this discussion is resolved or not, but please ping me again if I still have an action item/question. I will be home tomorrow for more in-depth reading. :)\n\n@Lukasa If this is still an open question, handling special-handling 407 in urllib3 sounds sensible if we can do it in a low-impact way.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44307163/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "shazow",
                        "id": 6292,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44313296",
                    "id": 44313296,
                    "created_at": "2014-05-27T18:08:56Z",
                    "updated_at": "2014-05-27T18:08:56Z",
                    "author_association": "NONE",
                    "body": "My understanding of what is going on is limited here, but it didn't seem to me like there were any concrete action items yet. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44313296/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44314789",
                    "id": 44314789,
                    "created_at": "2014-05-27T18:19:21Z",
                    "updated_at": "2014-05-27T18:19:21Z",
                    "author_association": "MEMBER",
                    "body": "Yeah, we're still trying to drill down into exactly what's happening where.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44314789/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/787324644",
                    "id": 787324644,
                    "created_at": "2021-02-28T04:03:09Z",
                    "updated_at": "2021-02-28T04:03:09Z",
                    "author_association": "NONE",
                    "body": "Hello guys. I tried to look around in the repo to find some answers but wasn't lucky. Is there any workaround to do a `get` request using a HTTPS proxy ? \r\n\r\nI'm getting this error \r\n\r\n` requests.exceptions.ProxyError: HTTPSConnectionPool(host='httpbin.org', port=443): Max retries exceeded with url: /ip (Caused by ProxyError('Cannot connect to proxy.', NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x0000021DB2CDF668>: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond',))) ` \r\n\r\nand this is what I'm trying to do to test. \r\n\r\n```\r\nimport requests\r\nurl = 'https://httpbin.org/ip'\r\nprox = 'https://89.36.195.238:35328'\r\n\r\nproxies = {\r\n    \"https\": prox\r\n}\r\nresponse = requests.get(url,proxies=proxies)\r\nprint(response.json())\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/787324644/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ary-ber",
                        "id": 26523073,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "example_summary_issue": "",
                "issue": ""
            }
        },
        "7": {
            "html_url": "https://github.com/psf/requests/issues/2018",
            "id": 32203116,
            "number": 2018,
            "title": "Re-order proxy precedence.",
            "created_at": "2014-04-25T03:09:20Z",
            "updated_at": "2022-02-17T19:17:32Z",
            "closed_at": null,
            "body": "`Session.trust_env = False` turns off the checking of environment variables for options including proxy settings (`*_proxy`). But `urllib` picks up and uses these environment proxy settings anyway. `requests` should pass the `trust_env` setting on to `urllib`. (Although I'm not sure if `urllib` has a similar override.)\n\n(Proxy setting precedence should be sorted out here as well. They way it is now, environment proxy settings will interfere with (rather than be over-ridden by) the `proxies` argument in `Session.request` or `requests.request` calls and the `Session.proxies` config regardless of `trust_env` settings.)\n",
            "author_association": "NONE",
            "comments": 16,
            "state": "open",
            "user": {
                "login": "ouroborus",
                "id": 392047,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2018/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41370743",
                    "id": 41370743,
                    "created_at": "2014-04-25T08:39:40Z",
                    "updated_at": "2014-04-25T08:39:40Z",
                    "author_association": "MEMBER",
                    "body": "I've taken a quick look at the code in urllib3 and I can't find any reference to the `*_PROXY` environment variables there. Can you point to where in the code urllib3 grabs that information?\n\nAs for proxy setting precedence, what do you mean by 'interfere with'? We don't override any settings already in the proxy dictionary as we use `dict.setdefault` to set those values. All that happens is you may get an additional proxy value for a scheme you didn't declare. Is this what you meant by 'interfere with'?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41370743/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41448619",
                    "id": 41448619,
                    "created_at": "2014-04-25T23:22:58Z",
                    "updated_at": "2014-04-25T23:22:58Z",
                    "author_association": "NONE",
                    "body": "I'll have to write up a sample that triggers this.\n\nSo far I've got a situation where the env proxy is defined, `session.proxy` is defined (with a different proxy), and `session.trust_env = False`. The results are the initial request goes through the session-defined proxy and the redirect goes through the env-defined proxy.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41448619/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41465160",
                    "id": 41465160,
                    "created_at": "2014-04-26T10:18:04Z",
                    "updated_at": "2014-04-26T10:18:04Z",
                    "author_association": "NONE",
                    "body": "It seems redirects pass through `SessionRedirectMixin.resolve_redirects` in `sessions.py` which has a line `proxies = self.rebuild_proxies(prepared_request, proxies)`. `rebuild_proxies` appears to ignore the passed in `proxies` argument and `session.trust_env` settings.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41465160/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41465280",
                    "id": 41465280,
                    "created_at": "2014-04-26T10:25:06Z",
                    "updated_at": "2014-04-26T10:25:06Z",
                    "author_association": "MEMBER",
                    "body": "It does ignore `trust_env` and the original proxies dict (both bugs), but you're not running that code unless you're using the requests release from GitHub. =) Fixing both of those bugs, however, should resolve the problem. I'll fix it up later today.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41465280/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41465417",
                    "id": 41465417,
                    "created_at": "2014-04-26T10:33:41Z",
                    "updated_at": "2014-04-26T10:35:21Z",
                    "author_association": "NONE",
                    "body": "Ah, somehow I though the installation docs were saying to use the github source rather than pip or easy_install. I see now that it says instead to use pip instead of easy_install and then goes on to say where you can get the source.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41465417/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41483290",
                    "id": 41483290,
                    "created_at": "2014-04-26T22:48:00Z",
                    "updated_at": "2014-04-26T22:48:00Z",
                    "author_association": "NONE",
                    "body": "Regarding proxy setting precedence, I think `Session.request(..., proxies)` should override `Session.proxies` which should override proxies set in the environment. Currently, environment proxies override session proxies (using `Session.trust_env = True`).\n\nIn pseudo-code, it'd be something like:\n\n```\ntrust_env = request.trust_env\nif trust_env == None:\n    trust_env = Session.trust_env\nif trust_env == None:\n    trust_env = True\nproxies = {}\nif trust_env:\n    proxies = env.proxies\nproxies = proxies.update(Session.proxies).update(request.proxies)\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41483290/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41483349",
                    "id": 41483349,
                    "created_at": "2014-04-26T22:50:42Z",
                    "updated_at": "2014-04-26T22:50:42Z",
                    "author_association": "MEMBER",
                    "body": "To be clear for those who aren't sure, the way @ouroborus' suggestion differs from the current logic is that we take the proxies from the request, then apply proxies from the environment, then finally apply proxies from the `Session`.\n\nI'm open to re-ordering the precedence of the priorities. @sigmavirus24, thoughts?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41483349/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41635083",
                    "id": 41635083,
                    "created_at": "2014-04-29T01:58:18Z",
                    "updated_at": "2014-04-29T01:58:18Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Can anyone recall the reasoning behind the current order of precedence? It is extremely odd to me that the order of precedence is contrary to the rest of the library.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41635083/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41655204",
                    "id": 41655204,
                    "created_at": "2014-04-29T09:07:18Z",
                    "updated_at": "2014-04-29T09:07:18Z",
                    "author_association": "MEMBER",
                    "body": "No, and IIRC (I'm on my phone) it's been that way for a while. Looked like an oversight to me. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41655204/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41668942",
                    "id": 41668942,
                    "created_at": "2014-04-29T12:22:37Z",
                    "updated_at": "2014-04-29T12:22:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "## Then consider me in favor of the reordering.\n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41668942/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/42138719",
                    "id": 42138719,
                    "created_at": "2014-05-04T17:28:09Z",
                    "updated_at": "2014-05-04T17:31:19Z",
                    "author_association": "NONE",
                    "body": "It's been noted that this issue is poorly named. I'm not sure what to rename it or even if it should be now that it has been created. @Lukasa, feel free to rename it if and as you see fit.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/42138719/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/52005041",
                    "id": 52005041,
                    "created_at": "2014-08-13T03:10:02Z",
                    "updated_at": "2014-08-13T03:10:02Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@Lukasa wasn't this already fixed?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/52005041/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/52014273",
                    "id": 52014273,
                    "created_at": "2014-08-13T06:28:04Z",
                    "updated_at": "2014-08-13T06:28:04Z",
                    "author_association": "MEMBER",
                    "body": "@sigmavirus24 Not that I can see. =)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/52014273/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/134221509",
                    "id": 134221509,
                    "created_at": "2015-08-24T14:18:38Z",
                    "updated_at": "2015-08-24T14:41:50Z",
                    "author_association": "NONE",
                    "body": "This issue causes real headache when using saltstack with pip states and https_proxy set in the environment. \nWhile saltstacks pip state allows passing a proxy, this bug ignores the proxy given and prefers the environment proxy instead, as a result the wrong proxy gets used.\n\nA workaround is overwriting your environment variable with saltstacks env_var:\n\n```\nPackageX:\n  pip.installed:\n    - proxy: http://proxyA\n    - env_vars:\n      https_proxy: \"http://proxyA\n      http_proxy: \"http://proxyA\n```\n\nBut it is rather messy, therefore I'd appreciate if this bug would be fixed.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/134221509/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "commonism",
                        "id": 164513,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/134230649",
                    "id": 134230649,
                    "created_at": "2015-08-24T14:46:02Z",
                    "updated_at": "2015-08-24T14:46:02Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> But it is rather messy, therefore I'd appreciate if this bug would be fixed.\n\nIt will be. That's why it's labeled as \"Planned\". Also note that we've set a milestone for it. Thanks for your interest.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/134230649/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1043324004",
                    "id": 1043324004,
                    "created_at": "2022-02-17T19:17:31Z",
                    "updated_at": "2022-02-17T19:17:31Z",
                    "author_association": "NONE",
                    "body": "To quote @nateprewitt from Aug 11, 2016:\r\n\r\n> It may be worth noting that it's PR #2839 that fixes this.\r\n> \r\n> _Originally posted by @nateprewitt in https://github.com/psf/requests/issues/3506#issuecomment-239304816_\r\n>",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1043324004/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dmich2",
                        "id": 12903966,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "tldr": "The issue is about the precedence of proxy settings in the Requests library, where environment proxy settings can interfere with session-level proxy settings, even when `trust_env` is set to `False`.",
                "security_relevancy": "2",
                "security_relevancy_reasoning": "The issue does not appear to have any direct security implications. It is more about the handling of proxy settings and the order of precedence, which can lead to unexpected behavior, but does not seem to introduce any security vulnerabilities.",
                "issue_label": [
                    "compatibility",
                    "url-handling",
                    "proxy-settings"
                ],
                "issue_label_reasoning": "The issue is about the compatibility of the Requests library with certain proxy settings, specifically related to how URLs are handled and how proxy settings are resolved. The labels \"compatibility\", \"url-handling\", and \"proxy-settings\" accurately describe the nature of the problem.",
                "positivity_negativity": "3",
                "positivity_negativity_reasoning": "The discussion in the issue comments is mostly factual and neutral, with the reporter providing clear examples of the problem and the maintainers acknowledging the issue and discussing potential solutions. There are no signs of a particularly negative or disruptive discussion, but also no strong indications of a positive, constructive tone. Hence, a score of 3 (neutral) is appropriate.",
                "bug_label": [
                    "regression",
                    "breaking-change"
                ],
                "bug_label_reasoning": "The issue appears to be a regression, where a change in the library's behavior (related to proxy settings) has broken existing functionality, specifically the handling of AWS S3 presigned URLs. This can be considered a \"breaking change\" that needs to be addressed. The bug labels \"regression\" and \"breaking-change\" are appropriate in this case."
            }
        },
        "8": {
            "html_url": "https://github.com/psf/requests/issues/2002",
            "id": 31505086,
            "number": 2002,
            "title": "bool(failure response) is False",
            "created_at": "2014-04-14T21:09:55Z",
            "updated_at": "2016-04-15T21:39:43Z",
            "closed_at": null,
            "body": "This is rather surprising, and not documented that I've seen (though I could certainly have missed it):\n\n```\n>>> r = requests.request('get', 'http://google.com/aopsdufsaf')\n>>> r\n<Response [404]>\n>>> bool(r)\nFalse\n```\n\nTo me, \"failure = false\" is neither intuitive nor expected.\n",
            "author_association": "NONE",
            "comments": 20,
            "state": "open",
            "user": {
                "login": "slinkp",
                "id": 98610,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2002/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40418922",
                    "id": 40418922,
                    "created_at": "2014-04-14T21:13:07Z",
                    "updated_at": "2014-04-14T21:13:07Z",
                    "author_association": "NONE",
                    "body": "+1\n\nA common pattern is\n\n``` python\nresp = None\n\ntry:\n    resp = requests.get(...)\nexcept:\n    log.exception(\"ruh roh\")\n\nif resp:\n    print(\"we got somethin'!\")\n    handle_resp(resp)\n```\n\nThe current implementation of `__bool__` makes this intuitive pattern very tricky when writing code that accounts for erroneous status codes.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40418922/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40419542",
                    "id": 40419542,
                    "created_at": "2014-04-14T21:18:37Z",
                    "updated_at": "2014-04-14T21:18:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hey @slinkp thanks for opening this!\n\nIn this case, what you're looking for is an explicit attribute: `r.ok`\n\nThe fact of the matter is that this works on Python 3 because we define `__bool__`. If we define `__nonzero__` on Python 2 this would work there as well. That said, I think you should be using the `r.ok` pattern anyway. It's a far better pattern personally.\n\n@jamesob you're getting exactly what you ask for in that case, sorry to say it. You did get something if `resp` is not `None`. If you want a \"good\" response that also isn't None, you should be explicit about it:\n\n``` python\nif resp and resp.ok:\n    print(\"we got something!\")\n    handle_resp(resp)\n```\n\nEven if the `__nonzero__` bug is fixed, this is still far more obvious to anyone who is going to come along and read your code that you're not only expecting a non-`None` value but also a `2xx` response.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40419542/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40419988",
                    "id": 40419988,
                    "created_at": "2014-04-14T21:23:00Z",
                    "updated_at": "2014-04-14T21:23:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Wait never mind, we do implement `__nonzero__`. So `bool(resp)` should work just fine. Investigating.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40419988/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40419995",
                    "id": 40419995,
                    "created_at": "2014-04-14T21:23:05Z",
                    "updated_at": "2014-04-14T21:23:05Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 heh, appears this issue has just bitten you too. \n\n> You did get something if resp is not None.\n\nisn't true given the current implementation of `__nonzero__` (which kicks to `ok`), which is the point I was trying to get across.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40419995/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420180",
                    "id": 40420180,
                    "created_at": "2014-04-14T21:24:45Z",
                    "updated_at": "2014-04-14T21:24:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "``` pycon\n>>> import requests\nr>>> r = requests.get('https://api.github.com/user')\n>>> r\n<Response [401]>\n>>> bool(r)\nFalse\n>>> r = requests.get('http://madisonpl.us/rubby')\n>>> r\n<Response [404]>\n>>> bool(r)\nFalse\n```\n\nWhat version of requests are both of you on?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420180/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420257",
                    "id": 40420257,
                    "created_at": "2014-04-14T21:25:29Z",
                    "updated_at": "2014-04-14T21:25:34Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Oh, I misread the issue. >_< Yeah that's something I disagree with :). I bet it was someone else's feature request and not something we can \"fix\" until requests 3.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420257/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420334",
                    "id": 40420334,
                    "created_at": "2014-04-14T21:26:09Z",
                    "updated_at": "2014-04-14T21:26:09Z",
                    "author_association": "NONE",
                    "body": "``` python\nIn [3]: r = requests.get('http://google.com/awefawefae')\n\nIn [4]: r\nOut[4]: <Response [404]>\n\nIn [5]: if r:\n   ...:     print \"yo\"\n   ...:     \n\nIn [6]: requests.__version__\nOut[6]: '2.1.0'\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420334/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420439",
                    "id": 40420439,
                    "created_at": "2014-04-14T21:27:12Z",
                    "updated_at": "2014-04-14T21:27:12Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@jamesob yeah I asked that because I thought I read that `bool(resp) is True` in the original issue. I've had too much caffeine to deal with the sleep deprivation caused by PyCon. =D\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420439/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420494",
                    "id": 40420494,
                    "created_at": "2014-04-14T21:27:39Z",
                    "updated_at": "2014-04-14T21:27:39Z",
                    "author_association": "NONE",
                    "body": "haha, I hear ya. Anyways, would be awesome to get this ironed out.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420494/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420621",
                    "id": 40420621,
                    "created_at": "2014-04-14T21:28:54Z",
                    "updated_at": "2014-04-14T21:28:54Z",
                    "author_association": "NONE",
                    "body": "Yeah I figured this would break backward compatibility... somebody somewhere is surely depending on the current behavior.  I just really dislike it :)\n\nThanks @sigmavirus24 \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420621/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "slinkp",
                        "id": 98610,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420937",
                    "id": 40420937,
                    "created_at": "2014-04-14T21:32:06Z",
                    "updated_at": "2014-04-14T21:32:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Yeah I'm :+1: for removing this. @Lukasa thoughts? \n\nI know it would have to wait for requests 3.0 but it might still be good to have a wishlist for 3.0 \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420937/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40422705",
                    "id": 40422705,
                    "created_at": "2014-04-14T21:50:16Z",
                    "updated_at": "2014-04-14T21:50:16Z",
                    "author_association": "MEMBER",
                    "body": "I just chatted with Kenneth about this, he definitely doesn't like it. I think we should be leaving this on a wishlist for 3.0, but @kennethreitz might disagree.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40422705/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40423225",
                    "id": 40423225,
                    "created_at": "2014-04-14T21:55:57Z",
                    "updated_at": "2014-04-14T21:55:57Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I know Semantic Versioning isn't a hard rule but I really really really really would like it if it were =P\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40423225/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40423768",
                    "id": 40423768,
                    "created_at": "2014-04-14T22:02:02Z",
                    "updated_at": "2014-04-14T22:02:02Z",
                    "author_association": "NONE",
                    "body": "as the issue reporter, I would chime in to say semver++ ... don't break\nthings for people who rely on this behavior even if I hate it.\n\nOn Mon, Apr 14, 2014 at 5:56 PM, Ian Cordasco notifications@github.comwrote:\n\n> I know Semantic Versioning isn't a hard rule but I really really really\n> really would like it if it were =P\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kennethreitz/requests/issues/2002#issuecomment-40423225\n> .\n\n## \n\nhttp://www.slinkp.com\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40423768/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "slinkp",
                        "id": 98610,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40423801",
                    "id": 40423801,
                    "created_at": "2014-04-14T22:02:22Z",
                    "updated_at": "2014-04-14T22:02:22Z",
                    "author_association": "NONE",
                    "body": "semver++ :)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40423801/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/43691922",
                    "id": 43691922,
                    "created_at": "2014-05-20T22:31:21Z",
                    "updated_at": "2014-05-20T22:31:21Z",
                    "author_association": "NONE",
                    "body": "I think this is an irrelevant design decision that should really never be relied on either way. In my opinion neither `__nonzero__` nor `__bool__` should have been implemented for response objects in the first place.\n\n@jamesob In your first code snippet, you shouldn't be using None as a boolean anyways. Write `if resp is None:` instead and that pattern works fine. (Also, just FYI, `except:` should always be `except Exception:`, otherwise you catch things like KeyboardInterrupt which is baaaaaaad.)\n\nThe truthiness of an HTTP response is a very ambiguous concept. Instead, just use `response.ok` as was suggested earlier.\n\n> Explicit is better than implicit.\n> \u2014 Tim Peters\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/43691922/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fletom",
                        "id": 127497,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/43960624",
                    "id": 43960624,
                    "created_at": "2014-05-23T00:43:47Z",
                    "updated_at": "2014-05-23T00:43:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@fletom I'd like to remind you to [be cordial](http://www.kennethreitz.org/essays/be-cordial-or-be-on-your-way). The code snippets provided for this issue likely do no represent code actually copied and pasted from production code. They merely serve as examples to illustrate a point. There's no need to teach anyone about bad practices. All you needed to do was voice an opinion relevant to the discussion of what `bool(response)` would return.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/43960624/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/43964337",
                    "id": 43964337,
                    "created_at": "2014-05-23T01:58:29Z",
                    "updated_at": "2014-05-23T01:58:29Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 Sorry my comment came across as negative. I only meant to suggest a way that that common pattern can work with requests' current design. As KR suggested, the intention was to be educational/constructive and not insulting.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/43964337/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fletom",
                        "id": 127497,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/58920399",
                    "id": 58920399,
                    "created_at": "2014-10-13T16:48:39Z",
                    "updated_at": "2014-10-13T16:48:39Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This was one of the earliest features of requests and should def be removed :)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/58920399/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/58924766",
                    "id": 58924766,
                    "created_at": "2014-10-13T17:17:07Z",
                    "updated_at": "2014-10-13T17:17:07Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Yep that's why it's lined up for 3.0 =D \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/58924766/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "tldr": "The issue discusses the unexpected behavior of the bool() function when applied to a Requests response object, where a failed response (e.g., 404) evaluates to False, which can break common patterns in code.",
                "security_relevancy": "2",
                "security_relevancy_reasoning": "The issue does not indicate any security vulnerabilities or concerns. It is primarily a discussion about the unexpected behavior of the bool() function when used with Requests response objects, which can lead to compatibility issues but does not directly impact the security of the system.",
                "issue_label": [
                    "compatibility",
                    "url-handling",
                    "aws-s3"
                ],
                "issue_label_reasoning": [
                    "The issue is related to the compatibility of the Requests library's behavior, specifically the way the bool() function interacts with response objects. This can break existing code that relies on the expected behavior of bool() on response objects.",
                    "The issue mentions that the behavior of bool() on Requests response objects can break the handling of URLs, such as AWS S3 presigned URLs, which suggests that the problem is related to URL handling.",
                    "The issue specifically mentions that the behavior of bool() on Requests response objects can break the handling of AWS S3 presigned URLs, indicating that the problem is related to the integration with AWS S3."
                ],
                "positivity_negativity": "3",
                "positivity_negativity_reasoning": "The discussion is mostly factual and neutral, with the participants acknowledging the issue and discussing potential solutions. There are some negative comments about the current behavior, but the overall tone is constructive and focused on finding a resolution.",
                "bug_label": [
                    "regression",
                    "breaking-change"
                ],
                "bug_label_reasoning": [
                    "The issue describes a behavior change in the Requests library that breaks existing code, which can be considered a regression bug.",
                    "The issue indicates that the behavior change in the Requests library is a breaking change, as it can break existing code that relies on the previous behavior of the bool() function on response objects."
                ]
            }
        },
        "9": {
            "html_url": "https://github.com/psf/requests/issues/1953",
            "id": 29363729,
            "number": 1953,
            "title": "The iterable produced by `Session.resolve_redirects` does not include the very first response",
            "created_at": "2014-03-13T16:06:54Z",
            "updated_at": "2015-08-31T06:50:04Z",
            "closed_at": null,
            "body": "If you are manually walking over redirects, you probably want to structure your code like this:\n\n```\nredirect_sequence = session.send_with_manual_redirect_walking(request, ...)\nfor resp in redirect_sequence:\n    # do something with 'resp'\n```\n\nThe existing API does not let you do that.  You must write either\n\n```\nfirst_response = session.send(request, ..., allow_redirects=False)\n# do something with 'first_response'\nfor resp in session.resolve_redirects(first_response, request, ...)\n    # do something with 'resp'\n```\n\nwhich involves writing the same \"do something with\" code in two places, or\n\n```\nresp = session.send(request, ..., allow_redirects=False)\nredir_iter = session.resolve_redirects(resp, request, ...)\nwhile True:\n    # do something with 'resp'\n    if not resp.is_redirect: break\n    resp = next(redir_iter)\n```\n\nwhich is un-Pythonic loop structure.\n\nSince `Session.resolve_redirects` must remain as is for compatibility's sake, the only way to fix this is to add either a new mode to `send` (`allow_redirects=MANUAL`?) or a new Session method (perhaps in fact called `send_with_manual_redirect_walking`) which returns an iterable that _does_ include the very first response.  I do not particularly care which, or what the new method is called in the second case.\n",
            "author_association": "CONTRIBUTOR",
            "comments": 14,
            "state": "open",
            "user": {
                "login": "zackw",
                "id": 325899,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/1953/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37573600",
                    "id": 37573600,
                    "created_at": "2014-03-13T19:03:30Z",
                    "updated_at": "2014-03-13T19:03:30Z",
                    "author_association": "MEMBER",
                    "body": "It seems like the best approach is the second with a better method name.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37573600/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37574734",
                    "id": 37574734,
                    "created_at": "2014-03-13T19:14:00Z",
                    "updated_at": "2014-03-13T19:14:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "What do you think a better method name would be?  I am chronically bad at names.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37574734/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zackw",
                        "id": 325899,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37574861",
                    "id": 37574861,
                    "created_at": "2014-03-13T19:15:01Z",
                    "updated_at": "2014-03-13T19:15:01Z",
                    "author_association": "MEMBER",
                    "body": "Heh, there's not really a good one here, but could be `iter_send()`. Matches an established trend in requests to use `iter_x`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37574861/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37624194",
                    "id": 37624194,
                    "created_at": "2014-03-14T08:00:33Z",
                    "updated_at": "2014-03-14T08:00:33Z",
                    "author_association": "NONE",
                    "body": "Wouldn't `iter_locations` or `iter_redirects` be better?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37624194/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "piotr-dobrogost",
                        "id": 92239,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37624254",
                    "id": 37624254,
                    "created_at": "2014-03-14T08:01:47Z",
                    "updated_at": "2014-03-14T08:02:11Z",
                    "author_association": "MEMBER",
                    "body": "I thought about it, but both are misleading, as they contain the first response (which is _not_ a redirect). Could be `iter_responses`?\n\nAnyway, this is bikeshedding of the highest order. The question is are we happy to add this method to the API?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37624254/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37645263",
                    "id": 37645263,
                    "created_at": "2014-03-14T13:15:35Z",
                    "updated_at": "2014-03-14T13:15:35Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It's the very _last_ response in the sequence that's not a redirect, but yeah, one of them isn't.  I rather like `iter_responses`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37645263/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zackw",
                        "id": 325899,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37646303",
                    "id": 37646303,
                    "created_at": "2014-03-14T13:27:24Z",
                    "updated_at": "2014-03-14T13:27:24Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I like `iter_send` better than `iter_responses`. They both sound a little nebulous though. The former makes a bit more sense to me with the understanding that `allow_redirects` is **not** a parameter.\n\nAll things considered, the goal here is more to provide an equivalent to `send` that gives the user more control than `request` over their redirects. Since it really will be a companion to `send` then, I think `iter_send` makes more sense. `iter_responses` could mean too many things. We have to design this API with the constraint that the users taking advantage of this will will be advanced users. They should already be familiar with `send` so `iter_send` should be an intuitive leap to them, even if the name still is a bit vague.\n\n---\n\nOn a side note, allow me to play devil's advocate. I can easily see people complaining that we only allow for this handling of redirects on such a low level. People will want this change to bubble up to `iter_response` (to correlate to the `response` method) as well as corresponding methods for `iter_get`, `iter_post`, etc. (regardless of whether or not some of those make sense based on the RFCs and the way servers behave). In other words, as devil's advocate, I'm warning of what could be perceived by some users as a foot in the door to further API extensions that are unnecessary and ugly. This is less of an argument against this change, and more of a warning that we should be careful how we choose to architect and document this.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37646303/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37651764",
                    "id": 37651764,
                    "created_at": "2014-03-14T14:22:43Z",
                    "updated_at": "2014-03-14T14:22:43Z",
                    "author_association": "MEMBER",
                    "body": "Taking @sigmavirus24's concern on board, is there an elegant way we can do this _outside_ of the library, e.g. in the toolbelt?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37651764/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37670234",
                    "id": 37670234,
                    "created_at": "2014-03-14T16:54:52Z",
                    "updated_at": "2014-03-14T16:54:52Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'm not familiar with this \"toolbelt\"?  But, an alternative would be a `Session.prepare_request_for_redirect` method that takes an `.is_redirect` response and produces a new `PreparedRequest` to follow the redirect.  That is sufficiently low-level that I don't think it would induce feature creep, but makes it straightforward to write the generator yourself if you want it:\n\n```\ndef iter_send(session, request, **kwargs):\n    resp = session.send(request, allow_redirects=False, **kwargs)\n    while resp.is_redirect:\n        yield resp\n        resp = session.send(session.prepare_request_for_redirect(resp),\n                            allow_redirects=False, **kwargs)\n   yield resp\n```\n\nSince backward compatibility dictates preserving `resolve_redirects`, we are going to want a method like this anyway to house shared code between `iter_send` and `resolve_redirects`.\n\nHaving said that, personally I'm not much concerned about the feature creep issue, because I think anyone who wants to do manual redirection chasing is going to want to work with the Session API anyway.  If nothing else, you probably need Session-level control over cookies.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37670234/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zackw",
                        "id": 325899,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37731798",
                    "id": 37731798,
                    "created_at": "2014-03-15T17:21:34Z",
                    "updated_at": "2014-03-16T13:44:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Taking @sigmavirus24's concern on board\n\nIt isn't a very strong concern. It's more of a pattern I've seen develop as of late. People watch the repo for a tiny change and use that change to get their foot in the door for a larger one that is widely unnecessary. It's a tiny concern that's ever present now.\n\nLikewise, I think the toolbelt could easily accomodate this. That said, I'm not convinced it should be either in or outside of the core (i.e., I don't actually know where it belongs).\n\nI've also been thinking along the same lines @zackw, but more geared towards making an eventual refactor a lot easier. I like having a compliment to `prepare_request` sibling. How does `prepare_redirected_request` sound?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37731798/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37751179",
                    "id": 37751179,
                    "created_at": "2014-03-16T07:26:08Z",
                    "updated_at": "2014-03-16T07:26:08Z",
                    "author_association": "MEMBER",
                    "body": "I can get behind that idea, though I'm +0.5 until I see some code.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37751179/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37757426",
                    "id": 37757426,
                    "created_at": "2014-03-16T13:45:56Z",
                    "updated_at": "2014-03-16T13:45:56Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I really want to get some work done on the toolbelt and betamax today. If @zackw has the time to throw together an example of `prepare_redirected_request` that'd be great. Otherwise, I'll likely work on it later this week.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37757426/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37758455",
                    "id": 37758455,
                    "created_at": "2014-03-16T14:28:47Z",
                    "updated_at": "2014-03-16T14:28:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@sigmavirus24 Not a problem - it's a simple matter of moving code around.  See #1965.\n\n(I am going to be offline for most of the rest of the day, though.)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37758455/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zackw",
                        "id": 325899,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37759398",
                    "id": 37759398,
                    "created_at": "2014-03-16T15:07:47Z",
                    "updated_at": "2014-03-16T15:07:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It's the weekend. Enjoy your Sunday! :cake: \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37759398/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "tldr": "The issue is about the behavior of the `Session.resolve_redirects` method in the Requests library, which does not include the very first response in the redirect sequence.",
                "security_relevancy": "2",
                "security_relevancy_reasoning": "The issue does not indicate any security vulnerabilities or critical security concerns. It is primarily a functional issue related to the handling of redirects in the Requests library. While it could potentially lead to unexpected behavior or issues in certain use cases, it does not appear to have a direct impact on the security of the system.",
                "issue_label": [
                    "compatibility",
                    "url-handling",
                    "enhancement"
                ],
                "issue_label_reasoning": "The issue is related to the compatibility of the Requests library's API, specifically the behavior of the `Session.resolve_redirects` method. It also involves the handling of URLs and redirects, which are important aspects of the library's functionality. Additionally, the proposed solution to add a new method to the API can be considered an enhancement to the library's capabilities.",
                "positivity_negativity": "3",
                "positivity_negativity_reasoning": "The discussion in the issue is mostly neutral and factual, with the contributors providing constructive suggestions and feedback. There are no signs of a highly negative or disruptive discussion. The overall tone is focused on finding a suitable solution to the problem.",
                "bug_label": [
                    "regression",
                    "breaking-change"
                ],
                "bug_label_reasoning": "The issue describes a behavior change in the Requests library that breaks existing functionality, specifically the handling of the first response in a redirect sequence. This can be considered a regression, as it introduces a breaking change that affects the library's API and compatibility. The proposed solution aims to address this issue and restore the expected behavior."
            }
        },
        "10": {
            "html_url": "https://github.com/psf/requests/issues/1737",
            "id": 22655515,
            "number": 1737,
            "title": "[Suggestion] Simplify charset handling",
            "created_at": "2013-11-14T10:56:19Z",
            "updated_at": "2014-10-05T17:26:54Z",
            "closed_at": null,
            "body": "To cut to the chase, here are my suggestions:\n- Remove automatic character set detection (charade) from the library\n- Have response.encoding represent the charset from the Content-Type header\n- Mention the caveat in the documentation\n### Long version\n\nThere seems to be a lot of confusion regarding how the `.text` property works. After getting into some trouble with it myself, I searched the issues list, and found a dozen or so issues, all boiling down to the same mismatch between users' expectations and the intent of the library designers.\n#147 - bytecode string returned when page has charset=UTF-8\n#156 - get_unicode_from_response does not check charsets from meta tags\n#592 - Internal encoding detection doesn't match external chardet call\n#654 - requests.get() ignores charset=UTF-8 and BOM\n#765 - Chardet sometimes fails and force the wrong encoding\n#861 - parsing encoding utf-8 page doesn't as expected\n#1087 - Encodings from content\n#1150 - On some pages requests detect encoding incorrectly\n#1546 - use a default encoding in Response's text property\n#1589 - Make sure content is checked when setting encoding\n#1604 - Response.text returns improperly decoded text\n#1683 - models.text Behaviour (encoding choice)\n\n(It must be tiring to have the same conversation over and over again. I hope I'm being helpful here and not just piling on).\n\nThe argument seems to be:\n- As an HTTP library, requests should not know or care about HTML and META attributes\n- RFC 2616 states that if no charset is defined, \"text/*\" media types should be regarded as ISO-8859-1\n\nI accept both these arguments. However, the documentation seems a bit coy, saying that \"Requests makes an educated guess about the encoding\", implying chardet/charade. In practice, for any content with a \"text\" media subtype, charade will not be used unless the user explicitly sets the `response.encoding` to None before reading the `.text` property.\n\nAdditionally, while ISO-8859-1 can be used as a default, won't it make more sense to handle that default in `.text` and not in the `get_encoding_from_headers` method? This way, the `encoding` property will be None if indeed no encoding is specified, allowing the user to make the decision on how to proceed.\n\nIf you're going to keep the `.text` property, I think it should do a simple decoding if the charset is specified in the headers, and throw an exception otherwise. This way is much less confusing than the state of affairs now. Additionally, the documentation should contain a warning not to use it for arbitrary web pages, and perhaps a code sample showing the proper way to do it.\n\n``` python\n\nimport re\nimport charade\nimport requests\n\ndef get_encodings_from_content(content):\n    charset_re = re.compile(r'<meta.*?charset=[\"\\']*(.+?)[\"\\'>]', flags=re.I)\n    pragma_re = re.compile(r'<meta.*?content=[\"\\']*;?charset=(.+?)[\"\\'>]', flags=re.I)\n    xml_re = re.compile(r'^<\\?xml.*?encoding=[\"\\']*(.+?)[\"\\'>]')\n\n    # FIXME: Does not work in python 3\n    return (charset_re.findall(content) +\n            pragma_re.findall(content) +\n            xml_re.findall(content))\n\nr = requests.get('https://example.com/page.html')\nif \"charset\" not in r.headers.get(\"content-type\", \"\"):\n    encodings = get_encodings_from_content(r.content)\n    if encodings:\n        r.encoding = encodings[0]\n    else:\n        r.encoding = charade.detect(r.content)['encoding']\n\nhtml = r.text\n\n```\n",
            "author_association": "CONTRIBUTOR",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "itsadok",
                "id": 142512,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/1737/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28479978",
                    "id": 28479978,
                    "created_at": "2013-11-14T12:28:21Z",
                    "updated_at": "2013-11-14T12:28:21Z",
                    "author_association": "MEMBER",
                    "body": "You've got lots of good suggestions here. I'll respond to some of them. In no particular order:\n1. `Response.text` should never ever ever ever throw an exception if we can possibly avoid it. Properties throwing exceptions is bad. If we were going to start throwing exceptions from `Response.text` I'd want it to become `Response.text()`.\n2. Your observation that `charade` will never get called for any content with a `text/*` MIME type is totally correct, and by design. RFC 2616 is incredibly clear on this point.\n3. I am open to moving the ISO-8859-1 default to `Response.text` and out of `get_encoding_from_headers`.\n4. I am not open to removing flexibility from `Response.text`.\n\nStripping all the functionality from `Response.text`, as you suggest in your last point, seems silly to me. If we're going that far, we should remove `Response.text` altogether.\n\n`Response.text` has _carte blanche_ to do whatever it can to correctly decode the output. There are points of finesse here, but that will always be the case. No matter what `Response.text` does, someone will disapprove.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28479978/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28481771",
                    "id": 28481771,
                    "created_at": "2013-11-14T13:00:00Z",
                    "updated_at": "2013-11-14T13:00:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@Lukasa you were tricked into saying this:\n\n> Stripping all the functionality from Response.text, as you suggest in your last point, seems silly to me. If we're going that far, we should remove Response.text altogether.\n\nThis is clearly the agenda of this issue as you can tell by:\n\n> If you're going to keep the .text property\n\n@itsadok clearly wants the `.text` property to disappear because issues have been filed regarding it in the past.\n\nLet me address one other thing that @Lukasa didn't before I add my opinion.\n\n> Additionally, the documentation should contain a warning not to use it for arbitrary web pages, and perhaps a code sample showing the proper way to do it.\n1. charade works fairly well for well established codecs. There are new ones that subsume old ones which it doesn't support yet. Why? There aren't publicly available statistics for those encodings and that's what charade relies on. If you disagree with how something is being detected, why not file a bug report on charade?\n2. That code sample is **not** the proper way to do it. Using regular expressions on HTML is insanity and is **never** the correct answer.\n\nWith that addressed, let me address one more theme of this issue: Because _some negligible percentage_ of all issues have been filed about _x_, _x_ should be (changed|removed).\n\nOne thing to note is that all the issues with numbers lower than 1000 were filed before requests 1.0 which is when the API was finalized. If there were legitimate bugs in this attribute prior to that, I would be far from surprised. Also some of those issues are instead about the choice that chardet/charade made. Those are not bugs in requests or `.text` but instead in the underlying support.\n\nFinally, after the release of 1.0 we had a lot of issues about the change from `json` being a property on a Response object to becoming a method. We didn't remove it or change it back for a good reason. It was a deliberate design decision.\n\nThe `.text` attribute is quite crucial to this library, especially to the `json` method, and it will likely never be removed. Can it be improved? Almost certainly. You provided a couple of good suggestions, but the overall tone this issue is meant to convince the reader that it should be removed and that will not happen. Without a reasonable guess at the encoding of the text, we cannot provide the user with the `json` method which also will not go away. Simply, the user is not the sole consumer of `.text`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28481771/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28482990",
                    "id": 28482990,
                    "created_at": "2013-11-14T13:20:14Z",
                    "updated_at": "2013-11-14T13:21:04Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Sorry about the closing and reopening, that was a mis-click.\n\n@sigmavirus24 I'm sorry if it seems like I have an agenda. I'm honestly just trying to help. I read through the discussions in **all** of the issues I posted. They all really seem to revolve around the same basic confusion, with people expecting Response.text to be an all-encompassing solution where in reality it is not. \n\nLet me just clarify some misunderstandings in what I wrote.\n\n> > Additionally, the documentation should contain a warning not to use it for arbitrary web pages, and perhaps a code sample showing the proper way to do it.\n> > charade works fairly well for well established codecs. There are new ones that subsume old ones which it doesn't support yet. Why? There aren't publicly available statistics for those encodings and that's what charade relies on. If you disagree with how something is being detected, why not file a bug report on charade?\n\nI merely meant that it should be noted that `Response.text` should not be used willy-nilly on arbitrary web page, precisely because it avoids using charade in many places where it can be used.\n\n> That code sample is not the proper way to do it. Using regular expressions on HTML is insanity and is never the correct answer.\n\nThe `get_encodings_from_content` function is fully copied from `requests.utils`, with the added comment by me that it doesn't really work in Python 3. In any case the point was that this needs to be clarified, not my specific solution.\n\n> The .text attribute is quite crucial to this library, especially to the json method, and it will likely never be removed. Can it be improved? Almost certainly. You provided a couple of good suggestions, but the overall tone this issue is meant to convince the reader that it should be removed and that will not happen. Without a reasonable guess at the encoding of the text, we cannot provide the user with the json method which also will not go away. Simply, the user is not the sole consumer of .text.\n\nThis is a valid point, and perhaps serves to explain the weird nature of .text. Perhaps all that is needed is a note in the documentation.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28482990/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "itsadok",
                        "id": 142512,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28485988",
                    "id": 28485988,
                    "created_at": "2013-11-14T14:05:54Z",
                    "updated_at": "2013-11-14T14:05:54Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "OK, mea culpa. I missed the part where `Response.json` relies almost entirely on `Response.text` for charset issues. That explains some of the design, and I would have phrased my post differently if I had noticed.\n\nIt seems like I hit a nerve, which was really not my intention. I'm going to close the issue, but there is one pun that I just have to make.\n\n> 1. Your observation that charade will never get called for any content with a text/\\* MIME type is totally correct, and by design. RFC 2616 is incredibly clear on this point.\n\nThe thing is, it seems that in most cases where you'd even want to access the `.text` property, you would also have a text/\\* MIME type (application/json being the exception). That means that the cases where automatic charset detection is actually used are pretty rare, and unpredictable for the user. _So why keep the charade?_\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28485988/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "itsadok",
                        "id": 142512,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28488444",
                    "id": 28488444,
                    "created_at": "2013-11-14T14:39:45Z",
                    "updated_at": "2013-11-14T14:39:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> I merely meant that it should be noted that Response.text should not be used willy-nilly on arbitrary web page, precisely because it avoids using charade in many places where it can be used.\n\nJust because something _can_ be used somewhere does not mean it should be. `charade` is slow as a result of its accuracy and painstaking meticulousness. Using it when it _can_ be used as opposed to when it _must_ be used makes the performance difference in the user's eyes.\n\n> The get_encodings_from_content function is fully copied from requests.utils\n\nBut we never use it. It is cruft and _should_ be removed. It is the wrong way to do things.\n\n> That means that the cases where automatic charset detection is actually used are pretty rare, and unpredictable for the user. So why keep the charade?\n\nYou're assuming everything behaves the same way and that RFCs are followed by servers. They're not. Charade is occasionally used. We keep it because it is essentially part of the API. Response's couldn't have an `apparent_encoding` attribute if we discarded charade. We can break the API if we ever release 3.0 but until then, the API is frozen except for backwards compatible changes. Also, that's an excellent pun.\n\n> It seems like I hit a nerve, which was really not my intention. I'm going to close the issue\n\nI'm going to re-open it. You made valid points as @Lukasa pointed out. It just needs to be clear that this is not any agreement about removing the property.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28488444/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28488797",
                    "id": 28488797,
                    "created_at": "2013-11-14T14:44:20Z",
                    "updated_at": "2013-11-14T14:44:20Z",
                    "author_association": "MEMBER",
                    "body": "Heh, @sigmavirus24 both have the same reactions. Neither of us thinks this issue should be closed: I reopened it just before he could!\n\nNeither of us is angry, or unhappy about having this feedback. We're both delighted. You just can't tell because of the limitations of textual communication! =D\n\nThe reality is that text encoding is hard, everyone is doing the wrong thing from time to time, and we cannot possibly please anyone. For that reason, we do the best we can, and then we expose the `Response.encoding` property for people who don't like the way we do it.\n\nYou've identified good issues with `Response.text`, and I plan to fix them (unless someone else does so first). They're not all backward compatible, so we'll need to sit on them for a bit, but they're good.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28488797/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    }
                }
            ],
            "issue_summarization": {
                "tldr": "The issue discusses the automatic character set detection in the Requests library, suggesting to remove it and instead rely on the charset from the Content-Type header. The discussion revolves around the inconsistent behavior of the .text property and the confusion it causes for users.",
                "security_relevancy": "2",
                "security_relevancy_reasoning": "The issue does not indicate any security vulnerabilities or critical security concerns. It is primarily a discussion about the design and behavior of the .text property in the Requests library, which is a functionality-related concern rather than a security-related one.",
                "issue_label": [
                    "compatibility",
                    "url-handling",
                    "documentation"
                ],
                "issue_label_reasoning": "The issue discusses compatibility concerns with the current behavior of the .text property, particularly around handling character encodings and URLs. It also suggests improvements to the documentation to better explain the intended usage of .text. Therefore, the appropriate labels are \"compatibility\", \"url-handling\", and \"documentation\".",
                "positivity_negativity": "3",
                "positivity_negativity_reasoning": "The discussion is mostly factual and neutral, with the contributor providing constructive suggestions for improving the Requests library. While there are some negative comments about the inconsistent behavior of .text, the overall tone is not overly disruptive or confrontational, but rather aimed at improving the library's functionality.",
                "bug_label": [
                    "regression",
                    "breaking-change"
                ],
                "bug_label_reasoning": "The issue does not directly indicate a bug, but rather discusses potential regressions or breaking changes that could occur if the .text property's behavior is changed. The contributor suggests that any changes to .text should be carefully considered, as it is a crucial part of the Requests API. Therefore, the appropriate bug labels are \"regression\" and \"breaking-change\"."
            }
        }
    },
    "issue_dependency": {
        "1": {
            "issue_id": 43205423,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "2": {
            "issue_id": 43191940,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "3": {
            "issue_id": 39202386,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "4": {
            "issue_id": 36326374,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "5": {
            "issue_id": 35202262,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "6": {
            "issue_id": 34191133,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "7": {
            "issue_id": 32203116,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "8": {
            "issue_id": 31505086,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "9": {
            "issue_id": 29363729,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "10": {
            "issue_id": 22655515,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        }
    }
}