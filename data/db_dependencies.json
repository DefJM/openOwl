{
    "dependencies": {
        "1": {
            "owner": "psf",
            "name": "requests",
            "version": "2.26.0",
            "id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        }
    },
    "issues": {
        "1": {
            "html_url": "https://github.com/psf/requests/pull/6819",
            "id": 2622273505,
            "number": 6819,
            "title": "Add !r to error messages for improved clarity on file paths",
            "created_at": "2024-10-29T20:34:15Z",
            "updated_at": "2024-10-29T20:34:15Z",
            "closed_at": null,
            "body": "If leading and/or trailing spaces are included in the file path, they are clearly shown in the error messages because the file path is shown within quotes. If the file path is not shown within quotes, it may be difficult to identify that leading and/or trailing spaces are the cause of the problem.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "jjkochan-metro",
                "id": 174052782,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6819/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "2": {
            "html_url": "https://github.com/psf/requests/pull/6816",
            "id": 2617295858,
            "number": 6816,
            "title": "Refactor and optimize codebase",
            "created_at": "2024-10-28T04:51:39Z",
            "updated_at": "2024-10-28T04:51:39Z",
            "closed_at": null,
            "body": "Add new tests for `HTTPAdapter` and hooks.\r\n\r\n* **tests/test_adapters.py**\r\n  - Add `test_http_adapter_send` to test the `send` method of `HTTPAdapter`.\r\n  - Add `test_http_adapter_cert_verify` to test the `cert_verify` method of `HTTPAdapter`.\r\n\r\n* **tests/test_hooks.py**\r\n  - Add `test_hooks_with_multiple_hooks` to test hooks with multiple functions.\r\n  - Add `test_hooks_with_no_hooks` to test hooks with no functions.\r\n\r\n---\r\n\r\nFor more details, open the [Copilot Workspace session](https://copilot-workspace.githubnext.com/akaday/requests?shareId=XXXX-XXXX-XXXX-XXXX).",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "akaday",
                "id": 183675426,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6816/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "3": {
            "html_url": "https://github.com/psf/requests/pull/6814",
            "id": 2601341152,
            "number": 6814,
            "title": "update docs for `timeout` arguments to clarify that it uses seconds",
            "created_at": "2024-10-21T05:05:25Z",
            "updated_at": "2024-10-21T05:05:25Z",
            "closed_at": null,
            "body": "fixes #6813",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "DetachHead",
                "id": 57028336,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6814/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "4": {
            "html_url": "https://github.com/psf/requests/issues/6813",
            "id": 2601337465,
            "number": 6813,
            "title": "`Session.request` documentation does not specify what unit of time the `timeout` argument uses",
            "created_at": "2024-10-21T05:02:29Z",
            "updated_at": "2024-10-31T19:23:38Z",
            "closed_at": null,
            "body": "[the documentation for `requests.request`](https://requests.readthedocs.io/en/latest/api/#requests.request) says this: \r\n\r\n> - **timeout** (_[float](https://docs.python.org/3/library/functions.html#float) or [tuple](https://docs.python.org/3/library/stdtypes.html#tuple)_) \u2013 (optional) How many seconds to wait for the server to send data before giving up, as a float, or a [(connect timeout, read timeout)](https://requests.readthedocs.io/en/latest/user/advanced/#timeouts) tuple.\r\n\r\nhowever [the documentation for the same argument in `Session.request`](https://requests.readthedocs.io/en/latest/api/#requests.Session.request) does not clarify that it uses seconds: \r\n\r\n> - **timeout** (_[float](https://docs.python.org/3/library/functions.html#float) or [tuple](https://docs.python.org/3/library/stdtypes.html#tuple)_) \u2013 (optional) How long to wait for the server to send data before giving up, as a float, or a [(connect timeout, read timeout)](https://requests.readthedocs.io/en/latest/user/advanced/#timeouts) tuple.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "DetachHead",
                "id": 57028336,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6813/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "5": {
            "html_url": "https://github.com/psf/requests/issues/6810",
            "id": 2597150655,
            "number": 6810,
            "title": "Change auth.py to be used in a FIPS system",
            "created_at": "2024-10-18T10:32:43Z",
            "updated_at": "2024-10-31T19:23:40Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\n\r\n## Expected Result\r\n\r\nUsing the requests to perform a HTTPS action is working in a FIPS environment\r\n \r\n\r\n<!-- What you expected. -->\r\n\r\n## Actual Result\r\n\r\nIn UNIX environment with fips enabled the MD5 can't be used.\r\nIt provides this error\r\n\r\nValueError: [digital envelope routines: EVP_DigestInit_ex] disabled for FIPS\r\n\r\n## Solution\r\nApply this patch in auth.py\r\n\r\n`\r\n\r\n*** 145,151 ****\r\n                def md5_utf8(x):\r\n                    if isinstance(x, str):\r\n                        x = x.encode(\"utf-8\")\r\n  !                 return hashlib.md5(x).hexdigest()    \r\n                hash_utf8 = md5_utf8\r\n            elif _algorithm == \"SHA\":\r\n--- 145,151 ----\r\n                def md5_utf8(x):\r\n                    if isinstance(x, str):\r\n                        x = x.encode(\"utf-8\")\r\n  !                 return hashlib.md5(x,usedforsecurity=False).hexdigest()\r\n                hash_utf8 = md5_utf8\r\n            elif _algorithm == \"SHA\":\r\n\r\n`\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Jose-albino",
                "id": 176612599,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6810/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "6": {
            "html_url": "https://github.com/psf/requests/issues/6808",
            "id": 2579970702,
            "number": 6808,
            "title": "Double-digit link-local IPv6 zone id raises ValueError",
            "created_at": "2024-10-10T22:32:21Z",
            "updated_at": "2024-10-31T19:23:46Z",
            "closed_at": null,
            "body": "When making a request to a link-local IPv6 address, it becomes necessary to specify the \"zone id\" aka \"scope id\". [RFC 6874](https://www.rfc-editor.org/rfc/rfc6874) specifies zone ids as follows:\r\n\r\n> According to IPv6 Scoped Address syntax [[RFC4007](https://www.rfc-editor.org/rfc/rfc4007)], a zone identifier\r\n>  is attached to the textual representation of an IPv6 address by\r\n>  concatenating \"%\" followed by <zone_id>, where <zone_id> is a string\r\n>  identifying the zone of the address.  However, the IPv6 Scoped\r\n>  Address Architecture specification gives no precise definition of the\r\n>  character set allowed in <zone_id>.  There are no rules or de facto\r\n>  standards for this.  For example, the first Ethernet interface in a\r\n>  host might be called %0, %1, %en1, %eth0, or whatever the implementer\r\n>  happened to choose.\r\n> \r\n>  In a URI, a literal IPv6 address is always embedded between \"[\" and\r\n>  \"]\".  This document specifies how a <zone_id> can be appended to the\r\n>  address.  According to URI syntax [[RFC3986](https://www.rfc-editor.org/rfc/rfc3986)], \"%\" is always treated as\r\n>  an escape character in a URI, so, according to the established URI\r\n>  syntax [[RFC3986](https://www.rfc-editor.org/rfc/rfc3986)] any occurrences of literal \"%\" symbols in a URI MUST\r\n>  be percent-encoded and represented in the form \"%25\".  Thus, the\r\n>  scoped address fe80::a%en1 would appear in a URI as\r\n>  http://[fe80::a%25en1].\r\n\r\nI understand the above to mean that the \"zone id\" can be multiple characters (even when it's an integer.)\r\n\r\nWhen using `requests.get` to request information from IoT devices using link-local networking, I occasionally see double-digit integer zone ids. An example of such a scoped address is `fe80::be0f:a7ff:fe00:2929%53`. As such, I'm escaping the `%` as `%25` as indicated in the RFC. (In this case, this has no effect on the results.)\r\n\r\n## Expected Result\r\n\r\nThis does not throw.\r\n```\r\nimport requests\r\nhost = 'fe80::be0f:a7ff:fe00:2929%2553'\r\nurl = f'http://[{host}]'\r\nrequests.get(url)\r\n```\r\n\r\n## Actual Result\r\n\r\nIt throws:\r\n```\r\nValueError: 'fe80::be0f:a7ff:fe00:2929S' does not appear to be an IPv4 or IPv6 address\r\n```\r\n\r\nSome debugging reveals that `urllib3.util.parse_url` replaces `%25` with `%` in its result.\r\n\r\n## Reproduction Steps\r\n\r\n1. Run the code in the expected result section.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.2.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.12.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.8.0-40-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "twslankard",
                "id": 399361,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6808/reactions",
                "total_count": 1,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 1
            },
            "assignees": [],
            "comments_details": []
        },
        "7": {
            "html_url": "https://github.com/psf/requests/pull/6806",
            "id": 2566364683,
            "number": 6806,
            "title": "Fix typo in documentation for verify",
            "created_at": "2024-10-04T13:20:03Z",
            "updated_at": "2024-10-13T21:12:58Z",
            "closed_at": null,
            "body": "The code for reference: https://github.com/psf/requests/blob/7335bbf480adc8e6aa88feb2022797a549a00aa3/src/requests/adapters.py#L336\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "jonas",
                "id": 8417,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6806/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "8": {
            "html_url": "https://github.com/psf/requests/pull/6805",
            "id": 2560495194,
            "number": 6805,
            "title": "Remove duplicate .eggs entry in .gitignore",
            "created_at": "2024-10-02T01:18:38Z",
            "updated_at": "2024-10-13T21:11:47Z",
            "closed_at": null,
            "body": null,
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "OmniTroid",
                "id": 14360110,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6805/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "9": {
            "html_url": "https://github.com/psf/requests/issues/6793",
            "id": 2488949689,
            "number": 6793,
            "title": "Cannot close the proxy",
            "created_at": "2024-08-27T10:37:43Z",
            "updated_at": "2024-08-27T10:37:43Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\nIn windows pycharm jupyterlab when i open windows system proxy requests will use the proxy i set on windows system.\r\nbut cannot close this proxy direct to the internet . I try  \r\n```python\r\nresponse = requests.post(url, headers=headers, json=data, proxies=None)\r\nresponse = requests.post(url, headers=headers, json=data, proxies={})\r\nresponse = requests.post(url, headers=headers, json=data, proxies=\"\")\r\n```\r\ncan't work\r\n## Expected Result\r\n\r\ndon't use proxy I set on windows\r\n<!-- What you expected. -->\r\n## Actual Result\r\nI can check this connection on clash\r\n<!-- What happened instead. -->\r\n\r\n## Reproduction Steps\r\nwindows  requests                  2.31.0\r\nuse pycharm and jupyter\r\n```python\r\nimport requests\r\nresponse = requests.post(url, headers=headers, json=data, proxies=None)# I try None {} \"\" []\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"41.0.7\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"300000c0\",\r\n    \"version\": \"23.2.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"300000c0\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.18\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "invisifire",
                "id": 59678894,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6793/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "10": {
            "html_url": "https://github.com/psf/requests/pull/6791",
            "id": 2467952666,
            "number": 6791,
            "title": "Do not load ssl context during import",
            "created_at": "2024-08-15T12:25:52Z",
            "updated_at": "2024-08-15T12:25:52Z",
            "closed_at": null,
            "body": "Possible fix for https://github.com/psf/requests/issues/6790.\r\n\r\nThis removes the ssl context load from the import path, and instead caches the context the first time that it is requested.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "holmanb",
                "id": 16310367,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6791/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "11": {
            "html_url": "https://github.com/psf/requests/issues/6790",
            "id": 2467944147,
            "number": 6790,
            "title": "Import time regression",
            "created_at": "2024-08-15T12:19:37Z",
            "updated_at": "2024-11-01T13:13:47Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\nBetween 2.31.0 and 2.32.3, import time increased by ~25%. This appears to have been caused by https://github.com/psf/requests/pull/6667, which changed the expensive `load_verify_locations()` to run at import time (in 2.32.0).\r\n\r\n## Reproduction Steps\r\n\r\nCompare import time of versions with:\r\n```bash\r\n$ python3 -X importtime -c 'import requests' 2> requests_import.log\r\n$ tuna requests_import.log\r\n```\r\n\r\n2.31.0\r\n\r\n![image](https://github.com/user-attachments/assets/65d11607-6342-406e-8d59-4d8c934b05cb)\r\n\r\n\r\n2.32.3:\r\n\r\n![image](https://github.com/user-attachments/assets/55d79382-daf2-45e0-8e6c-fcc080683fc6)",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "holmanb",
                "id": 16310367,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6790/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2451852080",
                    "id": 2451852080,
                    "created_at": "2024-11-01T13:13:46Z",
                    "updated_at": "2024-11-01T13:13:46Z",
                    "author_association": "NONE",
                    "body": "I'm on Windows, with Python 3.11 and requests 2.32.3 and noticed very slow import times and narrowed it down to requests. In my case when importing requests, the `requests.adapters` module made up 4.353 s (85.9%) of the import time with similar command as above.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2451852080/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "donno",
                        "id": 104152,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006297894869931042,
                        "severe_toxicity": 0.00011974509834544733,
                        "obscene": 0.00018526706844568253,
                        "threat": 0.00012406731548253447,
                        "insult": 0.0001743881293805316,
                        "identity_attack": 0.00013829323870595545
                    }
                }
            ]
        },
        "12": {
            "html_url": "https://github.com/psf/requests/pull/6785",
            "id": 2453668217,
            "number": 6785,
            "title": "Update conf.py to fix roman year",
            "created_at": "2024-08-07T14:41:34Z",
            "updated_at": "2024-08-08T17:50:39Z",
            "closed_at": null,
            "body": "Very minor fix, which did however catch my eye: Fix for the invalid roman year in the documentation footer.\r\n\r\nSame as #6389, which seems to be closed. \r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "nothingface0",
                "id": 8612771,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6785/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "13": {
            "html_url": "https://github.com/psf/requests/issues/6784",
            "id": 2447794874,
            "number": 6784,
            "title": "Multiple path separators causes bad requests ",
            "created_at": "2024-08-05T07:15:00Z",
            "updated_at": "2024-08-05T07:16:24Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\nI'm assuming that change in https://github.com/psf/requests/pull/6644 is the cause of this changed behavior that operations with // in path fails. It seems to be related to Authentication as it is the only thing I could find that does not get trimmed by the change in 6644.\r\n\r\n## Expected Result\r\n\r\nSimilar behavior as before 2.32.0\r\n\r\n## Actual Result\r\n\r\nRequest captured by wireshark, note that this is the second request as the first got a 401\r\n\r\nHypertext Transfer Protocol\r\n    POST /axis-cgi/capturemode.cgi HTTP/1.1\\r\\n\r\n    Host: 192.168.0.1\\r\\n\r\n    User-Agent: python-requests/2.32.3\\r\\n\r\n    Accept-Encoding: gzip, deflate, zstd\\r\\n\r\n    Accept: */*\\r\\n\r\n    Connection: keep-alive\\r\\n\r\n    Content-Length: 50\\r\\n\r\n     [truncated]Authorization: Digest username=\"root\", realm=\"AXIS_B8A44F45D62F\", nonce=\"UKH3vekeBgA=2b0d57c2d8b8eb15307576e30309cb7b23a2304c\", uri=\"//axis-cgi/capturemode.cgi\", response=\"0a51943f746a0d88c6574f662b457a9c\", algorithm=\"MD5\", qo\r\n         username=\"root\"\r\n         realm=\"AXIS_B8A44F45D62F\"\r\n         nonce=\"UKH3vekeBgA=2b0d57c2d8b8eb15307576e30309cb7b23a2304c\"\r\n         uri=\"//axis-cgi/capturemode.cgi\"\r\n         response=\"0a51943f746a0d88c6574f662b457a9c\"\r\n         algorithm=\"MD5\"\r\n         qop=\"auth\"\r\n         nc=00000001\r\n    \\r\\n\r\n    [Full request URI: http://172.26.21.128/axis-cgi/capturemode.cgi]\r\n    [HTTP request 2/2]\r\n    [Prev request in frame: 10]\r\n    [Response in frame: 19]\r\n    File Data: 50 bytes\r\n    Data (50 bytes)\r\n\r\nResponse:\r\nHypertext Transfer Protocol\r\n    HTTP/1.1 400 Bad Request\\r\\n\r\n    Date: Mon, 05 Aug 2024 06:25:23 GMT\\r\\n\r\n    Server: Apache/2.4.58 (Unix) OpenSSL/3.0.13\\r\\n\r\n    X-Content-Type-Options: nosniff\\r\\n\r\n    X-Frame-Options: SAMEORIGIN\\r\\n\r\n    X-XSS-Protection: 1; mode=block\\r\\n\r\n     [truncated]Content-Security-Policy: default-src 'self'; frame-ancestors 'self'; connect-src 'self' https://*.google-analytics.com https://*.analytics.google.com https://*.googletagmanager.com https://*.axis.com mediastream: blob:; script\r\n    Content-Length: 226\\r\\n\r\n    Connection: close\\r\\n\r\n    Content-Type: text/html; charset=iso-8859-1\\r\\n\r\n    \\r\\n\r\n    [HTTP response 2/2]\r\n    [Time since request: 0.001411000 seconds]\r\n    [Prev request in frame: 10]\r\n    [Prev response in frame: 13]\r\n    [Request in frame: 16]\r\n    [Request URI: http://192.168.0.1/axis-cgi/capturemode.cgi]\r\n    File Data: 226 bytes\r\n\r\n## Reproduction Steps\r\nThis was run at a axis camera\r\n\r\n```python\r\nimport requests\r\n\r\nurl = \"http://192.168.01//axis-cgi/capturemode.cgi\"\r\nbody = {\r\n            \"apiVersion\": \"1.0\",\r\n            \"method\": \"getCaptureModes\"}\r\n\r\nauth = requests.auth.HTTPDigestAuth(\"root\", \"pass\")\r\nresponse = requests.post(url=url, data=json.dumps(body),\r\n                                              auth=auth, proxies=dict(http=None, https=None))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"42.0.8\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.1.0-21-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"30200020\",\r\n    \"version\": \"24.1.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"300000b0\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "martin-pil",
                "id": 58504806,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6784/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "14": {
            "html_url": "https://github.com/psf/requests/issues/6782",
            "id": 2445493555,
            "number": 6782,
            "title": "Doc: missing example",
            "created_at": "2024-08-02T17:55:53Z",
            "updated_at": "2024-08-03T07:13:30Z",
            "closed_at": null,
            "body": "Looking at quickstart: a copy paste example that just works with status error magagement, is missing.\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "nixilb",
                "id": 64604304,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6782/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2265888675",
                    "id": 2265888675,
                    "created_at": "2024-08-02T18:02:04Z",
                    "updated_at": "2024-08-02T18:20:14Z",
                    "author_association": "MEMBER",
                    "body": "Hi @nixilb, could you be more specific with what you're looking for? We have a [section](https://requests.readthedocs.io/en/latest/user/quickstart/#response-status-codes) in the Quickstart guide about this topic already.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2265888675/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005771478172391653,
                        "severe_toxicity": 0.00012401149433571845,
                        "obscene": 0.00018178432947024703,
                        "threat": 0.00012522116594482213,
                        "insult": 0.0001739350991556421,
                        "identity_attack": 0.00013996040797792375
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2265911759",
                    "id": 2265911759,
                    "created_at": "2024-08-02T18:18:09Z",
                    "updated_at": "2024-08-03T07:13:30Z",
                    "author_association": "NONE",
                    "body": "some COMPLETE code one can copy paste and works \r\n\r\nlike (found in https://realpython.com/python-requests/)\r\n\r\n~~~~\r\nimport requests\r\nfrom requests.exceptions import HTTPError\r\n\r\ntry:\r\n    response = requests.get(\"https://api.github.com\")\r\n    response.raise_for_status()\r\n    print(response.text)\r\nexcept HTTPError as http_err:\r\n    print(f\"HTTP error occurred: {http_err}\")\r\nexcept Exception as err:\r\n    print(f\"Other error occurred: {err}\")\r\nelse:\r\n    print(\"Success!\")\r\n~~~~",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2265911759/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nixilb",
                        "id": 64604304,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008129090419970453,
                        "severe_toxicity": 0.00010750588262453675,
                        "obscene": 0.00019039353355765343,
                        "threat": 0.0001113570760935545,
                        "insult": 0.00017589661001693457,
                        "identity_attack": 0.00013377262803260237
                    }
                }
            ]
        },
        "15": {
            "html_url": "https://github.com/psf/requests/issues/6777",
            "id": 2439802444,
            "number": 6777,
            "title": "What should be Overwritten to ignore all verification in a custom adapter? ",
            "created_at": "2024-07-31T11:21:38Z",
            "updated_at": "2024-07-31T18:11:39Z",
            "closed_at": null,
            "body": "Hello,\r\n\r\nI wish to use a custom adapter that I can use to access servers with old and expired certificates so I can automate the updating of the SSL certs.  The doc isn't really clear, so I consider this a bug. \r\n\r\nI have the following:\r\n\r\n```\r\n###########################################################################\r\nclass TruststoreAdapter(HTTPAdapter):\r\n    \"\"\"An adapter for requests.  This supplies the a custom ssl_context to a set of requests.\"\"\"\r\n\r\n    custom_context: truststore.SSLContext | ssl.SSLContext = None\r\n\r\n    def __init__(\r\n        self,\r\n        pool_connections=DEFAULT_POOLSIZE,\r\n        pool_maxsize=DEFAULT_POOLSIZE,\r\n        max_retries=DEFAULT_RETRIES,\r\n        pool_block=DEFAULT_POOLBLOCK,\r\n        ssl_context: truststore.SSLContext | ssl.SSLContext | None = None,\r\n    ):\r\n        self.custom_context = ssl_context\r\n\r\n        super().__init__(\r\n            pool_connections=pool_connections,\r\n            pool_maxsize=pool_maxsize,\r\n            max_retries=max_retries,\r\n            pool_block=pool_block,\r\n        )\r\n\r\n    # ---------------------------------------------------------------------\r\n    def __str__(self) -> str:\r\n        return f\"< {self.__class__.__name__} >\"\r\n\r\n    # ---------------------------------------------------------------------\r\n    def __repr__(self) -> str:\r\n        return f\"< {self.__class__.__name__} >\"\r\n\r\n    # ---------------------------------------------------------------------\r\n    def init_poolmanager(self, connections, maxsize, block=False):\r\n        ctx = self.custom_context\r\n        return super().init_poolmanager(connections, maxsize, block, ssl_context=ctx)\r\n```\r\n\r\nWhere the SSL Context is defined as:\r\n\r\n```\r\nssl_context: truststore.SSLContext = truststore.SSLContext()\r\nssl_context.check_hostname = False\r\nssl_context.verify_mode = 0 # No check\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "achapkowski",
                "id": 5131271,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6777/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2261040905",
                    "id": 2261040905,
                    "created_at": "2024-07-31T17:45:27Z",
                    "updated_at": "2024-07-31T17:45:27Z",
                    "author_association": "MEMBER",
                    "body": "Hi @achapkowski, could you clarify what exactly you'd be looking for in the Requests documentation? We cover what the Adapter intent is at a high-level, what the end user chooses to modify is very open-ended. `urllib3` provides [docs](https://urllib3.readthedocs.io/en/stable/advanced-usage.html#custom-ssl-contexts) on how to provide a custom SSLContext to their Poolmanager which seems to be the change you're trying to make.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2261040905/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005520391277968884,
                        "severe_toxicity": 0.00012814618821721524,
                        "obscene": 0.00018795237701851875,
                        "threat": 0.00012744597916025668,
                        "insult": 0.00017588018090464175,
                        "identity_attack": 0.00014242995530366898
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2261112290",
                    "id": 2261112290,
                    "created_at": "2024-07-31T18:11:38Z",
                    "updated_at": "2024-07-31T18:11:38Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt I'll check out this doc and get back in a few.  If my answer is there I will close this.\r\n\r\nWhat I am seeing is that if the common name of an SSL certificate has a mismatch, and exception when you provide a custom SSLContext object in the above http adapter.   So I was wondering if some other setting needs to be set to not verify common names. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2261112290/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "achapkowski",
                        "id": 5131271,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000838313193526119,
                        "severe_toxicity": 0.00010951766307698563,
                        "obscene": 0.00018428116163704544,
                        "threat": 0.00012723942927550524,
                        "insult": 0.00017637948621995747,
                        "identity_attack": 0.00013921940990258008
                    }
                }
            ]
        },
        "16": {
            "html_url": "https://github.com/psf/requests/pull/6773",
            "id": 2433915924,
            "number": 6773,
            "title": "Clarify error description in cloning instructions",
            "created_at": "2024-07-28T12:46:52Z",
            "updated_at": "2024-07-28T12:46:52Z",
            "closed_at": null,
            "body": "This clarifies the error description in the 'Cloning the repository' section of the README. The current wording mentions 'an error about a bad commit', which is somewhat vague. I've updated it to 'an error about a bad commit timestamp', which more accurately describes the nature of the error referenced in issue #2690. This small change improves the clarity of the documentation, helping users better understand the potential issue they might encounter when cloning the repository and why they need to use the specified Git flag.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "anodo123",
                "id": 40581230,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6773/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "17": {
            "html_url": "https://github.com/psf/requests/pull/6772",
            "id": 2431274058,
            "number": 6772,
            "title": "chore(charset issue): Resolution for issue 6102 ",
            "created_at": "2024-07-26T02:07:05Z",
            "updated_at": "2024-07-26T04:26:55Z",
            "closed_at": null,
            "body": "Resolution for the issue https://github.com/psf/requests/issues/6102\r\n\r\nNow, If a username and password are passed already encoded, they will not be affected by being expected as a string. In this case, the function will encode the string-formatted attributes into bytes using the latin-1 charset by default due to convention.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "kalingth",
                "id": 75703762,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6772/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "18": {
            "html_url": "https://github.com/psf/requests/pull/6770",
            "id": 2428863569,
            "number": 6770,
            "title": "Header-based auth class",
            "created_at": "2024-07-25T02:59:15Z",
            "updated_at": "2024-07-25T02:59:15Z",
            "closed_at": null,
            "body": "This adds a short and simple header-based auth backend (and tests!). This allows greater flexibility in auth mechanisms out of the box.\r\n\r\nFor example, I'm working on on an internal library to interface with OGC services and three providers use three different auth mechanisms. Being able to consolidate this via the auth parameter seems like the correct solution.\r\n\r\nIt's worth noting that because of when this executes, auth objects override the headers provided both by the session and request call. This has been appropriately documented, and I don't believe any other option would be preferable.\r\n\r\nLooks like someone proposed this in 2018 (#4823) but was rejected because of a feature freeze at the time.\r\n\r\nIf this is acceptable, would the team be interested in something similar like HTTPParamAuth that uses a dict of parameters in a similar fashion? Going back to my library example, one provider uses oauth, which requests supports, one uses headers, and one uses a custom api key parameter. Totally willing to add it to this PR if it simplifies approval :)",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "vilhelmen",
                "id": 5308250,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6770/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "19": {
            "html_url": "https://github.com/psf/requests/pull/6767",
            "id": 2417032156,
            "number": 6767,
            "title": "Revert caching a default SSLContext",
            "created_at": "2024-07-18T18:00:33Z",
            "updated_at": "2024-09-25T14:53:44Z",
            "closed_at": null,
            "body": "This PR reverts the changes from #6667 to the previous behavior. Due to the number of edge cases and concurrency issues we've encountered with this change, we've decided the benefit doesn't currently outweigh the pain to existing infrastructure. We've iterated on a few tries to keep this functionality in place, but are still receiving reports of novel issues with this behavior.\r\n\r\nWe may be able to revisit this in a later version of Requests but we'll need a much more comprehensive test plan.",
            "author_association": "MEMBER",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "nateprewitt",
                "id": 5271761,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6767/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "20": {
            "html_url": "https://github.com/psf/requests/issues/6764",
            "id": 2396860900,
            "number": 6764,
            "title": "permission denied regression reading extracted certs with multiple users",
            "created_at": "2024-07-09T00:54:35Z",
            "updated_at": "2024-07-09T01:43:14Z",
            "closed_at": null,
            "body": "If it is necessary to [extract the certs from a zip file](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/src/requests/utils.py#L296-L302), they'll be written to somewhere like `/tmp/cacert.pem`. This is problematic for subsequent users who may not have have permission to access this `/tmp/cacert.pem`\r\n\r\nSeems related to https://github.com/psf/requests/pull/6667\r\n\r\nNote, this issue was not present with version `2.31.0`\r\n\r\n## Expected Result\r\ntwo users should be able to extract zipped certs on the same filesystem without issue \r\n\r\n## Actual Result\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.9/runpy.py\", line 197, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/usr/lib/python3.9/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/jamison/.../__main__.py\", line 83, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/..., line 22, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/..., line 13, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/.../pypi__39__requests_2_32_2/requests/__init__.py\", line 164, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/.../pypi__39__requests_2_32_2/requests/api.py\", line 11, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/.../pypi__39__requests_2_32_2/requests/sessions.py\", line 15, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/.../pypi__39__requests_2_32_2/requests/adapters.py\", line 77, in <module>\r\nPermissionError: [Errno 13] Permission denied\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```shell\r\ntouch /tmp/test_utils.py\r\nchown root:root /tmp/test_utils.py\r\npython -m pytest test/test_utils.py\r\n```\r\n\r\nThe full end-to-end steps are a bit involved. A,\r\n`__main__,py`\r\n```\r\nimport requests\r\n```\r\nas a standalone zip executable is enough to repro (though I haven't been able to repro with executables that unarchive themselves such as `zipapp` -- in this case, we're using something similar to google's [subpar](https://github.com/google/subpar)).\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.12.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.6.32-1-lts\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30300000\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "jmelahman",
                "id": 23436978,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6764/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2216120008",
                    "id": 2216120008,
                    "created_at": "2024-07-09T01:43:13Z",
                    "updated_at": "2024-07-09T01:43:13Z",
                    "author_association": "NONE",
                    "body": "I think this is fundamentally the same issue as https://github.com/psf/requests/issues/5994 which was marked as won't fix.\r\n\r\nHappy to contribute a fix if there is a satisfactory solution. In my case, the file permissions less of the issue and more so this file is not guaranteed to be owned by the current user. Possible solutions I see include:\r\n- embed the user metadata into the filename. `/tmp/cacert.pem` becomes `/tmp/jamison_cacert.pem`. Not foolproof, but simple and resolves my issue.\r\n- replace this `/tmp/cacert.pem` with a random temporary file (similar to what `certifi` would do). I'm not sure how long this file would need to live on disk, but maybe now [with preloading the certs](https://github.com/psf/requests/pull/6667), this file can be removed after this initial load.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2216120008/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jmelahman",
                        "id": 23436978,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009197363979183137,
                        "severe_toxicity": 0.00010563143587205559,
                        "obscene": 0.0001933844032464549,
                        "threat": 0.00011226482456550002,
                        "insult": 0.0001762767496984452,
                        "identity_attack": 0.00013703086005989462
                    }
                }
            ]
        },
        "21": {
            "html_url": "https://github.com/psf/requests/pull/6750",
            "id": 2370269383,
            "number": 6750,
            "title": "catch FileNotFoundError if there aren't any certificates",
            "created_at": "2024-06-24T13:32:09Z",
            "updated_at": "2024-08-12T07:55:19Z",
            "closed_at": null,
            "body": "fix https://github.com/psf/requests/issues/6749",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "eaglegai",
                "id": 31752768,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6750/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "22": {
            "html_url": "https://github.com/psf/requests/issues/6749",
            "id": 2370262817,
            "number": 6749,
            "title": "catch FileNotFoundError if there aren't any certificates",
            "created_at": "2024-06-24T13:29:04Z",
            "updated_at": "2024-07-03T15:00:23Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\nI set verify to False, but it still need cerfiticate.\r\nAs we have catched ImportError, why not catch FileNotFoundError together?\r\n## Expected Result\r\nwon't Traceback\r\n<!-- What you expected. -->\r\n\r\n## Actual Result\r\n```\r\n[root@localhost requests]# ./test-requests.py\r\nTraceback (most recent call last):\r\n  File \"/root/test/requests/./test-requests.py\", line 2, in <module>\r\n    import requests\r\n  File \"/usr/lib/python3.9/site-packages/requests/__init__.py\", line 136, in <module>\r\n    from .api import request, get, head, post, patch, put, delete, options\r\n  File \"/usr/lib/python3.9/site-packages/requests/api.py\", line 13, in <module>\r\n    from . import sessions\r\n  File \"/usr/lib/python3.9/site-packages/requests/sessions.py\", line 28, in <module>\r\n    from .adapters import HTTPAdapter\r\n  File \"/usr/lib/python3.9/site-packages/requests/adapters.py\", line 65, in <module>\r\n    _preloaded_ssl_context.load_verify_locations(\r\nFileNotFoundError: [Errno 2] No such file or directory\r\n```\r\n<!-- What happened instead. -->\r\n\r\n## Reproduction Steps\r\n```\r\n#!/usr/bin/python3\r\nimport requests\r\nr = requests.get(\"http://127.0.0.1\",verify=False)\r\nprint(r.text)\r\n```\r\n\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "eaglegai",
                "id": 31752768,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6749/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2200911971",
                    "id": 2200911971,
                    "created_at": "2024-07-01T19:51:57Z",
                    "updated_at": "2024-07-01T19:51:57Z",
                    "author_association": "MEMBER",
                    "body": "Hi @eaglegai, `certifi` is a [declared dependency](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/setup.py#L65) of Requests. This should be available in all installations. We derive the the [`DEFAULT_CA_BUNDLE_PATH`](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/src/requests/utils.py#L63) being used in this line from `requests.certs.where()`.\r\n\r\nCan you confirm you 1.) have `certifi` installed and 2.) the value of `import requests; requests.certs.where()`?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2200911971/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009459627908654511,
                        "severe_toxicity": 0.00010696505341911688,
                        "obscene": 0.00020327555830590427,
                        "threat": 0.0001170837931567803,
                        "insult": 0.00017886706336867064,
                        "identity_attack": 0.00013604151899926364
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2206431086",
                    "id": 2206431086,
                    "created_at": "2024-07-03T14:59:11Z",
                    "updated_at": "2024-07-03T15:00:23Z",
                    "author_association": "NONE",
                    "body": "Hi @nateprewitt , we build a mini environment which cut off the unnecessary packages,\r\nand in this env, we just `import requests `for `http://` and `verify is false` is enough.\r\nIt's not reasonable to force to load the certificates by default, because it's not necessary in the case that verify is false.\r\n\r\nAs we consider the case that isn't built with the ssl module, why not consider the situation that 'verify is false' needn't certificates.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2206431086/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eaglegai",
                        "id": 31752768,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008389913127757609,
                        "severe_toxicity": 0.0001068808269337751,
                        "obscene": 0.00017511828627903014,
                        "threat": 0.00011527571041369811,
                        "insult": 0.0001796010765247047,
                        "identity_attack": 0.00014252641994971782
                    }
                }
            ]
        },
        "23": {
            "html_url": "https://github.com/psf/requests/issues/6738",
            "id": 2347707641,
            "number": 6738,
            "title": "requests.utils. atomic_open does not respect umask",
            "created_at": "2024-06-12T03:13:01Z",
            "updated_at": "2024-09-01T17:03:25Z",
            "closed_at": null,
            "body": "Create a new file using requests.utils. atomic_open with umask set to 0o000\r\n\r\n## Expected Result\r\n0o777\r\n\r\n## Actual Result\r\n0o600\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\n\r\nimport os\r\nimport requests.utils\r\n\r\nos.umask(0o000)\r\n\r\nwith requests.utils.atomic_open('example.txt') as f:\r\n    f.write(b'Hello, world!')\r\n\r\nfile_stat = os.stat('example.txt')\r\nprint(oct(file_stat.st_mode & 0o777))\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.2.0-1016-aws\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "austinzh",
                "id": 8947557,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6738/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2162723312",
                    "id": 2162723312,
                    "created_at": "2024-06-12T11:02:29Z",
                    "updated_at": "2024-06-12T11:02:29Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "atomic_open is not intended for public consumption. Even still, the sole purpose of it in requests is to extract a CA truststore file from a zip (where necessary) and place it in a given location. In that case, regardless of what one might expect from umask, it's for the user's protection (and this desirable) that a file only be readable and writable by them to avoid someone corrupting the store and introducing an opportunity for a MitM attack by injecting an untrusted root. \n\nFurther still, requests itself does not change the permissions on the file (although now that you raise this I believe it should for the reasons I mentioned above) and I suspect the bug is actually in one of the standard library functions we use to implement this atomic open function, not requests. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2162723312/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006551616243086755,
                        "severe_toxicity": 0.0001177557060145773,
                        "obscene": 0.00017827231204137206,
                        "threat": 0.00012336010695435107,
                        "insult": 0.00017407546692993492,
                        "identity_attack": 0.00014116520469542593
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2323426636",
                    "id": 2323426636,
                    "created_at": "2024-09-01T17:03:24Z",
                    "updated_at": "2024-09-01T17:03:24Z",
                    "author_association": "NONE",
                    "body": "I've been working on the issue with requests.utils.atomic_open not respecting the umask settings, and I've tried a few different approaches to fix it. Here\u2019s what I\u2019ve done so far and what I\u2019ve found:\r\n\r\n### What I Tried\r\n\r\n1. **Original Approach:**\r\n   Initially, I used tempfile.mkstemp to create a temporary file, and then replaced it with the target file. However, the file permissions still ended up being the default settings due to umask.\r\n\r\n2. **Adjusting Permissions:**\r\n   Added `os.chmod(tmp_name, desired_permissions)` before and after replacing the file to explicitly set permissions on the temporary file. This approach still resulted in the final file having default `umask` permissions (e.g., `0o666`), rather than the desired permissions (e.g., `0o777`).\r\n\r\n3. **Double `os.chmod` Call:**\r\n   Modified the function to include a second `os.chmod` call after replacing the temporary file with the target file. This approach also failed to achieve the desired permissions, consistently resulting in default permissions.\r\n\r\n### Observations\r\n\r\n- The permissions of the final file consistently reflect the default `umask` settings (e.g., `0o666`) rather than the intended settings (e.g., `0o777`).\r\n- The issue seems to be related to how `umask` is applied or handled during file creation and replacement.\r\n\r\n```python\r\n@contextlib.contextmanager\r\ndef atomic_open(filename):\r\n    # Create a temporary file with default permissions\r\n    tmp_descriptor, tmp_name = tempfile.mkstemp(dir=os.path.dirname(filename))\r\n    try:\r\n        with os.fdopen(tmp_descriptor, \"wb\") as tmp_handler:\r\n            yield tmp_handler\r\n\r\n        # Get the current umask and restore it after setting desired permissions\r\n        current_umask = os.umask(0)\r\n        os.umask(current_umask)\r\n        desired_permissions = 0o777 & ~current_umask\r\n\r\n        # Set permissions of the temporary file\r\n        os.chmod(tmp_name, desired_permissions)\r\n\r\n        # Replace the target file with the temporary file\r\n        os.replace(tmp_name, filename)\r\n\r\n        # Ensure the final file has the correct permissions\r\n        os.chmod(filename, desired_permissions)\r\n        \r\n        # Verify and print permissions of the replaced file\r\n        file_stat = os.stat(filename)\r\n        print(f\"Desired permissions: {oct(desired_permissions)}\")\r\n        print(f\"Actual permissions after replacement: {oct(file_stat.st_mode & 0o777)}\")\r\n\r\n    except Exception as e:\r\n        # Clean up the temporary file if an exception occurs\r\n        os.remove(tmp_name)\r\n        raise e\r\n```\r\n\r\n\r\nThank you for your attention to this matter. Any insights or suggestions would be greatly appreciated.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2323426636/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "WajahatKanju",
                        "id": 48358590,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009688275749795139,
                        "severe_toxicity": 0.0001075646432582289,
                        "obscene": 0.0002107811305904761,
                        "threat": 0.00011165873002028093,
                        "insult": 0.00017998524708673358,
                        "identity_attack": 0.00014002140960656106
                    }
                }
            ]
        },
        "24": {
            "html_url": "https://github.com/psf/requests/issues/6735",
            "id": 2338910221,
            "number": 6735,
            "title": "requests 2.32.3 with IPv6 link local address fails with error: [Errno -2] Name or service not known",
            "created_at": "2024-06-06T18:29:52Z",
            "updated_at": "2024-06-27T08:52:20Z",
            "closed_at": null,
            "body": "When using an IPv6 link local address with requests > v2.31.0, seeing an error `[Errno -2] Name or service not known`. The same works with requests 2.31.0.\r\nurllib3 2.2.1 also works successfully with IPv6 link local address .\r\n\r\n### urllib3 2.2.1 with IPv6 link local address\r\n```\r\n>>> import urllib3\r\n>>> http = urllib3.PoolManager(cert_reqs='CERT_NONE')\r\n>>> res = http.request(\"GET\", \"https://[fe80::5eed:8cff:fe00:0da4%ens192]/redfish/v1\")\r\n/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py:1103: InsecureRequestWarning: Unverified HTTPS request is being made to host 'fe80::5eed:8cff:fe00:0da4%ens192'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings\r\n  warnings.warn(\r\n>>> res.status\r\n200\r\n```\r\n\r\n### requests 2.31.0 with IPv6 link local address\r\n```\r\n>>> import requests\r\n>>> res = requests.get(\"https://[fe80::5eed:8cff:fe00:0da4%ens192]/redfish/v1\", verify=False)\r\n>>> res.status_code\r\n200\r\n```\r\n\r\n## Expected Result\r\n\r\nSuccessful connection with versions 2.32.x\r\n\r\n## Actual Result\r\n\r\n```\r\n>>> import requests\r\n>>> res = requests.get(\"https://[fe80::5eed:8cff:fe00:0da4%ens192]/redfish/v1\", verify=False)\r\nTraceback (most recent call last):\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connection.py\", line 198, in _new_conn\r\n    sock = connection.create_connection(\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/util/connection.py\", line 60, in create_connection\r\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\r\n  File \"/usr/lib/python3.10/socket.py\", line 955, in getaddrinfo\r\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\r\nsocket.gaierror: [Errno -2] Name or service not known\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 793, in urlopen\r\n    response = self._make_request(\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 491, in _make_request\r\n    raise new_e\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 467, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 1099, in _validate_conn\r\n    conn.connect()\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connection.py\", line 616, in connect\r\n    self.sock = sock = self._new_conn()\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connection.py\", line 205, in _new_conn\r\n    raise NameResolutionError(self.host, self, e) from e\r\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x716b63d403d0>: Failed to resolve 'fe80::5eed:8cf00:0da4%25ens192' ([Errno -2] Name or service not known)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/adapters.py\", line 667, in send\r\n    resp = conn.urlopen(\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 847, in urlopen\r\n    retries = retries.increment(\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/util/retry.py\", line 515, in increment\r\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='fe80::5eed:8cff:fe00:0da4%25ens192', port=443): Max retries exceeded with urredfish/v1 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x716b63d403d0>: Failed to resolve 'fe80::5eed::fe00:0da4%25ens192' ([Errno -2] Name or service not known)\"))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/api.py\", line 73, in get\r\n    return request(\"get\", url, params=params, **kwargs)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/api.py\", line 59, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/sessions.py\", line 589, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/sessions.py\", line 703, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/adapters.py\", line 700, in send\r\n    raise ConnectionError(e, request=request)\r\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='fe80::5eed:8cff:fe00:0da4%25ens192', port=443): Max retries exceeded with: /redfish/v1 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x716b63d403d0>: Failed to resolve 'fe80::5ecff:fe00:0da4%25ens192' ([Errno -2] Name or service not known)\"))\r\n```\r\n\r\n\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nres = requests.get(\"https://[fe80::5eed:8cff:fe00:0da4%ens192]/redfish/v1\", verify=False)\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.12\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.5.0-27-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "pytech66",
                "id": 171971141,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6735/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2194143025",
                    "id": 2194143025,
                    "created_at": "2024-06-27T08:52:18Z",
                    "updated_at": "2024-06-27T08:52:18Z",
                    "author_association": "NONE",
                    "body": "I worked around the bug with:\r\n```\r\n# Workaround for bug in requests 2.32.x: https://github.com/psf/requests/issues/6735\r\ndef requests_workaround(method, url, json, headers, auth, verify=False):\r\n    # Create a session\r\n        session=requests.Session()\r\n\r\n        # Prepare the request\r\n        request=requests.Request(method, url, json=json, headers=headers, auth=auth)\r\n        prepared_request=session.prepare_request(request)\r\n        prepared_request.url=prepared_request.url.replace('%25', '%')\r\n        return session.send(prepared_request, verify=verify)\r\n\r\ndef requests_workaround_put(url, json, headers, auth, verify=False):\r\n    return requests_workaround('PUT', url, json, headers, auth, verify=False)\r\n\r\ndef requests_workaround_delete(url, headers, auth, verify=False):\r\n    return requests_workaround('DELETE', url, None, headers, auth, verify=False)\r\n\r\ndef requests_workaround_post(url, json, headers, auth, verify=False):\r\n    return requests_workaround('POST', url, json, headers, auth, verify=False)\r\n\r\ndef requests_workaround_get(url, headers, auth, verify=False):\r\n    return requests_workaround('GET', url, None, headers, auth, verify=False)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2194143025/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mattiaswal",
                        "id": 1768984,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0013220116961747408,
                        "severe_toxicity": 0.00010231546912109479,
                        "obscene": 0.0002401129895588383,
                        "threat": 0.00010699922131607309,
                        "insult": 0.00019327767950017005,
                        "identity_attack": 0.0001407144736731425
                    }
                }
            ]
        },
        "25": {
            "html_url": "https://github.com/psf/requests/issues/6734",
            "id": 2333148611,
            "number": 6734,
            "title": "requests 2.32.3 & urllib3 1.26.18 issue with unicode put",
            "created_at": "2024-06-04T10:23:23Z",
            "updated_at": "2024-07-02T01:23:12Z",
            "closed_at": null,
            "body": "I'm building requests 2.32.3 in Fedora Linux and I have a problem with `test_unicode_header_name` - the test hangs.\r\n\r\nIt's reproducible - when I use urllib3 at least 2.0.2, the code works fine, with urllib3 1.26.18, it hangs waiting for a response.\r\n\r\n## Expected Result\r\n\r\nOlder urllib3 is still allowed (`urllib3>=1.21.1,<3`) so it should work.\r\n\r\n## Actual Result\r\n\r\nThe call to `requests.put` hangs and if killed, the stacktrace is:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/home/lbalhar/Software/requests/src/requests/api.py\", line 130, in put\r\n    return request(\"put\", url, data=data, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/Software/requests/src/requests/api.py\", line 59, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/Software/requests/src/requests/sessions.py\", line 589, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/Software/requests/src/requests/sessions.py\", line 703, in send\r\n    r = adapter.send(request, **kwargs)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/Software/requests/src/requests/adapters.py\", line 667, in send\r\n    resp = conn.urlopen(\r\n           ^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/.virtualenvs/requests/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 715, in urlopen\r\n    httplib_response = self._make_request(\r\n                       ^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/.virtualenvs/requests/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 467, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/home/lbalhar/.virtualenvs/requests/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 462, in _make_request\r\n    httplib_response = conn.getresponse()\r\n                       ^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.12/http/client.py\", line 1428, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib64/python3.12/http/client.py\", line 331, in begin\r\n    version, status, reason = self._read_status()\r\n                              ^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.12/http/client.py\", line 292, in _read_status\r\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.12/socket.py\", line 707, in readinto\r\n    return self._sock.recv_into(b)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^\r\nKeyboardInterrupt\r\n```\r\n\r\n## Reproduction Steps\r\n\r\nStart httpbin instance, install urllib3<2 and then:\r\n\r\n```python\r\nimport requests\r\nrequests.put(\"http://127.0.0.1:8080/put\", headers={\"Content-Type\": \"application/octet-stream\"}, data=\"\\xff\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.12.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.8.10-300.fc40.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30200010\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.18\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "CONTRIBUTOR",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "frenzymadness",
                "id": 5688939,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6734/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2148364508",
                    "id": 2148364508,
                    "created_at": "2024-06-04T20:29:25Z",
                    "updated_at": "2024-06-04T20:29:25Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for reporting this, @frenzymadness! I'd thought we had a standalone GHA to still test on \"urllib3<2\" but that's for a separate project. I'll work on getting that added to ensure we don't have regressions.\r\n\r\nWe'll need to take a closer look at what's happening but I have a feeling this may be a byproduct of #6589. I'm wondering if we're sending a Content-Length 1 byte longer than what we're actually emitting. I was surprised when that issue was opened we hadn't had this problem before but there may be some subtle variance between the two major versions that was overlooked.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2148364508/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006151575362309813,
                        "severe_toxicity": 0.00012028044875478372,
                        "obscene": 0.00018189997354056686,
                        "threat": 0.00012365830480121076,
                        "insult": 0.00017011798627208918,
                        "identity_attack": 0.00013964060053694993
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2149028525",
                    "id": 2149028525,
                    "created_at": "2024-06-05T07:00:33Z",
                    "updated_at": "2024-06-05T07:00:33Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I took the code from the `test_content_length_for_string_data_counts_bytes` and it seems to work fine:\r\n\r\n```\r\n>>> import requests\r\n>>> data = \"This is a string containing multi-byte UTF-8 \u2603\"\r\n>>> length = str(len(data.encode(\"utf-8\")))\r\n>>> req = requests.Request(\"POST\", \"http://foo.bar/post\", data=data)\r\n>>> p = req.prepare()\r\n>>> p.headers[\"Content-Length\"]\r\n'51'\r\n>>> length\r\n'51'\r\n```\r\n\r\nAnd for the data from `test_unicode_header_name`\r\n```\r\n>>> data = \"\\xff\"\r\n>>> length = str(len(data.encode(\"utf-8\")))\r\n>>> req = requests.Request(\"POST\", \"http://foo.bar/post\", data=data)\r\n>>> p = req.prepare()\r\n>>> p.headers[\"Content-Length\"]\r\n'2'\r\n>>> length\r\n'2'\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2149028525/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "frenzymadness",
                        "id": 5688939,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007683075964450836,
                        "severe_toxicity": 0.00011365725367795676,
                        "obscene": 0.00020600347488652915,
                        "threat": 0.00011047604493796825,
                        "insult": 0.0001758473226800561,
                        "identity_attack": 0.0001349324156763032
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2150250705",
                    "id": 2150250705,
                    "created_at": "2024-06-05T14:46:42Z",
                    "updated_at": "2024-06-05T14:46:42Z",
                    "author_association": "NONE",
                    "body": "Hi all,\r\n\r\nI was also facing a similar issue like @frenzymadness, and I can confirm that it is caused by #6589. I'm not sure whether I should continue the conversation here or at #6589, but I'll start off here\r\n\r\n## Intro\r\n\r\nFirst off I want to mention that when you send the request\r\n```python\r\nrequests.put('https://httpbin.org/put', headers={'Content-Type': 'application/octet-stream'}, data='\\xff')\r\n```\r\nit doesn't actually hang, but is actually waiting for a response from the server, and after a while the code fails with\r\n```\r\nrequests.exceptions.ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\r\n```\r\n\r\nA similar thing occurred with the server I was communicating with but it it actually sent a response, something like\r\n```\r\n400: Your socket connection to the server was not read from or written to within the timeout period. Idle connections will be closed.\r\n```\r\n\r\nI was sending a `str` with non-ascii characters (same as @frenzymadness) and it turned out that the request had an incorrect `Content-Length` header, something like 545 instead of the correct 543.\r\n\r\n## Issue\r\n\r\nThe issue is that if you pass a `str` as the data of a request, when calculating the Content-Length in [super_len](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/src/requests/utils.py#L140) you encode the string with `utf-8`, and later on when you get to the real encoding of the body in `python3.9/http/client.py` on line 1330 it actually uses `latin-1` (same as `iso-8859-1`).\r\n\r\nSo in the case of our simple example where we send `'\\xff'` we have the following\r\n```python\r\n>>> a = '\\xff'\r\n>>> len(a)\r\n1\r\n>>> len(a.encode('utf-8'))\r\n2\r\n>>> len(a.encode('latin-1'))\r\n1\r\n```\r\n\r\nSo we would be setting the Content-Length to 2 when we would actually be sending 1 byte of data.\r\n\r\nWhat I find interesting is that I don't think the tests created in #6589 serve a real purpose since if you sent a request like the following, your code would fail, and it wouldn't matter that our Content-Length is 'correct'\r\n```python\r\n>>> requests.put('https://httpbin.org/put', data='\ud83d\udc4d\ud83d\udc4e')\r\nTraceback (most recent call last):\r\n  ...\r\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-1: Body ('\ud83d\udc4d\ud83d\udc4e') is not valid Latin-1. Use body.encode('utf-8') if you want to send it encoded in UTF-8.\r\n```\r\nSo the 'workaround' mentioned in #6586 is actually the way a request like this should be sent.\r\n\r\nSo with all that being said, I'd think the fix would be to just revert the commit that introduced this change.\r\n\r\nWhat do you think?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2150250705/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "danilom-git",
                        "id": 57505837,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008888536831364036,
                        "severe_toxicity": 0.00011025724234059453,
                        "obscene": 0.00019546881958376616,
                        "threat": 0.00011520087718963623,
                        "insult": 0.00017742002091836184,
                        "identity_attack": 0.0001428472314728424
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2173121514",
                    "id": 2173121514,
                    "created_at": "2024-06-17T11:19:45Z",
                    "updated_at": "2024-06-17T11:19:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Just hit this myself when trying to release urllib3 1.26.19. urllib3 2.x made a change where string bodies are encoded as UTF-8 instead of Latin-1. It was an accidental change, and I've started working on fixing/documenting it in https://github.com/urllib3/urllib3/issues/3053 and https://github.com/urllib3/urllib3/pull/3063 but ultimately dropped the ball, sorry.\r\n\r\nThen, https://github.com/psf/requests/pull/6589 adapted requests to work with urllib3 2.x by encoding to UTF-8 to compute the Content-Length. Which means that with `\\xff`, requests now sets Content-Length to 2, but urllib3 1.26.x only sends one byte, which is why the test hangs. Since we're not planning to revert to Latin-1 in urllib3, the fix would be for requests to explicitly encode string bodies to UTF-8 (or not try to guess the Content-Lenght, I suppose). If it does, it would be nice to avoid encoding twice which is what happens today.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2173121514/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "pquentin",
                        "id": 42327,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011823242530226707,
                        "severe_toxicity": 0.00010481918434379622,
                        "obscene": 0.00023008622520137578,
                        "threat": 0.00011181621084688231,
                        "insult": 0.00018681051733437926,
                        "identity_attack": 0.00014163617743179202
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2201609589",
                    "id": 2201609589,
                    "created_at": "2024-07-02T01:23:10Z",
                    "updated_at": "2024-07-02T01:23:10Z",
                    "author_association": "MEMBER",
                    "body": "I'm kind of tempted to just add something in compat to flag the major version of urllib3 like PY2/PY3 in `six`. I don't think we can remove content-length computing since that would be a fairly breaking change for the library. Requests is still straddling the line of old internet where everything was latin-1 (and only latin-1), vs today where _most_ things behave with utf-8.\r\n\r\nI think we'll likely want to keep the change in some form. I don't know if any of the other maintainers have other thoughts on solutions. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2201609589/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006554533028975129,
                        "severe_toxicity": 0.00011737264139810577,
                        "obscene": 0.00018060000729747117,
                        "threat": 0.00012379173131193966,
                        "insult": 0.00017621993902139366,
                        "identity_attack": 0.00013984207180328667
                    }
                }
            ]
        },
        "26": {
            "html_url": "https://github.com/psf/requests/pull/6731",
            "id": 2328435863,
            "number": 6731,
            "title": "Address certificate loading regression",
            "created_at": "2024-05-31T19:05:10Z",
            "updated_at": "2024-10-31T12:25:06Z",
            "closed_at": null,
            "body": "## Overview\r\nThis PR is intended to address two distinct issues introduced with the default cert optimizations originally introduced in 2.32.0. While we continue to refine the settings considered when opting into our optimized context, we'll no longer use the new default if any custom cert values are supplied. This addresses the concurrency issues raised in #6726.\r\n\r\nThe second piece of this will be ensuring that when opting out of the default SSLContext, we're still supplying to the default CA Cert bundle correctly. This addresses the problems noticed in https://github.com/psf/requests/pull/6710#issuecomment-2137802782 and #6730.\r\n\r\n## Considerations\r\n\r\nWe're now duplicating a decent chunk of the [logic from cert_verify](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/src/requests/adapters.py#L324-L357) inside [_urllib3_request_context](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/src/requests/adapters.py#L115-L128) but without our validation exceptions. That's a potential vector for behavioral shifts in the future. We _could_ consolidate some of this behavior in one place but it's going to require constructing a dict and using `setattr` on our `conn` in `cert_verify` while setting `pool_kwargs` in `_urllib3_request_context`. I started writing that up but it feels clunky. This is probably going to be a tradeoff of risking drift like we have with Session settings and binding the two behaviors together too tightly.\r\n\r\n## Testing\r\nI'd like to codify the issues we've encountered through the whole 2.32.x saga in tests to hopefully avoid this in the future. Doing it cleanly without relying on external endpoints is proving to be a bit more involved than I'd like. I think we can harness some of the infrastructure added in #6662, but I haven't had a chance to really dig into that.",
            "author_association": "MEMBER",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "nateprewitt",
                "id": 5271761,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6731/reactions",
                "total_count": 4,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 2,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2202673795",
                    "id": 2202673795,
                    "created_at": "2024-07-02T10:26:00Z",
                    "updated_at": "2024-07-02T10:26:00Z",
                    "author_association": "NONE",
                    "body": "Is there an ETA for this change or a similar change? 2.32.3 doesn't work for us, as it broke our usage of `requests_pkcs12`. It looks like that package was updated with a temporary change [here](https://github.com/m-click/requests_pkcs12/issues/55#issuecomment-2154946453), so if a \"proper\" fix is not intended to be released anytime soon then we can try that. However I'd be keen to take a proper fix for both if that's expected soon!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2202673795/reactions",
                        "total_count": 10,
                        "+1": 10,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Heraldk",
                        "id": 1530351,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000576658989302814,
                        "severe_toxicity": 0.0001280312571907416,
                        "obscene": 0.00019139809592161328,
                        "threat": 0.00012955952843185514,
                        "insult": 0.00017694849520921707,
                        "identity_attack": 0.0001422844361513853
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2328802526",
                    "id": 2328802526,
                    "created_at": "2024-09-04T12:09:17Z",
                    "updated_at": "2024-09-04T12:09:17Z",
                    "author_association": "NONE",
                    "body": "The regression is there for some time and the PR is still in draft. Is there some way to move this forward?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2328802526/reactions",
                        "total_count": 6,
                        "+1": 6,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "stratakis",
                        "id": 14812606,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005788404960185289,
                        "severe_toxicity": 0.00012736665667034686,
                        "obscene": 0.00018756638746708632,
                        "threat": 0.00012977368896827102,
                        "insult": 0.00018133525736629963,
                        "identity_attack": 0.00014431159070227295
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2353258669",
                    "id": 2353258669,
                    "created_at": "2024-09-16T15:35:03Z",
                    "updated_at": "2024-09-16T15:35:03Z",
                    "author_association": "NONE",
                    "body": "Maintainers, is there any update here? The latest version of HTTPie is mostly non-functional due to this issue, and we will need to drop it and migrate to other tools if this cannot be addressed.\r\n\r\nThere does not seem to be any blocking feedback on this PR - can any clarity be provided about what is currently preventing a merge? Is additional contribution required from the community?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2353258669/reactions",
                        "total_count": 9,
                        "+1": 9,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "raxod502-plaid",
                        "id": 69264599,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006564800860360265,
                        "severe_toxicity": 0.00012005012831650674,
                        "obscene": 0.00017842554370872676,
                        "threat": 0.00013192833284847438,
                        "insult": 0.00017864088295027614,
                        "identity_attack": 0.0001399632019456476
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2368071270",
                    "id": 2368071270,
                    "created_at": "2024-09-23T12:28:35Z",
                    "updated_at": "2024-09-23T12:28:35Z",
                    "author_association": "NONE",
                    "body": "A friendly reminder that this issue has been stagnant for 4 months already.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2368071270/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kenan-altaki",
                        "id": 24758687,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006023374735377729,
                        "severe_toxicity": 0.00012481785961426795,
                        "obscene": 0.0001858762843767181,
                        "threat": 0.0001233775110449642,
                        "insult": 0.00017647839558776468,
                        "identity_attack": 0.0001424880902050063
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2394086962",
                    "id": 2394086962,
                    "created_at": "2024-10-04T16:40:10Z",
                    "updated_at": "2024-10-04T16:40:10Z",
                    "author_association": "NONE",
                    "body": "Hi @sigmavirus24  you're listed as reviewer for this. Would you like to review this or assign someone else to do so?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2394086962/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "agm-eratosth",
                        "id": 152215605,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005620133597403765,
                        "severe_toxicity": 0.00012927470379509032,
                        "obscene": 0.00017782498616725206,
                        "threat": 0.00013517748448066413,
                        "insult": 0.00017860630759969354,
                        "identity_attack": 0.00014705030480399728
                    }
                }
            ]
        },
        "27": {
            "html_url": "https://github.com/psf/requests/issues/6730",
            "id": 2327497338,
            "number": 6730,
            "title": "Certificate loading regression with HTTPAdapters in 2.32.3",
            "created_at": "2024-05-31T10:26:46Z",
            "updated_at": "2024-07-12T22:11:56Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\n\r\nIt appears that in version `2.32.3` default certificates are no longer loaded for custom `HTTPAdapter` contexts when they were previously.\r\n\r\nI guess this might be a duplicate/related to https://github.com/psf/requests/issues/6726#issuecomment-2138406456.\r\nAlso related to https://github.com/psf/requests/pull/6710#issuecomment-2137802782 - adding `load_default_certs()` resolves the issue, but this wasn't required in previous versions and thus makes upgrading to `2.32.3` breaking.\r\n\r\n## Expected Result\r\n\r\n<!-- What you expected. -->\r\n\r\nWith the code below using `requests` version `2.32.2` I get the URL content with no error.\r\n\r\n## Actual Result\r\n\r\n<!-- What happened instead. -->\r\n\r\nUsing `2.32.3` I get:\r\n```\r\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='raw.githubusercontent.com', port=443): Max retries exceeded with url: /psf/requests/main/MANIFEST.in (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1006)')))\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport ssl\r\nfrom requests.adapters import HTTPAdapter, DEFAULT_POOLBLOCK\r\nfrom urllib3.util.ssl_ import create_urllib3_context\r\n\r\n# adapted from https://github.com/IBM/python-sdk-core/blob/1c207385de627df5d12fd0a0ebd04717ce5bb29d/ibm_cloud_sdk_core/utils.py#L34\r\nclass SSLHTTPAdapter(HTTPAdapter):\r\n    \"\"\"Wraps the original HTTP adapter and adds additional SSL context.\"\"\"\r\n\r\n    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):\r\n        \"\"\"Create and use custom SSL configuration.\"\"\"\r\n\r\n        ssl_context = create_urllib3_context()\r\n        ssl_context.minimum_version = ssl.TLSVersion.TLSv1_2\r\n        # ssl_context.load_default_certs() # Adding this resolves the certificate issue but it was not required before\r\n\r\n        super().init_poolmanager(connections, maxsize, block, ssl_context=ssl_context, **pool_kwargs)\r\n\r\nsession = requests.Session()\r\nhttp_adapter = SSLHTTPAdapter()\r\nsession.mount('https://', http_adapter)\r\n\r\nprint(session.get(url='https://raw.githubusercontent.com/psf/requests/main/MANIFEST.in').text)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.2.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"23.5.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30300000\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "ricellis",
                "id": 10698320,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6730/reactions",
                "total_count": 15,
                "+1": 14,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 1
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2212573284",
                    "id": 2212573284,
                    "created_at": "2024-07-07T20:51:59Z",
                    "updated_at": "2024-07-07T20:51:59Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This issue appears to be leading to widespread breakage. Have you considered yanking the release? It's personally cost me a good deal of time troubleshooting, distilling, and reporting the issue in httpie/cli#1581, to the point that users are suggesting to move away from requests (feels drastic, admittedly). Would the maintainers at least consider acknowledging the issue and giving some insight into the plan?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2212573284/reactions",
                        "total_count": 3,
                        "+1": 3,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jaraco",
                        "id": 308610,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006133169517852366,
                        "severe_toxicity": 0.00012337609950918704,
                        "obscene": 0.00018024217570200562,
                        "threat": 0.00012962242180947214,
                        "insult": 0.0001776605931809172,
                        "identity_attack": 0.00014314080181065947
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2212577746",
                    "id": 2212577746,
                    "created_at": "2024-07-07T21:09:00Z",
                    "updated_at": "2024-07-07T21:09:00Z",
                    "author_association": "MEMBER",
                    "body": "Hi @jaraco, we have a PR with the fix up already. We've been evaluating if there are any other breakages because this series of releases has been problematic.\n\nApplying the patch or downgrading is the immediate fix. The reason it's not yanked is because this was part of a change for a CVE fix in 2.32.x.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2212577746/reactions",
                        "total_count": 2,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006101888720877469,
                        "severe_toxicity": 0.00012047777272528037,
                        "obscene": 0.00018548060324974358,
                        "threat": 0.00011873112089233473,
                        "insult": 0.00017469834710936993,
                        "identity_attack": 0.00013963687524665147
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2226420728",
                    "id": 2226420728,
                    "created_at": "2024-07-12T22:11:54Z",
                    "updated_at": "2024-07-12T22:11:54Z",
                    "author_association": "NONE",
                    "body": "> we have a PR with the fix up already.\r\n\r\nFor those who are wondering, here it is:\r\n  - #6731",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2226420728/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Jamim",
                        "id": 5607572,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006186535465531051,
                        "severe_toxicity": 0.00012053510727128014,
                        "obscene": 0.00017549321637488902,
                        "threat": 0.00012333469931036234,
                        "insult": 0.0001740977168083191,
                        "identity_attack": 0.0001405310322297737
                    }
                }
            ]
        },
        "28": {
            "html_url": "https://github.com/psf/requests/issues/6726",
            "id": 2324074364,
            "number": 6726,
            "title": "Multiple concurrent client certs broken with v2.32.3",
            "created_at": "2024-05-29T19:20:08Z",
            "updated_at": "2024-09-05T12:55:01Z",
            "closed_at": null,
            "body": "We use `requests` with multiple mTLS client certificates - each certificate is signed by the same CA, but they have different subjects - each subject has different permissions. Each distinct client cert is used by a different `requests.Session`\r\nAdditionally, we make use of `ThreadPoolExecutor` to make many requests in parallel.\r\nWhen client certs are in use, urllib3 will [load the cert into the SSL context](https://github.com/urllib3/urllib3/blob/b07a669bd970d69847801148286b726f0570b625/src/urllib3/util/ssl_.py#L454-L458), which, with concurrent requests, will cause the shared SSL context to get modified while it's in use.\r\n\r\nThe reproducer actually fails with an exception - when we first encountered this, we were seeing the wrong certs get used. (That was with different versions of python and openssl, however, and as mentioned above, they're all signed by the same CA, unlike the reproducer)\r\n\r\n\r\n## Expected Result\r\n\r\nThe reproducer below, when run with `requests-2.31.0`:\r\n```\r\n$ ./bin/python3 test.py\r\n/tmp/py/test.py:24: DeprecationWarning: X509Extension support in pyOpenSSL is deprecated. You should use the APIs in cryptography.\r\n  crypto.X509Extension(b\"subjectAltName\", False, b\"DNS:localhost, IP:127.0.0.1\")\r\n/tmp/py/test.py:50: DeprecationWarning: ssl.PROTOCOL_TLSv1_2 is deprecated\r\n  self.ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\r\nServer started on port 8443...\r\n  OK client2: CN: client2 / URL: /client2\r\n  OK client3: CN: client3 / URL: /client3\r\n  OK client1: CN: client1 / URL: /client1\r\n```\r\n\r\n## Actual Result\r\n\r\nWhen run with `requests-2.32.3`:\r\n```\r\n$ ./bin/python3 test.py\r\n/tmp/py/test.py:24: DeprecationWarning: X509Extension support in pyOpenSSL is deprecated. You should use the APIs in cryptography.\r\n  crypto.X509Extension(b\"subjectAltName\", False, b\"DNS:localhost, IP:127.0.0.1\")\r\n/tmp/py/test.py:50: DeprecationWarning: ssl.PROTOCOL_TLSv1_2 is deprecated\r\n  self.ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\r\nServer started on port 8443...\r\nFAIL client1: HTTPSConnectionPool(host='127.0.0.1', port=8443): Max retries exceeded with url: /client1 (Caused by SSLError(SSLError(116, '[X509: KEY_VALUES_MISMATCH] key values mismatch (_ssl.c:3926)')))\r\nFAIL client3: HTTPSConnectionPool(host='127.0.0.1', port=8443): Max retries exceeded with url: /client3 (Caused by SSLError(SSLError(116, '[X509: KEY_VALUES_MISMATCH] key values mismatch (_ssl.c:3926)')))\r\n  OK client2: CN: client2 / URL: /client2\r\n```\r\n\r\n## Reproduction Steps\r\n\r\nGist: https://gist.github.com/jeffreytolar/ea05b3092df12dc6e5b518e58e6821ad ; this generates a few sets of key/certs, hackily sets the default CA bundle, and then makes a few concurrent requests, each using a distinct client cert.\r\n\r\nWith:\r\n```\r\n$ pip freeze\r\ncertifi==2024.2.2\r\ncffi==1.16.0\r\ncharset-normalizer==3.3.2\r\ncryptography==42.0.7\r\nidna==3.7\r\npycparser==2.22\r\npyOpenSSL==24.1.0\r\nrequests==2.32.3\r\nurllib3==2.2.1\r\n```\r\n(top level dependencies are `pyOpenSSL` and `requests`)\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"42.0.7\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.8\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.15.0-105-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"30200010\",\r\n    \"version\": \"24.1.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"300000d0\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "jeffreytolar",
                "id": 26555408,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6726/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2138209689",
                    "id": 2138209689,
                    "created_at": "2024-05-29T20:28:26Z",
                    "updated_at": "2024-05-29T20:28:26Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for the report, @jeffreytolar. It does looks like we're not checking the certs provided by the Session before opting into the default context, I've put together fe251aa94b2b7849e224e455c0aad0df53ad3d8e to disable the default context when certs are present.\r\n\r\nHowever, with testing I'm seeing an exception with the cert being self-signed that wasn't present in 2.31.0. I'm looking into that further but would you mind checking the above patch against your current setup so we can decouple the two issues. If your issue is persisting after we've moved the default context out of the hot path, there may be something else at play with the recent CVE fix.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2138209689/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006499103037640452,
                        "severe_toxicity": 0.00011662026372505352,
                        "obscene": 0.0001853154826676473,
                        "threat": 0.0001241925492649898,
                        "insult": 0.00017307300004176795,
                        "identity_attack": 0.00013608875451609492
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2138383479",
                    "id": 2138383479,
                    "created_at": "2024-05-29T22:53:28Z",
                    "updated_at": "2024-05-29T22:53:28Z",
                    "author_association": "NONE",
                    "body": "So far it's looking like that patch is working in our main setup - thanks for the quick commit!\r\n\r\nFor the self-signed issue still in the reproducer, I think it's that 2.32.x isn't passing a CA bundle to urllib3, whereas 2.31 did that here: https://github.com/psf/requests/blob/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4/requests/adapters.py#L257-L258 ; that causes urllib3 to load the OS default, rather than using `certifi`\r\n\r\nTo restore the v2.31 behavior, I think maybe a `elif verify is True: pool_kwargs[\"ca_certs (or ca_cert_dir)\"] = extract_zipped_paths(DEFAULT_CA_BUNDLE_PATH)` might work in `_urllib3_request_context` ?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2138383479/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jeffreytolar",
                        "id": 26555408,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007896767347119749,
                        "severe_toxicity": 0.00011065664875786752,
                        "obscene": 0.00018623836513143033,
                        "threat": 0.00011665553029160947,
                        "insult": 0.00017712135741021484,
                        "identity_attack": 0.00013776349078398198
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2138404157",
                    "id": 2138404157,
                    "created_at": "2024-05-29T23:16:48Z",
                    "updated_at": "2024-05-29T23:16:48Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> So far it's looking like that patch is working in our main setup - thanks for the quick commit!\n> \n> For the self-signed issue still in the reproducer, I think it's that 2.32.x isn't passing a CA bundle to urllib3, whereas 2.31 did that here: https://github.com/psf/requests/blob/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4/requests/adapters.py#L257-L258 ; that causes urllib3 to load the OS default, rather than using `certifi`\n> \n> To restore the v2.31 behavior, I think maybe a `elif verify is True: pool_kwargs[\"ca_certs (or ca_cert_dir)\"] = extract_zipped_paths(DEFAULT_CA_BUNDLE_PATH)` might work in `_urllib3_request_context` ?\n\nYeah, I thought the optimization broke the zipped paths extraction but couldn't prove it easily ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2138404157/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008700929465703666,
                        "severe_toxicity": 0.00010807222133735195,
                        "obscene": 0.00019470822007860988,
                        "threat": 0.00011397719936212525,
                        "insult": 0.0001777317374944687,
                        "identity_attack": 0.0001376453146804124
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2138406456",
                    "id": 2138406456,
                    "created_at": "2024-05-29T23:19:52Z",
                    "updated_at": "2024-05-29T23:19:52Z",
                    "author_association": "MEMBER",
                    "body": "Ok, so that's the same issue reported here (https://github.com/psf/requests/pull/6710#issuecomment-2137095349) this morning. That explains why calling `load_default_certs` on the SSLContext fixes it.\r\n\r\nLet me take a closer look tomorrow, I'm a little worried if we do it only for `verify is True` that we'll start the whole custom SSLContext issue over again. Thanks for pointing that out, @jeffreytolar!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2138406456/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 1
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006431352230720222,
                        "severe_toxicity": 0.00011817675112979487,
                        "obscene": 0.00018427221220918,
                        "threat": 0.00012188427353976294,
                        "insult": 0.00017140475392807275,
                        "identity_attack": 0.00013842676708009094
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2331604577",
                    "id": 2331604577,
                    "created_at": "2024-09-05T12:55:00Z",
                    "updated_at": "2024-09-05T12:55:00Z",
                    "author_association": "NONE",
                    "body": "Any updates on a release including a fix for this @nateprewitt ?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2331604577/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jschlyter",
                        "id": 37379,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008205112535506487,
                        "severe_toxicity": 0.00010434329306008294,
                        "obscene": 0.00018377335800323635,
                        "threat": 0.00010988159920088947,
                        "insult": 0.00017916885553859174,
                        "identity_attack": 0.00013122761447448283
                    }
                }
            ]
        },
        "29": {
            "html_url": "https://github.com/psf/requests/issues/6722",
            "id": 2316526442,
            "number": 6722,
            "title": "Enhance Error Messaging for Connection Failures",
            "created_at": "2024-05-25T01:06:34Z",
            "updated_at": "2024-09-07T21:34:35Z",
            "closed_at": null,
            "body": "When making an HTTP request using the requests library, I encountered a connection failure. The error message provided was not very clear or actionable, especially for someone new to the library. Enhancing these error messages to provide more detailed and actionable information would significantly improve the developer experience.\r\n\r\n## Expected Result\r\n\r\nI expected the error message to include more detailed information about the potential causes of the connection failure and suggestions for troubleshooting steps.\r\n\r\n## Actual Result\r\n\r\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='osudle.com', port=443): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x000001A9F6DB93C0>: Failed to establish a new connection: [WinError 10051] A socket operation was related to an unavailable network'))\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nr = requests.get(\"http://osudle.com', timeout=20)\r\n\r\nprint(r.status_code)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\npython -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.2\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.18\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "craetona",
                "id": 102687650,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6722/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2336458308",
                    "id": 2336458308,
                    "created_at": "2024-09-07T21:34:34Z",
                    "updated_at": "2024-09-07T21:34:34Z",
                    "author_association": "NONE",
                    "body": "What extra information would you have liked in the error which you think would be actionable? Can you share some examples?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2336458308/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rohanjaswal2507",
                        "id": 7920333,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006405480089597404,
                        "severe_toxicity": 0.0001211676571983844,
                        "obscene": 0.0001678621192695573,
                        "threat": 0.00013267024769447744,
                        "insult": 0.00018115827697329223,
                        "identity_attack": 0.0001444542285753414
                    }
                }
            ]
        },
        "30": {
            "html_url": "https://github.com/psf/requests/pull/6718",
            "id": 2312650768,
            "number": 6718,
            "title": "grammar fixes",
            "created_at": "2024-05-23T11:19:51Z",
            "updated_at": "2024-05-23T11:19:51Z",
            "closed_at": null,
            "body": "This pull request contains a few grammatical corrections. The changes aim to improve the clarity and readability of the documentation and comments within the code.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "domx4q",
                "id": 39739545,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6718/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "31": {
            "html_url": "https://github.com/psf/requests/issues/6711",
            "id": 2308638504,
            "number": 6711,
            "title": "breaking aws s3 usage with requests 2.32.0",
            "created_at": "2024-05-21T16:04:59Z",
            "updated_at": "2024-07-03T10:36:54Z",
            "closed_at": null,
            "body": "requests 2.32.0 introduced a change https://github.com/psf/requests/pull/6644 that strips double /. \r\n\r\nThis has introduced an issue where generated presigned urls for s3 keys that start with a / can no longer be used. requests now strips that second / meaning that the key is modified and the signature does not match resulting in 403 errors. We can adjust to remove the leading / in our keys but this may be affecting other users or use cases\r\n\r\n## Expected Result\r\n\r\nTo be able to use presigned_urls for s3 keys with leading \"/\"\r\n\r\n## Actual Result\r\n\r\nURL that was passed was modified resulting in a 403 error response from aws\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport boto3\r\ns3 = boto3.client('s3')\r\nbucket = \"bucket\"\r\nkey = \"/key_with_leading_slash.txt\"\r\npresigned_url = s3.generate_presigned_url(\"get_object\", Params={'Bucket': bucket, 'Key': key})\r\nrequests.get(presigned_url)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.1.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.15\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 13,
            "state": "open",
            "user": {
                "login": "kristianelliott80",
                "id": 34159454,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6711/reactions",
                "total_count": 7,
                "+1": 7,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2191427456",
                    "id": 2191427456,
                    "created_at": "2024-06-26T11:07:44Z",
                    "updated_at": "2024-06-26T11:07:44Z",
                    "author_association": "NONE",
                    "body": "I can second this. It's not only AWS. We just hit this problem with a completely unrelated web service that also behaves differently if the double leading slash is normalized to one.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191427456/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "crabhi",
                        "id": 1015246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006518938462249935,
                        "severe_toxicity": 0.00011909965542145073,
                        "obscene": 0.0001868773251771927,
                        "threat": 0.00011810622527264059,
                        "insult": 0.00017579183622729033,
                        "identity_attack": 0.00013736433174926788
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2191511247",
                    "id": 2191511247,
                    "created_at": "2024-06-26T11:58:40Z",
                    "updated_at": "2024-06-26T11:58:40Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I believe the s3 use case is being addressed by AWS in their SDK. \n\nAs for a service that expects a URI whose path is not normalized and returns different behavior, that's not compliant with any RFC or security best practices. I'm not losing sleep over that not working ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191511247/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006702897953800857,
                        "severe_toxicity": 0.00011591845395741984,
                        "obscene": 0.0001809171517379582,
                        "threat": 0.00011902823462150991,
                        "insult": 0.00017095246585085988,
                        "identity_attack": 0.00014112186909187585
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2191578590",
                    "id": 2191578590,
                    "created_at": "2024-06-26T12:33:18Z",
                    "updated_at": "2024-06-26T13:32:27Z",
                    "author_association": "NONE",
                    "body": "Thanks for your response! Why do you think double slash is not compliant with any RFC? I agree it's unusual but that service is not under our control.\r\n\r\nReading [RFC3986, section 3.3](https://datatracker.ietf.org/doc/html/rfc3986#section-3.3), it seems to me the case of double leading slash is legal. It doesn't contradict anything in the text and it conforms to the ABNF below: using `path-abempty` (because `authority` is present, also used in ABNF at the beginning of Sec. 3). The first `segment` would be zero-length which is allowed in `path-abempty` as opposed to `path-absolute`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191578590/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "crabhi",
                        "id": 1015246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008473384077660739,
                        "severe_toxicity": 0.00010662278509698808,
                        "obscene": 0.00017984236183110625,
                        "threat": 0.0001150879033957608,
                        "insult": 0.00016962006338872015,
                        "identity_attack": 0.00013781893358100206
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2191588650",
                    "id": 2191588650,
                    "created_at": "2024-06-26T12:37:51Z",
                    "updated_at": "2024-06-26T12:37:51Z",
                    "author_association": "NONE",
                    "body": "Another case in point - `curl` handles leading double slash just fine. Source: my testing with mitmproxy.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191588650/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "crabhi",
                        "id": 1015246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009815238881856203,
                        "severe_toxicity": 9.880304423859343e-05,
                        "obscene": 0.00017688288062345237,
                        "threat": 0.00010376689897384495,
                        "insult": 0.00019170365703757852,
                        "identity_attack": 0.00014012692554388195
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2191691410",
                    "id": 2191691410,
                    "created_at": "2024-06-26T13:23:26Z",
                    "updated_at": "2024-06-26T13:23:26Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It is absolutely a valid URI. It's also semantically equivalent to the normalized version and must be treated that way. `GET //example` is equivalent to `GET /example`",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191691410/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009027605992741883,
                        "severe_toxicity": 0.00010499214840820059,
                        "obscene": 0.00019255660299677402,
                        "threat": 0.00011212894605705515,
                        "insult": 0.00017834967002272606,
                        "identity_attack": 0.00013208820018917322
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2191721951",
                    "id": 2191721951,
                    "created_at": "2024-06-26T13:36:08Z",
                    "updated_at": "2024-06-26T13:36:08Z",
                    "author_association": "NONE",
                    "body": "What defines the normalization? In that RFC, I can find only about \"dot-segment removal\". This is a genuine question - I'm but a user. I have never had to implement URL parsing, so there may be another RFC I don't know about that defines this normalization.\r\n\r\nThe path `//example` is equivalent to `/example` in a filesystem. But is it necessarily true for an URI/URL?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191721951/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "crabhi",
                        "id": 1015246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006181095377542078,
                        "severe_toxicity": 0.00012073918333044276,
                        "obscene": 0.00018536107381805778,
                        "threat": 0.00012302730465307832,
                        "insult": 0.00017519779794383794,
                        "identity_attack": 0.00013763639435637742
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2196910185",
                    "id": 2196910185,
                    "created_at": "2024-06-28T13:30:40Z",
                    "updated_at": "2024-06-28T13:30:40Z",
                    "author_association": "NONE",
                    "body": "> I believe the s3 use case is being addressed by AWS in their SDK.\r\n\r\n@sigmavirus24 where have you seen this? Is there an issue or something you can point us towards?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2196910185/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SpoonMeiser",
                        "id": 255844,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005820736405439675,
                        "severe_toxicity": 0.00012387509923428297,
                        "obscene": 0.00017682858742773533,
                        "threat": 0.00012907516793347895,
                        "insult": 0.00017595231474842876,
                        "identity_attack": 0.00014264797209762037
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2197013655",
                    "id": 2197013655,
                    "created_at": "2024-06-28T14:06:10Z",
                    "updated_at": "2024-06-28T14:06:10Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I don't follow the issues there but I had a conversation with one of the python SDK maintainers. I won't tag them here though so that they don't get harangued as this community is wont to do",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2197013655/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006511577521450818,
                        "severe_toxicity": 0.00011768173862947151,
                        "obscene": 0.00017939227109309286,
                        "threat": 0.00012687234266195446,
                        "insult": 0.00017507554730400443,
                        "identity_attack": 0.00013732949446421117
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2197124131",
                    "id": 2197124131,
                    "created_at": "2024-06-28T14:55:44Z",
                    "updated_at": "2024-06-28T14:55:44Z",
                    "author_association": "NONE",
                    "body": "I couldn't find an issue for it, so I created one: https://github.com/boto/boto3/issues/4181\r\n\r\n@sigmavirus24 if you have another conversation with your maintainer friend, you could point him at this issue, and those of us that don't care whether the requests behaviour is technically right or not and only want it to work with S3, can watch to see when that issue gets resolved.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2197124131/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SpoonMeiser",
                        "id": 255844,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006860465509817004,
                        "severe_toxicity": 0.00011810600699391216,
                        "obscene": 0.00018372657359577715,
                        "threat": 0.00012568567763082683,
                        "insult": 0.0001753829710651189,
                        "identity_attack": 0.0001393200655002147
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2197261277",
                    "id": 2197261277,
                    "created_at": "2024-06-28T16:19:37Z",
                    "updated_at": "2024-06-28T16:19:37Z",
                    "author_association": "NONE",
                    "body": "For what it's worth, I don't care that much about RFC legalese. The problem is I also see a web service (completely unrelated to S3, not even a storage) that doesn't work correctly when queried from `requests`.\r\n\r\nIf we can agree the previous behaviour was a bug WRT the colon handling in the first path segment but the current fix introduced another bug, I can try to contribute a patch to `urllib3` to fix the colon issue there, so that #6644 can be reverted.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2197261277/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "crabhi",
                        "id": 1015246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.003170798299834132,
                        "severe_toxicity": 9.594684524927288e-05,
                        "obscene": 0.0003128749376628548,
                        "threat": 0.00011647334758890793,
                        "insult": 0.00023378693731501698,
                        "identity_attack": 0.0001705992763163522
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2198804057",
                    "id": 2198804057,
                    "created_at": "2024-06-30T23:33:20Z",
                    "updated_at": "2024-06-30T23:33:20Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I don't agree that stripping the redundant and superfluous slash is a bug. I also think that urllib3 can be improved in general around this but doing so in a backwards compatible fashion that doesn't recreate this bug but in a lower part of the stack isn't going to improve things ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2198804057/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011102267308160663,
                        "severe_toxicity": 9.866162872640416e-05,
                        "obscene": 0.0001862493809312582,
                        "threat": 0.00011085181904491037,
                        "insult": 0.00018444043234921992,
                        "identity_attack": 0.00014602845476474613
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2199601374",
                    "id": 2199601374,
                    "created_at": "2024-07-01T08:55:39Z",
                    "updated_at": "2024-07-01T08:55:39Z",
                    "author_association": "NONE",
                    "body": "I tried a few other clients - Python stdlib, Curl, Go stdlib, Elixir Req, Groovy stdlib (probably same as Java) - and I couldn't find another one that strips the slashes. Also, I've tested a few servers (Python http.server, Nginx and Apache) and neither of them \"normalizes\" the slashes.\r\n\r\nhttps://gist.github.com/crabhi/080d746e3eb4fc53380bc8291cdd0f7d\r\n\r\n@sigmavirus24 what leads you to believe the slash is \"redundant and superfluous\"? I see this is not an issue that would affect many people, so I'm willing to contribute a fix that would work in line with other clients. Other options I have are no joy - staying on 2.31, or maintaining a fork, or using Python stdlib for this particular request.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2199601374/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "crabhi",
                        "id": 1015246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008817922789603472,
                        "severe_toxicity": 0.00010846082295756787,
                        "obscene": 0.00019767465710174292,
                        "threat": 0.00011346222891006619,
                        "insult": 0.00018025764438789338,
                        "identity_attack": 0.000139945448609069
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2205754330",
                    "id": 2205754330,
                    "created_at": "2024-07-03T10:36:53Z",
                    "updated_at": "2024-07-03T10:36:53Z",
                    "author_association": "NONE",
                    "body": "For what it's worth, the issue I raised against boto got rejected, so it appears the python SDK developers are _not_ planning to address this in the SDK.\r\n\r\nInstead, the suggestion is for when using requests, to use a prepared request and escape the first slash. I have not tested this myself.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2205754330/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SpoonMeiser",
                        "id": 255844,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006007682532072067,
                        "severe_toxicity": 0.00012104443885618821,
                        "obscene": 0.00017756168381311,
                        "threat": 0.00012276983761694282,
                        "insult": 0.00017409122665412724,
                        "identity_attack": 0.0001414511352777481
                    }
                }
            ]
        },
        "32": {
            "html_url": "https://github.com/psf/requests/pull/6709",
            "id": 2308104459,
            "number": 6709,
            "title": "Add default timeout",
            "created_at": "2024-05-21T11:46:58Z",
            "updated_at": "2024-10-24T10:19:28Z",
            "closed_at": null,
            "body": "This adds a default connect and read timeout value for all usage of Requests. This is to solve a long-standing issue where some systems do not have a sufficiently low default value.\r\n\r\nPersonally, I'd want these values to be much lower, but a 10 second connection timeout and a 30 second read timeout seem like they should be enough to avoid problems for the edge cases of users while also not being so large that they're basically ineffective.\r\n\r\nCloses #3070",
            "author_association": "CONTRIBUTOR",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "sigmavirus24",
                "id": 240830,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6709/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2353225904",
                    "id": 2353225904,
                    "created_at": "2024-09-16T15:21:03Z",
                    "updated_at": "2024-09-16T15:21:03Z",
                    "author_association": "NONE",
                    "body": "If you add a default timeout it may break existing code bases.\r\n\r\nFor example, if I am using a GET request to download a 1 GB file then I would have to adjust timeout to make my code compatible with this proposed change.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2353225904/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cmyers009",
                        "id": 89784819,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000596347264945507,
                        "severe_toxicity": 0.00012314948253333569,
                        "obscene": 0.00017822507652454078,
                        "threat": 0.00013346709602046758,
                        "insult": 0.00017308817768935114,
                        "identity_attack": 0.00014025993004906923
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2354215278",
                    "id": 2354215278,
                    "created_at": "2024-09-16T23:38:12Z",
                    "updated_at": "2024-09-16T23:38:12Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> If you add a default timeout it may break existing code bases.\n> \n> For example, if I am using a GET request to download a 1 GB file then I would have to adjust timeout to make my code compatible with this proposed change.\n\nYou don't understand timeouts in Python. Please go read any number of past issues and blog posts about this issue before spreading FUD. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2354215278/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006803847500123084,
                        "severe_toxicity": 0.00011446351709309965,
                        "obscene": 0.0001749107032082975,
                        "threat": 0.00012560791219584644,
                        "insult": 0.00017252680845558643,
                        "identity_attack": 0.00013641291297972202
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2434704927",
                    "id": 2434704927,
                    "created_at": "2024-10-24T09:02:54Z",
                    "updated_at": "2024-10-24T10:19:28Z",
                    "author_association": "NONE",
                    "body": "Consider also adding -1 as timeout value such that it retains wait till infinity as requests currently behaves. That behaviour is desirable\r\n`\r\nValueError: Attempted to set connect timeout to -1, but the timeout cannot be set to a value less than or equal to 0.\r\n`\r\n```\r\nif timeout is None:\r\n   timeout = _DEFAULT_TIMEOUT\r\nif timeout == -1:\r\n   timeout = None\r\n# causes default timeout if not passed, if -1 is passed it becomes None, else if any other number is passed it becomes timeout after that much seconds\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2434704927/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "neochine",
                        "id": 150173528,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007962810341268778,
                        "severe_toxicity": 0.00011054727656301111,
                        "obscene": 0.0001817352749640122,
                        "threat": 0.00012210424756631255,
                        "insult": 0.00017722237680573016,
                        "identity_attack": 0.00013739026326220483
                    }
                }
            ]
        },
        "33": {
            "html_url": "https://github.com/psf/requests/pull/6696",
            "id": 2285865468,
            "number": 6696,
            "title": "Docs update: warn that Session.verify is ignored if REQUESTS_CA_BUNDLE is set",
            "created_at": "2024-05-08T15:21:43Z",
            "updated_at": "2024-05-08T16:28:36Z",
            "closed_at": null,
            "body": "Issue #3829 tracks that Session.verify is ignored whenever `REQUESTS_CA_BUNDLES` or `CURL_CA_BUNDLES` is set. The underlying behavior will apparently be changed in 3.x, but in the meantime it would be helpful to call out the behavior in the docs to avoid catching people out (the issue has been locked due to a large number of comments).\r\n\r\nI'm happy to rework this PR as needed, but it'd be great to get something in the docs about this in one form or another to help prevent people hitting this.\r\n\r\nThanks in advance for your thoughts!\r\n\r\n---\r\n\r\n## Change Details\r\n\r\n* Added a `warning::` callout to the relevant section of the docs.\r\n\r\n## Alternate Approaches Considered\r\n\r\nI initially wrote out a longer section detailing the semantics for how the various options interact \u2014 but all the other interactions are very intuitive, so this felt like overkill. Let me know if you'd prefer that approach.\r\n\r\nThis section of the docs is also a bit callout heavy, so I'm happy to inline the text rather than put it in a callout, if you prefer.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "StefanKopieczek",
                "id": 1242316,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6696/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "34": {
            "html_url": "https://github.com/psf/requests/pull/6693",
            "id": 2281336920,
            "number": 6693,
            "title": "fix: enviroment variable PYTHONHTTPSVERIFY isn't take in consideration on https requests.",
            "created_at": "2024-05-06T17:06:09Z",
            "updated_at": "2024-05-07T01:59:24Z",
            "closed_at": null,
            "body": "In case of the ssl certificate of destination host has expired isn't possible to ignore the cert validation using env PYTHONHTTPSVERIFY=0.",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "alvieirajr",
                "id": 5341637,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6693/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2096970620",
                    "id": 2096970620,
                    "created_at": "2024-05-06T21:39:54Z",
                    "updated_at": "2024-05-06T21:39:54Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "We have never supported this: https://requests.readthedocs.io/en/latest/search/?q=PYTHONHTTPSVERIFY",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2096970620/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006220084615051746,
                        "severe_toxicity": 0.00012020522990496829,
                        "obscene": 0.00017964081780519336,
                        "threat": 0.0001205358057632111,
                        "insult": 0.00017232228128705174,
                        "identity_attack": 0.00014057659427635372
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2097214693",
                    "id": 2097214693,
                    "created_at": "2024-05-07T01:41:37Z",
                    "updated_at": "2024-05-07T01:59:24Z",
                    "author_association": "NONE",
                    "body": "- @sigmavirus24: \r\n\r\nIf packages that depend on the \"request\" package encapsulate the get() method in a way that does not give the user the option of determining whether or not to perform SSL validation, this makes it impossible to use the target endpoint if its certificate is expired. An example of this is the hugging face package. Because of this, I advocate the need to empower the user to be able to bypass the SSL check if the package they use does not provide this capability. As it stands, if the package used does not support bypassing validation and the certificate has expired, the project being built stops working until the external endpoint has its certificate updated (if it is updated). Because of this I understand that it would be a case of fixing.\r\n\r\nIf we agree that this need is valid, we then move on to the strategy of how this should be done in terms of implementation (since in terms of bureaucratic process I am still a noob in the python project, I only have 3 months in this universe). I advocate the use of the PYTHONHTTPSVERIFY environment variable because it has already been used within the Python ecosystem to signal, for example, that pip ignores SSL validation in previous versions.\r\n\r\nI suggest using this environment variable for the sake of uniformity but I am open to suggestions.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2097214693/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "alvieirajr",
                        "id": 5341637,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005865878192707896,
                        "severe_toxicity": 0.0001247815671376884,
                        "obscene": 0.0001849943510023877,
                        "threat": 0.00012745984713546932,
                        "insult": 0.00017237881547771394,
                        "identity_attack": 0.00014324115181807429
                    }
                }
            ]
        },
        "35": {
            "html_url": "https://github.com/psf/requests/pull/6675",
            "id": 2210123960,
            "number": 6675,
            "title": "Fix utils functions with invalid ip/cidr inputs",
            "created_at": "2024-03-27T08:03:45Z",
            "updated_at": "2024-11-01T19:26:04Z",
            "closed_at": null,
            "body": "- add test cases reported in #5131\r\n- fix utils functions `address_in_network`, `is_ipv4_address` and `is_valid_cidr`\r\n- replace socket with `ipaddress` module\r\n- prepare ipv6 support\r\n\r\nFixes #5131",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "vcapparelli",
                "id": 125774763,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6675/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2047906899",
                    "id": 2047906899,
                    "created_at": "2024-04-10T15:48:33Z",
                    "updated_at": "2024-04-10T15:48:33Z",
                    "author_association": "NONE",
                    "body": "@kennethreitz, @Lukasa, @sigmavirus24, @nateprewitt, @slingamn,\r\n\r\n This is my first contribution to this project, and I don't know if is necessary request to someone to review the PR",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2047906899/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vcapparelli",
                        "id": 125774763,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006534461281262338,
                        "severe_toxicity": 0.00011594919487833977,
                        "obscene": 0.0001816342701204121,
                        "threat": 0.00011689693928929046,
                        "insult": 0.00017272053810302168,
                        "identity_attack": 0.0001378527085762471
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2386952705",
                    "id": 2386952705,
                    "created_at": "2024-10-01T20:03:39Z",
                    "updated_at": "2024-10-01T20:03:39Z",
                    "author_association": "NONE",
                    "body": "@Pjrich1313, \r\n\r\n> Fast node isn't work\r\n\r\nHow can i test this case?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2386952705/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vcapparelli",
                        "id": 125774763,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007426384254358709,
                        "severe_toxicity": 0.00010921887587755919,
                        "obscene": 0.00017191722872667015,
                        "threat": 0.00011368424020474777,
                        "insult": 0.00017654066323302686,
                        "identity_attack": 0.00013786704221274704
                    }
                }
            ]
        },
        "36": {
            "html_url": "https://github.com/psf/requests/pull/6659",
            "id": 2176501923,
            "number": 6659,
            "title": "get_encoding_from_headers fails if charset name not specified #6646",
            "created_at": "2024-03-08T17:49:05Z",
            "updated_at": "2024-03-08T20:32:07Z",
            "closed_at": null,
            "body": null,
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "alain-khalil",
                "id": 66105100,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6659/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "37": {
            "html_url": "https://github.com/psf/requests/issues/6653",
            "id": 2157769336,
            "number": 6653,
            "title": "Document which exceptions request() might raise",
            "created_at": "2024-02-27T23:09:53Z",
            "updated_at": "2024-06-07T14:14:32Z",
            "closed_at": null,
            "body": "Ask to document which exceptions request() might raise\r\n\r\nI notice that the .[json function documents that it might raise](https://requests.readthedocs.io/en/latest/api/#requests.Response.json)  a `JSONDecodeError`.  This is very helpful for writing comprehensive error handling code around requests. I'm asking for that to be done for [the main interface](https://requests.readthedocs.io/en/latest/api/#main-interface) as well.\r\n\r\nWhile [a list of exceptions](https://requests.readthedocs.io/en/latest/api/#exceptions) is provided in the documentation, it is not clear which exceptions will be returned by which methods. For example I don't think `JSONDecodeError` can be raised by `.get`. I tried to read the requests code to get a sense of which might be thrown from it, but it is a little challenging to follow as a first time reader.",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "mjperrone",
                "id": 3848371,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6653/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1980614088",
                    "id": 1980614088,
                    "created_at": "2024-03-06T11:02:34Z",
                    "updated_at": "2024-03-06T11:02:34Z",
                    "author_association": "NONE",
                    "body": "As a newcomer to this project, I'm eager to contribute and address the mentioned issue. I'd like to inquire about the exceptions list mentioned in the documentation\u2014is it exhaustive and does it encompass all possible exceptions? If so, I'm prepared to work on enhancing the documentation. My proposal is to not only update the main interface but also extend the coverage to other methods, aiming for consistency similar to what is currently done for the .json() function.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1980614088/reactions",
                        "total_count": 2,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 1,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "alain-khalil",
                        "id": 66105100,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005283813807182014,
                        "severe_toxicity": 0.00013364868937060237,
                        "obscene": 0.0001844921353040263,
                        "threat": 0.00013801371096633375,
                        "insult": 0.00017611563089303672,
                        "identity_attack": 0.00014572216605301946
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2004759520",
                    "id": 2004759520,
                    "created_at": "2024-03-18T19:30:57Z",
                    "updated_at": "2024-03-18T19:31:25Z",
                    "author_association": "NONE",
                    "body": "That would lead to a lot of code duplication in my opinion, apart from `requests.ReadTimeout` and `requests.JSONDecodeError` , all [request methods return an instance of the `Response` object](https://requests.readthedocs.io/en/latest/api/#exceptions), which can raise the [same exceptions](https://requests.readthedocs.io/en/latest/api/#exceptions).\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2004759520/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "codespearhead",
                        "id": 72931357,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000641082355286926,
                        "severe_toxicity": 0.00012111764226574451,
                        "obscene": 0.00019300400163047016,
                        "threat": 0.0001206325032399036,
                        "insult": 0.00017695828864816576,
                        "identity_attack": 0.00013840036990586668
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2154937070",
                    "id": 2154937070,
                    "created_at": "2024-06-07T14:14:31Z",
                    "updated_at": "2024-06-07T14:14:31Z",
                    "author_association": "NONE",
                    "body": "I want to solve this issue @mjperrone , if this issue is still opened and kindly assign me this issue and provide me necessary required information",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2154937070/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 1,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "29deepanshutyagi",
                        "id": 123951725,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006782528362236917,
                        "severe_toxicity": 0.00012108806549804285,
                        "obscene": 0.0001802758633857593,
                        "threat": 0.00014892267063260078,
                        "insult": 0.000175523673533462,
                        "identity_attack": 0.00013911670248489827
                    }
                }
            ]
        },
        "38": {
            "html_url": "https://github.com/psf/requests/pull/6651",
            "id": 2156727937,
            "number": 6651,
            "title": "Add test coverage for api.py",
            "created_at": "2024-02-27T14:22:03Z",
            "updated_at": "2024-02-28T00:21:26Z",
            "closed_at": null,
            "body": "This change adds tests for the highlevel api that exposes the http methods directly.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "jschfflr",
                "id": 4992440,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6651/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "39": {
            "html_url": "https://github.com/psf/requests/pull/6649",
            "id": 2152354747,
            "number": 6649,
            "title": "Measure and report test coverage",
            "created_at": "2024-02-24T15:08:47Z",
            "updated_at": "2024-03-14T19:57:28Z",
            "closed_at": null,
            "body": "This runs pytest within coverage, enables pytest-xdist to improve test run times, and reports the coverage on GitHub Actions for us.\r\n\r\nThis also ensures that the parallel mode coverage files are ignored and adds things to pytest configuration to make tox command simpler",
            "author_association": "CONTRIBUTOR",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "sigmavirus24",
                "id": 240830,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6649/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1964813391",
                    "id": 1964813391,
                    "created_at": "2024-02-26T18:10:41Z",
                    "updated_at": "2024-02-26T18:10:41Z",
                    "author_association": "MEMBER",
                    "body": "I haven't had a chance to dig into the failure yet, but it's showing 26% coverage which seems _extremely_ low. I tried to go back to find [older examples of when codecov](https://github.com/psf/requests/pull/3920#issuecomment-285275742) was running and am seeing closer to 89% coverage. Do we possibly have something misconfigured?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1964813391/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006626282702200115,
                        "severe_toxicity": 0.00011713159619830549,
                        "obscene": 0.00017957572708837688,
                        "threat": 0.00011860518134199083,
                        "insult": 0.0001768847432686016,
                        "identity_attack": 0.00014000084775034338
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1965471687",
                    "id": 1965471687,
                    "created_at": "2024-02-26T22:51:05Z",
                    "updated_at": "2024-02-26T22:51:05Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Running in tox I get north of 80% as well but we're not running in tox on GitHub actions so that may be part of the problem",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1965471687/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001788908732123673,
                        "severe_toxicity": 9.290154412155971e-05,
                        "obscene": 0.00022455591533798724,
                        "threat": 0.000114102142106276,
                        "insult": 0.00020251430396456271,
                        "identity_attack": 0.0001490748254582286
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1973960678",
                    "id": 1973960678,
                    "created_at": "2024-03-01T21:39:06Z",
                    "updated_at": "2024-03-01T21:39:06Z",
                    "author_association": "MEMBER",
                    "body": "It looks like we're possibly hitting an issue with `coverage combine` similar to what's noted in https://github.com/nedbat/coveragepy/issues/1036.\r\n\r\nWe're generating 21 files for the 21 tests across 7 interpreters. From Ned's response it sounds like those combinations have subtle variances that may result in false flags for missing coverage? When running the tests locally without `parallel=True` and generating a single file it shows 87% like I'd expect. If I use `parallel = True` and don't use `combine`, we get the same results we're seeing in CI as if we're missing coverage data.\r\n\r\nHave you used this workflow in other projects? If not, we might consider dividing coverage by interpreter or another partitioning strategy.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1973960678/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006075403653085232,
                        "severe_toxicity": 0.00012134478311054409,
                        "obscene": 0.00017989776097238064,
                        "threat": 0.00012843184231314808,
                        "insult": 0.00017374182061757892,
                        "identity_attack": 0.00014193617971614003
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1974818937",
                    "id": 1974818937,
                    "created_at": "2024-03-02T14:42:47Z",
                    "updated_at": "2024-03-02T17:08:48Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I mostly stole this from urllib3 and https://hynek.me/articles/ditch-codecov-python/ but maybe I missed something important ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1974818937/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008450360619463027,
                        "severe_toxicity": 0.00010656627273419872,
                        "obscene": 0.00017376038886141032,
                        "threat": 0.00011010300659108907,
                        "insult": 0.00018363777780905366,
                        "identity_attack": 0.00013928247790317982
                    }
                }
            ]
        },
        "40": {
            "html_url": "https://github.com/psf/requests/issues/6647",
            "id": 2150619043,
            "number": 6647,
            "title": "Wrong CA Certificates used in requests.Session.send",
            "created_at": "2024-02-23T08:35:00Z",
            "updated_at": "2024-05-30T21:11:05Z",
            "closed_at": null,
            "body": "Bug in requests.sessions.py:\r\n\r\nhttps://github.com/psf/requests/blob/b8be93a721792deeadd2f498b8f77cf610e7765f/src/requests/sessions.py#L579-L589\r\n\r\nsession.merge_environment_settings is called in session.request and not in session.send which means if users want to build their own prepared requests (see example below), the correct certificates file will not be used unless explicitly passed to send.\r\n\r\nI believe these environment settings should be updated in session.send instead.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport os\r\nimport requests\r\n\r\n# Set CA certificates file to custom local file\r\nos.environ[\"REQUESTS_CA_BUNDLE\"] = \"/etc/ssl/certs/ca-certificates.crt\"\r\n\r\n# Create request object\r\nreq = requests.Request(\r\n    method=\"GET\", # any method\r\n    url=\"https://www.example_site.mydomain.com/path\" # any url for which the default cert file does not have a cert for\r\n)\r\n\r\nwith requests.Session() as s:\r\n    respA = s.request( # Success: will use CA certificates from REQUESTS_CA_BUNDLE\r\n        method=req.method,\r\n        url=req.url\r\n    )\r\n    assert respA.status_code == 200\r\n    \r\nwith requests.Session() as s:\r\n    respB = s.send( # Success: will use CA certificates from REQUESTS_CA_BUNDLE if explicitly specified\r\n        request=req.prepare(), verify=os.environ[\"REQUESTS_CA_BUNDLE\"]\r\n    )\r\n    \r\n    assert respB.status_code == 200\r\n    \r\nwith requests.Session() as s:\r\n    respC = s.send( # Error: Will try to use default CA certificates instead of those specified by REQUESTS_CA_BUNDLE\r\n        request=req.prepare() \r\n    )\r\n    \r\n    assert respC.status_code == 200\r\n```\r\n\r\n## Expected Result\r\n\r\nNo output\r\n\r\n## Actual Result\r\n\r\n```\r\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='https://www.example_site.mydomain.com/path', port=443): Max retries exceeded with url: /path (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)')))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.0-150-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "sunnstix",
                "id": 25157310,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6647/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2140871794",
                    "id": 2140871794,
                    "created_at": "2024-05-30T21:11:04Z",
                    "updated_at": "2024-05-30T21:11:04Z",
                    "author_association": "NONE",
                    "body": "I can confirm I'm seeing this behavior when using prepared requests and `sessions.send()`, being forced to set `session.verify = os.environ['REQUESTS_CA_BUNDLE']` before `send()`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2140871794/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bmeneg",
                        "id": 453611,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005838608485646546,
                        "severe_toxicity": 0.00012524612247943878,
                        "obscene": 0.00019093856099061668,
                        "threat": 0.00012447329936549067,
                        "insult": 0.00017457795911468565,
                        "identity_attack": 0.00013894926814828068
                    }
                }
            ]
        },
        "41": {
            "html_url": "https://github.com/psf/requests/issues/6646",
            "id": 2150140274,
            "number": 6646,
            "title": "`get_encoding_from_headers` fails if charset name not specified",
            "created_at": "2024-02-22T23:56:00Z",
            "updated_at": "2024-09-01T04:23:19Z",
            "closed_at": null,
            "body": "`requests.utils.get_encoding_from_headers` assumes that the charset parameter always specifies a name. In very rare cases a server can send a malformed content-type header which does not specify a name. In these cases, requests should probably just treat it as if no charset had been specified.\r\n\r\n## Expected Result\r\n\r\n`requests.utils.get_encoding_from_headers({'content-type': 'text/html; charset'}) == 'ISO-8859-1'`\r\n\r\n## Actual Result\r\n\r\n```\r\nFile ~/opt/anaconda3/2023.03/envs/mamba/envs/py3/lib/python3.9/site-packages/requests/utils.py:553, in get_encoding_from_headers(headers)\r\n    550 content_type, params = _parse_content_type_header(content_type)\r\n    552 if \"charset\" in params:\r\n--> 553     return params[\"charset\"].strip(\"'\\\"\")\r\n    555 if \"text\" in content_type:\r\n    556     return \"ISO-8859-1\"\r\n\r\nAttributeError: 'bool' object has no attribute 'strip'\r\n```\r\n\r\n## System Information\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"41.0.3\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.15\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.14.0-284.11.1.el9_2.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010116f\",\r\n    \"version\": \"23.2.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010117f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.18\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "batterseapower",
                "id": 18488,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6646/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1986156050",
                    "id": 1986156050,
                    "created_at": "2024-03-08T17:58:48Z",
                    "updated_at": "2024-03-08T17:58:48Z",
                    "author_association": "NONE",
                    "body": "Hello @batterseapower \r\nI just pushed a PR to fix this issue. It is my first PR in this project. Let's wait for project mantainer to validate my fix.\r\n\r\nBest Regards",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1986156050/reactions",
                        "total_count": 2,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 1,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "alain-khalil",
                        "id": 66105100,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005566154140979052,
                        "severe_toxicity": 0.0001278084091609344,
                        "obscene": 0.00018248749256599694,
                        "threat": 0.00012883832096122205,
                        "insult": 0.00017423389363102615,
                        "identity_attack": 0.00014295514847617596
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2323154072",
                    "id": 2323154072,
                    "created_at": "2024-09-01T04:01:42Z",
                    "updated_at": "2024-09-01T04:23:19Z",
                    "author_association": "NONE",
                    "body": "I wonder if `_parse_content_type_header` should be changed so that it ignores parameters with no equals after them. Or sets them to the empty string, or None. Setting parameter values to a `bool` is clearly wrong.\r\n[src/requests/utils.py#L533](https://github.com/psf/requests/blob/a3ce6f007597f14029e6b6f54676c34196aa050e/src/requests/utils.py#L533)\r\n\r\nI have checked RFC 2045, RFC 2616, RFC 7231, RFC 9110 and they all define a parameter as essentially `parameter = parameter-name \"=\" parameter-value`, so a parameter with no equals character is technically invalid (I think?).\r\n\r\nComparing what some other implementations do:\r\n[mimeparse](https://github.com/falconry/python-mimeparse) (their implementation is taken directly from deprecated/removed built-in [`cgi`](https://docs.python.org/3/library/cgi.html) module, so should match what built-in `cgi` module used to do):\r\n```python\r\n>>> from mimeparse import parse_mime_type\r\n>>> parse_mime_type(\"application/json; charset\")\r\n('application', 'json', {})\r\n```\r\nstdlib [`email.policy.EmailPolicy`](https://docs.python.org/3/library/email.policy.html) (tested using code from [this SO answer](https://stackoverflow.com/a/77225775)):\r\n```python\r\n>>> def parse_content_type(content_type):\r\n...     from email.policy import EmailPolicy\r\n...     header = EmailPolicy.header_factory('content-type', content_type)\r\n...     return (header.content_type, dict(header.params))\r\n...\r\n>>> parse_content_type(\"application/json; charset\")\r\n('application/json', {'charset': ''})\r\n```\r\nstdlib [`email.message.Message`](https://docs.python.org/3/library/email.message.html) (tested using code from [this SO answer](https://stackoverflow.com/a/75727619)):\r\n```python\r\n>>> from email.message import Message\r\n>>>\r\n>>> _CONTENT_TYPE = \"content-type\"\r\n>>>\r\n>>> def parse_content_type(content_type: str) -> tuple[str, dict[str,str]]:\r\n...     email = Message()\r\n...     email[_CONTENT_TYPE] = content_type\r\n...     params = email.get_params()\r\n...     # The first param is the mime-type the later ones are the attributes like \"charset\"\r\n...     return params[0][0], dict(params[1:])\r\n...\r\n>>> parse_content_type(\"application/json; charset\")\r\n('application/json', {'charset': ''})\r\n```\r\n\r\n(Also, checking those implementations, you can see that they are more correct about quoted strings -- matching quotes/unquoting -- but requests' simpler version of just splitting on \";\" and stripping any quote characters has been around for a long time and apparently not caused problems, so...)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2323154072/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "x11x",
                        "id": 28614156,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000785253185313195,
                        "severe_toxicity": 0.00011386824189685285,
                        "obscene": 0.0002006964205065742,
                        "threat": 0.00011179200373589993,
                        "insult": 0.00017444166587665677,
                        "identity_attack": 0.00013894819130655378
                    }
                }
            ]
        },
        "42": {
            "html_url": "https://github.com/psf/requests/issues/6582",
            "id": 2008770091,
            "number": 6582,
            "title": "\"Recommended Packages and Extensions\" page asyncio recommendations are outdated",
            "created_at": "2023-11-23T20:41:53Z",
            "updated_at": "2023-12-28T02:07:05Z",
            "closed_at": null,
            "body": "While looking for an asyncio compatible recommendation for requests, I stumbled on the [documentation](https://requests.readthedocs.io/en/latest/community/recommended/) provided by the project. It recommends Request-Threads, which does not seem to be actively developed (no new changes/releases in the past 5 years). txrequests is an alternative Twisted-based package that seems to be more recommended these days: https://pypi.org/project/txrequests/ .\r\n\r\nMoreover, requests.Async is not mentioned; this support was moved to https://pypi.org/project/gevent-requests/ (mentioned in History.md). [1]\r\n\r\n1. Note to other readers: gevent-requests is the library that requires gevent/greenlet and achieves asynchronous processing via green threads: it doesn't achieve this via native python asyncio coroutines.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "ngie-eign",
                "id": 1574099,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6582/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "43": {
            "html_url": "https://github.com/psf/requests/issues/6578",
            "id": 2000644097,
            "number": 6578,
            "title": "Weird behaviour with https and proxy authentication",
            "created_at": "2023-11-19T00:56:06Z",
            "updated_at": "2023-11-24T08:05:43Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\n\r\nrequests.get is getting weird with some combinations of dictionary keys and proxy authentication.\r\n\r\n## Expected Result\r\n```python\r\nprint(requests.get('https://google.com', proxies={\"https\" : 'https://user:pass@ip:port'}))\r\n```\r\nOutput:\r\n`<Response [200]>`\r\n<!-- What you expected. -->\r\n\r\n## Actual Result\r\nDoesn't run? (Maybe timeout)\r\nBut it somehow fixes itself with these changes\r\n```python\r\nprint(requests.get('https://google.com', proxies={\"http\" : 'http://user:pass@ip:port'}))\r\n```\r\n\r\nOutput:\r\n`<Response [200]>`\r\n<!-- What happened instead. -->\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nprint(requests.get('https://google.com', proxies={\"https\" : 'https://user:pass@ip:port'}))\r\n\r\nprint(requests.get('https://google.com', proxies={\"http\" : 'http://user:pass@ip:port'}))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.11\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010114f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n````\r\n    $ python --version\r\n    Python 3.10.11\r\n\r\n\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "sigscanner",
                "id": 121585704,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6578/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1818410004",
                    "id": 1818410004,
                    "created_at": "2023-11-20T08:00:39Z",
                    "updated_at": "2023-11-20T08:00:39Z",
                    "author_association": "NONE",
                    "body": "proxies im using are https capable",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1818410004/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigscanner",
                        "id": 121585704,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001838421099819243,
                        "severe_toxicity": 9.337724623037502e-05,
                        "obscene": 0.0002252725971629843,
                        "threat": 0.00011764381633838639,
                        "insult": 0.0002009509044000879,
                        "identity_attack": 0.0001449902047170326
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1818410170",
                    "id": 1818410170,
                    "created_at": "2023-11-20T08:00:47Z",
                    "updated_at": "2023-11-20T08:00:47Z",
                    "author_association": "NONE",
                    "body": "misclick",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1818410170/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigscanner",
                        "id": 121585704,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00689583970233798,
                        "severe_toxicity": 0.00010381886386312544,
                        "obscene": 0.0005091683706268668,
                        "threat": 0.00010634932550601661,
                        "insult": 0.0003466633497737348,
                        "identity_attack": 0.00017935721552930772
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1823711000",
                    "id": 1823711000,
                    "created_at": "2023-11-23T01:05:33Z",
                    "updated_at": "2023-11-23T01:05:33Z",
                    "author_association": "NONE",
                    "body": "its most likely that your proxies only support http protocol, it should work the way you have it, so its probably proxy issues.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1823711000/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "visions4k",
                        "id": 44182242,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006831829086877406,
                        "severe_toxicity": 0.0001180455437861383,
                        "obscene": 0.00017388717969879508,
                        "threat": 0.00013025470252614468,
                        "insult": 0.00017919414676725864,
                        "identity_attack": 0.0001420534390490502
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1825283669",
                    "id": 1825283669,
                    "created_at": "2023-11-24T08:05:42Z",
                    "updated_at": "2023-11-24T08:05:42Z",
                    "author_association": "NONE",
                    "body": "> proxies im using are https capable\r\n\r\n\r\n\r\n> its most likely that your proxies only support http protocol, it should work the way you have it, so its probably proxy issues.\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1825283669/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigscanner",
                        "id": 121585704,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008349931449629366,
                        "severe_toxicity": 0.00010792248940560967,
                        "obscene": 0.00017891210154630244,
                        "threat": 0.00012090150994481519,
                        "insult": 0.00017632667731959373,
                        "identity_attack": 0.0001375759020447731
                    }
                }
            ]
        },
        "44": {
            "html_url": "https://github.com/psf/requests/pull/6570",
            "id": 1988368738,
            "number": 6570,
            "title": "Document that Response.iter_lines is broken and should be avoided",
            "created_at": "2023-11-10T20:48:59Z",
            "updated_at": "2023-12-05T08:34:38Z",
            "closed_at": null,
            "body": "The `Response.iter_lines` method is seriously broken (it inserts fake blank lines in unpredictable places.)\n\nThe earliest report of this I've found is pull #2431 (January 2015).\n\nThe behavior was apparently fixed in the 3.0.0 branch, by pulls #3923 and #3984.  (I think #3923 fixes the `delimiter!=None` case and #3984 fixes the `delimiter=None` case.  But I haven't tested it.)\n\nThe problem was raised again in issues #3980, #4121, and #5540.\n\nPull #4629 attempted to partially fix the issue in the master branch, and was rejected.\n\nPersonally, I am skeptical that there is any benefit in preserving this broken behavior.  But folks who know better than I do have said that it needs to be maintained.\n\nAs long as this *isn't* fixed, people using the library should be informed that method is broken and they shouldn't use it.\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "bemoody",
                "id": 7748246,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6570/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "45": {
            "html_url": "https://github.com/psf/requests/pull/6568",
            "id": 1978580987,
            "number": 6568,
            "title": "Bug/6294 zero bytes files are chunked",
            "created_at": "2023-11-06T08:35:26Z",
            "updated_at": "2024-05-20T14:17:03Z",
            "closed_at": null,
            "body": "See bug #6294 for original bug report.\r\n\r\nThis PR provides a possible fix for this, reverting the change in #2896.\r\n\r\nThe change in #2896 definitely causes some bad side effects, since not all web servers handle \"chunked\" transfer encoding (i.e. some don't handle it, some don't handle it well).\r\n\r\n### Problem demonstration\r\n\r\nGiven a simple bottle application:\r\n```python\r\nfrom bottle import run, put, request, default_app\r\n\r\napp = default_app()\r\n\r\n@app.put(\"/\")\r\ndef receive_file():\r\n    upload = request.body.read()\r\n    for head, val in request.headers.items():\r\n        print(\"%-30s:\\t%s\" % (head, val))\r\n    clength = request.headers.get(\"Content-Length\", \"not-set\")\r\n    cencoding = request.headers.get(\"Transfer-Encoding\", \"not-set\")\r\n    return { 'size': len(upload), 'content-length': clength, 'transfer-encoding': cencoding }\r\n\r\nif __name__ == '__main__':\r\n    app.run(host='localhost', port=8880)\r\n```\r\n\r\nAnd a simple requests script:\r\n```python\r\nimport requests\r\nimport io\r\nempty_obj = io.BytesIO(b'')\r\nresp = requests.put('http://localhost:8880/', data=empty_obj)\r\nprint(resp.status_code)\r\nif resp.status_code == 200:\r\n    print(resp.json())\r\n```\r\n\r\n## Working Scenario\r\n\r\n```\r\n$ python server.py\r\nBottle v0.12.25 server starting up (using WSGIRefServer())...\r\nListening on http://localhost:8880/\r\nHit Ctrl-C to quit.\r\n\r\nContent-Length                :\t\r\nContent-Type                  :\ttext/plain\r\nHost                          :\tlocalhost:8880\r\nUser-Agent                    :\tpython-requests/2.31.0\r\nAccept-Encoding               :\tgzip, deflate, br\r\nAccept                        :\t*/*\r\nConnection                    :\tkeep-alive\r\nTransfer-Encoding             :\tchunked\r\n127.0.0.1 - - [03/Nov/2023 15:51:51] \"PUT / HTTP/1.1\" 200 65\r\n```\r\nTest script output:\r\n```\r\n200\r\n{'size': 0, 'content-length': '', 'transfer-encoding': 'chunked'}\r\n```\r\n\r\n## Failing Scenario\r\n```\r\n$ gunicorn -b localhost:8880 server:app\r\n[2023-11-03 15:52:05 +0100] [1326049] [INFO] Starting gunicorn 21.2.0\r\n[2023-11-03 15:52:05 +0100] [1326049] [INFO] Listening at: http://127.0.0.1:8880 (1326049)\r\n[2023-11-03 15:52:05 +0100] [1326049] [INFO] Using worker: sync\r\n[2023-11-03 15:52:05 +0100] [1326050] [INFO] Booting worker with pid: 1326050\r\n```\r\nTest script output:\r\n```\r\n400\r\n```\r\n\r\n### The Original Issue\r\n\r\nThe change causing this problem in the first place was due to failing to upload data read from a subprocess pipe.\r\n\r\nThis patch adds a check to `super_len` that avoids returning length 0 for file handles that are not regular files.",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "eivindt",
                "id": 1540378,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6568/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1960589924",
                    "id": 1960589924,
                    "created_at": "2024-02-23T00:55:56Z",
                    "updated_at": "2024-02-23T00:55:56Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "closing & reopening to trigger a new build",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1960589924/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014141552383080125,
                        "severe_toxicity": 9.599177428754047e-05,
                        "obscene": 0.00019156716007273644,
                        "threat": 0.00011100815754616633,
                        "insult": 0.00019128808344248682,
                        "identity_attack": 0.0001479281490901485
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1962347934",
                    "id": 1962347934,
                    "created_at": "2024-02-24T12:27:59Z",
                    "updated_at": "2024-02-24T12:27:59Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@eivindt would you be willing to fix the lint errors?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1962347934/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0029405539389699697,
                        "severe_toxicity": 8.825679105939344e-05,
                        "obscene": 0.000273078097961843,
                        "threat": 9.629725536797196e-05,
                        "insult": 0.00025452766567468643,
                        "identity_attack": 0.00015321429236792028
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1962365410",
                    "id": 1962365410,
                    "created_at": "2024-02-24T13:33:56Z",
                    "updated_at": "2024-02-24T13:33:56Z",
                    "author_association": "NONE",
                    "body": "Give me a couple of days and I'll fix them.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1962365410/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eivindt",
                        "id": 1540378,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008921500411815941,
                        "severe_toxicity": 0.00010987206042045727,
                        "obscene": 0.0001806657965062186,
                        "threat": 0.00012273811444174498,
                        "insult": 0.00018117089348379523,
                        "identity_attack": 0.000139444469823502
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1987265446",
                    "id": 1987265446,
                    "created_at": "2024-03-10T15:15:08Z",
                    "updated_at": "2024-03-10T15:15:08Z",
                    "author_association": "NONE",
                    "body": "Sorry for the delay, there were some windows specific issues I couldn't easily fix without a windows pc.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1987265446/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eivindt",
                        "id": 1540378,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006108519737608731,
                        "severe_toxicity": 0.00012393086217343807,
                        "obscene": 0.00018277378694619983,
                        "threat": 0.00012911246449220926,
                        "insult": 0.00017586072499398142,
                        "identity_attack": 0.00013894356379751116
                    }
                }
            ]
        },
        "46": {
            "html_url": "https://github.com/psf/requests/issues/6565",
            "id": 1971661689,
            "number": 6565,
            "title": "CA-certs bundles and requests.certs.where - Improved documentation",
            "created_at": "2023-11-01T04:09:52Z",
            "updated_at": "2024-10-04T16:45:49Z",
            "closed_at": null,
            "body": "I initially thought `requests.certs.where` (as well as `certifi.where`) returned the location of the cacert file _actually_ being used, and I could use it to verify that the correct file was loaded. I am not the only one to make this mistake: https://stackoverflow.com/a/42982144/735070.\r\n![Screenshot from 2023-11-01 05-05-56](https://github.com/psf/requests/assets/4488298/1ce95ea1-958a-445a-9792-e2aa9b53bbd3)\r\n\r\nI have realized though, that it simply return the path of the bundled cacert file that comes included with the library.\r\n\r\n### Demonstration of this behavior:\r\n\r\n    #test.py\r\n    import requests, certifi,os\r\n    print('os.environ.get(\"REQUESTS_CA_BUNDLE\") -> ',repr(os.environ.get(\"REQUESTS_CA_BUNDLE\")))\r\n    print('os.environ.get(\"CURL_CA_BUNDLE\")     -> ',repr(os.environ.get(\"CURL_CA_BUNDLE\")))\r\n    print('requests.cert.where())               -> ',repr(requests.certs.where()))\r\n    print('certifi.where())                     -> ',repr(certifi.where()))\r\n\r\nRunning test.py in shell with REQUESTS_CA_BUNDLE set:\r\n\r\n    $ REQUESTS_CA_BUNDLE=/home/jdoe/catest/my_cacert.pem python test.py\r\n    os.environ.get(\"REQUESTS_CA_BUNDLE\") ->  '/home/jdoe/catest/my_cacert.pem'\r\n    os.environ.get(\"CURL_CA_BUNDLE\")     ->  None\r\n    requests.cert.where())               ->  '/home/jdoe/.local/lib/python3.10/site-packages/certifi/cacert.pem'\r\n    certifi.where())                     ->  '/home/jdoe/.local/lib/python3.10/site-packages/certifi/cacert.pem'\r\n\r\n### Improve documentation - requests.certs.where-function\r\n\r\nCurrently `requests.certs.where.__doc__` returns null. How about\r\n\r\n_returns the path of the CA-certs bundle that is included with the requests package, ie not necessarily the bundle actually being used._\r\n\r\n### Improve documentation - How is CA-bundle chosen\r\n\r\nMaybe the simplest way of making this clear is to add a section with a list or decision tree that shows which file (if any) will be used as CA-certs bundle.\r\n\r\n\r\n### Add some way of getting the bundle _actually_ being used\r\n\r\nIn my case a static function, `requests.cacerts_loaded()`. I realize this may return a file different from the one being used, if the user specifies `verify` (and maybe its possible to change in other ways too). \r\n\r\n### Demonstration run on\r\n\r\n- certifi version: 2023.05.07\r\n- requests version: 2.25.1\r\n- Python 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "velle",
                "id": 4488298,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6565/reactions",
                "total_count": 2,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 1
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2394097501",
                    "id": 2394097501,
                    "created_at": "2024-10-04T16:45:49Z",
                    "updated_at": "2024-10-04T16:45:49Z",
                    "author_association": "NONE",
                    "body": "I was so confused when I set REQUEST_CA_BUNDLE and the where() functions didn't change.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2394097501/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kevinlinxc",
                        "id": 44324811,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005906431470066309,
                        "severe_toxicity": 0.0001255937822861597,
                        "obscene": 0.00018463855667505413,
                        "threat": 0.0001283216552110389,
                        "insult": 0.0001762562314979732,
                        "identity_attack": 0.0001391310361213982
                    }
                }
            ]
        },
        "47": {
            "html_url": "https://github.com/psf/requests/pull/6561",
            "id": 1966661607,
            "number": 6561,
            "title": "url param gets added when empty param is passed",
            "created_at": "2023-10-28T16:41:07Z",
            "updated_at": "2023-12-05T08:36:07Z",
            "closed_at": null,
            "body": "Have added the fix for the issue mentioned here - https://github.com/psf/requests/issues/6557\r\n\r\nSince empty lists, dicts, tuples aren't of none type they should be added in the url string. ",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "amkarn258",
                "id": 55189266,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6561/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "48": {
            "html_url": "https://github.com/psf/requests/issues/6557",
            "id": 1960808790,
            "number": 6557,
            "title": "URL parameter is added when the value is an empty string but not when it is an empty list",
            "created_at": "2023-10-25T08:11:38Z",
            "updated_at": "2023-11-16T11:25:04Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\nBoth an empty string `''` and an empty list `[]` are not of NoneType and are considered a falsy value and therefore should behave the same when being added as a URL parameter. But in requests when passing an empty string `''` as a parameter value the final URL contains the parameter but not when an empty list `[]` is passed as the value.\r\n\r\n## Expected Result\r\nWhen passing an empty list as parameter value, the final URL **should contain** the parameter.\r\n\r\n<!-- What you expected. -->\r\n\r\n## Actual Result\r\nWhen passing an empty list as parameter value, the final URL **does not contain** the parameter.\r\n\r\n<!-- What happened instead. -->\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nbase_url = 'https://jsonplaceholder.typicode.com/todos'\r\n\r\nparams = {'_limit': 5, 'id__in': ''}\r\nresponse = requests.get(base_url, params)\r\nprint(response.request.url)\r\n# Output: https://jsonplaceholder.typicode.com/todos?_limit=5&id__in=\r\n\r\nparams = {'_limit': 5, 'id__in': []}\r\nresponse = requests.get(base_url, params)\r\nprint(response.request.url)\r\n# Output: https://jsonplaceholder.typicode.com/todos?_limit=5\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.11\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"22.6.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.2\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010115f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.15\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "Lalee10",
                "id": 38792700,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6557/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1780468363",
                    "id": 1780468363,
                    "created_at": "2023-10-26T06:05:26Z",
                    "updated_at": "2023-10-26T06:05:26Z",
                    "author_association": "NONE",
                    "body": "Yes as observed this is the case when using any other empty datatype, except a **str()**, as it gives an empty string.\r\n\r\nFrom Documentation:\r\n*\\\" Note that any dictionary key whose value is None will not be added to the URL\u2019s query string. \\\"* \r\n\r\nBut as known, an empty list is not of None type, so i guess since it does not know what to do with empty datatypes it just treats then as None.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1780468363/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Krupakar-Reddy-S",
                        "id": 137398727,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009461977169848979,
                        "severe_toxicity": 0.0001027389953378588,
                        "obscene": 0.00020042086543980986,
                        "threat": 0.00010144848783966154,
                        "insult": 0.00018013858061749488,
                        "identity_attack": 0.00013161959941498935
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1785807904",
                    "id": 1785807904,
                    "created_at": "2023-10-30T18:25:39Z",
                    "updated_at": "2023-10-30T18:25:39Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Proposed a fix here - https://github.com/psf/requests/pull/6561",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1785807904/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "amkarn258",
                        "id": 55189266,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006864150636829436,
                        "severe_toxicity": 0.00011501538392622024,
                        "obscene": 0.00017548368487041444,
                        "threat": 0.00011346373503329232,
                        "insult": 0.00017724298231769353,
                        "identity_attack": 0.00014194809773471206
                    }
                }
            ]
        },
        "49": {
            "html_url": "https://github.com/psf/requests/pull/6553",
            "id": 1949696623,
            "number": 6553,
            "title": "docs(socks): same block as other sections",
            "created_at": "2023-10-18T13:00:02Z",
            "updated_at": "2023-10-18T19:07:48Z",
            "closed_at": null,
            "body": "strange formatting:\r\nhttps://docs.python-requests.org/en/latest/user/advanced/#socks",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "magsen",
                "id": 28842337,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6553/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1768421842",
                    "id": 1768421842,
                    "created_at": "2023-10-18T13:09:52Z",
                    "updated_at": "2023-10-18T13:09:52Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The current formatting looks correct to me. What looks wrong to you? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1768421842/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005602305172942579,
                        "severe_toxicity": 0.00012832409993279725,
                        "obscene": 0.00017963378923013806,
                        "threat": 0.0001301454467466101,
                        "insult": 0.00018050274229608476,
                        "identity_attack": 0.00014331561396829784
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1768889498",
                    "id": 1768889498,
                    "created_at": "2023-10-18T16:19:18Z",
                    "updated_at": "2023-10-18T16:19:18Z",
                    "author_association": "NONE",
                    "body": "i have some kind of strange underscore\r\n\r\n![image](https://github.com/psf/requests/assets/28842337/af8403bd-2ff9-4919-b0d8-49da2b0644de)\r\n\r\nIn a private firefox without dark theme\r\n![image](https://github.com/psf/requests/assets/28842337/103064f2-39f8-4baa-b3e5-9a942219bb5b)\r\n![image](https://github.com/psf/requests/assets/28842337/565692bd-9290-4a3e-b2c8-321f6cd038f0)\r\n\r\n***\r\n\r\nhttps://github.com/psf/requests/blob/main/docs/user/advanced.rst\r\n\r\nIn the rst preview you can see that this bash code block is not the same as the other bash code bloc\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1768889498/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "magsen",
                        "id": 28842337,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001383278169669211,
                        "severe_toxicity": 9.816649981075898e-05,
                        "obscene": 0.00020269164815545082,
                        "threat": 0.00010519607894821092,
                        "insult": 0.00019075260206591338,
                        "identity_attack": 0.00014429948350880295
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1768959145",
                    "id": 1768959145,
                    "created_at": "2023-10-18T16:52:27Z",
                    "updated_at": "2023-10-18T16:52:27Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I cannot replicate that on Firefox on macOS or Linux",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1768959145/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001010302803479135,
                        "severe_toxicity": 0.00010166007996303961,
                        "obscene": 0.00017972082423511893,
                        "threat": 0.00012099953892175108,
                        "insult": 0.00018328739679418504,
                        "identity_attack": 0.00014260144962463528
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1769096771",
                    "id": 1769096771,
                    "created_at": "2023-10-18T18:24:52Z",
                    "updated_at": "2023-10-18T18:24:52Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I cannot replicate that on Firefox on macOS or Linux.\n\nI would be willing to entertain a PR, however that adds sphinx-prompt to our docs dependencies and switches this to using `.. prompt::` instead because that's more correct ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1769096771/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006285497220233083,
                        "severe_toxicity": 0.00012268124555703253,
                        "obscene": 0.00017934455536305904,
                        "threat": 0.00013201188994571567,
                        "insult": 0.00017610924260225147,
                        "identity_attack": 0.00014263625780586153
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1769101924",
                    "id": 1769101924,
                    "created_at": "2023-10-18T18:28:32Z",
                    "updated_at": "2023-10-18T18:30:02Z",
                    "author_association": "MEMBER",
                    "body": "I am actually able to replicate this on macOS in Firefox 115.3.1esr (64-bit). It appears whitespace in these blocks are being replaced with `span` tags with the `w` CSS class from pygments. This adds a faint white (#f8f8f8) underline to each whitespace.\r\n\r\n<img width=\"327\" alt=\"Screenshot 2023-10-18 at 12 26 22 PM\" src=\"https://github.com/psf/requests/assets/5271761/249056bc-c256-4784-8d51-0128b9eca4e2\">\r\n\r\nI don't however immediately see why this is being added specifically for the bash codeblock. I'm fine moving to the simplified syntax (`::`) (or `.. prompt::` as Ian noted) in this case since the bash formatting doesn't materially change the output, but it would be interesting to understand why it's happening.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1769101924/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000687705643940717,
                        "severe_toxicity": 0.00011734243162209168,
                        "obscene": 0.0001878704788396135,
                        "threat": 0.00012390417396090925,
                        "insult": 0.0001747391652315855,
                        "identity_attack": 0.00013980195217300206
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1769155410",
                    "id": 1769155410,
                    "created_at": "2023-10-18T19:07:47Z",
                    "updated_at": "2023-10-18T19:07:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "To find out why it's happening I suspect we'll need a pygments bug to investigate.\n\nThe span doesn't change what you copy out of the text though ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1769155410/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008606320479884744,
                        "severe_toxicity": 0.0001059902278939262,
                        "obscene": 0.00017106629093177617,
                        "threat": 0.00011797441402450204,
                        "insult": 0.0001830797118600458,
                        "identity_attack": 0.0001412231067661196
                    }
                }
            ]
        },
        "50": {
            "html_url": "https://github.com/psf/requests/pull/6529",
            "id": 1896100712,
            "number": 6529,
            "title": "Update models.Response.json docstring to be clearer",
            "created_at": "2023-09-14T09:01:07Z",
            "updated_at": "2024-07-01T05:16:42Z",
            "closed_at": null,
            "body": null,
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "anupam-arista",
                "id": 118899211,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6529/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2037193697",
                    "id": 2037193697,
                    "created_at": "2024-04-04T13:16:17Z",
                    "updated_at": "2024-04-04T13:16:17Z",
                    "author_association": "NONE",
                    "body": "I know I'm not an admin, but this doc string change is a solid change could it be merged? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2037193697/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "achapkowski",
                        "id": 5131271,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006703249528072774,
                        "severe_toxicity": 0.00011815129255410284,
                        "obscene": 0.00017654099792707711,
                        "threat": 0.00012609153054654598,
                        "insult": 0.00018361395632382482,
                        "identity_attack": 0.00014263027696870267
                    }
                }
            ]
        },
        "51": {
            "html_url": "https://github.com/psf/requests/pull/6523",
            "id": 1888745855,
            "number": 6523,
            "title": "Pass response_kw to HTTPConnectionPool through HTTPAdapter.send",
            "created_at": "2023-09-09T13:36:06Z",
            "updated_at": "2023-09-16T12:02:39Z",
            "closed_at": null,
            "body": "### Summary\r\nThis PR adds kwargs arguments to `HTTPAdapter.send`, which it passes to `HTTPConnectionPool.urlopen` in urllib3.\r\n\r\n### Description\r\nAs discussed in #4956, urrllib3 recently changed the default value of `enforce_content_length` from `False` to `True`. The new default seems like a sane choice, but in some use cases the `Content-Length` header should not be enforced. To change the default behavior, urllib3 allows application code to set the `enforce_content_length` argument. As far as I know, `requests` does not have a way to pass this argument to urllib3.\r\n\r\nThe `HTTPConnectionPool.urlopen` method in urllib3 has the `**response_kw` kwargs argument to pass extra arguments down to the response parser. This PR adds a similar to argument to `HTTPAdapter.send`.\r\n\r\nWith this PR, users can override the `HTTPAdapter.send` method to pass extra arguments to `HTTPConnectionPool.urlopen`. For example, this enables users to explicitly set the `enforce_content_length`.\r\n\r\n### Example\r\n```Python\r\nimport requests\r\n\r\nfrom requests.adapters import HTTPAdapter\r\n\r\nclass EnforceContentLengthAdapter(HTTPAdapter):\r\n    def send(self, *args, **kwargs):\r\n        kwargs[\"enforce_content_length\"] = False\r\n        return super().send(*args, **kwargs)\r\n\r\ns = requests.Session()\r\ns.mount(\"http://\", EnforceContentLengthAdapter())\r\ns.mount(\"https://\", EnforceContentLengthAdapter())\r\n\r\nr = s.get(\"http://localhost:8080/\")\r\nprint(r.raw.enforce_content_length) # Returns False\r\n```",
            "author_association": "CONTRIBUTOR",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "joren485",
                "id": 7031489,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6523/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1715667686",
                    "id": 1715667686,
                    "created_at": "2023-09-12T12:52:29Z",
                    "updated_at": "2023-09-12T12:52:29Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hi @joren485 ,\r\n\r\nRequests is under a feature freeze. Further, even though this _may_ seem like a backwards compatible change, it in fact will likely cause issues for a good percentage of users if they are unware. Many people implement customer HTTPAdapters for various reasons and I'd estimate at least 50% copy the exact signature out of requests when they write the code and don't expect to need to update things after the fact. This effectively expands the signature in a way that isn't backwards compatible as now, someone may start using a library that has too permissive of a lower bound on requests with an adapter that requires this and it will cause confusing and unexpected errors in passing too many arguments. This will cost countless people an unnecessary amount of time trying to debug things.\r\n\r\nWith that in mind, I could see a potential benefit to adding a separate attribute on the HTTPAdapter that is not added to any function signature (i.e., not to `__init__`, `send`, etc.) and is pickled properly that is a dictionary of `urllib3_response_options`, e.g.,\r\n\r\n```py\r\nself.urllib3_response_options = {}\r\n```\r\n\r\nAs the default that could then be updated with `self.urllib3_response_options.setdefault(\"enforce_content_length\", True)`. This could then be used in https://github.com/psf/requests/blob/881281250f74549f560408e5546d95a8cd73ce28/src/requests/adapters.py#L485-L497 where I would create a copy of the dictionary and then override it with what we have in the kwargs to that call, and the explode (`**`) into the `urlopen` call.\r\n\r\nDoes that make sense to you?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1715667686/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001112057943828404,
                        "severe_toxicity": 0.00010277917317580432,
                        "obscene": 0.00019921960483770818,
                        "threat": 0.00011594697571126744,
                        "insult": 0.00018519202421884984,
                        "identity_attack": 0.00014357001055032015
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1716226006",
                    "id": 1716226006,
                    "created_at": "2023-09-12T18:31:09Z",
                    "updated_at": "2023-09-12T18:31:09Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@sigmavirus24\r\n\r\nThat definitely makes sense to me! I pushed a first version of your idea. Is this what you had in mind?\r\n\r\nIt would work like this:\r\n```Python\r\nimport requests\r\n\r\nfrom requests.adapters import HTTPAdapter\r\n\r\n\r\nclass EnforceContentLengthAdapter(HTTPAdapter):\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.urllib3_response_options.setdefault(\"enforce_content_length\", False)\r\n\r\n\r\ns = requests.Session()\r\ns.mount(\"http://\", EnforceContentLengthAdapter())\r\ns.mount(\"https://\", EnforceContentLengthAdapter())\r\n\r\nr = s.get(\"http://localhost:8080/\")\r\nprint(r.raw.enforce_content_length)\r\n```\r\n\r\nI am aware of the feature freeze, but I dot not consider this change a feature, but rather backwards compatibility as the default behavior of requests has changed. Is this PR allowed?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1716226006/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "joren485",
                        "id": 7031489,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000996406888589263,
                        "severe_toxicity": 0.00010364240006310865,
                        "obscene": 0.00019473605789244175,
                        "threat": 0.00010741468577180058,
                        "insult": 0.00017791740538086742,
                        "identity_attack": 0.00013625599967781454
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1716366655",
                    "id": 1716366655,
                    "created_at": "2023-09-12T20:18:50Z",
                    "updated_at": "2023-09-12T20:19:49Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@sigmavirus24 I implemented your suggestions.\r\n\r\nI removed the need for `self.urllib3_response_options.copy()` by providing `**self.urllib3_response_options` directly to `urlopen`, because it minimizes the code changes and looks cleaner imo. This way, user code is still not able to override the given arguments (and only provide new arguments like `enforce_content_length`), as providing duplicate arguments throws a `TypeError`. \r\n\r\nHowever, if you prefer the use of a separate dictionary with `self.urllib3_response_options.copy()`, I will happily change it back.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1716366655/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "joren485",
                        "id": 7031489,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006462784367613494,
                        "severe_toxicity": 0.00011815602192655206,
                        "obscene": 0.00018090542289428413,
                        "threat": 0.0001230566413141787,
                        "insult": 0.0001743003522278741,
                        "identity_attack": 0.00013821558968629688
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1722191787",
                    "id": 1722191787,
                    "created_at": "2023-09-16T09:50:20Z",
                    "updated_at": "2023-09-16T09:50:20Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@nateprewitt Thank you very much for your suggestions, I am happy to implement them. @sigmavirus24 do you agree with the suggested changes?\r\n\r\n> I understand the use case, although it's fairly straightforward to work around.\r\n\r\nCould you expand on this? The only way to work around the new `enforce_content_length` behavior, that I know of, is to monkey patch `urllib3`. Do you have a better workaround?\r\n\r\n\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1722191787/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "joren485",
                        "id": 7031489,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005534961819648743,
                        "severe_toxicity": 0.0001298704883083701,
                        "obscene": 0.00018819661636371166,
                        "threat": 0.00013158534420654178,
                        "insult": 0.0001762718748068437,
                        "identity_attack": 0.00014303532952908427
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1722210051",
                    "id": 1722210051,
                    "created_at": "2023-09-16T11:31:13Z",
                    "updated_at": "2023-09-16T11:31:13Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> The only way to work around the new enforce_content_length behavior, that I know of, is to monkey patch urllib3\n\nYou can inherit from the adapter and override the send method that you are modifying here.\n\nYou could also create a pool manager that sets this parameter and set it on the adapter. Specifically, a Pool manager accepts ConnectionPool kwargs and the Connection Pool accepts response kwargs.\n\nHonestly, it's probably best to update the adapter to pass this to how we create the pool manager now that we're talking about it. It will be far fewer copies and updates here and will look like how folks can already use this today ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1722210051/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007757808780297637,
                        "severe_toxicity": 0.00010991596354870126,
                        "obscene": 0.00018122134497389197,
                        "threat": 0.00012326697469688952,
                        "insult": 0.00017653327086009085,
                        "identity_attack": 0.0001378903107251972
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1722210210",
                    "id": 1722210210,
                    "created_at": "2023-09-16T11:32:06Z",
                    "updated_at": "2023-09-16T11:32:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Sorry for the twists here @joren485. I've been reviewing this entirely from my phone so much harder to review docs etc at the same time and make a better decision ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1722210210/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00058106699725613,
                        "severe_toxicity": 0.00012611389684025198,
                        "obscene": 0.00018201759667135775,
                        "threat": 0.00013574116746895015,
                        "insult": 0.00017792198923416436,
                        "identity_attack": 0.00013982420205138624
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1722215272",
                    "id": 1722215272,
                    "created_at": "2023-09-16T12:02:38Z",
                    "updated_at": "2023-09-16T12:02:38Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> You can inherit from the adapter and override the send method that you are modifying here.\r\n\r\nI wanted to prevent the need for such an override with this PR, as `HTTPAdapter.send` is quite a large method and overriding it to change a single call in the middle of the method would require manually copying any upstream changes.\r\n \r\n> You could also create a pool manager that sets this parameter and set it on the adapter. Specifically, a Pool manager accepts ConnectionPool kwargs and the Connection Pool accepts response kwargs.\r\n\r\nI do not see how this would work, as the `connection_pool_kw` kwargs set by `PoolManager._new_pool` are not used in `HTTPConnectionPool.urlopen` (or `HTTPConnectionPool._make_request`). `PoolManager` does not seem to have control over the arguments passed to `HTTPConnectionPool.urlopen`. Please correct me if I am wrong.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1722215272/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "joren485",
                        "id": 7031489,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008336452301591635,
                        "severe_toxicity": 0.0001093704195227474,
                        "obscene": 0.00018495078256819397,
                        "threat": 0.00012411631178110838,
                        "insult": 0.00017598268459551036,
                        "identity_attack": 0.00013756120461039245
                    }
                }
            ]
        },
        "52": {
            "html_url": "https://github.com/psf/requests/issues/6512",
            "id": 1863874236,
            "number": 6512,
            "title": "Requests are not retried when received body length is shorter than Content-Length",
            "created_at": "2023-08-23T19:11:31Z",
            "updated_at": "2024-07-01T16:42:59Z",
            "closed_at": null,
            "body": "When a server sends less bytes than indicated by Content-Length, we get a ChunkedEncodingError instead of retrying the request.\r\n\r\nurllib3 supports retrying requests in this situation by setting `preload_content=True`. When a user specifies `stream=True`, obviously, all bets are off: the response cannot be preloaded and therefore the request cannot be retried. However, even when `stream=False`, the response is still not preloaded and therefore the urllib3 retry mechanism in this situation is bypassed.\r\n\r\n---\r\n\r\nAs a background to this issue, I've been investigating rare failures in my CI builds during `pip install`. I believe this issue to be the proximate cause: pip makes some requests to PyPI, with `stream=False` and retries configured but still fails. \r\n\r\nIn the current version of pip (which has an out of date urllib3 package), pip falls victim to https://github.com/psf/requests/issues/4956 and fails to parse the PyPI metadata with a `JSONDecodeError`. Upgrading pip's urllib3 version results in a `ChunkedEncodingError` as below.\r\n\r\n## Expected Result\r\n\r\nThe request is retried according to the specified retry policy.\r\n\r\n## Actual Result\r\n\r\n`requests.exceptions.ChunkedEncodingError: ('Connection broken: IncompleteRead(10 bytes read, 26227 more expected)', IncompleteRead(10 bytes read, 26227 more expected))`\r\n\r\nBecause the response is not preloaded, urllib3 cannot retry the request, and requests has no retry functionality of its own.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\n\r\ns = requests.Session()\r\ns.mount(\"http://\", HTTPAdapter(max_retries=5))\r\n\r\nr = s.get('http://127.0.0.1:5000/test', stream=False)\r\n```\r\n\r\nI'm using an intentionally broken local server for testing. See [here](https://github.com/psf/requests/issues/4956#issuecomment-573325001) for an example.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.2.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.4.11-100.fc37.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000090\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.0.4\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\n## Proposed Patch\r\n\r\nI have a proposed patch which I believe fixes this problem. Unfortunately, my patch breaks a bunch of the tests (and probably also breaks backwards compatibility, in particular, this patch causes requests to start leaking urllib3 exceptions). On the off chance it's useful in coming up with a proper fix, here it is:\r\n\r\n```\r\ndiff --git a/src/requests/adapters.py b/src/requests/adapters.py\r\nindex eb240fa9..ce01c2a5 100644\r\n--- a/src/requests/adapters.py\r\n+++ b/src/requests/adapters.py\r\n@@ -489,8 +489,8 @@ class HTTPAdapter(BaseAdapter):\r\n                 headers=request.headers,\r\n                 redirect=False,\r\n                 assert_same_host=False,\r\n-                preload_content=False,\r\n-                decode_content=False,\r\n+                preload_content=not stream,\r\n+                decode_content=not stream,\r\n                 retries=self.max_retries,\r\n                 timeout=timeout,\r\n                 chunked=chunked,\r\ndiff --git a/src/requests/models.py b/src/requests/models.py\r\nindex 44556394..f43f1bf8 100644\r\n--- a/src/requests/models.py\r\n+++ b/src/requests/models.py\r\n@@ -893,6 +893,8 @@ class Response:\r\n \r\n             if self.status_code == 0 or self.raw is None:\r\n                 self._content = None\r\n+            elif getattr(self.raw, \"data\", None) is not None:\r\n+                self._content = self.raw.data\r\n             else:\r\n                 self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\r\n \r\ndiff --git a/tests/test_lowlevel.py b/tests/test_lowlevel.py\r\nindex 859d07e8..39a1175e 100644\r\n--- a/tests/test_lowlevel.py\r\n+++ b/tests/test_lowlevel.py\r\n@@ -4,6 +4,7 @@ import pytest\r\n from tests.testserver.server import Server, consume_socket_content\r\n \r\n import requests\r\n+from requests.adapters import HTTPAdapter\r\n from requests.compat import JSONDecodeError\r\n \r\n from .utils import override_environ\r\n@@ -426,3 +427,33 @@ def test_json_decode_compatibility_for_alt_utf_encodings():\r\n     assert isinstance(excinfo.value, requests.exceptions.RequestException)\r\n     assert isinstance(excinfo.value, JSONDecodeError)\r\n     assert r.text not in str(excinfo.value)\r\n+\r\n+\r\n+def test_retry_truncated_response():\r\n+    data = b\"truncated before retry\"\r\n+    response_lengths = [len(data), 9]\r\n+\r\n+    def retry_handler(sock):\r\n+        request_content = consume_socket_content(sock, timeout=0.5)\r\n+\r\n+        response = (\r\n+            b\"HTTP/1.1 200 OK\\r\\n\"\r\n+            b\"Content-Length: %d\\r\\n\\r\\n\"\r\n+            b\"%s\"\r\n+        ) % (len(data), data[:response_lengths.pop()])\r\n+        sock.send(response)\r\n+\r\n+        return request_content\r\n+\r\n+    close_server = threading.Event()\r\n+    server = Server(retry_handler, wait_to_close_event=close_server, requests_to_handle=2)\r\n+\r\n+    s = requests.Session()\r\n+    s.mount(\"http://\", HTTPAdapter(max_retries=2))\r\n+\r\n+    with server as (host, port):\r\n+        url = f\"http://{host}:{port}/\"\r\n+        r = s.get(url, stream=False)\r\n+        assert r.status_code == 200\r\n+        assert r.content == data\r\n+        close_server.set()\r\n```",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "zweger",
                "id": 15678442,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6512/reactions",
                "total_count": 4,
                "+1": 4,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1767007768",
                    "id": 1767007768,
                    "created_at": "2023-10-17T19:11:46Z",
                    "updated_at": "2023-10-17T19:12:55Z",
                    "author_association": "NONE",
                    "body": "I really want to work on this issue, but I can't reproduce the bug. For me, the exception ChunkedEncodingError is not raised if the server sends less bytes than indicated by Content-Length. Here is my test case  \r\n\r\n`import requests\r\nfrom requests.exceptions import ChunkedEncodingError\r\n\r\ndef test_chunked_encoding_error():\r\n    # Create a mock server response with an incorrect Content-Length header\r\n    response = requests.Response()\r\n    response.status_code = 200\r\n    response.headers['Content-Length'] = '10000000'  # Set an incorrect length\r\n\r\n    # Simulate the content stream\r\n    def mock_stream():\r\n        yield b'Chunk 1'\r\n        yield b'Chunk 2'\r\n        yield b'Chunk 3'\r\n\r\n    response._content = b''.join(mock_stream())\r\n\r\n    # Attempt to read the content\r\n    try:\r\n        response.content\r\n    except ChunkedEncodingError:\r\n        print(\"Failed with ChunkedEncodingError\")\r\n    else:\r\n        assert False, \"Expected a ChunkedEncodingError\"\r\n\r\nif __name__ == \"__main__\":\r\n    test_chunked_encoding_error()`",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1767007768/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "alain-khalil",
                        "id": 66105100,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009081261814571917,
                        "severe_toxicity": 0.00010635642684064806,
                        "obscene": 0.00019611457537394017,
                        "threat": 0.00011237159924348816,
                        "insult": 0.00017952796770259738,
                        "identity_attack": 0.00013797647261526436
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1769673876",
                    "id": 1769673876,
                    "created_at": "2023-10-19T00:19:00Z",
                    "updated_at": "2023-10-19T00:19:00Z",
                    "author_association": "NONE",
                    "body": "Hi, I'm having the same problem, with urllib v2.0.6, requests v2.31.0.\r\n\r\nSpecifically I am getting this when communicating with a gitlab server:\r\nrequests.exceptions.ChunkedEncodingError: ('Connection broken: IncompleteRead(0 bytes read, 2 more expected)', IncompleteRead(0 bytes read, 2 more expected))\r\n\r\nWhen I pin urllib3 back to v1.26.16, the problem goes away.\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1769673876/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nerdvegas",
                        "id": 1632842,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009945380734279752,
                        "severe_toxicity": 0.00010266064782626927,
                        "obscene": 0.00019712674838956445,
                        "threat": 0.00010973917960654944,
                        "insult": 0.0001827535597840324,
                        "identity_attack": 0.00013745433534495533
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1773155405",
                    "id": 1773155405,
                    "created_at": "2023-10-20T17:51:45Z",
                    "updated_at": "2023-10-20T17:51:45Z",
                    "author_association": "NONE",
                    "body": "Hi @alain-khalil , thanks for taking a look at this issue. The test case included in my proposed patch in the issue description is sufficient to reproduce this issue: `requests.exceptions.ChunkedEncodingError: ('Connection broken: IncompleteRead(9 bytes read, 13 more expected)', IncompleteRead(9 bytes read, 13 more expected))`.\r\n\r\nI was originally testing on commit 2ee5b0b0 but can confirm it still works on main (839a8ede). I think the way you're setting `response._content` in your test case is just too dissimilar to how requests works in normal operation to trigger the bug.\r\n\r\n@nerdvegas , there were some changes in urllib3 2.x (https://github.com/urllib3/urllib3/pull/2514) which causes urllib3 to (correctly) raise an error when the read comes up short. The previous behavior was to read the truncated data, but (incorrectly) not raise an error.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1773155405/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zweger",
                        "id": 15678442,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006803915603086352,
                        "severe_toxicity": 0.00011483872367534786,
                        "obscene": 0.00018732047465164214,
                        "threat": 0.00011464778799563646,
                        "insult": 0.0001731609954731539,
                        "identity_attack": 0.00013622974802274257
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1850035495",
                    "id": 1850035495,
                    "created_at": "2023-12-11T13:00:29Z",
                    "updated_at": "2023-12-11T13:00:29Z",
                    "author_association": "NONE",
                    "body": "Maybe try annother code part like:\r\n\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\nfrom urllib3.util.retry import Retry\r\n\r\nretry_strategy = Retry(\r\n    total=5,\r\n    backoff_factor=0.1,\r\n    status_forcelist=[500, 502, 503, 504],\r\n    method_whitelist=[\"GET\"],\r\n)\r\n\r\nadapter = HTTPAdapter(max_retries=retry_strategy)\r\n\r\ns = requests.Session()\r\ns.mount(\"http://\", adapter)\r\n\r\nr = s.get('http://127.0.0.1:5000/test', stream=False)\r\n\r\nprint(r)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1850035495/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "georgruetsche",
                        "id": 11926760,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012205609818920493,
                        "severe_toxicity": 9.782346023712307e-05,
                        "obscene": 0.0002085662417812273,
                        "threat": 0.00010583278344711289,
                        "insult": 0.00019200530368834734,
                        "identity_attack": 0.00013939847121946514
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2200606379",
                    "id": 2200606379,
                    "created_at": "2024-07-01T16:42:51Z",
                    "updated_at": "2024-07-01T16:42:51Z",
                    "author_association": "NONE",
                    "body": "@zweger did you ever find a workaround for this?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2200606379/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jameschristopher",
                        "id": 13838056,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0018483925377950072,
                        "severe_toxicity": 8.589328353991732e-05,
                        "obscene": 0.00020055370987392962,
                        "threat": 9.375966328661889e-05,
                        "insult": 0.0002118409174727276,
                        "identity_attack": 0.0001522862003184855
                    }
                }
            ]
        },
        "53": {
            "html_url": "https://github.com/psf/requests/pull/6504",
            "id": 1848697407,
            "number": 6504,
            "title": "Add minimum PEP518 build-system specification",
            "created_at": "2023-08-13T18:43:48Z",
            "updated_at": "2023-08-13T18:43:48Z",
            "closed_at": null,
            "body": "We've been missing the minimum PEP 518 build specification in our pyproject.toml. This PR adds that, along with an explicit backend to remove any ambiguity for alternative build tools.",
            "author_association": "MEMBER",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "nateprewitt",
                "id": 5271761,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6504/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "54": {
            "html_url": "https://github.com/psf/requests/issues/6455",
            "id": 1708743145,
            "number": 6455,
            "title": "Incorrect behavior with schemeless-dotless host:port URLs",
            "created_at": "2023-05-13T21:19:31Z",
            "updated_at": "2023-05-18T15:27:53Z",
            "closed_at": null,
            "body": "URLs of the form `hostname:8080` (with no scheme, with \"hostname\" not containing any dots) can be used to refer to the netloc \"hostname:8080\"\r\n\r\n`requests.utils.prepend_scheme_if_needed` should correctly prepend the `new_scheme` when provided with such a URL.\r\n\r\n## Expected Result\r\n\r\nthe prepended-scheme URL should be \"http://hostname:8080\"\r\n\r\n## Actual Result\r\n\r\nthe prepended-scheme URL is \"hostname:///8080\" (e.g. treating the \"hostname\" part as the scheme, no host, no port, and \"8080\" as the path)\r\n\r\nI extended the `test_prepend_scheme_if_needed` to demonstrate this behavior (see  https://github.com/psf/requests/compare/main...itamaro:requests:schemeless-hostname-anad-port-bug)\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nfrom requests.utils import prepend_scheme_if_needed\r\nprint(prepend_scheme_if_needed(\"hostname:8080\", \"http\"))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"22.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.30.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.0.2\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 11,
            "state": "open",
            "user": {
                "login": "itamaro",
                "id": 290943,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6455/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1546779267",
                    "id": 1546779267,
                    "created_at": "2023-05-14T00:50:51Z",
                    "updated_at": "2023-05-14T00:50:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "How does this realistically affect users who aren't using utils which aren't part of the public API? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1546779267/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006656677578575909,
                        "severe_toxicity": 0.00011793888552347198,
                        "obscene": 0.00017839050269685686,
                        "threat": 0.00012467298074625432,
                        "insult": 0.00017746705270837992,
                        "identity_attack": 0.00014024657139088959
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1546792137",
                    "id": 1546792137,
                    "created_at": "2023-05-14T02:31:32Z",
                    "updated_at": "2023-05-14T02:31:32Z",
                    "author_association": "NONE",
                    "body": "> How does this realistically affect users who aren't using utils which aren't part of the public API?\r\n\r\nah sorry, I went down a rabbit hole tracking down the issue to this that I forgot to mention the user-facing scenario!\r\n\r\none scenario is when using such a URL as a proxy:\r\n\r\n```python\r\nresponse = requests.get(\r\n    \"http://www.example.com\",\r\n    proxies={\"http\": \"myproxy:8080\"},\r\n    ....\r\n)\r\n```\r\n\r\nthis used to work (with requests 2.25.1 and python 3.8), but with requests 2.27.1 it fails with\r\n\r\n```python\r\n...\r\nrequests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host.\r\n```\r\n\r\nanother scenario (less critical) is difference in exceptions (`MissingSchema` vs `InvalidSchema`):\r\n\r\n```python\r\nresponse = requests.get(\"www.example.com\")\r\n...\r\nMissingSchema: Invalid URL 'www.example.com': No scheme supplied. Perhaps you meant http://www.example.com?\r\n```\r\n\r\nvs\r\n\r\n```python\r\nresponse = requests.get(\"hostname:8080\")\r\n...\r\nrequests.exceptions.InvalidSchema: No connection adapters were found for 'hostname:8080'\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1546792137/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "itamaro",
                        "id": 290943,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010567059507593513,
                        "severe_toxicity": 0.00010197610390605405,
                        "obscene": 0.00019991242152173072,
                        "threat": 0.00010948623094009236,
                        "insult": 0.00017949510947801173,
                        "identity_attack": 0.00013639208918903023
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1546868277",
                    "id": 1546868277,
                    "created_at": "2023-05-14T10:44:47Z",
                    "updated_at": "2023-05-14T10:44:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So the last two aren't ever supposed to work. Would it be nice if they raised the same exception? Sure. But never should we be guessing scheme. We never document that schemeless URLs are supported in that way.\n\nThe proxy case may take investigation. But I suspect we documented a breaking change there. I vaguely remember other people complaining ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1546868277/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005805837572552264,
                        "severe_toxicity": 0.00012514834816101938,
                        "obscene": 0.00018063548486679792,
                        "threat": 0.0001265631290152669,
                        "insult": 0.0001747061760397628,
                        "identity_attack": 0.00014309411926660687
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1547043921",
                    "id": 1547043921,
                    "created_at": "2023-05-15T00:23:21Z",
                    "updated_at": "2023-05-15T00:23:21Z",
                    "author_association": "NONE",
                    "body": "\n> The proxy case may take investigation. But I suspect we documented a breaking change there. I vaguely remember other people complaining \n\nYes, it's definitely the proxy case that brought me here and is causing me issues. The other one is just a nit.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1547043921/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "itamaro",
                        "id": 290943,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005854057380929589,
                        "severe_toxicity": 0.00012460321886464953,
                        "obscene": 0.00018351490143686533,
                        "threat": 0.00012450653593987226,
                        "insult": 0.00017427607963327318,
                        "identity_attack": 0.00014220115554053336
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1548275368",
                    "id": 1548275368,
                    "created_at": "2023-05-15T17:39:03Z",
                    "updated_at": "2023-05-15T17:39:03Z",
                    "author_association": "MEMBER",
                    "body": "Hi @itamaro, this was an [intentional change](https://github.com/psf/requests/pull/5917) in 2.27.0 due to [this bug](https://bugs.python.org/issue43882) in CPython. The behavior of `urlparse` fundamentally changed from Python 3.9 onwards which makes supporting schemeless URIs in this case fairly difficult. The decision was made to move to urllib3's `url_parse` function, which is the behavior you're seeing now to limit blast radius with the the standard library updates.\r\n\r\nThis is why you're seeing an error now that wasn't occurring previously.\r\n\r\n**Python 3.10**\r\n```\r\nPython 3.10.5 (main, Jul  1 2022, 17:28:53) [Clang 13.0.0 (clang-1300.0.27.3)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from urllib.parse import urlparse\r\n>>> urlparse('hostname:8080')\r\nParseResult(scheme='hostname', netloc='', path='8080', params='', query='', fragment='')\r\n```\r\n**Python 3.7**\r\n```\r\nPython 3.7.9 (default, Aug 11 2022, 16:47:29) \r\n[Clang 13.0.0 (clang-1300.0.27.3)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from urllib.parse import urlparse\r\n>>> urlparse('hostname:8080')\r\nParseResult(scheme='', netloc='', path='hostname:8080', params='', query='', fragment='')\r\n>>> \r\n```\r\n\r\nThe only reason this happened to work previously is we did [this (arguably bad) shuffle](https://github.com/psf/requests/blob/302225334678490ec66b3614a9dddb8a02c5f4fe/requests/utils.py#L996-L1002) of replacing the netloc with the path for this case. That honestly should have never been done but was there to work around the oddities of url parsing in the standard library.\r\n\r\nSo the short of the story is all version of Requests _will_ be affected by this as soon as you upgrade beyond Python 3.8. We have no reliable way to control this from Requests side anymore. I would recommend updating your usage to ensure proxies are passed with a scheme to avoid any surprises later.\r\n\r\n**Requests 2.25.1 behavior on Python 3.10**\r\n```\r\n>>> response = requests.get(\r\n...     \"http://www.example.com\",\r\n...     proxies={\"http\": \"myproxy:8080\"},\r\n...)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/requests/adapters.py\", line 412, in send\r\n    conn = self.get_connection(request.url, proxies)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/requests/adapters.py\", line 309, in get_connection\r\n    proxy_manager = self.proxy_manager_for(proxy)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/requests/adapters.py\", line 193, in proxy_manager_for\r\n    manager = self.proxy_manager[proxy] = proxy_from_url(\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/urllib3/poolmanager.py\", line 492, in proxy_from_url\r\n    return ProxyManager(proxy_url=url, **kw)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.5/lib/python3.10/site-packages/urllib3/poolmanager.py\", line 429, in __init__\r\n    raise ProxySchemeUnknown(proxy.scheme)\r\nurllib3.exceptions.ProxySchemeUnknown: Not supported proxy scheme myproxy\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1548275368/reactions",
                        "total_count": 3,
                        "+1": 2,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008782093646004796,
                        "severe_toxicity": 0.00011024504783563316,
                        "obscene": 0.00020435935584828258,
                        "threat": 0.00011025429557776079,
                        "insult": 0.0001780467136995867,
                        "identity_attack": 0.00013826266513206065
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1548778506",
                    "id": 1548778506,
                    "created_at": "2023-05-16T00:06:42Z",
                    "updated_at": "2023-05-16T00:06:42Z",
                    "author_association": "NONE",
                    "body": "thanks for the background @nateprewitt !\r\n\r\n> I would recommend updating your usage to ensure proxies are passed with a scheme to avoid any surprises later.\r\n\r\ntotally agree this is the preferred solution, but it's not going to be easy doing that in our monorepo with millions of lines of code... (e.g. the entire Meta Python codebase \ud83d\ude2c)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1548778506/reactions",
                        "total_count": 3,
                        "+1": 0,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 2
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "itamaro",
                        "id": 290943,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005743693909607828,
                        "severe_toxicity": 0.00012444528692867607,
                        "obscene": 0.00018035598623100668,
                        "threat": 0.00012904709728900343,
                        "insult": 0.00017471400497015566,
                        "identity_attack": 0.00014127725444268435
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1552175358",
                    "id": 1552175358,
                    "created_at": "2023-05-17T22:38:48Z",
                    "updated_at": "2023-05-17T22:38:48Z",
                    "author_association": "NONE",
                    "body": "Guys should I try solving this or is this redundant?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1552175358/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "turingnixstyx",
                        "id": 62857931,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001479682861827314,
                        "severe_toxicity": 9.32392431423068e-05,
                        "obscene": 0.0001877897302620113,
                        "threat": 9.649102139519528e-05,
                        "insult": 0.00020147925533819944,
                        "identity_attack": 0.00014801901124883443
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1552177765",
                    "id": 1552177765,
                    "created_at": "2023-05-17T22:42:27Z",
                    "updated_at": "2023-05-17T22:42:52Z",
                    "author_association": "MEMBER",
                    "body": "@turingnixstyx I don't think there's anything to be solved. Requests cannot support schemeless proxies in Python 3.9+. It's an unfortunately tedious change for end-users, but we can't do much about the behavior in the standard library. What we're doing now is providing a consistent behavior across all Python versions.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1552177765/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006132245762273669,
                        "severe_toxicity": 0.00012130868708482012,
                        "obscene": 0.00018182402709499002,
                        "threat": 0.0001256795512745157,
                        "insult": 0.00017537394887767732,
                        "identity_attack": 0.00014107425522524863
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1552185463",
                    "id": 1552185463,
                    "created_at": "2023-05-17T22:52:10Z",
                    "updated_at": "2023-05-17T22:55:26Z",
                    "author_association": "NONE",
                    "body": "Hey @nateprewitt actually really wanted to contribute to something (starting out as a young backend developer in python) . If there's any feature/bug I can work on?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1552185463/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "turingnixstyx",
                        "id": 62857931,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006096096476539969,
                        "severe_toxicity": 0.00012099020386813208,
                        "obscene": 0.0001755472767399624,
                        "threat": 0.00012709101429209113,
                        "insult": 0.00018176976300310344,
                        "identity_attack": 0.0001420485641574487
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1552187021",
                    "id": 1552187021,
                    "created_at": "2023-05-17T22:54:48Z",
                    "updated_at": "2023-05-18T15:27:46Z",
                    "author_association": "MEMBER",
                    "body": "@turingnixstyx, there's unfortunately nothing well curated for entry development on Requests at the moment. You may consider taking a look at https://github.com/urllib3/urllib3 or another Python project. Specifically, identifying issues that are labeled \"Help Wanted\", \"Contributor Friendly\" or \"Good First Issue\" is a good place to begin.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1552187021/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005547608598135412,
                        "severe_toxicity": 0.00013116955233272165,
                        "obscene": 0.00018808466847985983,
                        "threat": 0.0001327094651060179,
                        "insult": 0.00017669492808636278,
                        "identity_attack": 0.00014417186321225017
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1552578948",
                    "id": 1552578948,
                    "created_at": "2023-05-18T06:56:27Z",
                    "updated_at": "2023-05-18T15:27:53Z",
                    "author_association": "NONE",
                    "body": "  @nateprewitt appreciate your response ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1552578948/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "turingnixstyx",
                        "id": 62857931,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008628744981251657,
                        "severe_toxicity": 0.00010868237586691976,
                        "obscene": 0.00019355115364305675,
                        "threat": 0.00012523226905614138,
                        "insult": 0.00017667841166257858,
                        "identity_attack": 0.000135461101308465
                    }
                }
            ]
        },
        "55": {
            "html_url": "https://github.com/psf/requests/pull/6454",
            "id": 1704948479,
            "number": 6454,
            "title": "Add os.PathLike support for cert files",
            "created_at": "2023-05-11T02:36:35Z",
            "updated_at": "2023-08-17T02:49:29Z",
            "closed_at": null,
            "body": "## Summary\r\n\r\nAdds support for any path-like object, including `pathlib.Path`. See https://github.com/psf/requests/issues/5936#issuecomment-931758148 for more details.\r\nSome things have changed since the linked issue was created, so it may be a good time to add support now.\r\n\r\nFixes #5936 ",
            "author_association": "CONTRIBUTOR",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "steveberdy",
                "id": 86739818,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6454/reactions",
                "total_count": 3,
                "+1": 2,
                "-1": 1,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1545643613",
                    "id": 1545643613,
                    "created_at": "2023-05-12T12:08:44Z",
                    "updated_at": "2023-05-12T12:08:44Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "My main concern is that if we add support here, folks will want us to support it everywhere else we accept file-like objects and that's not exactly tenable for us to support",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1545643613/reactions",
                        "total_count": 2,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 2,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005983436712995172,
                        "severe_toxicity": 0.00012523573241196573,
                        "obscene": 0.00017860801017377526,
                        "threat": 0.0001352748367935419,
                        "insult": 0.00017336319433525205,
                        "identity_attack": 0.0001420147018507123
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1546424385",
                    "id": 1546424385,
                    "created_at": "2023-05-12T23:18:45Z",
                    "updated_at": "2023-05-12T23:18:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Maybe it doesn't have to be advertised, and we can add in path-like support slowly where it is feasible.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1546424385/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "steveberdy",
                        "id": 86739818,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005640733288601041,
                        "severe_toxicity": 0.0001348751684417948,
                        "obscene": 0.0001938457426149398,
                        "threat": 0.00013699989358428866,
                        "insult": 0.0001824854116421193,
                        "identity_attack": 0.00014714007556904107
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1593896175",
                    "id": 1593896175,
                    "created_at": "2023-06-16T00:56:08Z",
                    "updated_at": "2023-06-16T00:56:08Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Should I close this?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1593896175/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "steveberdy",
                        "id": 86739818,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0018614517757669091,
                        "severe_toxicity": 9.608243271941319e-05,
                        "obscene": 0.0002093187067657709,
                        "threat": 0.00011496833758428693,
                        "insult": 0.00018864864250645041,
                        "identity_attack": 0.00015948053624015301
                    }
                }
            ]
        },
        "56": {
            "html_url": "https://github.com/psf/requests/issues/6453",
            "id": 1703537523,
            "number": 6453,
            "title": "Error when requesting URL which contains emojis or certain characters",
            "created_at": "2023-05-10T09:50:51Z",
            "updated_at": "2023-06-22T09:28:36Z",
            "closed_at": null,
            "body": "When performing a GET request to a URL which contains emojis, a redirection occurs in which the `location` header also contains emojis. From the stacktrace error I believe there's an error when handling redirects if the URL contains certain characters or emojis on it, but further investigation could yield better results.\r\n\r\nThis is the URL in question: `https://www.nulled.to/topic/512174-income-ocean-\ufffd-hf-leak-\ufffd\u2600\ufe0f/`\r\n\r\nIt can be found on a forum page, where the source HTML contains these emojis and characters:\r\n`https://www.nulled.to/forum/9-tutorials-guides-ebooks-etc/page-779?prune_day=100&sort_by=Z-A&sort_key=start_date&topicfilter=all`\r\n\r\n_Note that when making the request to the URL, since it's a Cloudflare protected forum, an error 403 can happen in which case, the error mentioned further below **does not happen**. That's why it leads me to believe the error happens only when a redirection occurs, as the `location` header which requests is trying to fetch also contains emojis and then, the encoding error happens._\r\n\r\n## Expected Result\r\n\r\nMaking the request to the site successfully and returning HTML source code.\r\n\r\n## Actual Result\r\n\r\nAn error was raised:\r\nUnicodeDecodeError: 'utf-8' codec can't decode bytes in position 48-50: invalid continuation byte\r\n\r\nThis is the stacktrace:\r\n\r\n```bash\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n  return session.request(method=method, url=url, **kwargs)\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 542, in request\r\n  resp = self.send(prep, **send_kwargs)\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 677, in send\r\n  history = [resp for resp in gen]\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 677, in <listcomp>\r\n  history = [resp for resp in gen]\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 150, in resolve_redirects\r\n  url = self.get_redirect_target(resp)\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 116, in get_redirect_target\r\n  return to_native_string(location, 'utf8')\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/_internal_utils.py\", line 25, in to_native_string\r\n  out = string.decode(encoding)\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nurl = \"https://www.nulled.to/topic/512174-income-ocean-\ufffd-hf-leak-\ufffd\u2600\ufe0f/\"\r\nr=requests.get(url)\r\nprint(r.content)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.0-22-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "emilio-cea",
                "id": 23096738,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6453/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1541970599",
                    "id": 1541970599,
                    "created_at": "2023-05-10T11:10:49Z",
                    "updated_at": "2023-05-10T11:10:49Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This is related to #3969. We're trying to use utf8 to handle the redirect URL but the translation from bytes to utf8 string is what's failing.\n\nI suspect there's something other than emoji in that url",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1541970599/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008878294611349702,
                        "severe_toxicity": 0.00010365001071477309,
                        "obscene": 0.0001890267594717443,
                        "threat": 0.00010785747144836932,
                        "insult": 0.0001751355011947453,
                        "identity_attack": 0.00013456057058647275
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1541975263",
                    "id": 1541975263,
                    "created_at": "2023-05-10T11:12:33Z",
                    "updated_at": "2023-05-10T11:12:33Z",
                    "author_association": "NONE",
                    "body": "> \r\n\r\nIt seems like the replacement character: U+FFFD REPLACEMENT CHARACTER ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1541975263/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "emilio-cea",
                        "id": 23096738,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008917030645534396,
                        "severe_toxicity": 0.00010246660531265661,
                        "obscene": 0.00018824526341632009,
                        "threat": 0.00011176152474945411,
                        "insult": 0.00018221938807982951,
                        "identity_attack": 0.00013132036838214844
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1542012276",
                    "id": 1542012276,
                    "created_at": "2023-05-10T11:26:15Z",
                    "updated_at": "2023-05-10T11:26:15Z",
                    "author_association": "NONE",
                    "body": "And I've seen there are a bunch of issues related to this. The best solution would be to know what encoding the browser does and try to replicate it because on Firefox for instance, it is encoded with something different than UTF8 and no redirections happen but alas, I have not been able to find what encoding is being used",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1542012276/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "emilio-cea",
                        "id": 23096738,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005791326402686536,
                        "severe_toxicity": 0.0001267306215595454,
                        "obscene": 0.00018462605657987297,
                        "threat": 0.00013297649275045842,
                        "insult": 0.00017482116527389735,
                        "identity_attack": 0.0001430571428500116
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1575285669",
                    "id": 1575285669,
                    "created_at": "2023-06-04T00:26:07Z",
                    "updated_at": "2023-06-04T00:26:07Z",
                    "author_association": "NONE",
                    "body": "We could fix this by maintaining a list of common encoding types. Wrap the relevant piece of code that is responsible for encoding in a try/ except block.  Loop through every encoding type in the array and try to encode the given URL with it. Whatever works will break the loop, and the code will be pretty much bug free.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1575285669/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "harris-ahmad",
                        "id": 109756673,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000733293651137501,
                        "severe_toxicity": 0.00011352974979672581,
                        "obscene": 0.0001717841805657372,
                        "threat": 0.00012907417840324342,
                        "insult": 0.00017960296827368438,
                        "identity_attack": 0.0001403122441843152
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1575304937",
                    "id": 1575304937,
                    "created_at": "2023-06-04T01:10:31Z",
                    "updated_at": "2023-06-04T01:10:31Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Well depending upon what part of the world you're in determines the most common encodings you might encounter. So we'll be looping for a while which would drastically hurt performance. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1575304937/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000645859690848738,
                        "severe_toxicity": 0.00012372140190564096,
                        "obscene": 0.00017382798250764608,
                        "threat": 0.00014150483184494078,
                        "insult": 0.0001869796251412481,
                        "identity_attack": 0.0001430484262527898
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1602313290",
                    "id": 1602313290,
                    "created_at": "2023-06-22T09:28:35Z",
                    "updated_at": "2023-06-22T09:28:35Z",
                    "author_association": "NONE",
                    "body": "Try to reproduce the error with the same and different URL which contains emojis or certain characters, seems there is a issue with given URL. I can able to get the content with the different URL containing emojis with specific encoding type.\r\n\r\n```\r\nimport requests\r\nurl = \"https://www.example.com/\ud83c\udf1femoji-example\ud83c\udf1f\"\r\nr = requests.get(url)\r\ncontent = r.content.decode('ISO-8859-1')\r\nprint(content)\r\n\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1602313290/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "MozarM",
                        "id": 105074,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008807845297269523,
                        "severe_toxicity": 0.00010694648517528549,
                        "obscene": 0.00018185557564720511,
                        "threat": 0.00011724131763912737,
                        "insult": 0.00017901789397001266,
                        "identity_attack": 0.0001375442952848971
                    }
                }
            ]
        },
        "57": {
            "html_url": "https://github.com/psf/requests/pull/6400",
            "id": 1654506335,
            "number": 6400,
            "title": "Codespell: workflow, config + 1 typo fixed",
            "created_at": "2023-04-04T20:06:32Z",
            "updated_at": "2023-11-22T22:07:49Z",
            "closed_at": null,
            "body": "My humble contribution to keep requests so typos free as it is proudly is now.",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "yarikoptic",
                "id": 39889,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6400/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1823568500",
                    "id": 1823568500,
                    "created_at": "2023-11-22T22:07:48Z",
                    "updated_at": "2023-11-22T22:07:48Z",
                    "author_association": "NONE",
                    "body": "rebased/updated (config now to pyproject.toml). Typo was already fixed independently in d3d504436ef0c2ac7ec8af13738b04dcc8c694be",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1823568500/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "yarikoptic",
                        "id": 39889,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0016566653503105044,
                        "severe_toxicity": 9.615255839889869e-05,
                        "obscene": 0.0002596127742435783,
                        "threat": 0.00010851492697838694,
                        "insult": 0.0002119427517754957,
                        "identity_attack": 0.00014071808254811913
                    }
                }
            ]
        },
        "58": {
            "html_url": "https://github.com/psf/requests/pull/6388",
            "id": 1636884109,
            "number": 6388,
            "title": "Document that a Response is a context manager",
            "created_at": "2023-03-23T05:37:45Z",
            "updated_at": "2023-03-23T05:37:45Z",
            "closed_at": null,
            "body": "This is mentioned in the Advanced Usage page, but not in the API reference. It is mentioned in the API reference for `Session`, so it seems reasonable that it should be mentioned for `Response` as well. It looks like this capability was added in GH-4137, which made the change to the former documentation but not the latter.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Hawk777",
                "id": 365236,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6388/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "59": {
            "html_url": "https://github.com/psf/requests/pull/6383",
            "id": 1631149287,
            "number": 6383,
            "title": "Clarify docs for multipart file uploads",
            "created_at": "2023-03-19T22:54:22Z",
            "updated_at": "2023-06-02T14:29:09Z",
            "closed_at": null,
            "body": "This makes some documentation changes that clarify the `files` argument of `requests.post()` et. al.\r\n\r\n## Be more precise when we say \"multiple files\"\r\n\r\nThe `files` argument can either be a dict:\r\n\r\n```python\r\nfiles = {\r\n    \"field_1\": file_1,\r\n    \"field_2\": file_2,\r\n}\r\n```\r\n\r\nOr a list of tuples:\r\n\r\n```python\r\nfiles = [\r\n    (\"field_1\": file_1),\r\n    (\"field_2\": file_2),\r\n]\r\n```\r\n\r\nA few places implied that to \"upload multiple files in one request,\" you had to use the list-of-tuples syntax. But the dict syntax supports multiple files just fine. The added power in the list-of-tuples syntax seems to be that you can upload multiple files *to the same form field.* So, we now say that.\r\n\r\n## Update the reference docs\r\n\r\nThe API reference documentation did not completely describe what values were acceptable for `files`, and in some cases it was misleading.\r\n\r\n* It didn't mention the list-of-tuples syntax at all.\r\n* It said you could pass a \"dictionary of `'name': file-like-objects`\". The pluralization there makes it look like you can do something like `{\"name\": [file_1, file_2]}`, but that's not correct.\r\n* It didn't describe what you were allowed to provide as a \"`fileobj`\". (It can be a file-like object, or `str` contents, or `bytes` contents.)\r\n* It said `name` to refer to the value that Requests uses as the form field name. This could be misconstrued as the file name. [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578) and other examples within Requests call it the \"field name\" or \"form field name.\"\r\n\r\nMy sources for these changes:\r\n\r\n* The existing [POST a Multipart-Encoded File](https://github.com/psf/requests/blob/7f694b79e114c06fac5ec06019cada5a61e5570f/docs/user/quickstart.rst?plain=1#L300) section.\r\n* The existing [POST Multiple Multipart-Encoded Files](https://github.com/psf/requests/blob/7f694b79e114c06fac5ec06019cada5a61e5570f/docs/user/advanced.rst?plain=1#L391) section.\r\n* [Request's type stubs](https://github.com/python/typeshed/blob/8080e491d2fa92b1b1390c87fac23a1a38dcd919/stubs/requests/requests/sessions.pyi#L91).\r\n\r\nIt's difficult to describe this API concisely because it accepts so many different input shapes, and these additions do make the rendered docs feel a bit crowded.",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "SyntaxColoring",
                "id": 3236864,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6383/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1475491911",
                    "id": 1475491911,
                    "created_at": "2023-03-20T01:45:43Z",
                    "updated_at": "2023-03-20T01:45:43Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The primary benefit of using list of tuples is that order is preserved which is important for some servers that expect fields in a very specific ordering which is way more than it should be",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1475491911/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012316650245338678,
                        "severe_toxicity": 9.57856755121611e-05,
                        "obscene": 0.00019220038666389883,
                        "threat": 0.00011349510896252468,
                        "insult": 0.00019350022193975747,
                        "identity_attack": 0.00013890647096559405
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1476279889",
                    "id": 1476279889,
                    "created_at": "2023-03-20T13:55:43Z",
                    "updated_at": "2023-03-20T13:55:43Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 Thanks. To be clear, do you think some of this PR needs to change to reflect that, or were you just commenting to lend context?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1476279889/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SyntaxColoring",
                        "id": 3236864,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005421883543021977,
                        "severe_toxicity": 0.00013207748997956514,
                        "obscene": 0.0001885436213342473,
                        "threat": 0.00013072129513602704,
                        "insult": 0.00017979092081077397,
                        "identity_attack": 0.00014466857828665525
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1573833813",
                    "id": 1573833813,
                    "created_at": "2023-06-02T14:29:09Z",
                    "updated_at": "2023-06-02T14:29:09Z",
                    "author_association": "NONE",
                    "body": "Bump. Are any changes needed for this?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1573833813/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SyntaxColoring",
                        "id": 3236864,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006699953810311854,
                        "severe_toxicity": 0.00011644669575616717,
                        "obscene": 0.00018111079407390207,
                        "threat": 0.0001233658695127815,
                        "insult": 0.00018024751625489444,
                        "identity_attack": 0.0001378005399601534
                    }
                }
            ]
        },
        "60": {
            "html_url": "https://github.com/psf/requests/issues/6377",
            "id": 1618801708,
            "number": 6377,
            "title": "test_zipped_paths_extracted fails if test file has been modified since last run",
            "created_at": "2023-03-10T11:07:01Z",
            "updated_at": "2023-03-10T11:07:01Z",
            "closed_at": null,
            "body": "If you run `python -m pytest tests/test_utils.py -ktest_zipped_paths_extracted` this test will pass normally. If you run it again, it will pass again.\r\n\r\nIf, however, you make any modifications to the file, the test will now fail and keep failing:\r\n\r\n```       assert filecmp.cmp(extracted_path, __file__)\r\nE       AssertionError: assert False\r\nE        +  where False = <function cmp at 0x7f4ea6d4dab0>('/tmp/test_utils.py', '/home/david/project-reducer/scratch/requests/tests/test_utils.py')\r\nE        +    where <function cmp at 0x7f4ea6d4dab0> = filecmp.cmp\r\n```\r\nThe reason for this is that the last time the test ran, the contents of `__file__` were written to `/tmp/test_utils.py` and when `extract_zipped_paths` is next called, it doesn't overwrite the existing file, so the filecmp fails because it's now comparing against the old version of the file.\r\n\r\n## Expected Result\r\n\r\nThe test should run successfully when modifications to the file are made.\r\n\r\n## Actual Result\r\n\r\nModifications to the test file that are unrelated to the test in question cause it to fail.\r\n\r\n## Reproduction Steps\r\n\r\n```bash\r\npython -m pytest tests/test_utils.py -ktest_zipped_paths_extracted\r\necho -n '# modification' >> tests/test_utils.py\r\npython -m pytest tests/test_utils.py -ktest_zipped_paths_extracted\r\n```\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.1.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.0.1\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.8\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.15.90.1-microsoft-standard-WSL2\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.2\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.14\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "DRMacIver",
                "id": 28623,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6377/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "61": {
            "html_url": "https://github.com/psf/requests/pull/6347",
            "id": 1574264336,
            "number": 6347,
            "title": "Use context manager to open files",
            "created_at": "2023-02-07T12:45:21Z",
            "updated_at": "2023-11-29T14:03:11Z",
            "closed_at": null,
            "body": "In the documentation for `POST a Multipart-Encoded File` the example code opens the file inline but never closes it. This leaves the file open until the script ends. It is better to use a context manager even in example code.\r\n\r\nOriginal:\r\n```\r\n>>> url = 'https://httpbin.org/post'\r\n>>> files = {'file': open('report.xls', 'rb')}\r\n\r\n>>> r = requests.post(url, files=files)\r\n>>> r.text\r\n```\r\n\r\nReplace with:\r\n```\r\n>>> url = 'https://httpbin.org/post'\r\n>>> with open('report.xls', 'rb') as fd:\r\n...     files = {'file': fd}\r\n\r\n...     r = requests.post(url, files=files)\r\n...     r.text\r\n```",
            "author_association": "CONTRIBUTOR",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "RichieB2B",
                "id": 1461970,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6347/reactions",
                "total_count": 2,
                "+1": 1,
                "-1": 1,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1831838342",
                    "id": 1831838342,
                    "created_at": "2023-11-29T12:50:51Z",
                    "updated_at": "2023-11-29T12:50:51Z",
                    "author_association": "NONE",
                    "body": "I've just got bitten by this example, and was just about to create a PR for this too \ud83d\ude03 \r\n\r\n(Maybe\r\n```python\r\n    ...     r = requests.post(url, files=multiple_files)\r\n    ...     r.text\r\n```\r\ncould be\r\n```python\r\n    ...     r = requests.post(url, files=multiple_files)\r\n    ... \r\n    >>> r.text\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1831838342/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lpaladin",
                        "id": 10812968,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006929529481567442,
                        "severe_toxicity": 0.00011774414451792836,
                        "obscene": 0.0001950175646925345,
                        "threat": 0.00011872727918671444,
                        "insult": 0.0001751506788423285,
                        "identity_attack": 0.0001369617530144751
                    }
                }
            ]
        },
        "62": {
            "html_url": "https://github.com/psf/requests/issues/6344",
            "id": 1560963030,
            "number": 6344,
            "title": "Cookies returned in Set-Cookie header not added to RequestsCookieJar ",
            "created_at": "2023-01-28T18:31:30Z",
            "updated_at": "2023-08-01T17:38:48Z",
            "closed_at": null,
            "body": "I am making a post request where the response object has a 'Set-Cookie' with cookie data when inspecting response.headers, but where response.cookies has an empty cookie jar.\r\n\r\nMy request contains a number of parameters which I am reproducing here, but I doubt the issue has to do with the parameters passed:\r\n\r\n```response = requests.post(url, headers=headers, cookies=cookies, data=data, allow_redirects=False)```\r\n\r\nI suspect that the cookies returned in the header might contain non-standard syntax or are too long. I have tried logging in to the site in question using both Firefox and Chrome with Javascript off. Both browsers store the cookies for the response in question and submit the cookies for subsequent requests to the site in question.\r\n\r\n## Expected Result\r\n\r\nMy response object contains the following headers. I have edited a few alphanumeric characters in the values for safety reasons, but in terms of length and syntax nothing has been touched:\r\n\r\n    response.headers\r\n    >> {'Cache-Control': 'no-cache,no-store', 'Pragma': 'no-cache', 'Expires': 'Thu, 01 Jan 1970 00:00:00 GMT', 'Location': '/', 'Set-Cookie': '.AspNetCore.Correlation.jF47v6lTv_fiF9L6IoIRm_NyIwGokyQGecjNK4J6Qyc=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/signin-oidc; secure; samesite=none; httponly, .AspNetCore.OpenIdConnect.Nonce.CfDJ8N0wv-Ekr1hBgNlqS3YOmQRnE85Vk8rRFKjF8vB02JU-Q7_OtSCXPp_ukzPNIjKavJA13Ndwb9b7dDzR82gSyrHRa6edkcAUq4WxoL8KIz7ZkSN0BY0Fi6BPPDjZT-tog2HzormhD982Lioo2hYSu1oh6UHBHoVMwrEQfLxN54ySXY45aE2p-TmjBbSI4_LpLpodpubI46HtsrBX_h0x9Qys7bRitwhjX9aH4zHd9hxAWwZ9NQbyfKl7uAxEr8rs5dsz5y410uiMrlwEfPJKnCM=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/signin-oidc; secure; samesite=none; httponly, .AspNetCore.Cookies.V2=chunks-2; domain=; path=/; secure; samesite=lax; httponly, .AspNetCore.Cookies.V2C1=CfDJ8N0wv-Ekr1hBgNlqS3YOmQRfOKeY0UmP1Odn0-2suN0E5YV2JDz7dlW5ZIRp2WEOVpjLDknFkmvAxZrV7zy8Mz7wJerKsjKXvlm37iIoM8CmkvXXug4_BFXiPJtPPLa4GDaMlh7MdIf_i2wavk9OrDxlyQi0LVFNURifPuL1-AQne1MpbiOshDP7Ap71SKh9FiNiY4bzGe8LJfPBCMGU-k-CXNz3WlRuKM6I6WuuPZ-F_6mbL1s9E4ecdvqLNhthnOgHzyNZtlfZoYaJSSGQQonQXKo0cI1Png7Kh6RRaGBa43b39XgilTDHPqwsUgYzSuaUBhJ2vW0MfYckMKKsrVK77jVg5oEKqpCCBOvQ4mkYWgIQ6v4TdtLT3IwLp_V_NcovbybhDlWmWfZIGqvPN7jqKcmrYD00blVCKtmUSQh1qF4cuy458Tk64gAp7rcwQQ6m0ye84iGJDuzXBe_qqoUOLiVqVTmZiSENuH-9_9ltF5gnp9IdPHsLFbQqtr8ahlKnyvmRjQSEbpNBSf1N0xga83ZfLeQTRKop-qLiQW4wTNHtJlTIJAuYGF-yuUmHApo-45yOh5qN7naiXejfG0oFP-adnRS9mUu4hErwzM3_QhORBvXjPsSlK-PNoNvNpsqwFq69Z321x4qwSrdBnUd0W7SphPh0tMCurcg4AHSY2uMRX9QXwL8dEGvtvBhF3Omt_g14rhYMoeNDKegTvRFGG_q6DUdf_t9Jn4rhw3uxfC9UUIUfYKsbLlWvr6_Bz4cSu1H287nRCeIONQFjTCnR2C1DFwFaeOwip5GYKeJGJbVlu5nCx4X1rdIhuTpko83IvQaAYP5okESCGm215bST0higylflnG0uChRgTyI6ABusBKLyHYVeBTuqZkF-GebWSoD2iLp8SoNZ8GVfvCQMbEwotPTfiycMG3dfI_03h9X3rJD8AHruOFwJsaly4xxorXwKlbALJ_Ym4jLISaJJEjJ3CpIE_6pch32cxQ-t3GvnduCdfkc3oFRB2cakuW_W5-Bqj3wyF6mqNzfy9rwslGNOrkPiLCcCqbq4KjvzXIYPOw-eP7iPU8OO_a7TJsTOX_QIgMEWuufdxNlA8okiNL-9dqGee3rOrwQpCxr2vWUu29dSisVZwQtQF0Bbn3gAyPtHS3lL0pSeRjupVpC4BMZZzYUdy3oy1TYASBT2uIp9SbvnYd2j65xNutTtgONLY_Zf9p4KewFRRfnZzttX02YFt3yjRsa6IGqUaDMtpy9KaKN9nk_IhrWbTpqwkYYAtrsKpwNoJfyIT2WAJAE6NbrqGbLxNqJBHYDnJRY2yCon0dmHFzzKp5YWPVabopHEtHV6OcpX_0zH0Dt_1Lz61FDHJiQcPg0yCr63q8lzku5MDt8mgrTJoWF4MYr9Bg4R-dzTOBVCaCBytfH2k18IdImmWRjthQR1sBsgyQjh6LeeY4lDClfqmgGEs_dOofsQAc6QcQN2VdD7o3TZR5drOPk2zLsVv25mGs9f9rKM5rMWcHAdGmZ5kzucxPN9S7WbuxR3Iw_BXVx0lgR1aw88jLcWDiC6EmOD07l43EDLxt8Jq3ZARfXxcvVOnaY5Rg9pu1U7ex2WSkowzIRo6XXhe1I-NuFVjZq5wE-GP3NoQznhYbZEF2sMYwvKm7nDArt8TcFbxXy_ZUudiiRQ8zU89m4rzlaSQdyz6qDmx2sYUU61RirfSZDsdhZKtC4_nXRVb-GdfJJDAIpwYwqcoEETodgmrjBa1Vw1uxbdA0F5GnU_pMRrep1hywy9SidcMmeqvCTCkThqaiZ-3DV2RVaLn8vugggtZtAxpxE0POUfEVxmTfZQKZsQ9Ec57AEsJhMsfN7gJJyocjm9j1-GKzrplor76zy3DcxoaQSCZ7pfUG7cIxEVFhQD_cKdSldHnHfAK6S3TYmi7Whn-Y10aANTLlZDzgKkpYugMjpq1RqPE7NfOT-mChe9Wda0lpWh44cxgHA6FUAu1KGfTl-EGg6frYHuYSgoMl3cmDaLJPme2SlrYdjr0rKoM3kWlWFEf9YxstbGgoGoLqSG6A2BJuiRaq5nxT3lLkUinaeqFs42YzeRAouTRrdJhSvVwIU6EEZeDeC6GXl7lC2U_EDdejgBMnANf-uSntMENJF8N4_p4YInxhG-AKLYJRK15MTMVUjg-Qir43SHB02sBbKyDPltr4Ripm5KVnRORahPfVMH8HsYwRc4CSyyebl-Nyl6RajQdVBP2OzT6iFAhCyNbWckkoIhzGtP9HF2v_ilyh4iqEakJnuKzDdicNi0f0LE2-GPo9td4NrFQSePz9wRkvqbsePq6nLlVeljYwtjagPlS6T-y0xAKOceQH-wOmehidWsx__yLytKL9QMXWykdDGrPyB6EarA-BqySWDWIKr0VgQiy8XcAxdJgWltvA3X7qGLYnWO9DmyWovAYt60H7V0pXDESkr8BKnklrVk4ALzEnCWvY1jY-39pxqiAsFKjKDoxFRUSp7zThjRTvPZ5LoNE3BAZU0zHv5ZTNca-qFgwEaMNgD0OmCdPE3VflBxb4_No4Md-LsezU_m4nZvwv3QbmQ4wgMSmIBFJ_JJzjVSo6bJcIdrrNiIQsYbCVIDGb2ZlTSqnBtBlze3MEYhCdBIJWsOyWSTOMygtH5aQ5D4yP4W1k_9eNNP-s9RdwRGvFfuFNO5T8FDZgWKYGUnhtRuhAIALbzIlZuSjd11qNxVtXtEtHMbWoYGHQqjVlvodTEAXVyA5-G-MjSBZzBO5b2mrDAvlKrHT0s8qAii9GBDM4Hrjhts6Q4zuCqV-34GrovkEKVokNDuSotRPycjCdeOLQDHtWsBy9VK_3jrxlSqTq2RHHpKhgeURd6--cjIjX9gMkUc3NRj1zCRkF4_LsGLQcaIkybZjUP4Fh1G9viOqJYlZGlkLQMV1vIIIPN6uFRAVz_QwKbK00R1OAS2HiqTP8dMD_6S4jYNKSbyFBku6bZG5GkG2NxefJx5Y9fFnX7AkzKOK9GNbcYqO9g5uv_yqFEtH0tYpjtumVRcU8lTUQoVZJdC1I12qDfGZ5KOIWOZmnS_IA-rDUYFp2IYtOyLuNvFVIyiOMRKGlTo5i1nAZXK-dF_kAoiIz9SmJa5q_uBliyo_G1iyNcCECtK_B3C4YmFYAOKDiUcStIiPo5DQjRe_94dr2Q-D4RPnxHrE1jKh9SbZpDLHserbTUGXwyHnO0wmoZRrrLleV8bzG2x2KJJyDBKwfXn5MKN51_DesTY95Ek7o-PEJTtAwTFchweH1DbEogvTn7uPJZwkU30ez3XsIJLEFvmXI8Vz0S7tvstpzg0SdtOEcFSkiRT1ONyC1k2fq8CTVH8quVXEmVXbwrSh1K_AH_kc9gMtrPmcIxjnekvDS1-O8HzufgAz8N6fWg4JyLSAn-MlnMfBYGiFNRcJxic2yr6ypGwALcDCHPRsjj-1Hm50LiTSi-FUpTVSuKpnmkt_ECmWVbt86OdfR88j76Pj0f_y3Usa9kq8AL0d8gRzXnxq-73_3pTa71KlGrwPdKbMU04XX6xBsMyMPXDX_Ahh29TlUTLkBDQW_YgTbLL16mOt4s8mVl79zb9yM6zDuSZQ6DL4LuPRSvOushld390_85f2RND0z_yDAB44QXtghPHOM1oyUI3obpnhKp-1canAdsFR6truMIjDceN1IImqXgWzjMzN106wJjadsFyWc5qbZfvpHUSiwNLJDYgwHQI-dUs2mbdNcyotCWmvzUxRoDvJwWXNX4b7FBmfIsZEeqkt3vOs1F5Xz6bXM5-XwQUELdK5m18hfCkhZ2CEhaLd7Nwn-1bQpvjbHg4f0ftMPYxGnSFsePWOFmaUQgUOmE9qr2EgHmWzRe837KWHsqAW3N89TKmlrxecbf3ekxsuqKm7GHHQyzGOz2eHkI6M_k5Ix0eGLN6-E4Gywpbvxfgqgtkv_2cMKuYJtp; domain=; path=/; secure; samesite=lax; httponly, .AspNetCore.Cookies.V2C2=wQS0WKB4ajMPd7QaJarvKMBSR6cvj4d80LSzHJEe1GXtS49K9t2HHcEYjBOG4rtkA4tzE5ZRzuY0hbxxi9jLF1CDzsE7_jG6eCWPVpkNITF-vteDH52CYywJi-RHZ68Yq7UFNCYlf8dw8U9irplfv33IDTt_-1Uy3JcB4DPYYp0wPZAuZAg3GzvnJB6T2LXcxJ-P7a8gwV2Tz0w2BAmbUaD1gL4Jq2abwgkE3NqGDyKsfISega78J9jLgaZvyBFQ86yetjuaPuCZ-ZiM3CPyiIg3Bvv15FK0sGi6blVKxfSsf_RMYxNptMgn39Xh5idQYxW4GwMIvojANiufWmAhNr959CiRm-dVaYjs4FBPG7CwyYf5RSFFoR1bMYv_moTbmct0ttAAY2zv6IifJyEDt7bkrL0dQkI8vAH868hG06huqd8ihFpi0GUyinx1Qgp1LakCesausD8B_cHSNmzYXReQn1Ttu8vCD8T4mLXtBW-J535ybMlKnv49LiIzUG41HLzhkRqqpgst-7hGFIeZUcbM3Gs6J1MkSsEJx8StFxSddn3apbZx2nT9429j4Rq1jk-4SBgOt1y7fTcAknLPMl9aoSbTL7mfIG8yqZuvzJMKWxy0jhtkpfa0lpHnk8bf6ZToQlJInvksRKRmbKTWGEKhSEobN3ONmM_zT1KUf64O6JHj95uh6_xooguHRuQhVnV4N1uIZodzBm-_N_SvAPt3U0qvcWJ7WJykc5B8kKSNz9Dk3nWzSEfXygd88r-aV_3bLIZf1kM6qzB8wd9zEZasb9ud6lIosoQx_riquJxkh4PjRkxKjOvZp9ESaPTISeNBc1tHC-UEy5UglJ95sQ6os7bO7YBz5lXcvoH4kFTj4D-h_DFq3wdQ-hFFiUSuNafF0Vs0vwQmq1er9MVeLmyrEs8mO1M6MsExJ0UIB2jG4qcEc0YVtOaayEXAsQU_02zHJyV96IuXOzh3bYx6K6ztHvECl0XfMjgRFLtAiyByf0zRGWxxf_lfKJMKW2CY1HWcieaaaUsnMQbXSXlCPuEVnnisRTH3eVgjHsP5Vz3uuVJ_e5ZBDVpvuwBuVcinxLKIfaCJjooQKk3Hxwu04cC0OmUOf9NXWzRuWEX-UkXxEE8SiaLzzDFlawHBTRDWD2WNC_4zP_oGI6y9AgM-h3iY8MWApimSUxKClBl9mhmgABM0q7UTApAYr5gkaGxl7nqcEj0wjSk6q0pyV78_OAU4E6c2w0LEOPvlCvdVulMe8T9-x3P37zWzTwNv0s-kJ62KfNqBPuLmzNti9qQObw9TQtOYVGEG1jnemgHSjPggcE5YEN4SnOsdgoI7IKNogzE4_3_zVTsv0pZ-Uhj56guc5G9gOEjDITTigm-6sFvsAIgf4Id3lRdoUmtyW1LhpIh2r87XLPaAPNvBpSHIapWRr7R3uPfqunMvcXagRbOtfHoTCdKq8JClybnonwR6nYTK6tnVXRTPfvLzC2jyWP2YbsNvV0zKLcB3iOhgf; domain=; path=/; secure; samesite=lax; httponly', 'X-Content-Type-Options': 'nosniff', 'X-Robots-Tag': 'noindex, nofollow', 'Strict-Transport-Security': 'max-age=31536000; includeSubDomains', 'Content-Security-Policy': \"report-uri https://csp-report.browser-intake-datadoghq.eu/api/v2/logs?dd-api-key=pubd9330f91e9b3979f9a62f277730740cb&dd-evp-origin=content-security-policy&ddsource=csp-report&ddtags=env%3aproduction%2cversion%3a58610%2cservice%3aDinero.Frontend;default-src 'none';script-src *.chargebee.com *.chargebeestatic.com *.adyen.com connect.facebook.net www.google.com googleads.g.doubleclick.net www.googleadservices.com www.google-analytics.com www.googletagmanager.com ajax.googleapis.com maps.googleapis.com *.linkedin.com snap.licdn.com bat.bing.com 'self' *.dinero.dk *.workbox.dk 'unsafe-eval' 'unsafe-inline' trackcmp.net https://cdneu.net/app.js https://storage.googleapis.com/snowplow-cto-office-tracker-bucket/2.15.0/sp.js analytics.twitter.com static.ads-twitter.com js.userflow.com disutgh7q0ncc.cloudfront.net *.zopim.com *.zendesk.com *.zdassets.com;style-src *.chargebee.com 'self' *.dinero.dk *.workbox.dk data: 'unsafe-inline' js.userflow.com;img-src www.facebook.com www.google.dk www.google.com stats.g.doubleclick.net www.google-analytics.com www.googletagmanager.com *.googleapis.com maps.googleapis.com *.ggpht.com maps.gstatic.com *.linkedin.com bat.bing.com 'self' *.dinero.dk *.workbox.dk data: blob: *.visma.com cb-prod-eu-c1-invoice-logos.s3.eu-central-1.amazonaws.com gallery.mailchimp.com www.partner-ads.com analytics.twitter.com t.co js.userflow.com cdn.nordicapigateway.com nagpublic.blob.core.windows.net *.zopim.com *.zopim.io;font-src 'self' *.dinero.dk *.workbox.dk data: *.zopim.com;child-src 'none';connect-src *.algolia.net https://*.browser-intake-datadoghq.eu dawa.aws.dk www.facebook.com stats.g.doubleclick.net www.google-analytics.com *.oribi.io bat.bing.com 'self' dinero.dk *.dinero.dk *.workbox.dk ws: wss: *.visma.com https://cdneu.net/app.js https://capture-api.eu.autopilotapp.com/ js.userflow.com *.wootric.eu wootric-eligibility.herokuapp.com *.zopim.com *.zopim.io *.zdassets.com wss://*.zopim.com wss://dinero.zendesk.com;worker-src blob:;media-src *.zopim.com;frame-src *.chargebee.com *.adyen.com *.dinero.dk *.workbox.dk player.vimeo.com;frame-ancestors https://connect.visma.com;form-action adfs.mylogbuy.com 'self' https://connect.visma.com;object-src 'none';\", 'Date': 'Sat, 28 Jan 2023 17:34:56 GMT', 'Content-Length': '0', 'Via': '1.1 google', 'Alt-Svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000'}\r\n\r\nI would expect my response.cookies to contain the cookie data in response.headers['Set-Cookie'].\r\n\r\n## Actual Result\r\n\r\nInstead of containing the cookies from the response headers, the response cookie jar is empty:\r\n\r\n    response.cookies\r\n    >> <RequestsCookieJar[]>\r\n\r\nI have tried logging in to the site in question using both Firefox and Chrome with Javascript off. Both browsers store the cookies for the response in question and submit the cookies for subsequent requests to the site in question.\r\n\r\n## Reproduction Steps\r\n\r\nI am unable to provide reproduction steps in the bug report, since a complete reproduction includes user credentials for the site in question. I hope that someone with more in-depth knowledge of Requests is able to reproduce the issue by parsing the Set-Cookie part of the header above with the relevant class or functions in Requests.\r\n\r\nI would be happy to provide a bug fixer with test credentials and code to reproduce the issue on the site returning the response. Just reach out to me.\r\n\r\n## System Information\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.0\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010cf\",\r\n    \"version\": \"22.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.2\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "helmstedt",
                "id": 48943001,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6344/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1407486133",
                    "id": 1407486133,
                    "created_at": "2023-01-28T20:55:06Z",
                    "updated_at": "2023-01-28T20:55:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Many of those cookies (I didn't check them all while on my phone) were set to expire in the year 1970. Thus they will never end up in the Jar. The server is misconfigured ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1407486133/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005953437648713589,
                        "severe_toxicity": 0.00012241691001690924,
                        "obscene": 0.0001779299636837095,
                        "threat": 0.00012555139255709946,
                        "insult": 0.00017665751511231065,
                        "identity_attack": 0.0001373733684886247
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1407601212",
                    "id": 1407601212,
                    "created_at": "2023-01-29T08:46:32Z",
                    "updated_at": "2023-01-29T08:48:13Z",
                    "author_association": "NONE",
                    "body": "I can see that some of the cookies are set to expire. The ones I would expect to be added to the cookie jar, and which do not have an expiry date, as far as I can see, are:\r\n\r\n.AspNetCore.Cookies.V2\r\n.AspNetCore.Cookies.V2C1\r\n.AspNetCore.Cookies.V2C2\r\n\r\nThese are the ones that Firefox and Chrome save and use for subsequent requests.\r\n\r\nI have created a test account on the site in question and here is code that should be able to reproduce the issue.:\r\n\r\n```\r\n# Script to login to dinero.dk\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\n\r\nusername = 'dinerodktestaccout@helmstedt.dk'\r\npassword = '52GeGAMZeN7NwNsUfoE8!'\r\n\r\nheaders = {\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; rv:109.0) Gecko/20100101 Firefox/109.0',\r\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',\r\n    'Accept-Language': 'en',\r\n    'DNT': '1',\r\n    'Connection': 'keep-alive',\r\n    'Upgrade-Insecure-Requests': '1',\r\n    'Sec-Fetch-Dest': 'document',\r\n    'Sec-Fetch-Mode': 'navigate',\r\n    'Sec-Fetch-Site': 'none',\r\n    'Sec-Fetch-User': '?1',\r\n    'Pragma': 'no-cache',\r\n    'Cache-Control': 'no-cache',\r\n}\r\n\r\nheaders['Host'] = 'app.dinero.dk'\r\nlogin_page_url = 'https://app.dinero.dk/'\r\nvisit_login_page = requests.get(login_page_url, allow_redirects=False, headers=headers)\r\ndinero_dk_cookies = dict(visit_login_page.cookies)\r\n\r\nif visit_login_page.status_code == 302:\r\n    headers['Host'] = 'connect.visma.com'\r\n    second_page_url = visit_login_page.headers['Location']\r\n    visit_second_page = requests.get(second_page_url, allow_redirects=False, headers=headers)\r\n    if visit_second_page.status_code == 302:\r\n        third_page_url = visit_second_page.headers['Location']\r\n        visit_third_page = requests.get(third_page_url, allow_redirects=False, headers=headers)\r\n        if visit_third_page.status_code == 200:\r\n            connect_visma_cookies = dict(visit_third_page.cookies)\r\n            login_soup = BeautifulSoup(visit_third_page.text, 'lxml')\r\n            username_form = login_soup.find('form', {'class': 'form-connect-login'})\r\n            username_form_data = {}\r\n            for input in username_form.find_all('input'):\r\n                try:\r\n                    username_form_data[input['name']] = input['value']\r\n                except:\r\n                    pass\r\n            username_form_data['Username'] = username\r\n\r\nconnect_url = 'https://connect.visma.com/'\r\nheaders['Referer'] = third_page_url\r\nheaders['Content-Type'] = 'application/x-www-form-urlencoded'\r\npost_username = requests.post(connect_url, allow_redirects=False, headers=headers, cookies=connect_visma_cookies, data=username_form_data)\r\nif post_username.status_code == 302:\r\n    post_username_cookies = dict(post_username.cookies)\r\n    connect_visma_cookies['rememberUsername'] = post_username_cookies['rememberUsername']\r\n    del headers['Content-Type']\r\n    password_page_url = 'https://connect.visma.com' + post_username.headers['Location']\r\n    get_password_page = requests.get(password_page_url, allow_redirects=False, headers=headers, cookies=connect_visma_cookies)\r\n    if get_password_page.status_code == 200:\r\n        username_submitted_soup = BeautifulSoup(get_password_page.text, 'lxml')\r\n        password_form = username_submitted_soup.find('form', {'class': 'form-connect-login'})\r\n        password_form_data = {}\r\n        for input in password_form.find_all('input'):\r\n            try:\r\n                password_form_data[input['name']] = input['value']\r\n            except:\r\n                pass\r\n        password_form_data['password'] = password\r\n\r\npassword_submit_url = 'https://connect.visma.com/password'\r\nheaders['Referer'] = password_page_url\r\nheaders['Content-Type'] = 'application/x-www-form-urlencoded'\r\npost_password = requests.post(password_submit_url, allow_redirects=False, headers=headers, cookies=connect_visma_cookies, data=password_form_data)\r\nif post_password.status_code == 302:\r\n    post_password_cookies = dict(post_password.cookies)\r\n    for key, value in connect_visma_cookies.items():\r\n        if '.AspNetCore.Antiforgery' in key:\r\n            post_password_cookies[key] = value\r\n    del headers['Content-Type']\r\n    callback_page_url = 'https://connect.visma.com' + post_password.headers['Location']\r\n    get_callback_page = requests.get(callback_page_url, allow_redirects=False, headers=headers, cookies=post_password_cookies)\r\n    get_callback_page_cookies = dict(get_callback_page.cookies)\r\n    password_submitted_soup = BeautifulSoup(get_callback_page.text, 'lxml')\r\n    redirect_form = password_submitted_soup.find('form')\r\n    redirect_form_data = {}\r\n    for input in redirect_form.find_all('input'):\r\n        try:\r\n            redirect_form_data[input['name']] = input['value']\r\n        except:\r\n            pass\r\n    redirect_form_data['scope'] = redirect_form_data['scope'].replace(\" \",\"+\")\r\n    redirect_url = redirect_form['action']\r\n\r\nsignin_url = redirect_url\r\nheaders['Content-Type'] = 'application/x-www-form-urlencoded'\r\nheaders['Referer'] = 'https://connect.visma.com/'\r\nheaders['Origin'] = 'https://connect.visma.com/'\r\nheaders['Host'] = 'app.dinero.dk'\r\npost_signin = requests.post(signin_url, allow_redirects=False, headers=headers, cookies=dinero_dk_cookies, data=redirect_form_data)\r\npost_signin_header_cookies = post_signin.headers['Set-Cookie']\r\n\r\nprint('Cookie jar has no cookies:')\r\nprint(post_signin.cookies)\r\nprint('---')\r\nprint('Set-Cookie header contains cookies:')\r\nprint(post_signin_header_cookies)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1407601212/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "helmstedt",
                        "id": 48943001,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011192327365279198,
                        "severe_toxicity": 0.00010808675870066509,
                        "obscene": 0.0002263072383357212,
                        "threat": 0.00011041884863516316,
                        "insult": 0.00018287452985532582,
                        "identity_attack": 0.00014324183575809002
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1460771652",
                    "id": 1460771652,
                    "created_at": "2023-03-08T19:58:44Z",
                    "updated_at": "2023-03-08T19:59:28Z",
                    "author_association": "NONE",
                    "body": "I'm able to reproduce this behavior. If I pull the `Set-Cookie` header out the response and pass it into `http.cookies.SimpleCookie`, I can fetch the value perfectly fine.\r\n\r\nThe code I use if fairly simple:\r\n```python\r\nres = requests.post(\r\n    URL,\r\n    data=JSON,\r\n    headers={\"Host\": \"localhost\"},\r\n)\r\n\r\nres.cookies[\"testcookie\"] # throws a `KeyError`\r\njar = http.cookies.SimpleCookie(res.headers[\"Set-Cookie\"])\r\njar[\"testcookie\"].value # works fine\r\n```\r\n\r\nthe `Set-Cookie` header in question looks like this:\r\n```plain\r\ntestcookie=\"hello\"; Domain=localhost; expires=Fri, 07 Apr 2023 19:57:22 GMT; HttpOnly; Path=/\r\n```\r\n\r\nThis only seems to happen when the `domain` of the cookie is set to `localhost`, though. Providing other values for the `domain` and `Host`, everything works as I would expect.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1460771652/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "thearchitector",
                        "id": 7488439,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010674761142581701,
                        "severe_toxicity": 0.00010685178858693689,
                        "obscene": 0.00022455549333244562,
                        "threat": 0.00011086292215622962,
                        "insult": 0.00018329874728806317,
                        "identity_attack": 0.0001347300421912223
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1461796703",
                    "id": 1461796703,
                    "created_at": "2023-03-09T10:53:21Z",
                    "updated_at": "2023-03-09T10:53:21Z",
                    "author_association": "NONE",
                    "body": "Thanks for exploring the issue. I notice that the cookies from my response are missing a domain value. Here is one copied from headers['Set-Cookie'] (my reproduction code above still works):\r\n\r\n`.AspNetCore.Cookies.V2C2=JCRw_3JmNIVpBQ4l4uz951pzrOzWzN9wnsV8f16Dr50QLz7pg55IY01Msaw31FZWMfkxHXqgMgygan99Lsj84YYEYMKguAfAEmCcNsNewq3wYkm14mmaZTQXi44Yw-nWHA0HZwxzmMX13dN5DDEdEjq9Lc-rtURh1d3nhhKlGUst8r7CFtrnRhLSOfJYFTrzZSBYpRypuHcvvPnOxQYvyQXl0vNTbb-GaZB5i1ZPtH05a1xDfhtmUWSfyBONgpdDlBN7_hoElvq-nftkuglgfhN4MSwSfnINxwNm1jAKEJMv3UwC0uqJ9JNMo6CHEmxYHJUfke0w0tN4xtZt7WhUXXl_vPZR7B98fcPtUsa1aa_KzhGjl4584qGH30czopfrpBMTWcH20gFi0t1qVY6fYZxxHTNSG1JnFarGGUuyYY2pr5xq5Vw5WYL7KXUWIZx5GudbSKP8ZdNmNaj-JLIxsOH483zUs2XPbaDERn8NCtJRTEFXcXfDcK3q9Ifw_9rfKXSCShQotwK6fRuRjoryeUiN_I4JQ8Qz6IMOeP3pEHG9e1faHM0Lh0PQQBX30YScU3payh6ImbIr000b1moeI-O0YI9cTQIICL5WPVE1mCc-NShq7eICWMF5fH2XVBAvaD5cw7SA6PeyNwxMvfkLsoeaSeidA6NpRBAWGCHRxAKPFvhVsIPUPrgCNql3v1GavvwIkJSEW8eBXiMWPw2cn2HjmxRaDBUgMUoKAXCcSKvdgVndixtn7TbP2bKmJI_xado6sPbx8mpTiAu5ks7B_26j9rVYfmqWv31J1ZwOSG7Y9z_meTSQZSim74H26u5mwSFGTZEsF_aR5zEzNragUJAO-Yix854zWuva_Czg2g-iTTYuvrPFX-VcDQdfLRcSw-KMZTmydUebV1nQfCmfpOVamlmTzuSkB29wzbPUb0G21hGP2MdEfblfhD0CQN-thWRceOmcgOMll5WW2aZ8jxIK87iyHZuRvfccAhnXjFT6P0rx_q1CKhx1-MO6CJ0lTaR5DY3w_Bz1E3bUxMUjzWkhVuQRExQJHPPNi4zSzR3rspXxI0mCAixWag_GIdBQ2nX2O_MM6Z1RYY-ymouf7aSBeIzOTyJAbJ1u4IsNFJcXl0_i_jNe1ynFfIqqkkM2eHVeCJO8JH3EmxaT76CeggpwM4uiT5Hx_fnpxPVUY3v1IDc6Mly8e6CUdzQp9XvwtK6QRI4Gr5LaYndM5OX0-ElkH7QMgmXw4u1zZO_cOc5aLyDPGeGW6HokGBBSCAk-KBzl7P8Mz5kPTB176qxjs7AsrK3a6rUhqD7HinhwoEX_7CntzkQYu7agS5LxreJ_CiDr52Y27KwSNQHM6NKc9mYuCOBX2DvXkiTfm8SrDEjsEYyXK_65E9xuYh3Yj1xPtsX9Ay1qONVdeZ_gO5XYtXLTFhZgugAxosNsrYbGRFGerfTXTzEIloEqLspLmIjKIlkbTwoXXmfsicDuZRIVRBprbq5z0ZhPlgzLoVoQ7; domain=; path=/; secure; samesite=lax; httponly`",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1461796703/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "helmstedt",
                        "id": 48943001,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.018666891381144524,
                        "severe_toxicity": 0.0001677883556112647,
                        "obscene": 0.001764670480042696,
                        "threat": 0.0004153250774834305,
                        "insult": 0.0007714160019531846,
                        "identity_attack": 0.000293776742182672
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1467571195",
                    "id": 1467571195,
                    "created_at": "2023-03-14T07:50:07Z",
                    "updated_at": "2023-03-14T07:50:07Z",
                    "author_association": "NONE",
                    "body": "Likely this issue is the same as https://github.com/psf/requests/issues/6245",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1467571195/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "helmstedt",
                        "id": 48943001,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006586528616026044,
                        "severe_toxicity": 0.000118788200779818,
                        "obscene": 0.00018037747940979898,
                        "threat": 0.00012253347085788846,
                        "insult": 0.00017648781067691743,
                        "identity_attack": 0.00014077512605581433
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1468363984",
                    "id": 1468363984,
                    "created_at": "2023-03-14T15:51:28Z",
                    "updated_at": "2023-03-14T15:51:52Z",
                    "author_association": "NONE",
                    "body": "> Likely this issue is the same as #6245\r\n\r\nPerhaps it extends beyond missing domains and has something to do with not FQ domains? Because in my case, it doesn't work if it is set to `localhost` either.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1468363984/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "thearchitector",
                        "id": 7488439,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006473310058936477,
                        "severe_toxicity": 0.00011801211803685874,
                        "obscene": 0.00018286268459632993,
                        "threat": 0.00011738965986296535,
                        "insult": 0.0001750633673509583,
                        "identity_attack": 0.00013750979269389063
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1660798550",
                    "id": 1660798550,
                    "created_at": "2023-08-01T17:38:48Z",
                    "updated_at": "2023-08-01T17:38:48Z",
                    "author_association": "NONE",
                    "body": "I can also reproduce this issue with a `localhost` cookie. I found this:\r\n\r\n> Fixed in https://github.com/python/cpython/pull/30108 for 3.11.\r\n\r\nfrom https://github.com/python/cpython/issues/90233\r\n\r\nSo I would try 3.11 and see if that helps. For me, it did get the cookie, but decided to set it with a domain of `.localhost` instead of `localhost`, which wasn't accepted by the server. So I ended up with something like this to fake it:\r\n\r\n```python\r\nif s.cookies.get(cookie_name, domain=\"localhost\") is None:\r\n        cookie_value = s.cookies.get(cookie_name)\r\n        s.cookies.clear(name=cookie_name)\r\n        s.cookies.set(cookie_name, cookie_value, domain=\"\")\r\n\r\n```\r\n\r\nIt seems like allowing localhost cookies at all may be a nonstandard extension, it just happens to be one that is supported by any browser I've tested with as well as other http client libraries.\r\n\r\n> > ...domains must have at least two (2) or three (3) periods in them to prevent domains of the form: \".com\", \".edu\", and \"va.us\". Any domain that fails within one of the seven special top level domains listed below only require two periods. Any other domain requires at least three. The seven special top level domains are: \"COM\", \"EDU\", \"NET\", \"ORG\", \"GOV\", \"MIL\", and \"INT\".\r\n\r\n> Note that the number of periods above probably assumes that a leading period is required. This period is however [ignored in modern browsers](https://stackoverflow.com/a/20884869/81595) and it should probably read...\r\n\r\n> >    at least one (1) or two (2) periods\r\n\r\n\r\n<https://stackoverflow.com/questions/1134290/cookies-on-localhost-with-explicit-domain/32210291#32210291>",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1660798550/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "junbl",
                        "id": 33500135,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001260115415789187,
                        "severe_toxicity": 0.00011016695498256013,
                        "obscene": 0.0002287220413563773,
                        "threat": 0.00012237094051670283,
                        "insult": 0.00019253531354479492,
                        "identity_attack": 0.0001514828618383035
                    }
                }
            ]
        },
        "63": {
            "html_url": "https://github.com/psf/requests/issues/6313",
            "id": 1506222821,
            "number": 6313,
            "title": "requests ignores no_proxy which contains a IPv6 CIDR ",
            "created_at": "2022-12-21T12:27:54Z",
            "updated_at": "2022-12-21T12:41:58Z",
            "closed_at": null,
            "body": "python requests supports a no_proxy environment variable with a IPv4 CIDR e.g.\r\n\r\ne.g\r\n```\r\n+ export http_proxy no_proxy\r\n+ http_proxy=http://localhost\r\n+ python -c 'import requests.utils ; print(requests.utils.should_bypass_proxies(\"http://1.2.3.4\", None))'\r\nFalse\r\n+ no_proxy=1.2.3.0/24\r\n+ python -c 'import requests.utils ; print(requests.utils.should_bypass_proxies(\"http://1.2.3.4\", None))'\r\nTrue\r\n```\r\n\r\nbut doesn't support a IPv6 CIDR e.g.\r\n\r\n```\r\n+ http_proxy=http://localhost\r\n+ python -c 'import requests.utils ; print(requests.utils.should_bypass_proxies(\"http://[1:2:3::4]\", None))'\r\nFalse\r\n+ no_proxy=1:2:3::/64\r\n+ python -c 'import requests.utils ; print(requests.utils.should_bypass_proxies(\"http://[1:2:3::4]\", None))'\r\nFalse\r\n```\r\n\r\n\r\n## Expected Result\r\n\r\nFor proxy to be bypassed if a the url matches the IPv6 CIDR in no_proxy\r\n\r\n## Actual Result\r\n\r\nIPv6 CIDR ignored\r\n\r\n## Reproduction Steps\r\n\r\nas above\r\n\r\n## System Information\r\n\r\n[derekh@laptop ~]$  python -m requests.help\r\n/usr/lib/python3.11/site-packages/requests/help.py:24: DeprecationWarning: 'urllib3.contrib.pyopenssl' module is deprecated and will be removed in a future release of urllib3 2.x. Read more in this issue: https://github.com/urllib3/urllib3/issues/2680\r\n  from urllib3.contrib import pyopenssl\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.1.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"37.0.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.0.13-300.fc37.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"30000050\",\r\n    \"version\": \"21.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000050\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "derekhiggins",
                "id": 883848,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6313/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1361254008",
                    "id": 1361254008,
                    "created_at": "2022-12-21T12:28:45Z",
                    "updated_at": "2022-12-21T12:28:45Z",
                    "author_association": "NONE",
                    "body": "Proposed a fix here https://github.com/psf/requests/pull/5953 ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1361254008/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "derekhiggins",
                        "id": 883848,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007312367670238018,
                        "severe_toxicity": 0.00011288561654509977,
                        "obscene": 0.0001734627439873293,
                        "threat": 0.00011566605098778382,
                        "insult": 0.00017953242058865726,
                        "identity_attack": 0.00014339160406962037
                    }
                }
            ]
        },
        "64": {
            "html_url": "https://github.com/psf/requests/issues/6295",
            "id": 1465062456,
            "number": 6295,
            "title": "Endless history: the history contains a self-reference",
            "created_at": "2022-11-26T06:12:04Z",
            "updated_at": "2024-07-04T12:37:14Z",
            "closed_at": null,
            "body": "The history of a requests contains a self-reference to the history owner. The history will be endless.\r\n\r\n## Expected Result\r\nIf I traverse recursive the complete history of a requests, this will be a finally graph.\r\nThe history of a request is a tree without cycles. \r\n\r\n```\r\nR1 (history: 2)\r\n     R2 (no history)\r\n     R3 (no history)\r\n```\r\n\r\n## Actual Result\r\nIf I traverse recursive the complete history of a requests, the program breaks with recursive error. `RecursionError: maximum recursion depth exceeded while calling a Python object`\r\nThe history contains a self-reference to the history owner.\r\n\r\nThe history of a request is a graph with a cycle.\r\n\r\n```\r\nR1 (history: 2)\r\n     R2 (no history)\r\n          R3 (history: 1)\r\n               R3 (history: 1)\r\n                    R3 (history: 1)\r\n                         R3 (history: 1)\r\n                              R3 (history: 1)\r\n                                   ....\r\n```\r\n```\r\nid=140537834271072 history=2\r\n\tindex=0 id=140537834079136\r\n\tindex=1 id=140537834080960\r\nid=140537834079136 history=0\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\n\r\n....\r\n\r\n\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nTraceback (most recent call last):\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 12, in <module>\r\n    history(requests.get('https://coord.info/GC8T8E8'))\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 9, in history\r\n    history(item)\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 9, in history\r\n    history(item)\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 9, in history\r\n    history(item)\r\n  [Previous line repeated 993 more times]\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 5, in history\r\n    print(f\"id={id(r)} history={len(r.history)}\")\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\nProcess finished with exit code 1\r\n\r\n```\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\n\r\ndef history(r):\r\n    print(f\"id={id(r)} history={len(r.history)}\")\r\n    for index, item in enumerate(r.history):\r\n        print(f\"\\tindex={index} id={id(item)}\")\r\n    for index, item in enumerate(r.history):\r\n        history(item)\r\n\r\n\r\nhistory(requests.get('https://coord.info/GC8T8E8'))\r\n\r\n\r\n```\r\n\r\n## System Information\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.1\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"21.6.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010109f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.13\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "CachingFoX",
                "id": 1838534,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6295/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1426383341",
                    "id": 1426383341,
                    "created_at": "2023-02-10T21:46:30Z",
                    "updated_at": "2023-02-10T21:46:30Z",
                    "author_association": "MEMBER",
                    "body": "We're aware, see https://github.com/psf/requests/issues/2690 which is documented in the README.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1426383341/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 1,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005646211793646216,
                        "severe_toxicity": 0.00012887654884252697,
                        "obscene": 0.00018713016470428556,
                        "threat": 0.00012927001807838678,
                        "insult": 0.0001760588784236461,
                        "identity_attack": 0.00014331685088109225
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1426580706",
                    "id": 1426580706,
                    "created_at": "2023-02-11T02:34:21Z",
                    "updated_at": "2023-02-11T02:35:04Z",
                    "author_association": "NONE",
                    "body": "I'm confused. I do not talk about the GIT history. I talked about the history of an request. Please, can you reopen my issue?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1426580706/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "CachingFoX",
                        "id": 1838534,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006268349243327975,
                        "severe_toxicity": 0.00011987351899733767,
                        "obscene": 0.000181612980668433,
                        "threat": 0.00012199694174341857,
                        "insult": 0.00017486016440670937,
                        "identity_attack": 0.00014009753067512065
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1426877778",
                    "id": 1426877778,
                    "created_at": "2023-02-11T21:13:13Z",
                    "updated_at": "2023-02-11T21:13:13Z",
                    "author_association": "MEMBER",
                    "body": "Sorry about that!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1426877778/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000782239658292383,
                        "severe_toxicity": 0.0001120219676522538,
                        "obscene": 0.00018618917965795845,
                        "threat": 0.00010896297317231074,
                        "insult": 0.0001796409924281761,
                        "identity_attack": 0.00013617520744446665
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1427034585",
                    "id": 1427034585,
                    "created_at": "2023-02-12T13:32:15Z",
                    "updated_at": "2023-02-12T13:32:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "You don't need to traverse it recursively. Each response should have the entire history of the prior response.\n\nIn other words,\n\n- You get `r3` back which has a history that looks like `[r2, r1]`.\n- `r2` has a history that looks like `[r1]`, etc.\n\nYou only need to look at this history of the one you're seeing as the final response. It will contain the whole history. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1427034585/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006925225607119501,
                        "severe_toxicity": 0.00011794304009526968,
                        "obscene": 0.0001794415438780561,
                        "threat": 0.00012665802205447108,
                        "insult": 0.00017179040878545493,
                        "identity_attack": 0.0001386114163324237
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1435691446",
                    "id": 1435691446,
                    "created_at": "2023-02-18T14:42:10Z",
                    "updated_at": "2023-02-18T14:42:10Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So, this is a consequence of someone years ago arguing that each history response should have it's own history despite the linearity of the history and the fact that the top-level response has the entire context.\r\n\r\nWhat's more helpful (in my view) for looking at this problem is:\r\n\r\n```\r\n>>> r = requests.get('https://httpbin.org/redirect/3')\r\n>>> for resp in r.history:\r\n...   print(id(resp), end='->'); print([(id(_), len(_.history)) for _ in resp.history])\r\n... \r\n140058437748768->[]\r\n140058437750976->[(140058437750976, 1)]\r\n140058437751840->[(140058437750976, 1), (140058437751840, 2)]\r\n```\r\n\r\nNote that the 2nd response (which should have been the redirect request followed from the first item in the history) points to itself, not in fact to the first response.\r\n\r\nWhile this is wrong, and can be fixed, it hasn't been noticed in years, because folks that care about the history are just looking at the top-level history (which contains everything) and don't actually need to look at each response's history.\r\n\r\nI'd be in favor of just wiping those histories altogether instead of trying to make this look more correct. Either way, the place to fix this is in https://github.com/psf/requests/blob/15585909c3dd3014e4083961c8a404709450151c/requests/sessions.py#L182-L183\r\n\r\nNamely, the first time through, we are called with the initial response that triggered a redirect, so we're doing\r\n\r\n```py\r\nhist.append(resp)\r\nresp.history = hist[1:]\r\n```\r\n\r\nThis is correct because that 0th item in the final response's `history` has no other redirects.\r\n\r\nWe could also, write this two other ways:\r\n\r\n```py\r\nresp.history = hist[:]\r\nhist.append(resp)\r\n```\r\n\r\nThis will create a new list based off of the existing history we know about, so that initial request will still be `[]`, then the rest would look like:\r\n\r\n... \r\n140058437748768->[]\r\n140058437750976->[(140058437748768, 0)]\r\n140058437751840->[(140058437748768, 0), (140058437750976, 1)]\r\n```\r\n\r\nAlternatively, we could do\r\n\r\n```py\r\nhist.append(resp)\r\nresp.history = hist[:-1]\r\n```\r\n\r\nEither way should make this work, but I think then, it has downstream affects on https://github.com/psf/requests/blob/15585909c3dd3014e4083961c8a404709450151c/requests/sessions.py#L190 which we can easily change to\r\n\r\n```py\r\nif len(hist) >= self.max_redirects:\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1435691446/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008158155833370984,
                        "severe_toxicity": 0.00011062182602472603,
                        "obscene": 0.00019742525182664394,
                        "threat": 0.00011392580199753866,
                        "insult": 0.00017285793728660792,
                        "identity_attack": 0.0001370375248370692
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2208874575",
                    "id": 2208874575,
                    "created_at": "2024-07-04T12:37:13Z",
                    "updated_at": "2024-07-04T12:37:13Z",
                    "author_association": "NONE",
                    "body": "should I work on this?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2208874575/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rritik772",
                        "id": 54989885,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007787335780449212,
                        "severe_toxicity": 0.00011000865924870595,
                        "obscene": 0.00017290987307205796,
                        "threat": 0.00011340533092152327,
                        "insult": 0.00017535155348014086,
                        "identity_attack": 0.00013953438610769808
                    }
                }
            ]
        },
        "65": {
            "html_url": "https://github.com/psf/requests/issues/6294",
            "id": 1462357280,
            "number": 6294,
            "title": "PUT requests for zero-byte files get 'Transfer-Encoding': 'chunked' header",
            "created_at": "2022-11-23T20:20:33Z",
            "updated_at": "2022-11-23T20:20:33Z",
            "closed_at": null,
            "body": "Context: uploading files to AWS S3 via requests. Files may be empty. When attempting to upload an empty file, a response of `501: Not implemented` is received. This seems to be because, when content length is 0, a `Transfer-Encoding: chunked` header is automatically added. S3 does not support the encoding.\r\n\r\n## Expected Result\r\n\r\nWhen an empty file PUT is attempted via `requests.put`, a `Content-Length: 0` header should be set on the request. A `Transfer-Encoding: chunked` header should not be set automatically.\r\n\r\n## Actual Result\r\n\r\nWhen an empty file PUT is attempted via `requests.put`, a `Transfer-Encoding: chunked` header is set. No `Content-Length` header is set. If a `Content-Length: 0` header is set explicitly, the `Transfer-Encoding: chunked` header is still set.\r\n\r\n## Reproduction Steps\r\n\r\nIf AWS account, bucket, credentials for principal with PutObject permissions aren't available:\r\n```python\r\nimport requests\r\n\r\nfile = open(<path_to_empty_file>, \"rb\")\r\nsession = requests.session()\r\n\r\nlink = \"http://httpbin.org/put\"\r\n\r\n# using requests.put yields the same results. Using session.put here to examine request\r\n# with S3 instead of httpbin.org, the call below results in a 501. Note the request headers\r\nres_no_CL = session.put(link, data=file, headers={\"Content-Type\": \"text/plain\"})\r\nprint(res_no_CL.request.headers)\r\n# with S3 instead of httpbin.org, the call below results in a 501. With httpbin.org it returns\r\n# ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\r\n# so can't examine headers, but I assume behaviour is consistent\r\nres_explicit_CL = session.put(link, data=file, headers={\"Content-Type\": \"text/plain\", \"Content-Length\": \"0\"})\r\nprint(res_explicit_CL.request.headers)\r\n```\r\n\r\nIf AWS prerequisites above are available:\r\n```python\r\nimport requests\r\nimport boto3\r\n\r\ns3 = boto3.client('s3')\r\nfile = open(<path_to_empty_file>, \"rb\")\r\nsession = requests.session()\r\n\r\nlink = s3.generate_presigned_url(ClientMethod=\"put_object\", Params={\"Bucket\": \"<your_bucket>\", \"Key\": \"<path_in_bucket>\", \"ContentType\": \"text/plain\"})\r\n\r\n# using requests.put yields the same results. Using session.put here to examine request\r\n# the call below results in a 501. Note the request headers\r\nres_no_CL = session.put(link, data=file, headers={\"Content-Type\": \"text/plain\"})\r\nprint(res_no_CL.request.headers)\r\n# the call below results in a 501. Note the request headers\r\nres_explicit_CL = session.put(link, data=file, headers={\"Content-Type\": \"text/plain\", \"Content-Length\": \"0\"})\r\nprint(res_explicit_CL.request.headers)\r\n```\r\n\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.1\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.102.1-microsoft-standard-WSL2\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "radu-malliu",
                "id": 26001154,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6294/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "66": {
            "html_url": "https://github.com/psf/requests/issues/6282",
            "id": 1443045891,
            "number": 6282,
            "title": "IPv6 Zone Identifiers are not correctly parsed (still)",
            "created_at": "2022-11-10T01:06:19Z",
            "updated_at": "2024-06-25T20:00:04Z",
            "closed_at": null,
            "body": "Issue #5775 notes that IPv6 Zone Identifiers are not parsed correctly when the Zone ID is itself a valid percent-encoded character from the `UNRESERVED_SET`. That issue was incorrectly closed as a duplicate of #5126, in fact #5126 is to do with a different, resolved, bug in urllib. This ticket here *is* a duplicate of #5775 but commenting on that ticket is now locked.\r\n\r\nIPv6 addresses can have the form `fe80::1:2:3:4%zone` where `zone` is any alphanumeric sequence and is platform-dependent. In order to address their use in URLs, where the `%zone` could be interpreted as a percent-escaped character, RFC6874 requires the `%` to be replaced with its own percent-escaped representation `%25`, e.g. `http://[fe80::1:2:3:4%25zone`.\r\n\r\nIn `requests`, this is not enough to protect the Zone ID in the URL, if the zone is a valid percent-escaped character from the `UNRESERVED_SET`. Specifically, `url.py::_normalize_host` removes the RFC6874 sequence and replaces it with a simple `%`, then the round trip through `quote/unquote_reserved` in `utils.py::requote_uri` called from `PreparedRequest::prepare_url` transforms the Zone ID in to the percent-escaped character anyway.\r\n\r\nNote that *doubly* escaping the percent works, but the URL is then neither intuitive nor RFC-compliant.\r\n\r\n## Expected Result\r\n\r\n```python\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%61]').prepare().url -> Undefined/don't care (not RFC-compliant)\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%2561]').prepare().url -> 'http://[fe80::1:2:3:4%61]'\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%252561]').prepare().url -> 'http://[fe80::1:2:3:4%2561]'\r\n```\r\n\r\n## Actual Result\r\n\r\n```python\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%61]').prepare().url -> 'http://[fe80::1:2:3:4a]'\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%2561]').prepare().url -> 'http://[fe80::1:2:3:4a]'\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%252561]').prepare().url -> 'http://[fe80::1:2:3:4%61]'\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"22.1.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010111f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "benizl",
                "id": 15090,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6282/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1321056479",
                    "id": 1321056479,
                    "created_at": "2022-11-20T07:06:50Z",
                    "updated_at": "2022-11-20T07:06:50Z",
                    "author_association": "NONE",
                    "body": "Hi @benizl,\r\nCan you please recheck if it is just showing the error in your system. Because it is working completely fine in my mine.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1321056479/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ritikBhandari",
                        "id": 69508348,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006442557787522674,
                        "severe_toxicity": 0.0001179243772639893,
                        "obscene": 0.00018354815256316215,
                        "threat": 0.00011829130380647257,
                        "insult": 0.00017539535474497825,
                        "identity_attack": 0.00013672765635419637
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1498479981",
                    "id": 1498479981,
                    "created_at": "2023-04-06T04:34:09Z",
                    "updated_at": "2023-04-06T04:34:09Z",
                    "author_association": "NONE",
                    "body": "Sorry for the slow response @ritikBhandari, I've been away from dev for a bit.\r\n\r\nI still see\r\n```\r\nprint(requests.Request('GET', 'http://[fe80::1:2:3:4%2561]').prepare().url) # > http://[fe80::1:2:3:4a]/\r\n```\r\n\r\ni.e. the `61` scope specifier, escaped with `%25` as per RFC6874, gets incorrectly transformed in to the letter `a`. Since the above note, the help output is unchanged except `requests.version == 2.28.2` and `urllib3.version == 1.26.15`",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1498479981/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "benizl",
                        "id": 15090,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007369104423560202,
                        "severe_toxicity": 0.00011147616896778345,
                        "obscene": 0.00019474943110253662,
                        "threat": 0.00011095492664026096,
                        "insult": 0.00017122915596701205,
                        "identity_attack": 0.0001328897924395278
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2023192732",
                    "id": 2023192732,
                    "created_at": "2024-03-27T16:23:20Z",
                    "updated_at": "2024-03-27T16:23:20Z",
                    "author_association": "NONE",
                    "body": "Any update on this issue? I'm also seeing an issue when using iDRAC IPv6 link local address to make Redfish calls using requests module, returns 400 status code. If i use iDRAC IPv6 address to make the same Redfish call no issues. Also i can use iDRAC link local address to make the same Redfish call using curl command no issues. Issue only exists when using requests module.\r\n\r\nThanks\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2023192732/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "texroemer",
                        "id": 30351677,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006296301726251841,
                        "severe_toxicity": 0.00011799906496889889,
                        "obscene": 0.00018649105913937092,
                        "threat": 0.00012260394578333944,
                        "insult": 0.00017254376143682748,
                        "identity_attack": 0.00013606357970274985
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2189863818",
                    "id": 2189863818,
                    "created_at": "2024-06-25T20:00:03Z",
                    "updated_at": "2024-06-25T20:00:03Z",
                    "author_association": "NONE",
                    "body": "Same here, getting messages like `Failed to resolve 'fe80::6321:2df2:88b:d3b6%25enp0s3` when tryong to connect vie HTTPS.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2189863818/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "HenriWahl",
                        "id": 2835065,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007832010160200298,
                        "severe_toxicity": 0.00010851948172785342,
                        "obscene": 0.00018370292673353106,
                        "threat": 0.00011420217924751341,
                        "insult": 0.00017839050269685686,
                        "identity_attack": 0.00013364627375267446
                    }
                }
            ]
        },
        "67": {
            "html_url": "https://github.com/psf/requests/issues/6279",
            "id": 1440191701,
            "number": 6279,
            "title": " HTTPS Request through HTTP Proxy is sent incorrectly when using chunked body",
            "created_at": "2022-11-08T13:19:24Z",
            "updated_at": "2023-06-22T14:43:32Z",
            "closed_at": null,
            "body": "I am using the chunked request body feature (`data=generator`). When defining a HTTP proxy and sending a request to a HTTPS URL, `requests` is trying to perform a TLS handshake with the (HTTP) proxy server, instead of sending a CONNECT request and performing the handshake with the target server through the tunnel. This behaviour prevents the request from completing successfully.\r\n\r\n## Expected Result\r\n\r\n`requests` should send a CONNECT request to the proxy and negotiate TLS with the target server through the tunnel.\r\n\r\n## Actual Result\r\n\r\n`requests` tries to negotiate TLS directly with the HTTP proxy server, and fails to do so.\r\n\r\n## Reproduction Steps\r\n\r\nRun an HTTP proxy on `127.0.0.1:8080` and execute the following code:\r\n```python\r\n  import requests\r\n  \r\n  def body_generator():\r\n    yield \"test\"\r\n    return\r\n  \r\n  requests.post(\"https://www.google.com/\",\r\n    proxies={\"https\": \"http://127.0.0.1:8080/\"},\r\n    data=body_generator(),\r\n  )\r\n```\r\n\r\n## More info\r\n\r\nThe chunked encoding generator feature is implemented in `requests/adapters.py`:\r\n```python\r\ntry:\r\n    if not chunked:\r\n        resp = conn.urlopen(\r\n            ...\r\n        )\r\n\r\n    # Send the request.\r\n    else:\r\n        if hasattr(conn, \"proxy_pool\"):\r\n            conn = conn.proxy_pool\r\n\r\n        low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\r\n\r\n        try:\r\n            ... Send request with chunked body ...\r\n```\r\n\r\nIn the case of chunked encoding, instead of using `conn.urlopen` to send the request, it uses `conn._get_conn` and sends the request manually.\r\nIt seems like, for some reason, `conn._get_conn` is not handling the proxy correctly.",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "moshec2",
                "id": 96691861,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6279/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1453533101",
                    "id": 1453533101,
                    "created_at": "2023-03-03T13:27:25Z",
                    "updated_at": "2023-03-03T13:27:25Z",
                    "author_association": "NONE",
                    "body": "I can confirm this is still an issue on latest release.\r\nI filed a duplicate issue (now closed) here: https://github.com/psf/requests/issues/6371",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1453533101/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sveint",
                        "id": 5994867,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005612532258965075,
                        "severe_toxicity": 0.0001297292619710788,
                        "obscene": 0.00018654263112694025,
                        "threat": 0.00012962613254785538,
                        "insult": 0.00017603235028218478,
                        "identity_attack": 0.00014387383998837322
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1535767260",
                    "id": 1535767260,
                    "created_at": "2023-05-05T06:18:55Z",
                    "updated_at": "2023-05-05T06:20:02Z",
                    "author_association": "NONE",
                    "body": "I am using requests 2.28.2 with urllib3 as 1.26.14, and getting below issue when calling the api (proxy is not added).\r\n\r\n`requests.exceptions.SSLError: HTTPSConnectionPool(host=\"my client host\", port=\"my client port\"): Max retries exceeded with url: /v1/omni-channel/message (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1129)')))`\r\n\r\nIs there anything else that I need to check?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1535767260/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SteniMariyaThomas",
                        "id": 101807451,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006812178180553019,
                        "severe_toxicity": 0.00011510305193951353,
                        "obscene": 0.0001869582338258624,
                        "threat": 0.00011741048365365714,
                        "insult": 0.00017360372294206172,
                        "identity_attack": 0.00013380145537666976
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1602766559",
                    "id": 1602766559,
                    "created_at": "2023-06-22T14:43:32Z",
                    "updated_at": "2023-06-22T14:43:32Z",
                    "author_association": "NONE",
                    "body": "Seems there is an issue with the SSL/TLS connection when making the API call. \r\n\r\nYou can check few things - \r\n\r\n1. Verify the URL: Ensure that the URL you are using is correct and corresponds to the intended API endpoint.\r\n2. Updating the libraries 'requests' and its dependencies 'urllib' and 'ssl' to the latest one.\r\n3. Verify the SSL/TLS version compatibility with the client-server versions",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1602766559/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "MozarM",
                        "id": 105074,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006403658189810812,
                        "severe_toxicity": 0.00012034561223117635,
                        "obscene": 0.00018267483392264694,
                        "threat": 0.00012553654960356653,
                        "insult": 0.00017351766291540116,
                        "identity_attack": 0.00014083285350352526
                    }
                }
            ]
        },
        "68": {
            "html_url": "https://github.com/psf/requests/issues/6275",
            "id": 1435476003,
            "number": 6275,
            "title": "[Feature request or doc oversight?] Apparently, there's still no way to read uncompressed content as file-like object #465 ",
            "created_at": "2022-11-04T02:58:55Z",
            "updated_at": "2022-11-04T02:58:55Z",
            "closed_at": null,
            "body": "This was originally discussed here: https://github.com/psf/requests/issues/465 For some reason the ticket was however closed without a file-like object approach being added here: https://requests.readthedocs.io/en/latest/user/quickstart/ (Other than the somewhat odd `.raw` that returns something I suspect most people that just want a file-like stream aren't interested in.) There doesn't seem to be an explanation why that ticket was closed, and the discussion suggesting *something* was fixed but I can't really figure out what.\r\n\r\nSince it's not that easy to wrap `iter_content()` to a file like object with arbitrary read amounts and just wrapping `.content` for that generically seems to be unsafe to me due to denial of service, it would be nice if this was provided and then documented here: https://requests.readthedocs.io/en/latest/user/quickstart/ (With a section alike to \"Raw Response Content\".)\r\n\r\nThe requests version I tested on is: 2.27.1",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "ell1e",
                "id": 64124388,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6275/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "69": {
            "html_url": "https://github.com/psf/requests/pull/6270",
            "id": 1424104539,
            "number": 6270,
            "title": "fix: pass response (self) to ConnectionError constructor",
            "created_at": "2022-10-26T14:10:56Z",
            "updated_at": "2023-09-20T09:44:28Z",
            "closed_at": null,
            "body": "As far as I can tell, this is the only internal construction of `ConnectionError` that doesn't include `request` or `response`.\r\n\r\nPart of improving typing for exceptions in requests: https://github.com/python/typeshed/pull/8989",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "ErikBjare",
                "id": 1405370,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6270/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "70": {
            "html_url": "https://github.com/psf/requests/pull/6265",
            "id": 1419643957,
            "number": 6265,
            "title": "Fix setuptools deprecation warnings",
            "created_at": "2022-10-23T05:24:51Z",
            "updated_at": "2023-01-19T13:20:33Z",
            "closed_at": null,
            "body": "Update keys used in `setup.cfg` in order to fix the following setuptools deprecation warnings:\r\n\r\n> The license_file parameter is deprecated, use license_files instead.\r\n\r\n> Usage of dash-separated 'provides-extra' will not be supported\r\n> in future versions. Please use the underscore name 'provides_extra'\r\n> instead\r\n\r\n> Usage of dash-separated 'requires-dist' will not be supported\r\n> in future versions. Please use the underscore name 'requires_dist'\r\n> instead",
            "author_association": "CONTRIBUTOR",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "mgorny",
                "id": 110765,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6265/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1396967411",
                    "id": 1396967411,
                    "created_at": "2023-01-19T13:20:32Z",
                    "updated_at": "2023-01-19T13:20:32Z",
                    "author_association": "NONE",
                    "body": "Thanks for the efforts, but I have updated as you instructed but still getting this error:\r\n\r\nC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.2544.0_x64__qbz5n2kfra8p0\\lib\\site-packages\\setuptools\\dist.py:771: UserWarning: Usage of dash-separated 'provides-extra' will not be supported in future versions. Please use the underscore name 'provides_extra' instead\r\n  warnings.warn(\r\nC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.2544.0_x64__qbz5n2kfra8p0\\lib\\site-packages\\setuptools\\dist.py:771: UserWarning: Usage of dash-separated 'requires-dist' will not be supported in future versions. Please use the underscore name 'requires_dist' instead\r\n  warnings.warn(\r\nC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.2544.0_x64__qbz5n2kfra8p0\\lib\\site-packages\\setuptools\\config\\setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.\r\n  warnings.warn(msg, warning_class)\r\nusage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\r\n   or: setup.py --help [cmd1 cmd2 ...]\r\n   or: setup.py --help-commands\r\n   or: setup.py cmd --help\r\n\r\nerror: no commands supplied",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1396967411/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "JeremyDega",
                        "id": 108669292,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00139085843693465,
                        "severe_toxicity": 9.846162720350549e-05,
                        "obscene": 0.00022628781152889132,
                        "threat": 0.00011266257934039459,
                        "insult": 0.00019069841073360294,
                        "identity_attack": 0.00013841144391335547
                    }
                }
            ]
        },
        "71": {
            "html_url": "https://github.com/psf/requests/issues/6255",
            "id": 1401998263,
            "number": 6255,
            "title": "Mention pickling in the docs for creating custom Transport Adapters",
            "created_at": "2022-10-08T16:38:53Z",
            "updated_at": "2022-10-08T16:38:53Z",
            "closed_at": null,
            "body": "While subclassing `HTTPAdapter` as well as `Session` the class variable `__attrs__` needs to be appended with any custom instance variables. Otherwise, the instance breaks during pickling, which can happen in many different scenarios - for example, during Django's `setUpTestData` deep copying/in-memory data isolation. I think it would be nice if this is mentioned in the documentation. \r\n\r\nThere's a classic example of a custom adapter for setting a timeout value that is mentioned in multiple blog posts. Unfortunately, all of these examples are essentially broken because of a lack of information about pickling and `__attrs__` class variable. \r\n\r\nAnd yet the pattern of overriding `__attrs__` exists in many open source libs, for example:\r\n\r\nhttps://github.com/requests/toolbelt/blob/master/requests_toolbelt/adapters/ssl.py#L46\r\nhttps://github.com/docker/docker-py/blob/main/docker/transport/unixconn.py#L57\r\n\r\nIf this pattern is so commonly used and needed, it might be a good idea to add it to the docs. Again, this is because so many people can stumble upon this issue.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "izabelakowal",
                "id": 9248891,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6255/reactions",
                "total_count": 1,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 1,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "72": {
            "html_url": "https://github.com/psf/requests/issues/6254",
            "id": 1400226001,
            "number": 6254,
            "title": "python context.verify_mode is ignored by requests module",
            "created_at": "2022-10-06T19:57:23Z",
            "updated_at": "2023-04-14T18:12:40Z",
            "closed_at": null,
            "body": "In the following code the response contains ssl error `SSL: CERTIFICATE_VERIFY_FAILED` although the default verify_mode `ssl.CERT_NONE` is set in the context by calling context=create_ssl_context() as hown below. I expected that I to get no ssl error.\r\n\r\nIt seems that `verify_mode` in the context is ignored by the requests module. It is not clear to me what attributes from the context are not ignored by the requests module? will it take context.minimum_version? Thanks\r\n\r\nCaused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1123)')))\r\n\r\n```\r\ndef create_ssl_context(verify_mode=ssl.CERT_NONE,\r\n                   key_file=None, cert_file=None,\r\n                   cafile=None,\r\n                   tls_min_version=None):\r\n    context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\r\n    context.verify_mode = verify_mode\r\n    if tls_min_version:\r\n        context.minimum_version = tls_min_version\r\n    if key_file or cert_file:\r\n        context.load_cert_chain(cert_file, key_file)\r\n    if cafile:\r\n        context.load_verify_locations(cafile)\r\n    else:\r\n        context.set_default_verify_paths()\r\n    return context\r\n\r\nclass SSLContextAdapter(requests.adapters.HTTPAdapter):\r\n   def __init__(self, ssl_context=None, **kwargs):\r\n      self.ssl_context = ssl_context\r\n      super().__init__(**kwargs)\r\n\r\n   def init_poolmanager(self, *args, **kwargs):\r\n      kwargs['ssl_context'] = self.ssl_context\r\n      return super(SSLContextAdapter, self).init_poolmanager(*args, **kwargs)\r\n\r\n\r\ndef client_side(context, hostname, data, headers):\r\n  s = requests.Session()\r\n  context = create_ssl_context()\r\n  s.mount('https://', SSLContextAdapter(context))\r\n  s.mount('http://', SSLContextAdapter(context))\r\n  print(context.verify_mode)\r\n  response = s.post(hostname, data=data, headers=headers)\r\n  print(response.text)\r\n\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "revit13",
                "id": 16211463,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6254/reactions",
                "total_count": 4,
                "+1": 4,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1509044240",
                    "id": 1509044240,
                    "created_at": "2023-04-14T18:12:39Z",
                    "updated_at": "2023-04-14T18:12:39Z",
                    "author_association": "NONE",
                    "body": "I identified the issue it is that the kwargs argument sends `verify` as True despite the adapter's verify_mode is is set to None.\r\nThe solution was to add a check to disable SSL certificate verification when the adapter's `ssl_context.verify_mode` is set to `ssl.CERT_NONE`, by setting the `verify` parameter to False in the `kwargs` argument.\r\nCheck the following [branch](https://github.com/eth7/requests/tree/fix-ssl-certification-validation-when-set-to-none).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1509044240/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eth7",
                        "id": 1451281,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000690842280164361,
                        "severe_toxicity": 0.00011434219777584076,
                        "obscene": 0.00018485962937120348,
                        "threat": 0.00011457751679699868,
                        "insult": 0.00017239230510313064,
                        "identity_attack": 0.00013535856851376593
                    }
                }
            ]
        },
        "73": {
            "html_url": "https://github.com/psf/requests/issues/6250",
            "id": 1391512671,
            "number": 6250,
            "title": "apparent_encoding should be cached since chardet can be slow",
            "created_at": "2022-09-29T21:15:59Z",
            "updated_at": "2022-09-30T11:33:01Z",
            "closed_at": null,
            "body": "We have some scraper code that sometimes gets back PDFs and other times gets back HTML. Today we learned that if you access r.text in a large-ish PDF (40MB), chardet is called, which uses a lot of CPU (and a ton of memory):\r\n\r\n```\r\nr = requests.get(some_url)\r\nr.text\r\n```\r\n\r\nThat's more or less fine (best not to try to get the text of a PDF this way), but if you access `r.text` more than once, chardet gets run over and over. \r\n\r\nWe have code like this that performs horribly:\r\n\r\n```\r\nr = requests.get(some_url)\r\nif bad_text in r.text:\r\n    continue\r\nif other_bad_text in r.text:\r\n    continue\r\n# ...many more tests...\r\n```\r\n\r\nWhen you access `r.text`, it checks if the encoding can come from the HTTP headers. If not, it runs the `apparent_encoding` property, which looks like:\r\n\r\n```\r\n    @property\r\n    def apparent_encoding(self):\r\n        \"\"\"The apparent encoding, provided by the charset_normalizer or chardet libraries.\"\"\"\r\n        return chardet.detect(self.content)[\"encoding\"]\r\n```\r\n\r\nI think that property should probably be cached since it's slow, so that repeated calls to r.text don't hurt so badly.\r\n\r\n## Expected Result\r\n\r\nI expected the calls to the text property to only calculate the encoding once per request.\r\n\r\n## Actual Result\r\n\r\nEach call to the text property re-calculates the encoding, which is slow and uses a lot of memory (this is probably a bug in chardet, but it uses hundreds of MB on a 40MB PDF right now).\r\n\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.209-116.363.amzn2.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010ef\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.5\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
            "author_association": "CONTRIBUTOR",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "mlissner",
                "id": 236970,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6250/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1262930007",
                    "id": 1262930007,
                    "created_at": "2022-09-29T23:22:56Z",
                    "updated_at": "2022-09-29T23:22:56Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "You can do this today by setting `r.encoding = r.apparent_encoding` ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1262930007/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000683632621075958,
                        "severe_toxicity": 0.00011512619676068425,
                        "obscene": 0.00017749803373590112,
                        "threat": 0.00012945184425916523,
                        "insult": 0.00017828949785325676,
                        "identity_attack": 0.00013529599527828395
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1262937102",
                    "id": 1262937102,
                    "created_at": "2022-09-29T23:35:22Z",
                    "updated_at": "2022-09-29T23:35:22Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Yeah, or by overriding the `text` or `apparent_encoding` methods. All of those approaches feel like workarounds though, right \u2014 or are you suggesting that the `apparent_encoding` method should set the `encoding` property when it finishes, and that could serve as the cache?\r\n\r\nOne other thought, I noticed that the `content` method actually has caching. Maybe instead of caching the `apparent_encoding` property, the `text` property should be cached to parallel how the the `content` one is.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1262937102/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mlissner",
                        "id": 236970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006482116878032684,
                        "severe_toxicity": 0.00012333692575339228,
                        "obscene": 0.00020085244614165276,
                        "threat": 0.00011876034113811329,
                        "insult": 0.0001762932224664837,
                        "identity_attack": 0.00013884436339139938
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1263458402",
                    "id": 1263458402,
                    "created_at": "2022-09-30T11:33:00Z",
                    "updated_at": "2022-09-30T11:33:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "No, I'm saying that while character detection can be slow, it usually isn't. If it's speed is a problem, the documented way if avoiding it is to set the encoding attribute yourself. This is you want it cached, set the encoding attribute yourself. It's easy and available today",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1263458402/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006365181179717183,
                        "severe_toxicity": 0.00011967980390181765,
                        "obscene": 0.00017346390814054757,
                        "threat": 0.00012821330165024847,
                        "insult": 0.00017799189663492143,
                        "identity_attack": 0.00014102192653808743
                    }
                }
            ]
        },
        "74": {
            "html_url": "https://github.com/psf/requests/issues/6248",
            "id": 1390004728,
            "number": 6248,
            "title": "`requests.utils._parse_content_type_header` gives the wrong value when multiple headers with the same name are present.",
            "created_at": "2022-09-28T22:16:12Z",
            "updated_at": "2023-11-26T20:27:09Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\nThe http rfc (specifically [section 4.2)](https://www.rfc-editor.org/rfc/rfc2616#section-4.2) allows multiple headers with the same name to be present, granted that they can be collapsed into a single header with comma separated values.\r\n\r\nWhen encountered with a response containing these headers:\r\n```\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Type: text/javascript\r\n```\r\nrequests parses them into a single dictionary value:\r\n```\r\n{'Content-Type': 'text/html; charset=UTF-8, text/javascript', ...}\r\n```\r\nbut `requests.utils._parse_content_type_header` parses it wrong, by assuming that charset is `UTF-8, text/javascript`, instead of `UTF-8`\r\n<!-- What you expected. -->\r\n\r\nI expected requests to give the correct encoding, or at least one of the encodings from the two headers, preferably the first, `UTF-8`.\r\n\r\n<!-- What happened instead. -->\r\n\r\nI get the encoding for the response set to `UTF-8, text/javascript`\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nres = requests.get(\"url-that-responds-with-two-content-headers\")\r\nprint(res.encoding)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.9.0-16-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010ef\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101000cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nSeeing that converting the `dict` to a `list` would be much more trouble, my proposed fix is to ignore characters after the first comma. `requests.utils._parse_content_type_header` would start with `tokens = header.split(',')[0].split(\";\")`.\r\n\r\nI can make a PR, if this bug is deemed true and if that is the solution.",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "iulian-birlica",
                "id": 103742086,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6248/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1262467993",
                    "id": 1262467993,
                    "created_at": "2022-09-29T15:44:25Z",
                    "updated_at": "2022-09-29T15:44:41Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "A few things:\n\n1. I don't believe that requests is responsible for collapsing the headers here. I think one of our dependencies needs to be more careful with folding. \n\n1. Two Content-Type headers are not foldable if my memory serves correctly nor are the semantics of two Content-Type headers defined. Your assumption that utf8 is correct here is undefined behavior to the best of my knowledge. There's no clarity on this case\n\n```\nContent-Type: text/html; charset=cp-1252\nContent-Type: text/plain; charset=utf-8\n```\n\nWhich is the correct content type header? Those charsets are not compatible entirely. The server is sending mixed signals and shouldn't be sending two.\n\nIf we attempt to solve this, how do we handle `N` charsets from `M` Content-Type headers? Which one should be picked?\n\nI agree currently it's not great but I don't think we should try to define behavior arbitrarily because that's going to break someone else. I would prefer we raise an exception if we can detect this case but that's slightly backwards incompatible as this might \"Just Work\" if the headers were reversed in the order it sends them. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1262467993/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006268244469538331,
                        "severe_toxicity": 0.00012111452087992802,
                        "obscene": 0.00017822252993937582,
                        "threat": 0.00013055909948889166,
                        "insult": 0.00017325958469882607,
                        "identity_attack": 0.00014102448767516762
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1826888053",
                    "id": 1826888053,
                    "created_at": "2023-11-26T20:27:08Z",
                    "updated_at": "2023-11-26T20:27:08Z",
                    "author_association": "NONE",
                    "body": "Perhaps a warning could be raised instead? This is both backwards compatible and the warning message can describe the sunsetting of this behaviour with the exception-raising behaviour being introduced in a future version?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1826888053/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "goelbenj",
                        "id": 59181809,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006743781850673258,
                        "severe_toxicity": 0.00011523604189278558,
                        "obscene": 0.00017459526134189218,
                        "threat": 0.00012805763981305063,
                        "insult": 0.00017767108511179686,
                        "identity_attack": 0.00013749170466326177
                    }
                }
            ]
        },
        "75": {
            "html_url": "https://github.com/psf/requests/issues/6245",
            "id": 1382483856,
            "number": 6245,
            "title": "Cookie having a Domain cookie-attribute with empty string fails to be added to the cookie jar ",
            "created_at": "2022-09-22T13:46:49Z",
            "updated_at": "2023-04-15T13:27:10Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\nUsing requests to access an API hosted on an application server we noticed that cookies were not added to the cookie jar in the session.  \r\nIt seems that after an upgrade to the application server framework it adds a `domain=;` cookie-attribute to the cookies in the response.\r\n\r\n## Expected Result\r\n\r\nThe cookie to be added to the jar\r\n\r\n## Actual Result\r\n\r\nThe cookie is dropped.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport unittest\r\nfrom typing import Tuple\r\nfrom unittest.mock import MagicMock\r\n\r\nimport requests\r\nfrom hamcrest import assert_that, has_length\r\n\r\n\r\nclass TestMissingSessionCookieIssue(unittest.TestCase):\r\n    @staticmethod\r\n    def __make_mocks(cookie_header_value: str) -> Tuple[MagicMock, MagicMock]:\r\n        message = MagicMock()\r\n        message.get_all.side_effect = [[], [cookie_header_value]]\r\n\r\n        response = MagicMock()\r\n        response.info.return_value = message\r\n\r\n        request = MagicMock()\r\n        request.get_full_url.return_value = \"http://localhost:1234/page\"\r\n        request.origin_req_host = \"localhost\"\r\n\r\n        return request, response\r\n\r\n    def test_cookie_with_no_domain(self) -> None:\r\n        request, response = self.__make_mocks(\"SESSION_ID=12345678; HttpOnly; Path=/page; SameSite=Strict\")\r\n        session = requests.session()\r\n\r\n        session.cookies.extract_cookies(response, request)\r\n\r\n        assert_that(session.cookies, has_length(1))\r\n\r\n    def test_cookie_with_empty_domain(self) -> None:\r\n        request, response = self.__make_mocks(\"SESSION_ID=12345678; domain=; path=/page; samesite=strict; httponly\")\r\n        session = requests.session()\r\n\r\n        session.cookies.extract_cookies(response, request)\r\n\r\n        assert_that(session.cookies, has_length(1))\r\n\r\n```\r\nRequirements:\r\n* `PyHamcrest==2.0.2`\r\n* `requests==2.28.1`\r\n* Python 3.9\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.14.0-1052-oem\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "ecclejau",
                "id": 95308897,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6245/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1509824523",
                    "id": 1509824523,
                    "created_at": "2023-04-15T13:27:10Z",
                    "updated_at": "2023-04-15T13:27:10Z",
                    "author_association": "NONE",
                    "body": "\r\nThe issue is that the `set_ok_domain` function from the `DefaultCookiePolicy` from the `cookiejar` library does not allow a mismatch between request host and cookie domain.\r\nIn this code snippet below, the `set_ok` method has been overridden to always return `True`, effectively allowing any cookie to be set regardless of the request host and cookie domain match.\r\nIt's important to keep in mind that this should not be used in production.\r\nYou can however verify that it is indeed the `DefaultCookiePolicy`, which prevents such use-cases, as the empty string in the domain.\r\n\r\n\r\n```python\r\nimport requests\r\nfrom http import cookiejar\r\n\r\n\r\nclass DangerouslyAllowEverything(cookiejar.CookiePolicy):\r\n    def set_ok(self, *args, **kwargs):\r\n        return True\r\n\r\n    netscape = True\r\n    rfc2965 = False\r\n\r\n\r\nsession = requests.session()\r\nsession.cookies.set_policy(DangerouslyAllowEverything())\r\nresponse = session.get(\"http://localhost\")\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1509824523/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eth7",
                        "id": 1451281,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011277776211500168,
                        "severe_toxicity": 0.00010330130317015573,
                        "obscene": 0.00020695023704320192,
                        "threat": 0.00011437950161052868,
                        "insult": 0.00018513605755288154,
                        "identity_attack": 0.00014277097943704575
                    }
                }
            ]
        },
        "76": {
            "html_url": "https://github.com/psf/requests/issues/6238",
            "id": 1374478536,
            "number": 6238,
            "title": "LookupDict does not implement full contract of the dict class",
            "created_at": "2022-09-15T12:48:54Z",
            "updated_at": "2022-10-07T15:10:36Z",
            "closed_at": null,
            "body": "`LookupDict` absolutely includes all of the dict methods. In particular, it allows the use of `__setitem__` and other things from the dict class. It specifically does only one thing, which is override `__getitem__` to allow returning `None`.\r\n\r\nSo it's not ok to replace the dict with `object` in this case, even though the requests codebase doesn't use that functionality.\r\n\r\nThanks for reporting this issue though, and I hope you keep reading through the codebase!\r\n\r\n_Originally posted by @Lukasa in https://github.com/psf/requests/issues/3848#issuecomment-277197592_\r\n\r\nThis is unfortunately a false statement. Take a look on the following checks:\r\n```\r\nIn [1]: from requests.status_codes import codes\r\n\r\nIn [2]: codes\r\nOut[2]: <lookup 'status_codes'>\r\n\r\nIn [3]: codes.keys()\r\nOut[3]: dict_keys([])\r\n\r\nIn [4]: list(codes.keys())\r\nOut[4]: []\r\n```\r\nIf `LookupDict` pretends to quack like a duck it should do so. Or it should not derive from the `dict` if it works even worse:\r\n```\r\nIn [8]: from requests.status_codes import codes\r\n\r\nIn [9]: codes[\"my_code\"] = 700\r\n\r\nIn [10]: list(codes.keys())\r\nOut[10]: ['my_code']\r\n\r\nIn [11]: codes[\"my_code\"]\r\n\r\nIn [12]: \r\n```",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "michal-klimek",
                "id": 1168419,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6238/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1264633434",
                    "id": 1264633434,
                    "created_at": "2022-10-02T12:35:31Z",
                    "updated_at": "2022-10-02T12:38:27Z",
                    "author_association": "NONE",
                    "body": "@Lukasa , @sigmavirus24 \r\n`LookupDict` object inherits `dict` object , so it's basically a dictionary. However, when setting a key to a value like `codes[\"my_code\"] = 700` from @michal-klimek example, that key is inaccessible because `__getitem__` and `get` methods have been overridden only to access the object's attributes.\r\nTo resolve this issue, we can override the `__setitem__` to write key-value pairs to object's attributes or `__dict__`.\r\nDo you agree with this solution?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1264633434/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Ali-Xoerex",
                        "id": 20272177,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006866395124234259,
                        "severe_toxicity": 0.00011534487566677853,
                        "obscene": 0.00018328231817577034,
                        "threat": 0.00012008321209577844,
                        "insult": 0.00017530540935695171,
                        "identity_attack": 0.0001380668836645782
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1271722313",
                    "id": 1271722313,
                    "created_at": "2022-10-07T15:10:36Z",
                    "updated_at": "2022-10-07T15:10:36Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "1. It doesn't really need to be a dictionary\n1. I don't believe we intended the dictionary to be extendable\n1. If we did want it to be extendable, we'd have made a good API to allow for that ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1271722313/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005676810396835208,
                        "severe_toxicity": 0.0001306726917391643,
                        "obscene": 0.0001885225938167423,
                        "threat": 0.0001368113880744204,
                        "insult": 0.0001762762403814122,
                        "identity_attack": 0.000144048040965572
                    }
                }
            ]
        },
        "77": {
            "html_url": "https://github.com/psf/requests/pull/6237",
            "id": 1368938993,
            "number": 6237,
            "title": "Improved documentation of exceptions in api.rst",
            "created_at": "2022-09-11T12:57:23Z",
            "updated_at": "2022-09-11T12:57:23Z",
            "closed_at": null,
            "body": "Added use cases and inheritance information for the common types of exceptions that are listed in docs/api.rst. Documentation already exists for the main interface, request sessions, and lower-level classes on the website, so those may want to be moved into api.rst as well for consistent formatting. Alternatively, this information could also be chosen to move to the website. I am open to any changes we might want to make to improve this documentation and help users better understand the exceptions their code may be throwing.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "mhayworth",
                "id": 73895101,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6237/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "78": {
            "html_url": "https://github.com/psf/requests/issues/6228",
            "id": 1360883908,
            "number": 6228,
            "title": "Explain the status and the future of the library (in PR template, README, docs site)",
            "created_at": "2022-09-03T15:12:06Z",
            "updated_at": "2023-04-06T19:38:02Z",
            "closed_at": null,
            "body": "Attempting to file a new feature request shows the text:\r\n\r\n> Requests is not accepting feature requests at this time.\r\n\r\nFair enough, there must be reason for that (e.g. lack of maintainers).\r\n\r\nHowever, maybe explain a bit more - if new features are not accepted, what is the future of the library in general? You could:\r\n\r\n- Pin a ticket on the issue tracker\r\n- Add a note to the README\r\n- And/or maybe to the docs site\r\n\r\nCurrent state leaves people (at least me) searching/googling for the status and explanation, yet nothing is found?",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "tuukkamustonen",
                "id": 94327,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6228/reactions",
                "total_count": 5,
                "+1": 5,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1378011500",
                    "id": 1378011500,
                    "created_at": "2023-01-10T23:06:44Z",
                    "updated_at": "2023-01-10T23:06:44Z",
                    "author_association": "NONE",
                    "body": "Additionally to this, it would be useful to know what issues are coming into the next release, and a sort of ETA / timeline of releases. I'm currently waiting for the next release, and if it wasn't for someone else also asking that question in an issue \"when is the next release coming?\" I wouldn't know... It doesn't seem to be documented anywhere (site or repo or otherwise).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1378011500/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bourgeoisor",
                        "id": 3271352,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005570798530243337,
                        "severe_toxicity": 0.00013169141311664134,
                        "obscene": 0.00020045830751769245,
                        "threat": 0.0001280505530303344,
                        "insult": 0.0001770662929629907,
                        "identity_attack": 0.00014089477190282196
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1379495229",
                    "id": 1379495229,
                    "created_at": "2023-01-11T21:17:44Z",
                    "updated_at": "2023-01-11T21:17:44Z",
                    "author_association": "MEMBER",
                    "body": "@bourgeoisor You should be able to find the currently flagged changes for upcoming releases in our [Milestones](https://github.com/psf/requests/milestone/31), GitHub's standard mechanism for tracking changes. There is no formal release schedule but I'll note the current cadence in a future PR.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1379495229/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005421456880867481,
                        "severe_toxicity": 0.00013114616740494967,
                        "obscene": 0.00018975359853357077,
                        "threat": 0.00012956965656485409,
                        "insult": 0.00017555883096065372,
                        "identity_attack": 0.000142730277730152
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1379498979",
                    "id": 1379498979,
                    "created_at": "2023-01-11T21:21:23Z",
                    "updated_at": "2023-01-11T21:21:23Z",
                    "author_association": "NONE",
                    "body": "That's an oversight on my part-- The changes _are_ indeed in the GitHub Milestones. Thank you for documenting the expected release cadence, that would help a lot!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1379498979/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bourgeoisor",
                        "id": 3271352,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006405410240404308,
                        "severe_toxicity": 0.00011920940596610308,
                        "obscene": 0.00018008121696766466,
                        "threat": 0.00013118007336743176,
                        "insult": 0.00017660058801993728,
                        "identity_attack": 0.00013756305270362645
                    }
                }
            ]
        },
        "79": {
            "html_url": "https://github.com/psf/requests/issues/6221",
            "id": 1355430987,
            "number": 6221,
            "title": "allow_redirect will ignore HSTS(STRICT-TRANSPORT-SECURITY)",
            "created_at": "2022-08-30T09:08:54Z",
            "updated_at": "2022-08-30T09:08:54Z",
            "closed_at": null,
            "body": "while a website set header STRICT-TRANSPORT-SECURITY, it means tell browser use https, but requests is not judged\r\n\r\n## Expected Result\r\n\r\nsometimes, developer set 302 and redirect website to http . at the same time, someone config header with STRICT-TRANSPORT-SECURITY. To browser, this will be ok, but to requests, not able to access http://example.com because of use http protocol\r\n\r\n## Actual Result\r\n\r\n![image](https://user-images.githubusercontent.com/100894276/187396909-9a671bd7-c374-4ec1-b461-8f17379e56dc.png)\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nr = requests.get('exmaple.com', allow_redirect=True)\r\nr.status_code ==> 502\r\n\r\nIn Chrome:\r\nr.status_code == 200\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"37.0.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"30000030\",\r\n    \"version\": \"22.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010df\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\n\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "zer0ty",
                "id": 100894276,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6221/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "80": {
            "html_url": "https://github.com/psf/requests/issues/6211",
            "id": 1327625146,
            "number": 6211,
            "title": "Merge types-requests into psf/requests with py.typed marker",
            "created_at": "2022-08-03T18:24:02Z",
            "updated_at": "2022-08-03T18:53:30Z",
            "closed_at": null,
            "body": "This issue is to merge the existing type hints available in typeshed ([here](https://github.com/python/typeshed/tree/master/stubs/requests)) into this repository.\r\n\r\nCurrently, psf/requests supports only Python 3.7+ per https://github.com/psf/requests/blob/main/setup.py#L10\r\n\r\nAs a result, type-related code would not impact usability by end users. Performance concerns related to additional imports may also be addressed by protecting the type-only imports under the `typing.TYPE_CHECKING` boolean and using the correct syntax downstream.\r\n\r\nBy making this change, it will keep type information paired with the code, ensuring they get updated together, it will reduce the maintenance burden on the typeshed team (not requested, just a side effect), and will enable more users to get type-hint related information without having to install separate packages.\r\n\r\nDepending on your point of view on type hints, they also can reduce the risk of bugs caused by refactoring.",
            "author_association": "CONTRIBUTOR",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "kkirsche",
                "id": 947110,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6211/reactions",
                "total_count": 5,
                "+1": 5,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1204346960",
                    "id": 1204346960,
                    "created_at": "2022-08-03T18:48:03Z",
                    "updated_at": "2022-08-03T18:48:03Z",
                    "author_association": "MEMBER",
                    "body": "Hi @kkirsche,\r\n\r\nWe've looked at doing this before. There are a number of issues with the existing typeshed hints we found during our last review. We have a feature branch looking at getting some level of typing integrated in the future but there is currently no timeline for this.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1204346960/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005518376710824668,
                        "severe_toxicity": 0.00013026340457145125,
                        "obscene": 0.00018598300812300295,
                        "threat": 0.00013285860768519342,
                        "insult": 0.00017818479682318866,
                        "identity_attack": 0.0001453343138564378
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1204352320",
                    "id": 1204352320,
                    "created_at": "2022-08-03T18:53:30Z",
                    "updated_at": "2022-08-03T18:53:30Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Understandable. Some aspects will certainly depend on your philosophies about type hints (e.g. functionally won't crash vs. expected usage) and there are some weird oddities about semantic meanings in a type checker with types like `Any` vs. `object` that weren't clear to me before starting to contribute more type hints.\r\n\r\nLet me know if there's anything you need support on for that goal :) ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1204352320/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kkirsche",
                        "id": 947110,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005753608420491219,
                        "severe_toxicity": 0.00012722051178570837,
                        "obscene": 0.00018479142454452813,
                        "threat": 0.00013221193512436002,
                        "insult": 0.0001790264213923365,
                        "identity_attack": 0.00014188246859703213
                    }
                }
            ]
        },
        "81": {
            "html_url": "https://github.com/psf/requests/issues/6205",
            "id": 1320190408,
            "number": 6205,
            "title": "Transport adapters not honored with proxy",
            "created_at": "2022-07-27T22:34:31Z",
            "updated_at": "2022-08-02T07:20:27Z",
            "closed_at": null,
            "body": "hi,\r\n\r\nmaking a poor socks server at localhost on port 8001 with ssh/sshd running at localhost :\r\n```console\r\n@term1$ ssh -N -D localhost:8001 localhost\r\n```\r\n\r\nmaking a self-signed certificate for testing and debuging negociations on server side with s_server@openssl :\r\n```console\r\n@term2$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes \r\n        while :\r\n        do\r\n            echo -e \"HTTP/1.0 200 OK\\nContent-Length: 0\\n\\n\" |\r\n            openssl s_server -4 -cert cert.pem -key key.pem -accept 4433 -msg\r\n        done\r\n```\r\n\r\ngetting `requests` informations :\r\n```console\r\n@term3$ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.0-1057-oem\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010106f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.8\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nrunning `requests` simply :\r\n```console\r\n@term3$ python <<~~~\r\nimport requests\r\nurl = \"https://localhost:4433/\"\r\nsession = requests.Session()\r\nresponse = session.head(url=url, verify=False)\r\n~~~\r\n```\r\n\r\nTLS1.3 by default :\r\n```console\r\n@term2$ ...\r\n        <<< TLS 1.3, Handshake [length 0034], Finished\r\n        ...\r\n        >>> TLS 1.3, Handshake [length 00e9], NewSessionTicket\r\n        ...\r\n```\r\n\r\nrunning `requests` with transport adapter only :\r\n```console\r\n@term3$ python <<~~~\r\nimport ssl\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\nfrom urllib3.poolmanager import PoolManager\r\nclass TestHTTPAdapter(HTTPAdapter):\r\n    def init_poolmanager(self, connections, maxsize, block=False):\r\n        self.poolmanager = PoolManager(\r\n            num_pools=connections,\r\n            maxsize=maxsize,\r\n            block=block,\r\n            ssl_version=ssl.PROTOCOL_TLSv1_2\r\n        )\r\nurl = \"https://localhost:4433/\"\r\nsession = requests.Session()\r\nsession.mount(url, TestHTTPAdapter())\r\nresponse = session.head(url=url, verify=False)\r\n~~~\r\n```\r\n\r\nTLS1.2 is OK :slightly_smiling_face: :\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```\r\n\r\nrunning `requests` with transport adapter **and socks proxy** :\r\n```console\r\n@term3$ python <<~~~\r\nimport ssl\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\nfrom urllib3.poolmanager import PoolManager\r\nclass TestHTTPAdapter(HTTPAdapter):\r\n    def init_poolmanager(self, connections, maxsize, block=False):\r\n        self.poolmanager = PoolManager(\r\n            num_pools=connections,\r\n            maxsize=maxsize,\r\n            block=block,\r\n            ssl_version=ssl.PROTOCOL_TLSv1_2\r\n        )\r\nurl = \"https://localhost:4433/\"\r\nsession = requests.Session()\r\nsession.mount(url, TestHTTPAdapter())\r\nproxies={\"https\":\"socks5://localhost:8001\"}\r\nresponse = session.head(url=url, proxies=proxies, verify=False)\r\n~~~\r\n```\r\n\r\nTLS1.2 is **KO** :slightly_frowning_face: :\r\n```console\r\n@term2$ ...\r\n        <<< TLS 1.3, Handshake [length 0034], Finished\r\n        ...\r\n        >>> TLS 1.3, Handshake [length 00e9], NewSessionTicket\r\n        ...\r\n```\r\n\r\n`requests` has the same behavior whether `pyopenssl` is present/used or not.\r\nHTTP/HTTPS proxies not tested : sorry.\r\n\r\nregards, lacsaP.\r\n\r\n---\r\n\r\nnote that `httpie` works as expected :\r\n```console\r\n@term4$ https --verify no https://localhost:4433\r\nHTTP/1.0 200 OK\r\nContent-Length: 0\r\n```\r\n```console\r\n@term2$ ...\r\n        <<< TLS 1.3, Handshake [length 0034], Finished\r\n        ...\r\n        >>> TLS 1.3, Handshake [length 00e9], NewSessionTicket\r\n        ...\r\n```\r\n```console\r\n@term4$ https --ssl tls1.2 --verify no https://localhost:4433\r\nHTTP/1.0 200 OK\r\nContent-Length: 0\r\n```\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```\r\n```console\r\n@term4$ https --ssl tls1.2 --verify no --proxy https:socks5://localhost:8001 https://localhost:4433\r\nHTTP/1.0 200 OK\r\nContent-Length: 0\r\n```\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```\r\n\r\nas well as `urllib3` :\r\n```console\r\n@term5$ python <<~~~\r\nimport urllib3\r\nhttps = urllib3.PoolManager(cert_reqs='CERT_NONE')\r\nr = https.request('GET', 'https://localhost:4433')\r\n~~~\r\n```\r\n```console\r\n@term2$ ...\r\n        <<< TLS 1.3, Handshake [length 0034], Finished\r\n        ...\r\n        >>> TLS 1.3, Handshake [length 00e9], NewSessionTicket\r\n        ...\r\n```\r\n```console\r\n@term5$ python <<~~~\r\nimport ssl, urllib3\r\nhttps = urllib3.PoolManager(cert_reqs='CERT_NONE', ssl_version=ssl.PROTOCOL_TLSv1_2)\r\nr = https.request('GET', 'https://localhost:4433')\r\n~~~\r\n```\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```\r\n```console\r\n@term5$ python <<~~~\r\nimport ssl\r\nfrom urllib3.contrib.socks import SOCKSProxyManager\r\nsocks = SOCKSProxyManager('socks5h://localhost:8001/', cert_reqs='CERT_NONE', ssl_version=ssl.PROTOCOL_TLSv1_2)\r\nr = socks.request('GET', 'https://localhost:4433')\r\n~~~\r\n```\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "patatetom",
                "id": 14196171,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6205/reactions",
                "total_count": 2,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 1
            },
            "assignees": [],
            "comments_details": []
        },
        "82": {
            "html_url": "https://github.com/psf/requests/pull/6192",
            "id": 1298956810,
            "number": 6192,
            "title": "Fix the popitem bug in cookies",
            "created_at": "2022-07-08T12:27:41Z",
            "updated_at": "2024-05-20T14:17:03Z",
            "closed_at": null,
            "body": "Closes #6190 ",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "kianelbo",
                "id": 34425507,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6192/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "83": {
            "html_url": "https://github.com/psf/requests/issues/6190",
            "id": 1293744958,
            "number": 6190,
            "title": "requests.cookies.RequestsCookieJar: popitem() does not work",
            "created_at": "2022-07-05T03:39:54Z",
            "updated_at": "2022-11-16T15:53:28Z",
            "closed_at": null,
            "body": "`requests.cookies.RequestsCookieJar`'s `popitem()` method doesn't seem to work even if cookies is not empty.\r\n\r\n## Expected Result\r\n\r\nFrom [the doc](https://requests.readthedocs.io/en/latest/api/#requests.cookies.RequestsCookieJar.popitem):\r\n\r\n>remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty.\r\n\r\n(Also, I'm not sure what exactly is \"D\" here. I assume it means the cookies obj itself.)\r\n\r\n## Actual Result\r\n\r\nIt always raises KeyError even when it's not empty.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nr = requests.get('https://google.com')\r\nprint(len(r.cookies)) # = 3\r\n\r\nr.cookies.popitem()\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.10\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"3.4.8\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010cf\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010107f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.3\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "fireattack",
                "id": 4130991,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6190/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1178935738",
                    "id": 1178935738,
                    "created_at": "2022-07-08T12:31:54Z",
                    "updated_at": "2022-07-08T12:31:54Z",
                    "author_association": "NONE",
                    "body": "I found the issue and hopefully fixed it but I couldn't find the documentation entry, perhaps because `popitem` is not implemented explicitly in the code. Is there any way to improve the doc?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1178935738/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kianelbo",
                        "id": 34425507,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006154531147330999,
                        "severe_toxicity": 0.00012150526890764013,
                        "obscene": 0.00018237459880765527,
                        "threat": 0.00011959880794165656,
                        "insult": 0.00017995110829360783,
                        "identity_attack": 0.00014071728219278157
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1179217480",
                    "id": 1179217480,
                    "created_at": "2022-07-08T17:30:12Z",
                    "updated_at": "2022-07-08T17:30:12Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Correct @kianelbo support was not intended for that method but we can't use the mapping interface without it. To be fair, exposing cookies as if they're a simple mapping was a huge design mistake. Unfortunately we're here now so I think we have to fix this unless @nateprewitt or @sethmlarson agree that we should fix the cookies design in some other backwards compatible fashion",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1179217480/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006930586532689631,
                        "severe_toxicity": 0.00011321515921736136,
                        "obscene": 0.000171358507941477,
                        "threat": 0.000124955055071041,
                        "insult": 0.0001785683271009475,
                        "identity_attack": 0.00014159499551169574
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1179219475",
                    "id": 1179219475,
                    "created_at": "2022-07-08T17:32:53Z",
                    "updated_at": "2022-07-08T17:32:53Z",
                    "author_association": "MEMBER",
                    "body": "Yeah, I agree we should just fix it. Long term, I'm in favor of us reworking cookies entirely, as we've discussed before.\n\nFor the moment, this seems reasonably straight forward to get the inherited methods working. Can we get a quick manual pass to verify this fixes the others that come through mapping?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1179219475/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005263375933282077,
                        "severe_toxicity": 0.00013642877456732094,
                        "obscene": 0.00018866933532990515,
                        "threat": 0.00013846729416400194,
                        "insult": 0.00018066803750116378,
                        "identity_attack": 0.00015006632020231336
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1191289846",
                    "id": 1191289846,
                    "created_at": "2022-07-21T09:59:27Z",
                    "updated_at": "2022-07-21T09:59:27Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt do you mean just making the inherited methods work for now? They're currently ok other than `popitem` which the PR fixes.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1191289846/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kianelbo",
                        "id": 34425507,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014184152241796255,
                        "severe_toxicity": 9.512846736470237e-05,
                        "obscene": 0.00021456097601912916,
                        "threat": 9.485653572482988e-05,
                        "insult": 0.00019692648493219167,
                        "identity_attack": 0.00013958761701360345
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1191641635",
                    "id": 1191641635,
                    "created_at": "2022-07-21T15:37:26Z",
                    "updated_at": "2022-07-21T15:37:26Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for confirming, @kianelbo. I have your PR on the shortlist for review this week and we'll look at getting this change added.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1191641635/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005338597111403942,
                        "severe_toxicity": 0.00013151171151548624,
                        "obscene": 0.0001890127023216337,
                        "threat": 0.00013504168600775301,
                        "insult": 0.00017649185610935092,
                        "identity_attack": 0.000141435899422504
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1317238254",
                    "id": 1317238254,
                    "created_at": "2022-11-16T15:53:28Z",
                    "updated_at": "2022-11-16T15:53:28Z",
                    "author_association": "NONE",
                    "body": "Hi. Any plans for reviewing the PR? I was really excited to see it merged.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1317238254/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kianelbo",
                        "id": 34425507,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005523030995391309,
                        "severe_toxicity": 0.00012916442938148975,
                        "obscene": 0.000183288604603149,
                        "threat": 0.00013046726235188544,
                        "insult": 0.0001781358732841909,
                        "identity_attack": 0.00014394217578228563
                    }
                }
            ]
        },
        "84": {
            "html_url": "https://github.com/psf/requests/pull/6186",
            "id": 1288922045,
            "number": 6186,
            "title": "refactor: prefer f-strings to format where fits within black lengths",
            "created_at": "2022-06-29T15:46:13Z",
            "updated_at": "2022-06-29T15:46:13Z",
            "closed_at": null,
            "body": "Python added f-strings in version 3.6, with [PEP 498](https://www.python.org/dev/peps/pep-0498/). F-strings are a flexible and powerful way to format strings. They make the code shorter and more readable, since the code now looks more like the output.\r\n\r\nF-Strings are also more performant than using `.format` (e.g. see [F-String Speed Considerations](https://realpython.com/lessons/f-strings-speed-considerations-performance/), [F-String Benchmarks](https://www.scivision.dev/python-f-string-speed/) for two quick examples) because the python runtime can insert the variables into the string while parsing rather than backtracking to insert them into the placeholders, reducing the number of times the lines need to be processed",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "kkirsche",
                "id": 947110,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6186/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "85": {
            "html_url": "https://github.com/psf/requests/pull/6185",
            "id": 1288910937,
            "number": 6185,
            "title": "refactor: use contextlib.suppress instead of empty except",
            "created_at": "2022-06-29T15:37:24Z",
            "updated_at": "2022-06-29T15:37:24Z",
            "closed_at": null,
            "body": "Use [contextlib](https://docs.python.org/3/library/contextlib.html)'s suppress method to silence a specific error, instead of passing in an exception handler.\r\n\r\nThe context manager slightly shortens the code and significantly clarifies the author's intention to ignore the specific errors. The standard library feature was introduced following a [discussion](https://bugs.python.org/issue15806), where the consensus was that\r\n\r\n> A key benefit here is in the priming effect for readers... The with statement form makes it clear before you start reading the code that certain exceptions won't propagate.",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "kkirsche",
                "id": 947110,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6185/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "86": {
            "html_url": "https://github.com/psf/requests/pull/6172",
            "id": 1278928229,
            "number": 6172,
            "title": "Clarify setting proxies exceptions",
            "created_at": "2022-06-21T19:12:01Z",
            "updated_at": "2024-10-25T16:49:28Z",
            "closed_at": null,
            "body": "This adds an example for the `NO_PROXY` environment variable and explains making exceptions to the proxy settings using per-host proxy entries.",
            "author_association": "CONTRIBUTOR",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "RichieB2B",
                "id": 1461970,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6172/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1404091976",
                    "id": 1404091976,
                    "created_at": "2023-01-25T18:58:28Z",
                    "updated_at": "2023-01-25T18:58:28Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@nateprewitt Can this be merged please? This still [confuses](https://github.com/psf/requests/pull/5596#issuecomment-1403476580) many people.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1404091976/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "RichieB2B",
                        "id": 1461970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006769361207261682,
                        "severe_toxicity": 0.00011581559374462813,
                        "obscene": 0.000180003626155667,
                        "threat": 0.00011972762877121568,
                        "insult": 0.00017747332458384335,
                        "identity_attack": 0.00013667604071088135
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2438311979",
                    "id": 2438311979,
                    "created_at": "2024-10-25T16:49:27Z",
                    "updated_at": "2024-10-25T16:49:27Z",
                    "author_association": "NONE",
                    "body": "Bumping this.\r\nI spent several days trying to sort out why a no_proxy setting wasn't working in a python system, and would have really loved to have this clarification in the docs.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2438311979/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jrsaller",
                        "id": 46573133,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005814711330458522,
                        "severe_toxicity": 0.00012983383203390986,
                        "obscene": 0.00019550087745301425,
                        "threat": 0.00013316606055013835,
                        "insult": 0.00017750666302163154,
                        "identity_attack": 0.0001408352836733684
                    }
                }
            ]
        },
        "87": {
            "html_url": "https://github.com/psf/requests/issues/6167",
            "id": 1276016823,
            "number": 6167,
            "title": "InvalidHeader exception when trying to add a \":method\" header field (breaking change in 2.28.0)",
            "created_at": "2022-06-19T10:26:03Z",
            "updated_at": "2024-04-11T14:07:41Z",
            "closed_at": null,
            "body": "My app is making a POST request enforcing some specific header fields. Among them, I was able to explicitly enforce a \":method\" header field. But since 2.28.0, this now raises the following error: \r\n\r\n`requests.exceptions.InvalidHeader: Invalid leading whitespace, reserved character(s), or returncharacter(s) in header name: ':method'`\r\n\r\nEnforcing this header field is possibly a widespread practice as this is part of the requirements for sending notifications through Apple's push notification servers. \r\n",
            "author_association": "NONE",
            "comments": 16,
            "state": "open",
            "user": {
                "login": "Alex8768765",
                "id": 107793741,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6167/reactions",
                "total_count": 6,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 3
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1159742141",
                    "id": 1159742141,
                    "created_at": "2022-06-19T14:32:30Z",
                    "updated_at": "2022-06-19T14:32:30Z",
                    "author_association": "MEMBER",
                    "body": "Hi @Alex8768765,\r\n\r\nCan you please provide the info we originally requested in the issue template? The header you're using isn't valid in the HTTP spec, so it seems unlikely this would be widespread. Python itself rejects sending a header like this in our supported versions.\r\n\r\n```python\r\n>>> requests.__version__\r\n'2.27.1'\r\n>>> r = requests.get('https://httpbin.org/get', headers={':method': 'test'})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/requests/sessions.py\", line 529, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/requests/sessions.py\", line 645, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/requests/adapters.py\", line 450, in send\r\n    timeout=timeout\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 710, in urlopen\r\n    chunked=chunked,\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 398, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/urllib3/connection.py\", line 239, in request\r\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/http/client.py\", line 1281, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/http/client.py\", line 1322, in _send_request\r\n    self.putheader(hdr, value)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/site-packages/urllib3/connection.py\", line 224, in putheader\r\n    _HTTPConnection.putheader(self, header, *values)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.7.12/lib/python3.7/http/client.py\", line 1249, in putheader\r\n    raise ValueError('Invalid header name %r' % (header,))\r\nValueError: Invalid header name b':method'\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1159742141/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007521208026446402,
                        "severe_toxicity": 0.00011177176202181727,
                        "obscene": 0.0001910372666316107,
                        "threat": 0.00011195607658009976,
                        "insult": 0.00017165057943202555,
                        "identity_attack": 0.0001341415336355567
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1159771316",
                    "id": 1159771316,
                    "created_at": "2022-06-19T16:32:02Z",
                    "updated_at": "2022-06-19T16:32:02Z",
                    "author_association": "NONE",
                    "body": "Apologies, I missed that the impacted piece of code was using Requests together with a 3rd party HTTP/2 adapter. \r\n\r\n```\r\nfrom hyper.contrib import HTTP20Adapter\r\nimport requests\r\ns = requests.Session()\r\ns.mount(\"https://httpbin.org/get\", HTTP20Adapter())\r\nr = s.post(\"https://httpbin.org/get\", headers={':method': 'test'})\r\n```\r\n\r\nThat 3rd party adapter does not seem to be a maintained project as we speak, so I understand my issue is essentially finding the proper way to make HTTP/2 requests. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1159771316/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Alex8768765",
                        "id": 107793741,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006187944673001766,
                        "severe_toxicity": 0.00012099596642656252,
                        "obscene": 0.000190001999726519,
                        "threat": 0.0001192053168779239,
                        "insult": 0.000174105676705949,
                        "identity_attack": 0.00013726325414609164
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1159775219",
                    "id": 1159775219,
                    "created_at": "2022-06-19T16:55:27Z",
                    "updated_at": "2022-06-19T16:55:43Z",
                    "author_association": "MEMBER",
                    "body": "Hrmm, well that does pose a problem. While Requests only supports http/1.1, Hyper has been \"compatible\" for quite a while.\n\nI'll need to take a look at possible escape hatches. Ideally, we can update the hyper example to still use requests and bypass the header checks, but I'm not sure how/if that's accomplished.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1159775219/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006024144240655005,
                        "severe_toxicity": 0.00012478549615480006,
                        "obscene": 0.00018363742856308818,
                        "threat": 0.0001283485908061266,
                        "insult": 0.00017578898405190557,
                        "identity_attack": 0.00014197557175066322
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1159781034",
                    "id": 1159781034,
                    "created_at": "2022-06-19T17:30:53Z",
                    "updated_at": "2022-06-19T17:30:53Z",
                    "author_association": "MEMBER",
                    "body": "After a cursory look, I don\u2019t think we can escape this at the adapter level. The immediate fix is to use the PreparedRequest workflow in the Requests docs and set the headers after the Request is prepared. This can be handed to the Session and should work.\r\n\r\nI\u2019d like to see how often hyper is being used with Requests still before we look at merging in a code change to bypass this.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1159781034/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000568549323361367,
                        "severe_toxicity": 0.00012905547919217497,
                        "obscene": 0.00018413501675240695,
                        "threat": 0.00014012960309628397,
                        "insult": 0.00018063513562083244,
                        "identity_attack": 0.00014560521231032908
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1163406986",
                    "id": 1163406986,
                    "created_at": "2022-06-22T17:21:23Z",
                    "updated_at": "2024-04-11T14:04:21Z",
                    "author_association": "NONE",
                    "body": "Did you guys found any solutions",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1163406986/reactions",
                        "total_count": 4,
                        "+1": 1,
                        "-1": 3,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "abirabedinkhan",
                        "id": 67215274,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007718700799159706,
                        "severe_toxicity": 0.00011041895777452737,
                        "obscene": 0.00017379318887833506,
                        "threat": 0.00011122769501525909,
                        "insult": 0.00018068234203383327,
                        "identity_attack": 0.00013792687968816608
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1163418037",
                    "id": 1163418037,
                    "created_at": "2022-06-22T17:33:04Z",
                    "updated_at": "2024-04-11T14:04:14Z",
                    "author_association": "NONE",
                    "body": "```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\app.py\", line 52, in <module>\r\n    print(api.TableData())\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\app.py\", line 44, in TableData\r\n    data = AUTH.post('https://cpp.bka.sh/merchant-portal-backend/merchant/dashboard', json={})\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 635, in post\r\n    return self.request(\"POST\", url, data=data, json=json, **kwargs)\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 573, in request\r\n    prep = self.prepare_request(req)\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 484, in prepare_request\r\n    p.prepare(\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\models.py\", line 369, in prepare\r\n    self.prepare_headers(headers)\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\models.py\", line 491, in prepare_headers\r\n    check_header_validity(header)\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\utils.py\", line 1042, in check_header_validity\r\n    _validate_header_part(name, \"name\", HEADER_VALIDATORS[type(name)][0])\r\n  File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\utils.py\", line 1048, in _validate_header_part\r\n    raise InvalidHeader(\r\nrequests.exceptions.InvalidHeader: Invalid leading whitespace, reserved character(s), or returncharacter(s) in header name: ':authority'\r\n```\r\nThis is what shows in my error",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1163418037/reactions",
                        "total_count": 5,
                        "+1": 2,
                        "-1": 3,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "abirabedinkhan",
                        "id": 67215274,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001437055179849267,
                        "severe_toxicity": 0.00010474075679667294,
                        "obscene": 0.00026707176584750414,
                        "threat": 0.00011157176777487621,
                        "insult": 0.00019858161977026612,
                        "identity_attack": 0.0001425052178092301
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1186594761",
                    "id": 1186594761,
                    "created_at": "2022-07-17T19:34:56Z",
                    "updated_at": "2022-07-17T19:35:47Z",
                    "author_association": "NONE",
                    "body": "replace in header '\\r' or '\\t' or '\\n' to empty symbol, this solved my problem",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1186594761/reactions",
                        "total_count": 5,
                        "+1": 0,
                        "-1": 5,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "BlondinkaQ",
                        "id": 26005987,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.004040678963065147,
                        "severe_toxicity": 9.109231905313209e-05,
                        "obscene": 0.0003809611080214381,
                        "threat": 0.0001117033461923711,
                        "insult": 0.0002807717537507415,
                        "identity_attack": 0.00015014360542409122
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1319035946",
                    "id": 1319035946,
                    "created_at": "2022-11-17T18:24:50Z",
                    "updated_at": "2024-04-11T14:03:53Z",
                    "author_association": "NONE",
                    "body": "> replace in header '\\r' or '\\t' or '\\n' to empty symbol, this solved my problem\r\n\r\nHi, what is the workaround for \u201c:\u201d I am adding \":authority\" and the request fails",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1319035946/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "afriedma",
                        "id": 22999195,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0017066021682694554,
                        "severe_toxicity": 9.239099745173007e-05,
                        "obscene": 0.0002373235038248822,
                        "threat": 0.00010344926704419777,
                        "insult": 0.00020250907982699573,
                        "identity_attack": 0.00013788715295959264
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1323206253",
                    "id": 1323206253,
                    "created_at": "2022-11-22T07:05:41Z",
                    "updated_at": "2024-04-11T14:05:09Z",
                    "author_association": "NONE",
                    "body": "> ```\r\n> Traceback (most recent call last):\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\app.py\", line 52, in <module>\r\n>     print(api.TableData())\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\app.py\", line 44, in TableData\r\n>     data = AUTH.post('https://cpp.bka.sh/merchant-portal-backend/merchant/dashboard', json={})\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 635, in post\r\n>     return self.request(\"POST\", url, data=data, json=json, **kwargs)\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 573, in request\r\n>     prep = self.prepare_request(req)\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 484, in prepare_request\r\n>     p.prepare(\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\models.py\", line 369, in prepare\r\n>     self.prepare_headers(headers)\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\models.py\", line 491, in prepare_headers\r\n>     check_header_validity(header)\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\utils.py\", line 1042, in check_header_validity\r\n>     _validate_header_part(name, \"name\", HEADER_VALIDATORS[type(name)][0])\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\utils.py\", line 1048, in _validate_header_part\r\n>     raise InvalidHeader(\r\n> requests.exceptions.InvalidHeader: Invalid leading whitespace, reserved character(s), or returncharacter(s) in header name: ':authority'\r\n> ```\r\n> \r\n> This is what shows in my error\r\n\r\nI also met this question\uff0chere is my code\r\nfrom hyper.contrib import HTTP20Adapter\r\n\r\nurl = \"https://xxxxxx.com/tag/xxxx/page/1.html\"\r\nheaders = {':authority': 'xxxxxx.com',\r\n           ':method': 'GET',\r\n           ':path': '/tag/xxxx/page/1',\r\n           ':scheme': 'https',\r\n           'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',\r\n           'accept-encoding': 'gzip, deflate, br',\r\n           'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8',\r\n           'Sec-Fetch-Mode':'navigate',\r\n           'Sec-Fetch-Site':'none',\r\n           'Sec-Fetch-User':'?1',\r\n           'Upgrade-Insecure-Requests':'1',\r\n           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'}\r\n\r\nsessions = requests.session()\r\nsessions.mount('https://xxxx.com', HTTP20Adapter())\r\nresponse = sessions.get(url = url,headers = headers)\r\n\r\nAnd I get an error like:\r\nInvalid leading whitespace, reserved character(s), or returncharacter(s) in header name: ':authority'\r\nIt made me crasy.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1323206253/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "wuzeyuuu",
                        "id": 67555631,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014815375907346606,
                        "severe_toxicity": 0.00010598800145089626,
                        "obscene": 0.00027500183205120265,
                        "threat": 0.00011033517512260005,
                        "insult": 0.00019538386550266296,
                        "identity_attack": 0.00014032241597305983
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1333312249",
                    "id": 1333312249,
                    "created_at": "2022-12-01T07:15:06Z",
                    "updated_at": "2024-04-11T14:03:32Z",
                    "author_association": "NONE",
                    "body": "same is my problem too\r\n``` \r\nheaders={'Key:'+str(self.key) : 'Sign:'+str(sign)}\r\n```\r\n\r\ni wannna do this but same error pops up",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1333312249/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ahmadkarimi4",
                        "id": 117602367,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.011086622253060341,
                        "severe_toxicity": 0.00010343437315896153,
                        "obscene": 0.0007599088130518794,
                        "threat": 0.00016873414278961718,
                        "insult": 0.0005521620041690767,
                        "identity_attack": 0.00019225150754209608
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1368452176",
                    "id": 1368452176,
                    "created_at": "2023-01-01T14:04:05Z",
                    "updated_at": "2023-10-07T22:28:14Z",
                    "author_association": "NONE",
                    "body": "Same problem.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1368452176/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cloudy-sfu",
                        "id": 41314224,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010432880371809006,
                        "severe_toxicity": 0.00010630460747051984,
                        "obscene": 0.0002073118375847116,
                        "threat": 0.00010033937724074349,
                        "insult": 0.0001939143257914111,
                        "identity_attack": 0.0001430892152711749
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1632079525",
                    "id": 1632079525,
                    "created_at": "2023-07-12T08:32:06Z",
                    "updated_at": "2023-10-07T22:28:11Z",
                    "author_association": "NONE",
                    "body": "+1",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1632079525/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "wushenchao",
                        "id": 8774296,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009950745152309537,
                        "severe_toxicity": 0.0001031455904012546,
                        "obscene": 0.00019595868070609868,
                        "threat": 9.881576261250302e-05,
                        "insult": 0.00017914561612997204,
                        "identity_attack": 0.0001374112325720489
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1720838145",
                    "id": 1720838145,
                    "created_at": "2023-09-15T07:53:52Z",
                    "updated_at": "2023-10-07T22:28:07Z",
                    "author_association": "NONE",
                    "body": "requests.exceptions.InvalidHeader: Invalid leading whitespace, reserved character(s), or returncharacter(s) in header name: ':authority'\r\n\r\n+1\r\n\r\nAny resolution found?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1720838145/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "abhishekanish",
                        "id": 40896305,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007251998758874834,
                        "severe_toxicity": 0.00011075028305640444,
                        "obscene": 0.0001846897939685732,
                        "threat": 0.00011253383854636922,
                        "insult": 0.00018028308113571256,
                        "identity_attack": 0.00013424029748421162
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1751739548",
                    "id": 1751739548,
                    "created_at": "2023-10-07T15:32:05Z",
                    "updated_at": "2023-10-07T22:27:53Z",
                    "author_association": "NONE",
                    "body": "+1",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1751739548/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lcoimbra",
                        "id": 23319966,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009950745152309537,
                        "severe_toxicity": 0.0001031455904012546,
                        "obscene": 0.00019595868070609868,
                        "threat": 9.881576261250302e-05,
                        "insult": 0.00017914561612997204,
                        "identity_attack": 0.0001374112325720489
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2049733146",
                    "id": 2049733146,
                    "created_at": "2024-04-11T13:46:45Z",
                    "updated_at": "2024-04-11T14:05:32Z",
                    "author_association": "NONE",
                    "body": "> ```\r\n> Traceback (most recent call last):\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\app.py\", line 52, in <module>\r\n>     print(api.TableData())\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\app.py\", line 44, in TableData\r\n>     data = AUTH.post('https://cpp.bka.sh/merchant-portal-backend/merchant/dashboard', json={})\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 635, in post\r\n>     return self.request(\"POST\", url, data=data, json=json, **kwargs)\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 573, in request\r\n>     prep = self.prepare_request(req)\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\sessions.py\", line 484, in prepare_request\r\n>     p.prepare(\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\models.py\", line 369, in prepare\r\n>     self.prepare_headers(headers)\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\models.py\", line 491, in prepare_headers\r\n>     check_header_validity(header)\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\utils.py\", line 1042, in check_header_validity\r\n>     _validate_header_part(name, \"name\", HEADER_VALIDATORS[type(name)][0])\r\n>   File \"C:\\Users\\abira\\Desktop\\Bkash Marchent API\\env\\lib\\site-packages\\requests\\utils.py\", line 1048, in _validate_header_part\r\n>     raise InvalidHeader(\r\n> requests.exceptions.InvalidHeader: Invalid leading whitespace, reserved character(s), or returncharacter(s) in header name: ':authority'\r\n> ```\r\n> \r\n> This is what shows in my error\r\n\r\nI'm also receiving these and can't seem to find a solution.. Any updates?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2049733146/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Crypss22",
                        "id": 128589749,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014815375907346606,
                        "severe_toxicity": 0.00010598800145089626,
                        "obscene": 0.00027500183205120265,
                        "threat": 0.00011033517512260005,
                        "insult": 0.00019538386550266296,
                        "identity_attack": 0.00014032241597305983
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2049777843",
                    "id": 2049777843,
                    "created_at": "2024-04-11T14:07:39Z",
                    "updated_at": "2024-04-11T14:07:39Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "For those arriving here, this is not a frequently encountered issue, but the solution is in [Nate's comment](https://github.com/psf/requests/issues/6167#issuecomment-1159781034) which I will quote here:\r\n\r\n> After a cursory look, I don\u2019t think we can escape this at the adapter level. The immediate fix is to use the PreparedRequest workflow in the Requests docs and set the headers after the Request is prepared. This can be handed to the Session and should work.\r\n> \r\n> I\u2019d like to see how often hyper is being used with Requests still before we look at merging in a code change to bypass this.\r\n\r\nPlease read this and the documentation and do not post comments with \"+1\" or asking for updates. Further comments like this will result in locking the discussion",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2049777843/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005618411814793944,
                        "severe_toxicity": 0.00012908894859720021,
                        "obscene": 0.00018435287347529083,
                        "threat": 0.00013459150795824826,
                        "insult": 0.00017426312842871994,
                        "identity_attack": 0.00014407977869268507
                    }
                }
            ]
        },
        "88": {
            "html_url": "https://github.com/psf/requests/pull/6166",
            "id": 1275758940,
            "number": 6166,
            "title": "Add union operator support to CaseInsensitiveDict (PEP 584)",
            "created_at": "2022-06-18T10:46:20Z",
            "updated_at": "2022-06-18T20:53:16Z",
            "closed_at": null,
            "body": "Adds support for the `|` and `|=` operators for `CaseInsensitiveDict`.\r\n\r\nThis copies the functionality of `dict` from [PEP 584](https://peps.python.org/pep-0584). Even though this PEP was implemented in 3.9, the functionality implemented to `CaseInsensitiveDict` still works in all currently supported versions (3.7+).\r\n\r\nThis also brings a level of consistency with other Mapping types, i.e. `OrderedDict`, `MappingProxyType`, `ChainMap`, `WeakKeyDictionary`, and more have this as supported behavior.\r\n\r\nThe code itself is a slightly modified version of the [reference implementation](https://peps.python.org/pep-0584/#reference-implementation).\r\n\r\nExample usage:\r\n```python3\r\nsession = Session()\r\nsession.headers |= {'Accept', 'application/json'}\r\n```",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Cubicpath",
                "id": 24359380,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6166/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "89": {
            "html_url": "https://github.com/psf/requests/pull/6162",
            "id": 1268321914,
            "number": 6162,
            "title": "Fix HTTPS websites with system-wide HTTP proxy on Windows",
            "created_at": "2022-06-11T16:42:34Z",
            "updated_at": "2022-07-18T12:10:06Z",
            "closed_at": null,
            "body": "Due to urllib bug, requests fails to open any HTTPS websites on Windows\r\nif there's system-wide HTTP proxy configured. This is because urllib\r\nincorrectly prepends the protocol to the proxy host and port, as in:\r\n\r\n```\r\n{'http':  'http://host:port',\r\n 'https': 'https://host:port',\r\n 'ftp':   'ftp://host:port'}\r\n```\r\n\r\nSuch configuration forces urllib3 to use HTTPS proxy (Secure Web Proxy,\r\nalso known as TLS Proxy) for HTTPS URLs, which the configured proxy\r\nmost likely does not support.\r\n\r\nDetect incorrect behavior and rewrite the protocol to http.",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "ValdikSS",
                "id": 3054729,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6162/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1152961843",
                    "id": 1152961843,
                    "created_at": "2022-06-11T16:43:24Z",
                    "updated_at": "2022-06-11T16:43:24Z",
                    "author_association": "NONE",
                    "body": "Issue #6139",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1152961843/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ValdikSS",
                        "id": 3054729,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008211565436795354,
                        "severe_toxicity": 0.00010849371028598398,
                        "obscene": 0.0001798835291992873,
                        "threat": 0.00010910042328760028,
                        "insult": 0.00018073368119075894,
                        "identity_attack": 0.0001430724369129166
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1187241019",
                    "id": 1187241019,
                    "created_at": "2022-07-18T12:10:06Z",
                    "updated_at": "2022-07-18T12:10:06Z",
                    "author_association": "NONE",
                    "body": "Could anyone take a look at this merge request please?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1187241019/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ValdikSS",
                        "id": 3054729,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005914120702072978,
                        "severe_toxicity": 0.00012387227616272867,
                        "obscene": 0.0001781815808499232,
                        "threat": 0.00013220979599282146,
                        "insult": 0.00017824019596446306,
                        "identity_attack": 0.00014085193106438965
                    }
                }
            ]
        },
        "90": {
            "html_url": "https://github.com/psf/requests/issues/6158",
            "id": 1266333457,
            "number": 6158,
            "title": "2.28.0: sphinx warnings `reference target not found`",
            "created_at": "2022-06-09T15:43:13Z",
            "updated_at": "2022-06-09T15:48:06Z",
            "closed_at": null,
            "body": "On building my packages I'm using `sphinx-build` command with `-n` switch which shows warmings about missing references. These are not critical issues.\r\nHere is the output with warnings:\r\n\r\n<details>\r\n\r\n```console\r\n+ /usr/bin/sphinx-build -n -T -b man docs build/sphinx/man\r\nRunning Sphinx v5.0.1\r\nWARNING: Invalid configuration value found: 'language = None'. Update your configuration to a valid langauge code. Falling back to 'en' (English).\r\nmaking output directory... done\r\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\r\nloading intersphinx inventory from https://urllib3.readthedocs.io/en/latest/objects.inv...\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [man]: all manpages\r\nupdating environment: [new config] 15 added, 0 changed, 0 removed\r\nreading sources... [100%] user/quickstart\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... done\r\nwriting... python-requests.3 { user/install user/quickstart user/advanced user/authentication community/recommended community/faq community/out-there community/support community/vulnerabilities community/release-process community/updates api dev/contributing dev/authors } /home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/models.py:docstring of requests.models.Response.json:: WARNING: py:exc reference target not found: requests.exceptions.JSONDecodeError\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.BaseAdapter.send:3: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter:3: WARNING: py:class reference target not found: Session\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.add_headers:9: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.build_response:6: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.get_connection:: WARNING: py:class reference target not found: urllib3.ConnectionPool\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.request_url:10: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.send:3: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.send:: WARNING: py:class reference target not found: urllib3 Timeout object\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/utils.py:docstring of requests.utils.add_dict_to_cookiejar:: WARNING: py:class reference target not found: CookieJar\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/cookies.py:docstring of requests.cookies.cookiejar_from_dict:: WARNING: py:class reference target not found: CookieJar\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/cookies.py:docstring of collections.abc.MutableMapping.pop:: WARNING: py:class reference target not found: v, remove specified key and return the corresponding value.\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/cookies.py:docstring of collections.abc.MutableMapping.popitem:: WARNING: py:class reference target not found: (k, v), remove and return some (key, value) pair\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/cookies.py:docstring of collections.abc.MutableMapping.setdefault:: WARNING: py:class reference target not found: D.get(k,d), also set D[k]=d if k not in D\r\ndone\r\nbuild succeeded, 15 warnings.\r\n```\r\n</details>\r\n\r\nYou can peak on fixes that kind of issues in other projects\r\nhttps://github.com/latchset/jwcrypto/pull/289\r\nhttps://github.com/click-contrib/sphinx-click/commit/abc31069\r\nhttps://github.com/latchset/jwcrypto/pull/289\r\nhttps://github.com/RDFLib/rdflib-sqlalchemy/issues/95\r\nhttps://github.com/sissaschool/elementpath/commit/bf869d9e\r\nhttps://github.com/jaraco/cssutils/issues/21\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "kloczek",
                "id": 31284574,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6158/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1151306131",
                    "id": 1151306131,
                    "created_at": "2022-06-09T15:48:05Z",
                    "updated_at": "2022-06-09T15:48:05Z",
                    "author_association": "MEMBER",
                    "body": "Thanks @kloczek, we'll take a look.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1151306131/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005989641067571938,
                        "severe_toxicity": 0.0001256887917406857,
                        "obscene": 0.0001816287258407101,
                        "threat": 0.00013035348092671484,
                        "insult": 0.00017538365500513464,
                        "identity_attack": 0.0001418934261891991
                    }
                }
            ]
        },
        "91": {
            "html_url": "https://github.com/psf/requests/issues/6140",
            "id": 1244638913,
            "number": 6140,
            "title": "python-requests.org domain suspended.",
            "created_at": "2022-05-23T06:19:30Z",
            "updated_at": "2022-06-16T16:52:56Z",
            "closed_at": null,
            "body": "http://python-requests.org/ is showing:\r\n\r\n<img width=\"824\" alt=\"Screenshot 2022-05-23 at 07 15 12\" src=\"https://user-images.githubusercontent.com/227768/169755158-3c2b0013-b869-4a84-93f3-7bddeabd9548.png\">\r\n\r\nIt's the same case for subdomains, including docs.python-requests.org, which is breaking the building of sphinx documentation which refer to `requests` docs: see https://github.com/brunns/mbtest/runs/6549875114?check_suite_focus=true#step:9:31 for an example.\r\n",
            "author_association": "NONE",
            "comments": 12,
            "state": "open",
            "user": {
                "login": "brunns",
                "id": 227768,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6140/reactions",
                "total_count": 12,
                "+1": 12,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134250135",
                    "id": 1134250135,
                    "created_at": "2022-05-23T06:48:07Z",
                    "updated_at": "2022-05-23T06:48:07Z",
                    "author_association": "MEMBER",
                    "body": "Hi @brunns, thanks for bringing this to our attention. The domain is still owned by Kenneth and the maintainers haven't had access to it in quite some time.\n\nWe'll reach out to Kenneth regarding the domain verification. I wanted to quickly confirm though that https://docs.python-requests.org _is_ working for you. I'm still seeing the docs rendered correctly at that subdomain.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134250135/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005739819607697427,
                        "severe_toxicity": 0.00012488024367485195,
                        "obscene": 0.00018276472110301256,
                        "threat": 0.00012616536696441472,
                        "insult": 0.00017272400145884603,
                        "identity_attack": 0.00014002594980411232
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134259208",
                    "id": 1134259208,
                    "created_at": "2022-05-23T06:59:30Z",
                    "updated_at": "2022-05-23T06:59:30Z",
                    "author_association": "NONE",
                    "body": "Strange - nope, I'm seeing that same error at https://docs.python-requests.org. I wonder if that's just me?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134259208/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "brunns",
                        "id": 227768,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000634058378636837,
                        "severe_toxicity": 0.00012027907359879464,
                        "obscene": 0.0001786294742487371,
                        "threat": 0.00012489846267271787,
                        "insult": 0.00017466669669374824,
                        "identity_attack": 0.00013976408808957785
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134270659",
                    "id": 1134270659,
                    "created_at": "2022-05-23T07:11:41Z",
                    "updated_at": "2022-05-23T07:11:41Z",
                    "author_association": "MEMBER",
                    "body": "It may be a CDN caching issue. My hunch would be once those expire, I'll be seeing the same.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134270659/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010489133419468999,
                        "severe_toxicity": 0.00011003079998772591,
                        "obscene": 0.00022966036340221763,
                        "threat": 0.00010686564928619191,
                        "insult": 0.00018701991939451545,
                        "identity_attack": 0.00014060716785024852
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134353539",
                    "id": 1134353539,
                    "created_at": "2022-05-23T08:29:50Z",
                    "updated_at": "2022-05-23T08:29:50Z",
                    "author_association": "NONE",
                    "body": "I can confirm this, [https://docs.python-requests.org](https://docs.python-requests.org) is not working for me, either.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134353539/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "pajot",
                        "id": 4051461,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006009294302202761,
                        "severe_toxicity": 0.00012648206029552966,
                        "obscene": 0.00019531624275259674,
                        "threat": 0.00012127296213293448,
                        "insult": 0.00017537597159389406,
                        "identity_attack": 0.00014051682956051081
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134364348",
                    "id": 1134364348,
                    "created_at": "2022-05-23T08:39:18Z",
                    "updated_at": "2022-05-23T08:39:18Z",
                    "author_association": "NONE",
                    "body": "A temporary and partial fix might be to stop http://requests.readthedocs.org/ redirecting to https://docs.python-requests.org/?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134364348/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "brunns",
                        "id": 227768,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000621932907961309,
                        "severe_toxicity": 0.00012189251719973981,
                        "obscene": 0.00017673906404525042,
                        "threat": 0.00013088731793686748,
                        "insult": 0.00017787415708880872,
                        "identity_attack": 0.00014157028635963798
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134429232",
                    "id": 1134429232,
                    "created_at": "2022-05-23T09:35:44Z",
                    "updated_at": "2022-05-23T09:35:44Z",
                    "author_association": "NONE",
                    "body": "I can access https://docs.python-requests.org/en/latest/ fine, but our intersphinx links are failing due to cert domain mismatch",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134429232/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "da1910",
                        "id": 12086549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007271773647516966,
                        "severe_toxicity": 0.00011101546988356858,
                        "obscene": 0.0001761834864737466,
                        "threat": 0.00011798420018749312,
                        "insult": 0.0001779260637704283,
                        "identity_attack": 0.0001365660864394158
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134482645",
                    "id": 1134482645,
                    "created_at": "2022-05-23T10:14:41Z",
                    "updated_at": "2022-05-23T10:14:41Z",
                    "author_association": "NONE",
                    "body": "FWIW, https://docs.python-requests.org/en/latest/ redirects to https://docs.python-requests.org/en/latest/ for me, which 404s. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134482645/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "brunns",
                        "id": 227768,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006601237109862268,
                        "severe_toxicity": 0.00011783804802689701,
                        "obscene": 0.00019199999223928899,
                        "threat": 0.00011320738849462941,
                        "insult": 0.0001738114224281162,
                        "identity_attack": 0.00013468739052768797
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134495247",
                    "id": 1134495247,
                    "created_at": "2022-05-23T10:25:31Z",
                    "updated_at": "2022-05-23T10:25:53Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "For https://docs.python-requests.org/en/latest/user/quickstart/ I get an SSL error from Chrome:\r\n```\r\nThis server could not prove that it is docs.python-requests.org; \r\nits security certificate is from *.ispapi.net. \r\nThis may be caused by a misconfiguration or an attacker intercepting your connection.\r\n```\r\n\r\n...and then a 404 if I do get through.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134495247/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cjw296",
                        "id": 632049,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009081781026907265,
                        "severe_toxicity": 0.00010323591413907707,
                        "obscene": 0.00018546998035162687,
                        "threat": 0.00011068756430177018,
                        "insult": 0.0001775205455487594,
                        "identity_attack": 0.00013482836948242038
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134515167",
                    "id": 1134515167,
                    "created_at": "2022-05-23T10:47:22Z",
                    "updated_at": "2022-05-23T10:47:22Z",
                    "author_association": "NONE",
                    "body": "Hi I am seeing the same... \r\n<img width=\"654\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41849932/169803126-e439982c-0e30-4249-905f-25f9018f01c2.png\">\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134515167/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "YChanHuang",
                        "id": 41849932,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007924545789137483,
                        "severe_toxicity": 0.0001108206415665336,
                        "obscene": 0.00018972645921166986,
                        "threat": 0.00011648356303339824,
                        "insult": 0.00017692387336865067,
                        "identity_attack": 0.00013642343401443213
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1134758920",
                    "id": 1134758920,
                    "created_at": "2022-05-23T14:35:37Z",
                    "updated_at": "2022-05-23T14:35:37Z",
                    "author_association": "MEMBER",
                    "body": "Going to lock this discussion to contributors-only as the issue won't be fixed any faster with additional comments. If you're interested in following when the fix happens you can subscribe to this issue.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1134758920/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006983181810937822,
                        "severe_toxicity": 0.00011714968422893435,
                        "obscene": 0.00017346887034364045,
                        "threat": 0.0001356943103019148,
                        "insult": 0.00017175241373479366,
                        "identity_attack": 0.0001426200760761276
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1135071992",
                    "id": 1135071992,
                    "created_at": "2022-05-23T19:44:13Z",
                    "updated_at": "2022-05-23T19:44:13Z",
                    "author_association": "MEMBER",
                    "body": "For those looking for alternatives, https://requests.readthedocs.io/en/latest/ should be returning docs correctly again. This has been the \"official\" location for some time as we lack controls on the python-requests domains. I'll update again once we receive a response from Kenneth.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1135071992/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005371319712139666,
                        "severe_toxicity": 0.0001323843898717314,
                        "obscene": 0.00018505433399695903,
                        "threat": 0.00013537134509533644,
                        "insult": 0.00017501295951660722,
                        "identity_attack": 0.0001450225681765005
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1157911285",
                    "id": 1157911285,
                    "created_at": "2022-06-16T16:52:56Z",
                    "updated_at": "2022-06-16T16:52:56Z",
                    "author_association": "MEMBER",
                    "body": "Providing a quick update for users following the issue. I've spoken with Kenneth, but we do not have a clear path to recovering the domain. We'd advise anyone currently blocked by this (or anyone providing resources with links to requests) to use https://requests.readthedocs.io/en/latest/ as the primary domain. This matches what has been in the public docs since 2019 and represents what the current maintainers control.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1157911285/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005507851019501686,
                        "severe_toxicity": 0.0001303777244174853,
                        "obscene": 0.00019067204266320914,
                        "threat": 0.00012981960026081651,
                        "insult": 0.00017597463738638908,
                        "identity_attack": 0.00014278267917688936
                    }
                }
            ]
        },
        "92": {
            "html_url": "https://github.com/psf/requests/issues/6139",
            "id": 1244044304,
            "number": 6139,
            "title": "Misusing of system-wide proxy on Windows / HTTPS connections over system-wide proxy on Windows do not work",
            "created_at": "2022-05-21T17:47:26Z",
            "updated_at": "2022-06-11T15:44:35Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\n\r\nOn Windows 10 and 11, if a system-wide proxy is configured in the OS settings, Requests won't load HTTPS websites.\r\nInstead of the regular CONNECT header, Requests sends TLS request to the proxy server (ip and port). The TLS ClientHello does not have Server Name Indication field, that's why I assume that Requests misinterprets the proxy as a Secure Web Proxy (a regular proxy with TLS encapsulation on top), which Windows does not support.\r\n\r\n## Expected Result\r\n\r\nIf system-wide proxy is configured in Windows, Requests sends CONNECT header to the proxy server when HTTPS website is requested.\r\n\r\n## Actual Result\r\n\r\nIf system-wide proxy is configured in Windows, Requests sends TLS request to the proxy address when HTTPS website is requested.\r\n\r\n## Reproduction Steps\r\n\r\n1. Configure system-wide proxy on Windows\r\n2. \r\n```python\r\nimport requests\r\nrequests.get(\"https://w3.org/\")\r\n```\r\n\r\nResult:\r\nMy proxy does not respond to the packets it does not understand, and I receive the following error:\r\n`HTTPSConnectionPool(host='w3.org, port=443): Max retries exceeded with url: / (Caused by ProxyError('Cannot connect to proxy.', timeout('_ssl.c:1114: The handshake operation timed out')))`\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "ValdikSS",
                "id": 3054729,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6139/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1152952935",
                    "id": 1152952935,
                    "created_at": "2022-06-11T15:41:05Z",
                    "updated_at": "2022-06-11T15:41:05Z",
                    "author_association": "NONE",
                    "body": "This is a Python's urllib bug, which is triggered by newer urllib3 version, thus affecting requests.\r\n\r\nhttps://bugs.python.org/issue42627\r\nhttps://github.com/python/cpython/issues/86793\r\nhttps://github.com/python/cpython/commit/9743524fc14db39e2f309cf3d372c7e8e18fc93a\r\n\r\n>This bug has existed for a very long time (since Python 2.0.1 if not earlier), but it was exposed recently when urllib3 added support for HTTPS-in-HTTPS proxies in version 1.26. Before that, an `https` prefix on the HTTPS proxy url was silently treated as `http`, accidentally resulting in the correct behavior.\r\n\r\nFixed in Python 3.10.5, all the previous versions are still affected.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1152952935/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ValdikSS",
                        "id": 3054729,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0015377780655398965,
                        "severe_toxicity": 0.00010311361984349787,
                        "obscene": 0.00024357142683584243,
                        "threat": 0.00011154092499054968,
                        "insult": 0.00019725931633729488,
                        "identity_attack": 0.0001546398998470977
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1152953457",
                    "id": 1152953457,
                    "created_at": "2022-06-11T15:44:35Z",
                    "updated_at": "2022-06-11T15:44:35Z",
                    "author_association": "NONE",
                    "body": "https://github.com/urllib3/urllib3/issues/2164",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1152953457/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ValdikSS",
                        "id": 3054729,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010014016879722476,
                        "severe_toxicity": 0.00010088212002301589,
                        "obscene": 0.00018204102525487542,
                        "threat": 0.00010825211211340502,
                        "insult": 0.00018678896594792604,
                        "identity_attack": 0.0001410000113537535
                    }
                }
            ]
        },
        "93": {
            "html_url": "https://github.com/psf/requests/pull/6137",
            "id": 1242045051,
            "number": 6137,
            "title": "Allow tests to run if HTTP proxy env variables are already present,",
            "created_at": "2022-05-19T16:43:48Z",
            "updated_at": "2022-05-19T16:43:48Z",
            "closed_at": null,
            "body": "Hello,\r\n\r\nThe following tests fail if HTTP proxy environment variables are already set:\r\n\r\n```\r\nFAILED tests/test_requests.py::TestRequests::test_mixed_case_scheme_acceptable\r\nFAILED tests/test_requests.py::TestRequests::test_HTTP_302_ALLOW_REDIRECT_GET\r\nFAILED tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_send_self_prepared_request\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_send_session_prepared_request\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_send_with_redirects\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_get - ...\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_request\r\n```\r\n\r\nThe variables affecting the tests are:\r\n\r\n * `http_proxy` (and `https_proxy` potentially)\r\n * `no_proxy`\r\n\r\nFixed by overriding their value if they are already present in the environment.\r\n\r\nThe `override_environ` function would fail if attempting to delete a variable that is not in the environment. Added a `suppress(KeyError)` construct around the `del` instruction to fix it.\r\n\r\nThanks,\r\nOilvier",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "ogayot",
                "id": 4038023,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6137/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "94": {
            "html_url": "https://github.com/psf/requests/issues/6131",
            "id": 1232797065,
            "number": 6131,
            "title": "Incorrectly strips trailing dot from absolute hostnames, causing TooManyRedirects",
            "created_at": "2022-05-11T15:01:22Z",
            "updated_at": "2022-06-16T21:38:11Z",
            "closed_at": null,
            "body": "requests appears to be incorrectly stripping the trailing dot on absolute hostnames (i.e. explicitly marked as in the root DNS namespace) in URLs when constructing the Host: request header, like `pyropus.ca.`.  This causes redirect loops when the site chooses the absolute hostname as canonical and redirects requests without the trailing dot.\r\n\r\nThe example site redirects requests with a host header of `Host: pyropus.ca` to the same URL with the host name changed to the canonical absolute version:\r\n```\r\nHTTP/1.1 301 Moved Permanently\r\n[...]\r\nLocation: https://pyropus.ca./\r\n```\r\n\r\nrequests then strips the dot and resends the request, resulting in a redirect loop.\r\n\r\nThe trailing dot needs to be stripped from the SNI header for https requests (required by TLS/etc spec) but it should not be stripped from the Host: header value.\r\n\r\nWhen fixing the SNI trailing dot issue, curl had this bug because they changed it to also affect the Host: header value, but they've fixed it by reverting that part of the change:\r\nhttps://github.com/curl/curl/issues/8290\r\n\r\nMany other common user agents that I've tested handle this properly:\r\n* all GUI browers, to my knowledge, preserve the absolute domain name in the Host: header - I've tested Firefox, Chromium, Vivaldi, Konqueror, and Safari\r\n* wget also preserves the absolute domain name on redirect URLs\r\n* curl is now fixed and handles it\r\n\r\nA few less common ones have the same buggy behaviour, or did -- I haven't re-checked:\r\n* lynx, links, and elinks handle it like curl, erroring out on a redirect loop\r\n\r\n\r\n## Expected Result\r\n\r\nSuccessful 200 response with content.\r\n\r\n## Actual Result\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 529, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 667, in send\r\n    history = [resp for resp in gen]\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 667, in <listcomp>\r\n    history = [resp for resp in gen]\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 166, in resolve_redirects\r\n    raise TooManyRedirects('Exceeded {} redirects.'.format(self.max_redirects), response=resp)\r\nrequests.exceptions.TooManyRedirects: Exceeded 30 redirects.\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nrequests.get(\"https://pyropus.ca./\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.17.5\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nEdit: added a couple words to the summary to clarify.",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "ccazabon",
                "id": 7227064,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6131/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1158158594",
                    "id": 1158158594,
                    "created_at": "2022-06-16T21:37:17Z",
                    "updated_at": "2022-06-16T21:38:11Z",
                    "author_association": "NONE",
                    "body": "```py\r\n    @property\r\n    def host(self):\r\n        \"\"\"\r\n        Getter method to remove any trailing dots that indicate the hostname is an FQDN.\r\n\r\n        In general, SSL certificates don't include the trailing dot indicating a\r\n        fully-qualified domain name, and thus, they don't validate properly when\r\n        checked against a domain name that includes the dot. In addition, some\r\n        servers may not expect to receive the trailing dot when provided.\r\n\r\n        However, the hostname with trailing dot is critical to DNS resolution; doing a\r\n        lookup with the trailing dot will properly only resolve the appropriate FQDN,\r\n        whereas a lookup without a trailing dot will search the system's search domain\r\n        list. Thus, it's important to keep the original host around for use only in\r\n        those cases where it's appropriate (i.e., when doing DNS lookup to establish the\r\n        actual TCP connection across which we're going to send HTTP requests).\r\n        \"\"\"\r\n        return self._dns_host.rstrip(\".\")\r\n```\r\n\r\nMight be relevant, line 132 of `urllib3/connection.py` on Python 3.10.4. Following the chain of execution from `requests` down to the `urllib3` layer, it seems like the issue resides on line 467 (same file) where `_match_hostname(cert, self.assert_hostname or server_hostname)` fails, if `return self._dns_host.rstrip(\".\")` is instead changed to `return self._dns_host`.\r\nCommenting out the call to `_match_hostname` allows the request to go through, but it's effectively equivalent to doing `requests.get(\"https://pyropus.ca./\", verify=False)`. I don't think this is erroneous behaviour library though as the comment explains.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1158158594/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "unazed",
                        "id": 29807271,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000692224595695734,
                        "severe_toxicity": 0.0001158572340500541,
                        "obscene": 0.00019129866268485785,
                        "threat": 0.00011860483937198296,
                        "insult": 0.0001729502691887319,
                        "identity_attack": 0.0001373873819829896
                    }
                }
            ]
        },
        "95": {
            "html_url": "https://github.com/psf/requests/pull/6123",
            "id": 1228062318,
            "number": 6123,
            "title": "Fix error caused by invalid charset in response headers",
            "created_at": "2022-05-06T16:22:35Z",
            "updated_at": "2022-05-09T09:14:37Z",
            "closed_at": null,
            "body": "Ran into an error where we were having an exception raised from the requests library: `'bool' object has no attribute 'strip'`\r\n\r\nSeems the server was returning an empty charset value in the Content-Type response header of `application/json;charset`. This was causing the line below to default the value to a boolean `True`:\r\n\r\nhttps://github.com/psf/requests/blob/2a6f290bc09324406708a4d404a88a45d848ddf9/requests/utils.py#L524-L529\r\n\r\nThis meant that attempting format the charset on the line below, the value was a boolean rather than a string:\r\n\r\nhttps://github.com/psf/requests/blob/2a6f290bc09324406708a4d404a88a45d848ddf9/requests/utils.py#L545-L548\r\n\r\nThis change adds a type check so that the charset is ignored if a value is not provided. The unit test has been modified for coverage, along with expanding the other test scenarios slightly.",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "deosrc",
                "id": 50599779,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6123/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119824656",
                    "id": 1119824656,
                    "created_at": "2022-05-06T17:10:48Z",
                    "updated_at": "2022-05-06T17:10:48Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for the PR, @deosrc! You've chosen an interesting time to raise this. We're currently working on options for typing in Requests and this was a case where there actually appears to be a bug in the code. Note that the response the server is giving you is not a valid response though and should be fixed on their end.\r\n\r\n`True` was chosen for a default in #4442 but doesn't make sense according to the [RFC](https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.1.1). A parameter is defined to be:\r\n```\r\n     media-type = type \"/\" subtype *( OWS \";\" OWS parameter )\r\n     parameter = token \"=\" ( token / quoted-string )\r\n```\r\n\r\nWhich means the minimum viable `parameter` is `<token>=`. If we read farther in the RFC we find that quoting in parameters is interchangeable without affecting the semantics so `<token>=` is equivalent to `<token>=\"\"`. Our default in this case should just be an empty string rather than `True`.\r\n\r\n We don't rely on value being boolean anywhere and there's no way to leave the function with the boolean and emit a successful request. The fix we'd proposed on the typing branch was to change the default. This will result in an empty `charset=` being treated as UTF-8 when decoding rather than an unhelpful ValueError.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119824656/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010914915474131703,
                        "severe_toxicity": 0.0001044174496200867,
                        "obscene": 0.00020974225481040776,
                        "threat": 0.0001064647949533537,
                        "insult": 0.00017906159337144345,
                        "identity_attack": 0.0001411897101206705
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1120851211",
                    "id": 1120851211,
                    "created_at": "2022-05-09T09:14:37Z",
                    "updated_at": "2022-05-09T09:14:37Z",
                    "author_association": "NONE",
                    "body": "> Note that the response the server is giving you is not a valid response though and should be fixed on their end.\r\n\r\nAbsolutley, this has been fixed.\r\n\r\nYour response all makes sense to me and sounds like it's fixed in the typing branch. I'll leave this up to you if you want to merge it in as an fix while the typing is ready, or for those unable to use typing. Happy for it to just be closed if it's not worth it as it's a rather obscure bug.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1120851211/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "deosrc",
                        "id": 50599779,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006769216270186007,
                        "severe_toxicity": 0.0001153256234829314,
                        "obscene": 0.0001717194973025471,
                        "threat": 0.00012597122986335307,
                        "insult": 0.00017764532822184265,
                        "identity_attack": 0.00013840604515280575
                    }
                }
            ]
        },
        "96": {
            "html_url": "https://github.com/psf/requests/pull/6122",
            "id": 1226490072,
            "number": 6122,
            "title": "Request with data which consists of empty values only sends bad request",
            "created_at": "2022-05-05T10:28:39Z",
            "updated_at": "2023-06-24T16:24:36Z",
            "closed_at": null,
            "body": "Case - request with data which consists of empty values only\r\n```python\r\nget('http://localhost:80', data={'foo': None})\r\n```\r\nResponse in nginx:\r\n```\r\n172.17.0.1 - - [05/May/2022:19:34:30 +0000] \"GET / HTTP/1.1\" 200 615 \"-\" \"python-requests/2.27.1\" \"-\"\r\n172.17.0.1 - - [05/May/2022:19:34:30 +0000] \"0\" 400 157 \"-\" \"-\" \"-\"\r\n```\r\nSo it sends second request with bad status code.\r\nHere https://github.com/psf/requests/blob/main/requests/models.py#L576 `length` will be `0` so there is no `Content-Length: 0` header in request.\r\nThe problem occurs there https://github.com/psf/requests/blob/main/requests/adapters.py#L471 .\r\nBecause `request.body` is `''` and 'Content-Length' not in `request.headers` it counts as `chunk=True`.\r\nBecause of that it acts like it has `Transfer-Encoding: chunked` header, and here https://github.com/psf/requests/blob/main/requests/adapters.py#L523-L528 it does not send nothing but `low_conn.send(b'0\\r\\n\\r\\n')`.\r\nI guess thats why It has bad request like this:\r\n```\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226\r\n```\r\nThe same behavior is happening on POST request.\r\n```python\r\npost('http://localhost:80', data={'foo': None})\r\n```\r\ngives:\r\n```\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"POST / HTTP/1.1\" 200 45\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226\r\n```\r\nThe raw request will be something like this:\r\n```python\r\nimport socket\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\ns.connect((\"localhost\", 80))\r\ns.send(\r\n    b'GET / HTTP/1.1\\r\\n'\r\n    b'Host: localhost:80\\r\\n'\r\n    b'User-Agent: python-requests/2.27.1\\r\\n'\r\n    b'Accept-Encoding: gzip, deflate, br\\r\\n'\r\n    b'Accept: */*\\r\\n'\r\n    b'Connection: keep-alive\\r\\n'\r\n    b'\\r\\n'\r\n    b'0\\r\\n\\r\\n' # this thing is added here https://github.com/psf/requests/blob/main/requests/adapters.py#L528\r\n)\r\n\r\nresponse = s.recv(4096)\r\nprint(response)\r\n```\r\nso `0\\r\\n\\r\\n` is the reason of\r\n\r\n`apache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226`\r\n\r\n\r\nThis PR fixes the problem. Tests for this case are created.\r\n",
            "author_association": "NONE",
            "comments": 16,
            "state": "open",
            "user": {
                "login": "romanyakovlev",
                "id": 20498421,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6122/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1118907570",
                    "id": 1118907570,
                    "created_at": "2022-05-05T18:20:36Z",
                    "updated_at": "2022-05-05T18:23:30Z",
                    "author_association": "MEMBER",
                    "body": "Hi @romanyakovlev, can you provide some more information about why you believe this needs to be changed? The original input data _is_ `application/x-www-form-urlencoded`, it just happens that the serialized version is an empty string in this case.\r\n\r\nI don't believe there's any specification implying you should remove the Content-Type for zero length bodies. That's likely breaking behavior for a subset of APIs. It's probably also worth noting that the semantics of a GET request body are undefined since this is non-standard behavior. What happens here cannot be \"correct\" or \"incorrect\".",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1118907570/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000598429178353399,
                        "severe_toxicity": 0.00012110562238376588,
                        "obscene": 0.00017693212430458516,
                        "threat": 0.00012487273488659412,
                        "insult": 0.00017164633027277887,
                        "identity_attack": 0.00014037032087799162
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1118982054",
                    "id": 1118982054,
                    "created_at": "2022-05-05T19:45:12Z",
                    "updated_at": "2022-05-05T19:46:58Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt the reason why I pushed this PR is the problem with nginx. When this type of request was sent to it I saw this in logs:\r\n```\r\n172.17.0.1 - - [05/May/2022:19:34:30 +0000] \"GET / HTTP/1.1\" 200 615 \"-\" \"python-requests/2.27.1\" \"-\"\r\n172.17.0.1 - - [05/May/2022:19:34:30 +0000] \"0\" 400 157 \"-\" \"-\" \"-\"\r\n```\r\nSo after `GET` request nginx also got the second request with 400 status code\r\nWith this fix everything is ok:\r\n```\r\n172.17.0.1 - - [05/May/2022:19:32:13 +0000] \"GET / HTTP/1.1\" 200 615 \"-\" \"python-requests/2.27.1\" \"-\"\r\n```\r\nThats the only reason. \r\nNginx version is 1.20.1.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1118982054/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009934877743944526,
                        "severe_toxicity": 0.00010447402019053698,
                        "obscene": 0.0002099106932291761,
                        "threat": 0.00010507788101676852,
                        "insult": 0.00017623002349864691,
                        "identity_attack": 0.00013614392082672566
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1118987814",
                    "id": 1118987814,
                    "created_at": "2022-05-05T19:52:32Z",
                    "updated_at": "2022-05-05T19:52:32Z",
                    "author_association": "MEMBER",
                    "body": "You'll want to check error logs on why nginx is throwing a 400. It's also hard to tell if this is an issue for nginx or the application it's fronting.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1118987814/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008143887389451265,
                        "severe_toxicity": 0.00010754710820037872,
                        "obscene": 0.00018460529099684209,
                        "threat": 0.00011896231444552541,
                        "insult": 0.0001761319290380925,
                        "identity_attack": 0.00013303026207722723
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1118988153",
                    "id": 1118988153,
                    "created_at": "2022-05-05T19:53:01Z",
                    "updated_at": "2022-05-05T19:53:01Z",
                    "author_association": "NONE",
                    "body": "Well, my mistake. The problem was not with `application/x-www-form-urlencoded` but with the `body` variable which should have `''` value to reproduce this behavior and `None` value to fix it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1118988153/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007983026443980634,
                        "severe_toxicity": 0.00010767312051029876,
                        "obscene": 0.00018104050832334906,
                        "threat": 0.00011007834109477699,
                        "insult": 0.0001856897579273209,
                        "identity_attack": 0.0001361232716590166
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1118996204",
                    "id": 1118996204,
                    "created_at": "2022-05-05T20:03:28Z",
                    "updated_at": "2022-05-05T20:03:28Z",
                    "author_association": "NONE",
                    "body": "The same thing is happening on apache 2.4:\r\n```\r\napache_1  | 172.21.0.1 - - [05/May/2022:20:02:17 +0000] \"GET / HTTP/1.1\" 200 45\r\napache_1  | 172.21.0.1 - - [05/May/2022:20:02:17 +0000] \"0\" 400 226\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1118996204/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000729931693058461,
                        "severe_toxicity": 0.0001126751521951519,
                        "obscene": 0.0001875789021141827,
                        "threat": 0.00012099054583813995,
                        "insult": 0.00017262849723920226,
                        "identity_attack": 0.00013556861085817218
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1118998726",
                    "id": 1118998726,
                    "created_at": "2022-05-05T20:06:13Z",
                    "updated_at": "2022-05-05T20:07:16Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt I'm sending request directly to nginx in docker without any other apps, the same thing is true for apache. Its hard to understand what\u2019s wrong with the request because its just \"bad request\"",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1118998726/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008916847873479128,
                        "severe_toxicity": 0.0001028342594509013,
                        "obscene": 0.00018658264889381826,
                        "threat": 0.00010804821795318276,
                        "insult": 0.00017919139645528048,
                        "identity_attack": 0.0001349167141597718
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119001290",
                    "id": 1119001290,
                    "created_at": "2022-05-05T20:09:31Z",
                    "updated_at": "2022-05-05T20:09:31Z",
                    "author_association": "NONE",
                    "body": "But I'm going to investigate why this is happening and yes, I was wrong about the reason is `application/x-www-form-urlencoded`",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119001290/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006293272017501295,
                        "severe_toxicity": 0.0001192410200019367,
                        "obscene": 0.00018068819190375507,
                        "threat": 0.0001284097961615771,
                        "insult": 0.00017151724023278803,
                        "identity_attack": 0.0001367589575238526
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119004533",
                    "id": 1119004533,
                    "created_at": "2022-05-05T20:13:43Z",
                    "updated_at": "2022-05-05T20:13:43Z",
                    "author_association": "MEMBER",
                    "body": "Alright, the error is [here](https://github.com/psf/requests/blob/main/requests/models.py#L575-L580). We do a check below to make sure we're not emitting a Content-Length for GET/HEAD requests, but not for this first check. When the body value is None, it bypasses this conditional, but an empty string does not. This results in a `Content-Length: 0` header being added.\r\n\r\nAs I said earlier, what you're trying to do with this request is outside of the realm of defined HTTP semantics. You should not be emitting a GET request with a body but we allow it because some servers do crazy things.\r\n\r\nThe issue I believe you're hitting with apache/nginx is this:\r\n\r\n> A user agent SHOULD NOT send a Content-Length header field\r\n   when the request message does not contain a payload body and\r\n   the method semantics do not anticipate such a body.\r\n\r\n-- [RFC 7230 3.3.2](https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2)\r\n\r\nWhile we probably shouldn't be doing this we are. It's hard to tell what may be relying on this behavior at this point and given this is a SHOULD NOT rather than a MUST NOT, I don't think this is something we'd fix in Requests 2.x.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119004533/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010664042783901095,
                        "severe_toxicity": 0.00010225235746474937,
                        "obscene": 0.0001956110936589539,
                        "threat": 0.00011389245628379285,
                        "insult": 0.00017995573580265045,
                        "identity_attack": 0.0001390730612911284
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119007601",
                    "id": 1119007601,
                    "created_at": "2022-05-05T20:17:42Z",
                    "updated_at": "2022-05-05T20:25:28Z",
                    "author_association": "NONE",
                    "body": "Okay, I got it, thanks. PR is closed.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119007601/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000815892533864826,
                        "severe_toxicity": 0.0001107353818952106,
                        "obscene": 0.00019491366401780397,
                        "threat": 0.00011148520570714027,
                        "insult": 0.00017919550009537488,
                        "identity_attack": 0.00013344024773687124
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119129876",
                    "id": 1119129876,
                    "created_at": "2022-05-05T23:13:30Z",
                    "updated_at": "2022-05-05T23:46:04Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt after some research I've discovered that the problem is not about `Content-Length` header. \r\nHere https://github.com/psf/requests/blob/main/requests/models.py#L576 `length` will be `0` so there is no `Content-Length: 0` header in request. \r\nThe problem occurs there https://github.com/psf/requests/blob/main/requests/adapters.py#L471 . \r\nBecause `request.body` is `''` and `'Content-Length'` not in `request.headers` it counts as `chunk=True`. \r\nBecause of that it acts like it has `Transfer-Encoding: chunked` header, and here https://github.com/psf/requests/blob/main/requests/adapters.py#L523-L528 it does not send nothing but `low_conn.send(b'0\\r\\n\\r\\n')`. \r\nI guess thats why It has bad request like this:\r\n```\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226\r\n```\r\nAnd the most interesting thing - the same behavior is happening on `POST` request.\r\n```python\r\npost('http://localhost:80', data={'foo': None})\r\n```\r\ngives:\r\n```\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"POST / HTTP/1.1\" 200 45\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226\r\n```\r\nThe raw request will be something like this:\r\n```python\r\nimport socket\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\ns.connect((\"localhost\", 80))\r\ns.send(\r\n    b'GET / HTTP/1.1\\r\\n'\r\n    b'Host: localhost:80\\r\\n'\r\n    b'User-Agent: python-requests/2.27.1\\r\\n'\r\n    b'Accept-Encoding: gzip, deflate, br\\r\\n'\r\n    b'Accept: */*\\r\\n'\r\n    b'Connection: keep-alive\\r\\n'\r\n    b'\\r\\n'\r\n    b'0\\r\\n\\r\\n' # this thing is added here https://github.com/psf/requests/blob/main/requests/adapters.py#L528\r\n)\r\n\r\nresponse = s.recv(4096)\r\nprint(response)\r\n```\r\nso `0\\r\\n\\r\\n` is the reason of \r\n```\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119129876/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0013381341705098748,
                        "severe_toxicity": 0.00010208450112259015,
                        "obscene": 0.00023911210882943124,
                        "threat": 0.00010150092566618696,
                        "insult": 0.00018597538291942328,
                        "identity_attack": 0.00013980154471937567
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119146665",
                    "id": 1119146665,
                    "created_at": "2022-05-05T23:51:55Z",
                    "updated_at": "2022-05-05T23:51:55Z",
                    "author_association": "NONE",
                    "body": "Changed PR description and name",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119146665/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006839741254225373,
                        "severe_toxicity": 0.00011471701873233542,
                        "obscene": 0.00019790416990872473,
                        "threat": 0.0001151130345533602,
                        "insult": 0.00017510577163193375,
                        "identity_attack": 0.00013145906268619
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119154430",
                    "id": 1119154430,
                    "created_at": "2022-05-06T00:11:08Z",
                    "updated_at": "2022-05-06T00:11:08Z",
                    "author_association": "MEMBER",
                    "body": "Yep, this does appear to be a bug! We shouldn't be leaving this code branch without setting `Content-Length`, `Transfer-Encoding`, or ensuring `body = None`. It's hard to know which fix is going to be the least problematic. I'm hesitant to start adding new headers to requests, but the first option would be to add `Transfer-Encoding: chunked` if our body isn't None and we didn't compute a `Content-Length`.\r\n\r\nHowever, short-circuiting this by changing the `body` from `''` back to `None` seems less impactful. It will affect the value of Request.body after calling `prepare_body` which is potentially breaking for some use cases. I think given the full flow is completely broken currently, that may be acceptable though.\r\n\r\nI wrote up a quick test for [tests/test_lowlevel.py](https://github.com/psf/requests/blob/main/tests/test_lowlevel.py) to demonstrate what we're trying to fix.\r\n\r\n```python\r\n@pytest.mark.parametrize(\r\n    \"method,include,exclude\",\r\n    (\r\n        (requests.get, [], [b\"Content-Length:\", b\"Transfer-Encoding:\"]),\r\n        (requests.post, [b\"Content-Length: 0\\r\\n\"], [b\"Transfer-Encoding:\"]),\r\n    )\r\n)\r\ndef test_empty_urlencoded_form_body(method, include, exclude):\r\n    \"\"\"Ensure we use only the specified Host header for chunked requests.\"\"\"\r\n    close_server = threading.Event()\r\n    server = Server(echo_response_handler, wait_to_close_event=close_server)\r\n\r\n    with server as (host, port):\r\n        url = f\"http://{host}:{port}/\"\r\n        resp = method(url, data=((\"a\", None,),))\r\n        close_server.set()  # release server block\r\n\r\n    assert not resp.content.endswith(b'\\r\\n0\\r\\n\\r\\n')\r\n\r\n    for header in include:\r\n        assert header in resp.content\r\n\r\n    for header in exclude:\r\n        assert header not in resp.content\r\n```\r\n\r\nTo fix it, I think the least invasive change would be updating [this line](https://github.com/psf/requests/blob/main/requests/models.py#L559) to:\r\n```python\r\n     body = self._encode_params(data) or None\r\n```\r\n\r\nLet me know what you think about that, @romanyakovlev. I'm curious to hear from @sigmavirus24 and/or @sethmlarson on their thoughts.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119154430/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.014834979549050331,
                        "severe_toxicity": 0.00013465696247294545,
                        "obscene": 0.0015964829362928867,
                        "threat": 0.0001725409529171884,
                        "insult": 0.0006074656848795712,
                        "identity_attack": 0.0002180993469664827
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119158516",
                    "id": 1119158516,
                    "created_at": "2022-05-06T00:21:20Z",
                    "updated_at": "2022-05-06T00:21:20Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "My input is \"garbage in, garbage out\". The input causing the behavior is garbage so I'm not worried about this",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119158516/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.21318300068378448,
                        "severe_toxicity": 0.00030116341076791286,
                        "obscene": 0.010380777530372143,
                        "threat": 0.0003544446371961385,
                        "insult": 0.005455646198242903,
                        "identity_attack": 0.0004013691213913262
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119211450",
                    "id": 1119211450,
                    "created_at": "2022-05-06T02:43:18Z",
                    "updated_at": "2022-05-06T02:43:18Z",
                    "author_association": "MEMBER",
                    "body": "This is definitely an edge case, but I'm hesitant to call it garbage because the interface allows arbitrary dictionaries as input. If you're constructing your input dynamically and end up with a value of None, Requests shouldn't start emitting non-sense message framing. Ideally, we either error out or make sure we know how to send the right pieces over the wire.\r\n\r\nThis isn't scoped to None either, any empty iterable value will trigger this. I'm surprised this hasn't been raised before.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119211450/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0016193673945963383,
                        "severe_toxicity": 9.116913861362264e-05,
                        "obscene": 0.00020555280207190663,
                        "threat": 0.00010292883962392807,
                        "insult": 0.00021788444428239018,
                        "identity_attack": 0.00015254374011419713
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1119324544",
                    "id": 1119324544,
                    "created_at": "2022-05-06T07:13:08Z",
                    "updated_at": "2022-05-06T07:13:08Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt I agree, your solution looks better. Pushed it with the test to the branch.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1119324544/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "romanyakovlev",
                        "id": 20498421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006677766796201468,
                        "severe_toxicity": 0.00011636854469543323,
                        "obscene": 0.0001823090569814667,
                        "threat": 0.00011727979290299118,
                        "insult": 0.0001784321793820709,
                        "identity_attack": 0.000138925010105595
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1120212733",
                    "id": 1120212733,
                    "created_at": "2022-05-07T13:46:07Z",
                    "updated_at": "2022-05-07T13:46:07Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> This is definitely an edge case, but I'm hesitant to call it garbage because the interface allows arbitrary dictionaries as input. If you're constructing your input dynamically and end up with a value of None, Requests shouldn't start emitting non-sense message framing. Ideally, we either error out or \nmake sure we know how to send the right pieces over the wire.\n> \n\n\nIf you're constructing it this way and you're not being careful then it is garbage input. None doesn't mean anything in this context. I've always opposed the support of none in the parameter but we can't remove it.\n\n> This isn't scoped to None either, any empty iterable value will trigger this. I'm surprised this hasn't been raised before.\n\nAgain, garbage. If you're sending an empty iterable that's garbage for us to try to do our best with and no way to predict it",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1120212733/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.014692073687911034,
                        "severe_toxicity": 0.00010885361552936956,
                        "obscene": 0.0009304534760303795,
                        "threat": 0.00018411957717034966,
                        "insult": 0.0007693985244259238,
                        "identity_attack": 0.00026077975053340197
                    }
                }
            ]
        },
        "97": {
            "html_url": "https://github.com/psf/requests/issues/6120",
            "id": 1224967057,
            "number": 6120,
            "title": "New exception when redirect url is invalid",
            "created_at": "2022-05-04T06:22:32Z",
            "updated_at": "2022-05-04T06:22:32Z",
            "closed_at": null,
            "body": "Currently when redirect response with invalid redirect URL is returned, we receive the same error (`InvalidURL, InvalidSchema, LocationParseError`) as when passing wrong URL that is used for first request in chain. It would be good to have those cases separated (e.g. to try fix it in custom way)",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "setla",
                "id": 38295919,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6120/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "98": {
            "html_url": "https://github.com/psf/requests/issues/6118",
            "id": 1223719666,
            "number": 6118,
            "title": "`proxies` input argument is mutated",
            "created_at": "2022-05-03T05:54:56Z",
            "updated_at": "2023-03-09T05:57:50Z",
            "closed_at": null,
            "body": "The input argument to `proxies` is mutated when environment proxy variables are present. See the reproduction steps.\r\n\r\nThis may be different than what users are expecting. It can lead to unexpected behavior when re-using the argument that was passed.\r\n\r\n## Expected Result\r\n\r\nNo mutation of the input argument:\r\n```\r\n>>> proxies = {'dummy': 'dummy'}\r\n>>> os.environ['http_proxy'] = 'http://dummy'\r\n>>> requests.get('https://python.org',proxies=proxies)\r\n<Response [200]>\r\n>>> proxies\r\n{'dummy': 'dummy'}\r\n```\r\n\r\n## Actual Result / Reproduction steps\r\n\r\n```\r\n>>> proxies = {'dummy': 'dummy'}\r\n>>> os.environ['http_proxy'] = 'http://dummy'\r\n>>> requests.get('https://python.org',proxies=proxies)\r\n<Response [200]>\r\n>>> proxies\r\n{'dummy': 'dummy', 'http': 'http://dummy'}\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.102.1-microsoft-standard-WSL2\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "milanboers",
                "id": 1335341,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6118/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1116207174",
                    "id": 1116207174,
                    "created_at": "2022-05-03T15:04:55Z",
                    "updated_at": "2022-05-03T15:04:55Z",
                    "author_association": "MEMBER",
                    "body": "Hi @milanboers, the behavior you're seeing is documented and standard across other HTTP tools, so I'm not sure it's broadly unexpected. We can't remove this behavior since a significant portion of users rely on it. If you don't want this functionality, you can set `trust_env` to False to disable this as documented [here](https://docs.python-requests.org/en/latest/api/#requests.Session.trust_env).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1116207174/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005848653381690383,
                        "severe_toxicity": 0.00012397331011015922,
                        "obscene": 0.0001811562106013298,
                        "threat": 0.00012617307947948575,
                        "insult": 0.00017215590924024582,
                        "identity_attack": 0.00014224048936739564
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1116226845",
                    "id": 1116226845,
                    "created_at": "2022-05-03T15:22:41Z",
                    "updated_at": "2022-05-03T15:22:41Z",
                    "author_association": "NONE",
                    "body": "Hi @nateprewitt , not sure if I made myself clear enough. The issue is not that proxy settings are taken from the environment, but that the input argument itself is mutated. I don't see this documented and am not aware of other tools that do the same.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1116226845/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "milanboers",
                        "id": 1335341,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006783559219911695,
                        "severe_toxicity": 0.00011329075641697273,
                        "obscene": 0.00018019354320131242,
                        "threat": 0.0001145041169365868,
                        "insult": 0.00017651861708145589,
                        "identity_attack": 0.00013597564247902483
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1116234119",
                    "id": 1116234119,
                    "created_at": "2022-05-03T15:29:27Z",
                    "updated_at": "2022-05-03T15:29:27Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for clarifying, I agree that behavior is a bit odd in the context of the top-level apis. `merge_environment_settings` is intended to mutate the input parameters and so I don't think we'd want to change that behavior. We could potentially create a copy of the input proxies [here](https://github.com/psf/requests/blob/40956723f27daf5e0d9759208ca69cef236ab339/requests/sessions.py#L575), but I think that also has potential to be breaking.\r\n\r\nThe best option here for now may be to make sure this is documented. I'd be willing to accept a PR with this information in the proxies section.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1116234119/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005611588130705059,
                        "severe_toxicity": 0.0001341871975455433,
                        "obscene": 0.00019958216580562294,
                        "threat": 0.0001413236022926867,
                        "insult": 0.00017708336235955358,
                        "identity_attack": 0.00014452863251790404
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1116332757",
                    "id": 1116332757,
                    "created_at": "2022-05-03T16:59:38Z",
                    "updated_at": "2022-05-03T16:59:38Z",
                    "author_association": "NONE",
                    "body": "I see. From the code it appears unintentional though:\r\n- All other parameters to `merge_environment_settings` (`url`, `stream`, `verify`, `cert`) are not mutated, only `proxies` is. \r\n- The merged settings are returned from the function. Why return anything if the input arguments are supposed to be mutated instead?\r\n- The settings that are returned are not the same as the mutation:\r\n```\r\n>>> session.proxies['session'] = 'http://session'\r\n>>> os.environ['http_proxy'] = 'http://env'\r\n>>> proxies = {'input': 'http://input'}\r\n>>> session.merge_environment_settings('http://myurl', proxies, None, None, None)\r\n{'verify': True, 'proxies': OrderedDict([('session', 'http://session'), ('input', 'http://input'), ('http', 'http://env')]), 'stream': False, 'cert': None}\r\n>>> proxies\r\n{'input': 'http://input', 'http': 'http://env'}\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1116332757/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "milanboers",
                        "id": 1335341,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007160324021242559,
                        "severe_toxicity": 0.00011976976384175941,
                        "obscene": 0.00020789536938536912,
                        "threat": 0.0001150080279330723,
                        "insult": 0.00017802398360799998,
                        "identity_attack": 0.00013939276686869562
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1116394378",
                    "id": 1116394378,
                    "created_at": "2022-05-03T18:06:36Z",
                    "updated_at": "2022-05-03T18:06:36Z",
                    "author_association": "MEMBER",
                    "body": "> * All other parameters to merge_environment_settings (url, stream, verify, cert) are not mutated, only proxies is.\r\n\r\nWell, to that point, `proxies` is the only mutable argument for `merge_environment_settings`. Everything else is immutable due to booleans and strings being references.\r\n\r\n> The merged settings are returned from the function. Why return anything if the input arguments are supposed to be mutated instead?\r\n\r\nBecause not everything is mutable.\r\n\r\n> The settings that are returned are not the same as the mutation:\r\n\r\nYeah, I agree this is a bit odd, but it's been the behavior for 9 years. I'm not entirely against improving it, but as I said above, this is existing functionality in a tool the majority of the Python ecosystem relies on. We cannot change this without a major version bump which isn't on the immediate horizon.\r\n\r\nI think the actions for the moment are documentation updates. I can reopen this as a breaking tracking feature, but there isn't a current timeline for addressing it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1116394378/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005851067253388464,
                        "severe_toxicity": 0.00012624335067812353,
                        "obscene": 0.0001887418475234881,
                        "threat": 0.00012690476432908326,
                        "insult": 0.00017234725237358361,
                        "identity_attack": 0.00014148850459605455
                    }
                }
            ]
        },
        "99": {
            "html_url": "https://github.com/psf/requests/issues/6115",
            "id": 1220894214,
            "number": 6115,
            "title": "Still cannot prevent requests library from encoding",
            "created_at": "2022-04-29T13:58:44Z",
            "updated_at": "2024-01-27T10:03:48Z",
            "closed_at": null,
            "body": "I have the same problem as https://github.com/psf/requests/issues/5964, but the solution does not work for me.\r\nI need to send unescaped URL requestes to a server. The purpose is to evoke response code 400 to test the firewall configuration.\r\n\r\n## Expected Result\r\nThe following code should (according to https://github.com/psf/requests/issues/5964) send the unescaped URL:\r\n\r\n```\r\nimport requests\r\ns = requests.Session()\r\n\r\n# Using Burp Suite Proxy to examine request being sent.\r\ns.proxies = { \r\n    \"http\"  : \"http://127.0.0.1:8080\",\r\n    \"https\" : \"http://127.0.0.1:8080\",\r\n}\r\n# Do not verify certificate.\r\ns.verify = False\r\n\r\n# Solution from https://github.com/psf/requests/issues/5964\r\nbase_url = 'https://www.example.com/search'\r\nquery = '?date_range=2017-01-01|2017-03-01'\r\nreq = requests.Request('GET', base_url)\r\np = req.prepare()\r\np.url += query\r\nresp = s.send(p)\r\nprint(resp.request.url)\r\n```\r\n\r\n\r\n## Actual Result\r\n\r\nThe `print(resp.request.url)` prints `https://www.example.com/search?date_range=2017-01-01|2017-03-01` as expected.\r\nBut what is really transmitted is the escaped URL, `https://www.example.com/search?date_range=2017-01-01%7C2017-03-01` as seen in this Burp Suite screenshot: \r\n![image](https://user-images.githubusercontent.com/4678285/165955894-9a8d73e0-98a9-48a3-abac-6ce2c652c138.png)\r\n\r\n\r\n## Reproduction Steps\r\n\r\nUse the python code above and a way of choice to capture the actual response being sent (e.g. Burp Suite  proxy).\r\nYou can also use curl to send an actually unescaped response:\r\n\r\n`curl \"https://www.example.com/search?date_range=2017-01-01|2017-03-01\" -x 127.0.0.1:8080 --insecure`\r\n\r\n![image](https://user-images.githubusercontent.com/4678285/165958290-a6dfbf45-a620-453a-9054-84cba0b4f5a2.png)\r\n\r\n\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  {\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.14.0-1034-oem\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.8\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n\r\n",
            "author_association": "NONE",
            "comments": 11,
            "state": "open",
            "user": {
                "login": "LudiusMaximus",
                "id": 4678285,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6115/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1114022022",
                    "id": 1114022022,
                    "created_at": "2022-04-30T17:13:11Z",
                    "updated_at": "2022-04-30T17:13:11Z",
                    "author_association": "MEMBER",
                    "body": "Hmm, so this appears to actually be a breakage introduced by this PR in urllib3 1.26.0. Requests is still forwarding the unencoded URL but [urllib3 now unilaterally enforces encoding](https://github.com/urllib3/urllib3/commit/691679f738ae098ce024aeae90cfdd8013b8e1e7#diff-2d5453550bf56a4666a88e9262248cea2f8ef2338695b5300b6c9a550647ee0eR631) on paths. The immediate fix would be to downgrade to urllib3 1.25.11 but that's not a great idea long term.\r\n\r\nI don't know if there's a good way to fix this now given the amount of time it's been in place. We could potentially not override the provided url and only use the parsed version where needed for the scheme. [This line](https://github.com/urllib3/urllib3/commit/691679f738ae098ce024aeae90cfdd8013b8e1e7#diff-2d5453550bf56a4666a88e9262248cea2f8ef2338695b5300b6c9a550647ee0eR651) would need to be reverted but I don't know if we've enforced the scheme will always be present at this point.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1114022022/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.003099996130913496,
                        "severe_toxicity": 0.00011113366053905338,
                        "obscene": 0.0004484470409806818,
                        "threat": 0.00015266292029991746,
                        "insult": 0.00027368878363631666,
                        "identity_attack": 0.00015794749197084457
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1114022185",
                    "id": 1114022185,
                    "created_at": "2022-04-30T17:14:20Z",
                    "updated_at": "2022-04-30T17:14:20Z",
                    "author_association": "MEMBER",
                    "body": "@sethmlarson what are your thoughts here? urllib3 has become more strict with what it will emit which is generally a positive but has broken some portions of the PreparedRequests workflow over the last handful of years. Is this a use case urllib3 is willing to support?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1114022185/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006813801592215896,
                        "severe_toxicity": 0.00011491934856167063,
                        "obscene": 0.000177587746293284,
                        "threat": 0.0001260460849152878,
                        "insult": 0.00017850450240075588,
                        "identity_attack": 0.00013803555339109153
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1114066870",
                    "id": 1114066870,
                    "created_at": "2022-04-30T22:52:54Z",
                    "updated_at": "2022-04-30T22:52:54Z",
                    "author_association": "MEMBER",
                    "body": "@nateprewitt Yes, we should be supporting this through HTTPConnectionPool.request(). I think we lost this behavior sometime but it'd be good to restore it in cases where it's safe to do so.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1114066870/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006111597176641226,
                        "severe_toxicity": 0.0001220269623445347,
                        "obscene": 0.0001843205391196534,
                        "threat": 0.00013201075489632785,
                        "insult": 0.00017286256479565054,
                        "identity_attack": 0.0001392454287270084
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1172198984",
                    "id": 1172198984,
                    "created_at": "2022-07-01T10:31:08Z",
                    "updated_at": "2023-10-09T05:39:57Z",
                    "author_association": "NONE",
                    "body": "This problem may be solved by hooking urllib3 like this:\r\n\r\n```python\r\nimport requests\r\nimport urllib3.util.url as urllib3_url\r\n\r\n\r\ndef hook_invalid_chars(component, allowed_chars):\r\n    # handle url encode here, or do nothing\r\n    return component\r\n\r\nurllib3_url._encode_invalid_chars = hook_invalid_chars\r\n\r\ns = requests.Session()\r\n\r\ns.verify = False\r\n\r\nbase_url = 'http://127.0.0.1:8080'\r\nquery = '?date_range=2017-01-01|2017-03-01'\r\nreq = requests.Request('GET', base_url)\r\np = req.prepare()\r\np.url += query\r\nresp = s.send(p)\r\nprint(resp.request.url)\r\n```\r\n\r\n![\u56fe\u7247](https://user-images.githubusercontent.com/11925471/176877894-8b209d02-0210-48f3-8fc8-b9db8ee03991.png)\r\n\r\nSystem Information\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.0-19041-Microsoft\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010106f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.8\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1172198984/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "LyleMi",
                        "id": 11925471,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.002182629192247987,
                        "severe_toxicity": 0.00010855332220671698,
                        "obscene": 0.0003262316749896854,
                        "threat": 0.0001277783012483269,
                        "insult": 0.0002259536413475871,
                        "identity_attack": 0.0001609536848263815
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1752265592",
                    "id": 1752265592,
                    "created_at": "2023-10-09T02:25:25Z",
                    "updated_at": "2023-10-09T05:40:29Z",
                    "author_association": "NONE",
                    "body": "@LudiusMaximus\r\nHope you're doing well. Did you find a solution?\r\n\r\nThe solution provided by @nateprewitt on #5964 doesn't work for me either (I tested).\r\n\r\n@Lukasa provides a prepared requests example as well on #1454 at [this point in the discussion](https://github.com/psf/requests/issues/1454#issuecomment-20832874)\r\n\r\nBased on the contribution guidelines I put the details for my situation on Stack Overflow since whether this is a bug/limitation is a gray area.\r\n\r\nIn my case if the device on the other end was my web server, I'd fix it - it isn't so I'm looking for a way to interface with it.\r\n\r\nI would greatly appreciate help toward a code solution to overcome this roadblock. Thank you!\r\n\r\nhttps://stackoverflow.com/questions/77255960/python-requests-prevent-url-encoding",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1752265592/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjbear",
                        "id": 38406045,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005875236820429564,
                        "severe_toxicity": 0.0001243550213985145,
                        "obscene": 0.0001808716042432934,
                        "threat": 0.00012917390267830342,
                        "insult": 0.00017159002891276032,
                        "identity_attack": 0.00014057900989428163
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1783711737",
                    "id": 1783711737,
                    "created_at": "2023-10-28T05:41:44Z",
                    "updated_at": "2023-11-03T01:53:31Z",
                    "author_association": "NONE",
                    "body": "hi, +1 on this being an issue. I tried LyleMi's solution and it did not work even though the url seems well formed.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1783711737/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "abaruah117",
                        "id": 24401785,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006321606924757361,
                        "severe_toxicity": 0.00011760275810956955,
                        "obscene": 0.00017762415518518537,
                        "threat": 0.00011770080891437829,
                        "insult": 0.00017636198026593775,
                        "identity_attack": 0.00013760397268924862
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1786253006",
                    "id": 1786253006,
                    "created_at": "2023-10-31T00:32:10Z",
                    "updated_at": "2023-11-02T23:05:02Z",
                    "author_association": "NONE",
                    "body": "> hi, +1 on this being an issue. I tried LyleMi's solution and it did not work even though the url seems well formed.\r\n\r\n@abaruah117\r\nTLDR: You'll either need to override items within `urllib3` or use the lower-level `urllib` directly (credit to Tomi on Stack Overflow). The first one is probably frowned upon and the latter with `urllib` could be painful (requires manually handling many aspects that `requests` handles for us).\r\n\r\n(I haven't entirely chosen my path to overcome the URL roadblock I ran into here. My task to interact with an older system is on-hold until I have time.)\r\n\r\nMore Details:\r\n\r\nIt is my _impression_ that based on minimized comments (including Lyle's) and the lack of an official solution that this issue is deemed a problem the `requests` project won't be fixing (as the code causing this behavior exists in `urllib3`). Ludius' example included a pipe and mine included curly braces -- both of those do not appear to show up as \"reserved\" characters in the RFCs.\r\n\r\nYou might consider updating your reply with an example of the URL and format you're having issues with.\r\n\r\nI have a question over on Stack Overflow where a really helpful person (Tomi) decided to poke at the issue. The code forcing the URI encoding is within `urllib3` and not directly in `requests` so it isn't something `requests` will resolve (my opinion).\r\n\r\nIn [RFC 2396](https://datatracker.ietf.org/doc/html/rfc2396), pipe and curly braces (among some other symbols) are considered \"unwise\" to use in URLs. And [RFC 3986 in section 2](https://datatracker.ietf.org/doc/html/rfc3986#section-2) does not show pipe or curly braces as reserved, but then again 2396 is obsoleted or superseded by 3986. I suppose more than anything those and RFCs that obsolete even those two intend to explicitly convey the **allowed characters** and leave the prohibited/forbidden ones for inference (exception being the reserved characters that are explicitly called out).\r\n\r\nEdit: grammar",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1786253006/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjbear",
                        "id": 38406045,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008843172108754516,
                        "severe_toxicity": 0.00010786405619001016,
                        "obscene": 0.0001928877318277955,
                        "threat": 0.00011085413279943168,
                        "insult": 0.00017646493506617844,
                        "identity_attack": 0.00013944167585577816
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1789984733",
                    "id": 1789984733,
                    "created_at": "2023-11-02T02:57:58Z",
                    "updated_at": "2023-11-03T01:53:41Z",
                    "author_association": "NONE",
                    "body": "+1 I totally understand following standards in MOST cases but there should be some way for a developer to override the default behavior. This is making things hard for us security folks. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1789984733/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 1
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "superswan",
                        "id": 5325504,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005863310070708394,
                        "severe_toxicity": 0.00012766930740326643,
                        "obscene": 0.00018159566388931125,
                        "threat": 0.00013760935689788312,
                        "insult": 0.00017641580780036747,
                        "identity_attack": 0.00014359111082740128
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1791716412",
                    "id": 1791716412,
                    "created_at": "2023-11-02T23:53:48Z",
                    "updated_at": "2023-11-03T00:01:58Z",
                    "author_association": "NONE",
                    "body": "> +1 I totally understand following standards in MOST cases but there should be some way for a developer to override the default behavior. This is making things hard for us security folks.\r\n\r\n@superswan \r\nWhile it can be overridden the changes won't be in `requests`, but instead `urllib3`.\r\n\r\nThere are ugly hack solutions over on Stack Overflow. _No warranties and could break unexpectedly._\r\nhttps://stackoverflow.com/questions/77255960/python-requests-prevent-url-encoding\r\n\r\nMy testing was via netcat (nc) for Stack Overflow post so hopefully this works when I get back to running it against that live legacy device.\r\n\r\nI hope this helps you as it helped me.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1791716412/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjbear",
                        "id": 38406045,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005959148984402418,
                        "severe_toxicity": 0.000127507490105927,
                        "obscene": 0.00018475019896868616,
                        "threat": 0.0001362749608233571,
                        "insult": 0.0001722700399113819,
                        "identity_attack": 0.00014232269313652068
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1791770084",
                    "id": 1791770084,
                    "created_at": "2023-11-03T01:17:02Z",
                    "updated_at": "2023-11-03T01:53:51Z",
                    "author_association": "NONE",
                    "body": "@mjbear thank you. I recognize that the issue originates from urllib3. I wanted to express my concerns since this appears to be one of the few places engaging in active discussion. I have opted to use urlopen() instead.\n\nHowever, this issue also impacts the Requests library, resulting in the loss of some of its enhanced features such as error handling, header manipulation, and timeouts due to the workaround. In past versions it was possible to override this behavior from requests directly. This change has made it challenging to work with legacy code and manage use cases that fall outside of standard practices.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1791770084/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "superswan",
                        "id": 5325504,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005444838316179812,
                        "severe_toxicity": 0.0001313973916694522,
                        "obscene": 0.0001915129105327651,
                        "threat": 0.00013139790098648518,
                        "insult": 0.00017503215349279344,
                        "identity_attack": 0.00014182267477735877
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1913102974",
                    "id": 1913102974,
                    "created_at": "2024-01-27T10:03:47Z",
                    "updated_at": "2024-01-27T10:03:47Z",
                    "author_association": "NONE",
                    "body": "As you are testing your firewall configuration you may be interested in my approach to unencode characters or even inject the payload right before the request is send, so its never modified:\r\n\r\n\r\n```\r\nimport urllib3\r\nimport requests\r\n\r\ndef custom_make_request(self, conn, method, url, timeout=urllib3.connectionpool._Default, chunked=False, **httplib_request_kw):\r\n    url = url.replace(\"FUZZ\", \"TEST!/&%$=)()\")\r\n    new_headers = {}\r\n    for header, value in httplib_request_kw['headers'].items():\r\n        new_header = header.replace(\"FUZZ\", \"TEST!/&%$=)()\")\r\n        new_value = value.replace(\"FUZZ\", \"TEST!/&%\u00a7\")\r\n        new_headers[new_header] = new_value\r\n    httplib_request_kw['headers'] = new_headers\r\n    return self._original_make_request(conn, method, url, timeout=timeout, chunked=chunked, **httplib_request_kw)\r\n\r\n# Create a reference to the original _make_request method\r\nurllib3.connectionpool.HTTPConnectionPool._original_make_request = urllib3.connectionpool.HTTPConnectionPool._make_request\r\n# Replace the _make_request method with the custom_make_request function\r\nurllib3.connectionpool.HTTPConnectionPool._make_request = custom_make_request\r\n\r\nresponse = requests.get('http://<YOUR_TEST_SERVER>/FUZZ')\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1913102974/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "breachr",
                        "id": 63966335,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.002225344767794013,
                        "severe_toxicity": 0.00011776615428971127,
                        "obscene": 0.00043264508713036776,
                        "threat": 0.00012635464372579008,
                        "insult": 0.00023865705588832498,
                        "identity_attack": 0.00014974041550885886
                    }
                }
            ]
        },
        "100": {
            "html_url": "https://github.com/psf/requests/issues/6110",
            "id": 1209453328,
            "number": 6110,
            "title": "Cookies that include a port flag set to 443 aren't stored if they came from an https location without the 443 port in the URI",
            "created_at": "2022-04-20T09:56:08Z",
            "updated_at": "2022-05-01T12:47:35Z",
            "closed_at": null,
            "body": "When performing a request to an https location that doesn't include a port explicitly (for example: `https://localhost`) and that location returns a cookie that includes a `port` flag set to `443`, that cookie isn't stored into the cookie jar. However, this kind of cookie is stored into the cookie jar, when the port is set explicitly in the https location (for example: `https://localhost:443`).\r\n\r\n## Expected Result\r\n\r\nA cookie that includes a `port` flag set to `443` should be stored into the cookie jar when the request is performed to an https location that doesn't include a port.\r\n\r\n## Reproduction Steps\r\n\r\nI hope you don't mind that I've moved the Actual Result below this section. I did it because I've written a test-suite to reproduce the issue and the result of running that test-suite has been pasted in the Actual Result section.\r\n\r\n```python\r\nimport http\r\nimport pytest\r\nimport requests\r\n\r\nfrom io import BytesIO\r\nfrom urllib3.response import HTTPHeaderDict, HTTPResponse\r\n\r\n\r\nclass OriginalResponseShim:\r\n    def __init__(self, headers):\r\n        self.msg = headers\r\n\r\n    def isclosed(self):\r\n        return True\r\n\r\n    def close(self):\r\n        return\r\n\r\n\r\ndef make_http_response(\r\n    method,\r\n    url,\r\n    status=requests.codes.ok,\r\n    headers=None\r\n):\r\n    http_headers = HTTPHeaderDict()\r\n    if headers is not None:\r\n        http_headers.extend(headers)\r\n\r\n    def _make_http_response(adapter, request, *args, **kwargs):\r\n        http_response = HTTPResponse(\r\n            status=status,\r\n            reason=http.client.responses.get(status, None),\r\n            body=BytesIO(b''),\r\n            headers=http_headers,\r\n            original_response=OriginalResponseShim(http_headers),\r\n            preload_content=False,\r\n        )\r\n\r\n        return adapter.build_response(request, http_response)\r\n\r\n    return _make_http_response\r\n\r\n\r\nclass TestCookies:\r\n    @pytest.mark.parametrize('url', [\r\n        'http://localhost',\r\n        'http://localhost:80',\r\n        'http://localhost:8080',\r\n        'https://localhost',\r\n        'https://localhost:443',\r\n        'https://localhost:8080',\r\n    ])\r\n    def test_cookie_without_port(self, mocker, url):\r\n        mocker.patch(\r\n            'requests.adapters.HTTPAdapter.send',\r\n            new=make_http_response(\r\n                'GET',\r\n                url,\r\n                headers={\r\n                    'set-cookie': 'cookie=value',\r\n                },\r\n            )\r\n        )\r\n\r\n        session = requests.Session()\r\n        resp = session.request('GET', url)\r\n\r\n        assert resp.status_code == requests.codes.ok\r\n        assert 'set-cookie' in resp.headers\r\n        assert 'cookie' in session.cookies\r\n\r\n        cookie = next(iter(session.cookies))\r\n        assert cookie.name == 'cookie'\r\n        assert cookie.value == 'value'\r\n        assert cookie.port is None\r\n\r\n    @pytest.mark.parametrize('url, port', [\r\n        ('http://localhost', 80),\r\n        ('http://localhost:80', 80),\r\n        ('http://localhost:443', 443),\r\n        ('http://localhost:8080', 8080),\r\n        ('https://localhost', 443),\r\n        ('https://localhost:80', 80),\r\n        ('https://localhost:443', 443),\r\n        ('https://localhost:8080', 8080),\r\n    ])\r\n    def test_cookie_with_port(self, mocker, url, port):\r\n        mocker.patch(\r\n            'requests.adapters.HTTPAdapter.send',\r\n            new=make_http_response(\r\n                'GET',\r\n                url,\r\n                headers={\r\n                    'set-cookie': f'cookie=value; port={port}',\r\n                },\r\n            )\r\n        )\r\n\r\n        session = requests.Session()\r\n        resp = session.request('GET', url)\r\n\r\n        assert resp.status_code == requests.codes.ok\r\n        assert 'set-cookie' in resp.headers\r\n        assert 'cookie' in session.cookies\r\n\r\n        cookie = next(iter(session.cookies))\r\n        assert cookie.name == 'cookie'\r\n        assert cookie.value == 'value'\r\n        assert cookie.port == f'{port}'\r\n```\r\n\r\n## Actual Result\r\n\r\n```================================== test session starts ===================================\r\nplatform darwin -- Python 3.10.2, pytest-6.2.5, py-1.11.0, pluggy-1.0.0\r\nrootdir: /Users/fran/code/requests, configfile: pytest.ini\r\nplugins: httpbin-1.0.0, mock-2.0.0, cov-3.0.0\r\ncollected 14 items\r\n\r\ntests/test_cookies.py ..........F...                                               [100%]\r\n\r\n======================================== FAILURES ========================================\r\n________________ TestCookies.test_cookie_with_port[https://localhost-443] ________________\r\n\r\nself = <tests.test_cookies.TestCookies object at 0x10e309ff0>\r\nmocker = <pytest_mock.plugin.MockFixture object at 0x10e30a290>, url = 'https://localhost'\r\nport = 443\r\n\r\n    @pytest.mark.parametrize('url, port', [\r\n        ('http://localhost', 80),\r\n        ('http://localhost:80', 80),\r\n        ('http://localhost:443', 443),\r\n        ('http://localhost:8080', 8080),\r\n        ('https://localhost', 443),\r\n        ('https://localhost:80', 80),\r\n        ('https://localhost:443', 443),\r\n        ('https://localhost:8080', 8080),\r\n    ])\r\n    def test_cookie_with_port(self, mocker, url, port):\r\n        mocker.patch(\r\n            'requests.adapters.HTTPAdapter.send',\r\n            new=make_http_response(\r\n                'GET',\r\n                url,\r\n                headers={\r\n                    'set-cookie': f'cookie=value; port={port}',\r\n                },\r\n            )\r\n        )\r\n\r\n        session = requests.Session()\r\n        resp = session.request('GET', url)\r\n\r\n        assert resp.status_code == requests.codes.ok\r\n        assert 'set-cookie' in resp.headers\r\n>       assert 'cookie' in session.cookies\r\nE       AssertionError: assert 'cookie' in <RequestsCookieJar[]>\r\nE        +  where <RequestsCookieJar[]> = <requests.sessions.Session object at 0x10e309b10>.cookies\r\n\r\ntests/test_cookies.py:105: AssertionError\r\n```\r\n\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"21.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "fjcuadrado",
                "id": 2392229,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6110/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1103737429",
                    "id": 1103737429,
                    "created_at": "2022-04-20T09:58:06Z",
                    "updated_at": "2022-04-20T09:58:06Z",
                    "author_association": "NONE",
                    "body": "Also I wrote the following workaround to fix the issue:\r\n\r\n```diff\r\ndiff --git a/requests/cookies.py b/requests/cookies.py\r\nindex 56fccd9c..afe6f597 100644\r\n--- a/requests/cookies.py\r\n+++ b/requests/cookies.py\r\n@@ -43,7 +43,13 @@ class MockRequest(object):\r\n         return self.type\r\n\r\n     def get_host(self):\r\n-        return urlparse(self._r.url).netloc\r\n+        url_parts = urlparse(self._r.url)\r\n+        host = url_parts.netloc\r\n+\r\n+        if url_parts.scheme == 'https' and not url_parts.port:\r\n+            host = f'{host}:443'\r\n+\r\n+        return host\r\n\r\n     def get_origin_req_host(self):\r\n         return self.get_host()\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1103737429/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fjcuadrado",
                        "id": 2392229,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0017243990441784263,
                        "severe_toxicity": 9.928613872034475e-05,
                        "obscene": 0.0002734989102464169,
                        "threat": 0.00011000214726664126,
                        "insult": 0.00020390661666169763,
                        "identity_attack": 0.00013920945639256388
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1114024811",
                    "id": 1114024811,
                    "created_at": "2022-04-30T17:32:23Z",
                    "updated_at": "2022-04-30T17:32:33Z",
                    "author_association": "MEMBER",
                    "body": "Hi @fjcuadrado, this seems like a reasonable behavior change. We'll need to do a bit of digging to make sure there isn't anything in the cookie spec explicitly preventing this. I would assume that's not the case, but we'd need to do some validating before approving anything.\r\n\r\nAs far as approach goes, we already do something very similar for authorization headers [here](https://github.com/psf/requests/blob/2a6f290bc09324406708a4d404a88a45d848ddf9/requests/sessions.py#L137-L142). We may be able to rely on a similar pattern for making these decisions.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1114024811/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006605837261304259,
                        "severe_toxicity": 0.00011997620458714664,
                        "obscene": 0.00019550853176042438,
                        "threat": 0.0001248187036253512,
                        "insult": 0.0001740641746437177,
                        "identity_attack": 0.0001389015669701621
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1114066588",
                    "id": 1114066588,
                    "created_at": "2022-04-30T22:50:30Z",
                    "updated_at": "2022-04-30T22:50:30Z",
                    "author_association": "MEMBER",
                    "body": "Adding some context to this issue, the [current RFC](https://www.rfc-editor.org/rfc/rfc6265) for cookies removes mentions of the `port` parameter and instead has:\n\n> ... cookies for a given host are shared across all the ports on that host ...",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1114066588/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006092985859140754,
                        "severe_toxicity": 0.00012154849537182599,
                        "obscene": 0.00018632470164448023,
                        "threat": 0.00012089263327652588,
                        "insult": 0.00017333544383291155,
                        "identity_attack": 0.00013823893095832318
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1114227137",
                    "id": 1114227137,
                    "created_at": "2022-05-01T12:47:35Z",
                    "updated_at": "2022-05-01T12:47:35Z",
                    "author_association": "NONE",
                    "body": "The problem is that the [set_ok_port](https://github.com/python/cpython/blob/e7de54321952ebb58cc414f2160c9ad4f6510af2/Lib/http/cookiejar.py#L1075) function of `DefaultCookiePolicy` from the `http.cookiejar` standard library module doesn\u2019t follow what @sethmlarson said.\r\n\r\nInstead, as you can see, it checks the port of the cookie is the same than the provided in the request host, using the 80 port as the default value when there is no port in the host.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1114227137/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fjcuadrado",
                        "id": 2392229,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011023974511772394,
                        "severe_toxicity": 0.00010231263877358288,
                        "obscene": 0.00020391323778312653,
                        "threat": 0.0001089978904929012,
                        "insult": 0.0001853193825809285,
                        "identity_attack": 0.00014161955914460123
                    }
                }
            ]
        },
        "101": {
            "html_url": "https://github.com/psf/requests/issues/6103",
            "id": 1191981901,
            "number": 6103,
            "title": "HTTPS proxy certificate is not validated",
            "created_at": "2022-04-04T15:44:10Z",
            "updated_at": "2022-07-30T03:45:50Z",
            "closed_at": null,
            "body": "When running a request using `HTTPS` proxy the proxy certificate is ignored even when `verify=True`.\r\nIs there a way to validate the proxy certificate?\r\n```\r\n>>> requests.get(\"https://www.google.com\", proxies={\"https\": \"https://100.117.2.81:3129\"}, verify=True)\r\n>>> <Response [200]>\r\n```\r\nThis is available using `pycurl`\r\n```\r\ncurl.setopt(pycurl.PROXY_SSL_VERIFYPEER, True)\r\ncurl.setopt(pycurl.PROXY_SSL_VERIFYHOST, True)\r\n```",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "arossert",
                "id": 7085494,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6103/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1199141969",
                    "id": 1199141969,
                    "created_at": "2022-07-29T10:55:20Z",
                    "updated_at": "2022-07-29T10:55:36Z",
                    "author_association": "NONE",
                    "body": "Hello @arossert \r\nIf you have a copy of the self-signed certificate and key you can modify the code as follow:\r\n\r\n```python\r\nproxies = {\r\n    'http': 'http://127.0.0.1:24000',\r\n    'https': 'http://127.0.0.1:24000',\r\n}\r\n\r\ncertificate_path = os.path.join(CACERT_PATH, 'cacert.pem')\r\nkey_path = os.path.join(CACERT_KEY, 'cacert.key')\r\n\r\nresp = requests.get('https://api.myip.com',\r\n                    proxies=proxies,\r\n                    cert=(certificate_path, key_path))\r\nprint(resp.text)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1199141969/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hasanozdem1r",
                        "id": 34897251,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000663844752125442,
                        "severe_toxicity": 0.00011670937237795442,
                        "obscene": 0.00019135959155391902,
                        "threat": 0.00011254070705035701,
                        "insult": 0.00017286124057136476,
                        "identity_attack": 0.00013587648572865874
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1199568279",
                    "id": 1199568279,
                    "created_at": "2022-07-29T15:41:20Z",
                    "updated_at": "2022-07-29T15:41:20Z",
                    "author_association": "NONE",
                    "body": "@hasanozdem1r This will verify the target host `https://api.myip.com`, what I'm interested in is verifying the proxy server.\r\n```\r\nproxies = {'http': 'https://mp.proxy.com:1234', 'https': 'https://my.proxy.com:1234'}\r\nresp = requests.get('https://api.myip.com', proxies=proxies)\r\n```\r\nSo in this case I want to be able to validate `my.proxy.com` certificate, it is possible using `curl`/`pycurl`",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1199568279/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "arossert",
                        "id": 7085494,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006066487403586507,
                        "severe_toxicity": 0.00012582908675540239,
                        "obscene": 0.00019892652926500887,
                        "threat": 0.0001226982130901888,
                        "insult": 0.0001725320762488991,
                        "identity_attack": 0.000139073992613703
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1199697600",
                    "id": 1199697600,
                    "created_at": "2022-07-29T16:35:31Z",
                    "updated_at": "2022-07-29T16:35:53Z",
                    "author_association": "NONE",
                    "body": "@arossert well I think you should make it clear with curl/ pycurl part. \r\nFollowing code you've mentioned will verify proxy server already.\r\n```python\r\nproxies = {'http': 'https://mp.proxy.com:1234', 'https': 'https://my.proxy.com:1234'}\r\nresp = requests.get('https://api.myip.com', proxies=proxies)\r\n```\r\nEven though here is more better approach\r\n```python\r\ndef check_proxy(proxy, timeout, list, proxy_type):\r\n        global working\r\n        global dead\r\n        try:\r\n            try:\r\n                proxies = {\r\n                    'http': f'{proxy_type}://{proxy}',\r\n                    'https': f'{proxy_type}://{proxy}'\r\n                }\r\n                request.get(\"https://www.google.com/\", timeout=timeout, proxies=proxies)\r\n            except Exception:\r\n                printqueue.append(f\"[{proxy}]: Dead or timed out.\")\r\n                dead += 1\r\n            else:\r\n                printqueue.append(f\"[{proxy}]: Working\")\r\n                working += 1\r\n                name = list.split(\"/\")[-1].split(\".\")[0]\r\n                with open(f\"proxies/{name}-{proxy_type}-working.txt\", \"a+\") as handle:\r\n                    handle.write(f\"{proxy}\\n\")\r\n        except Exception as e:\r\n            printqueue.append(e) \r\n```\r\nDo you want to pass from curl proxies and verify or how ?\r\nHere also way to do that is explained how to verify proxy from curl\r\nhttps://oxylabs.io/blog/curl-with-proxy",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1199697600/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hasanozdem1r",
                        "id": 34897251,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014946500305086374,
                        "severe_toxicity": 0.0001034334854921326,
                        "obscene": 0.00026151773636229336,
                        "threat": 0.00010777798888739198,
                        "insult": 0.00019598091603256762,
                        "identity_attack": 0.0001415660954080522
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1200080786",
                    "id": 1200080786,
                    "created_at": "2022-07-30T03:45:50Z",
                    "updated_at": "2022-07-30T03:45:50Z",
                    "author_association": "NONE",
                    "body": "@hasanozdem1r Maybe I was not clear enough, but I want to verify the proxy server certificate, not that the proxy is working.\r\n\r\nWhen working with HTTPS, there is a certificate validation step that requests is skipping on the proxy server even when `verify=True`.\r\n\r\nHere is an example\r\nCurl\r\n```\r\ncurl --proxy https://100.117.2.81:3129 https://www.google.com\r\ncurl: (60) SSL: no alternative certificate subject name matches target host name '100.117.2.81'\r\n(can be skipped with --proxy-insecure)\r\n```\r\nRequest\r\n```\r\nimport requests\r\nrequests.get(\"https://www.google.com\", proxies={\"https\": \"https://100.117.2.81:3129\"}, verify=True)\r\n<Response [200]>\r\n```\r\nI expect the request to fail on a proxy certificate validation error.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1200080786/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "arossert",
                        "id": 7085494,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000688502739649266,
                        "severe_toxicity": 0.00011512477794894949,
                        "obscene": 0.00018622202333062887,
                        "threat": 0.00011480620014481246,
                        "insult": 0.0001725765032460913,
                        "identity_attack": 0.00013607603614218533
                    }
                }
            ]
        },
        "102": {
            "html_url": "https://github.com/psf/requests/issues/6102",
            "id": 1191322611,
            "number": 6102,
            "title": "HTTPDigestAuth fails on non-latin credentials",
            "created_at": "2022-04-04T06:32:18Z",
            "updated_at": "2024-04-17T16:41:29Z",
            "closed_at": null,
            "body": "There was issue reported, which is closed with bad results.\r\n\r\nhttps://github.com/psf/requests/blob/4f6c0187150af09d085c03096504934eb91c7a9e/requests/auth.py#L59-L63\r\n\r\nDon't pass unicode strings in the arguments, but use UTF8 bytes instead.\r\n```\r\nself.session.get(main_url, auth=requests.auth.HTTPDigestAuth(\"\u0421\u0435\u0440\u0433\u0435\u0439_\u041b\u0430\u0441\u0442\u043e\u0447\u043a\u0438\u043d\".encode('UTF-8'), '1234'))\r\n```\r\n\r\n_Originally posted by @D-stefaang in https://github.com/psf/requests/issues/5089#issuecomment-763569911_\r\n\r\nBut this is wrong! When i try to set user 'Ond\u0159ej' with this advice, requests send bad string:\r\n\r\n```\r\nHTTPDigestAuth('Ond\u0159ej'.encode('utf-8'), 'hesl\u00ed\u010dko')\r\n```\r\ncreates header starts with wrong username!\r\n```\r\nDigest username=\"b'Ond\\xc5\\x99ej'\"\r\n```",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "ondratu",
                "id": 6469029,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6102/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1087186718",
                    "id": 1087186718,
                    "created_at": "2022-04-04T07:01:50Z",
                    "updated_at": "2022-04-04T07:01:50Z",
                    "author_association": "MEMBER",
                    "body": "Hi @ondratu,\r\n\r\nCould you please clarify what you believe is wrong in this case? `\u0159` is the byte-sequence `\\xc5\\x99` in UTF-8, so we'd expect the bytes object to be `Ond\\xc5\\x99ej`. We can quickly verify this by checking:\r\n\r\n```python\r\n'Ond\u0159ej'.encode('utf-8') == b'Ond\\xc5\\x99ej'\r\n>>> True\r\n```\r\n\r\nIt's not clear what other value you'd be expecting.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1087186718/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007078811177052557,
                        "severe_toxicity": 0.00011400762741686776,
                        "obscene": 0.0001907346013467759,
                        "threat": 0.00011632072710199282,
                        "insult": 0.00017355373711325228,
                        "identity_attack": 0.00013591420429293066
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1087221857",
                    "id": 1087221857,
                    "created_at": "2022-04-04T07:43:08Z",
                    "updated_at": "2022-04-04T07:43:08Z",
                    "author_association": "MEMBER",
                    "body": "Hmm, on closer inspection this does appear to be a bug. We're using the bytes username as an argument to [format our string](https://github.com/psf/requests/blob/2d5517682b3b38547634d153cea43d48fbc8cdb5/requests/auth.py#L215-L225) for the header. This causes the full literal `\"b'Ond\\xc5\\x99ej'\"` to be used which I agree doesn't look correct. This header _should_ be encoded as bytes during creation but we currently defer that to be urllib3's problem.\r\n\r\nWhen not encoding the auth/password, we get this:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/Users/nateprewitt/Work/OpenSource/requests/test.py\", line 3, in <module>\r\n    r = requests.get('https://httpbin.org/digest-auth/auth/Ond\u0159ej/hesl\u00ed\u010dko', auth=h)\r\n  File \"/Users/nateprewitt/Work/OpenSource/requests/requests/api.py\", line 73, in get\r\n    return request(\"get\", url, params=params, **kwargs)\r\n  [...]\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.3/lib/python3.10/http/client.py\", line 1323, in _send_request\r\n    self.putheader(hdr, value)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.3/lib/python3.10/site-packages/urllib3/connection.py\", line 224, in putheader\r\n    _HTTPConnection.putheader(self, header, *values)\r\n  File \"/Users/nateprewitt/.pyenv/versions/3.10.3/lib/python3.10/http/client.py\", line 1255, in putheader\r\n    values[i] = one_value.encode('latin-1')\r\nUnicodeEncodeError: 'latin-1' codec can't encode character '\\u0159' in position 20: ordinal not in range(256)\r\n```\r\n\r\nFixing this is unfortunately somewhat complicated for a couple reasons:\r\n\r\n1.) Users expect the output of `HTTPDigestAuth` to be a `str` in Python 3, changing that is likely breaking.\r\n2.) If we were to encode the string, the libraries current convention would be `latin-1` not `utf-8`. That wouldn't solve this issue.\r\n\r\nI don't believe we can ever format this correctly in Python 3 with the current behavior though. I'll need to look more tomorrow, but we may consider a behavior change if `self.username`/`self.password` is passed in as bytes.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1087221857/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010790444212034345,
                        "severe_toxicity": 0.00010639050742611289,
                        "obscene": 0.00021605734946206212,
                        "threat": 0.00011226878268644214,
                        "insult": 0.0001828923268476501,
                        "identity_attack": 0.00014323240611702204
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2061735957",
                    "id": 2061735957,
                    "created_at": "2024-04-17T16:41:28Z",
                    "updated_at": "2024-04-17T16:41:28Z",
                    "author_association": "NONE",
                    "body": "Hi all, \r\nwe encountered this week as we had a password policy change, too.  Unicode is now optional requirement for passwords.  But some may use it (I did...) and it broke twine, pip, and other things that would use `requests.auth` module for authentication.\r\n\r\nI saw the exception above, and knew immediately a quick test to see if charset encoding would fix it:\r\n```\r\n    # requests/auth.py,   _basic_auth_str()\r\n....\r\n    if isinstance(password, str):\r\n        # password = password.encode(\"latin1\")\r\n        password = password.encode(\"utf-8\")            # Hey! IT works,... now just make it an optional kwarg\r\n```\r\n\r\nI realize exposing encoding in the function signatures will have a ripple effect, but I don't think the `latin1` assumption is all that great either. \r\n\r\nRequested change: add encoding kwarg to `_basic_auth_str()` and its consumers\r\n```\r\ndef _basic_auth_str(username, passwd, encoding=\"latin1\"):\r\n   ...\r\n   password = password.encode(encoding)\r\n   ..\r\n```\r\n\r\nOne line fix and I'm good to go.... hopefully you can include in an upcoming release.  Password policy changes are now more frequently including Unicode.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2061735957/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mubaldino",
                        "id": 4236378,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006691652233712375,
                        "severe_toxicity": 0.00011838585487566888,
                        "obscene": 0.00018805598665494472,
                        "threat": 0.00011871662718476728,
                        "insult": 0.00017335427401121706,
                        "identity_attack": 0.0001403344504069537
                    }
                }
            ]
        },
        "103": {
            "html_url": "https://github.com/psf/requests/issues/6094",
            "id": 1178140499,
            "number": 6094,
            "title": "HTTPBasicAuth does not handle non-latin-1 characters",
            "created_at": "2022-03-23T13:40:56Z",
            "updated_at": "2023-05-27T22:08:42Z",
            "closed_at": null,
            "body": "Hi,\r\nI have a password containing Norwegian characters, like \"\u00f8\". I found that `HTTPBasicAuth` generates a wrong `Authentication` header, as the base64-encoded password differed from what I computed and successfully tested.\r\n\r\nIt looks like `latin-1` is the default encoding instead of  `utf-8`:\r\nhttps://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/auth.py#L59-L63\r\n\r\nMy workaround is to encode strings to `utf-8` before passing them to `HTTPBasicAuth`, but it looks like this would break starting with `requests >= 3.0.0`:\r\n\r\nhttps://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/auth.py#L36-L41\r\n\r\nI do not know if different servers have different defaults, but if `requests` do not want to handle binary sequences, then it should probably allow specifying different encodings.",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "frafra",
                "id": 4068,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6094/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1076456354",
                    "id": 1076456354,
                    "created_at": "2022-03-23T14:42:00Z",
                    "updated_at": "2022-03-23T14:42:00Z",
                    "author_association": "MEMBER",
                    "body": "Hi @frafra, this warning is a remnant from when Python 2 was still the main Python and `bytes`/`str` were synonymous. You'll see if you look at the definition for [`basestring`](https://github.com/psf/requests/blob/main/requests/compat.py#L79) that it is that same type union in Python 3. We may be able to make \"Non-string\" a bit clearer for Python 3.\r\n\r\n`bytes` will continue to be supported going forward and would in fact be our general recommendation for most Requests arguments. The library still assumes `latin-1`/`iso-8859-1` because that's what's formally documented for the web. You'll find in practice though that `utf-8` has superseded that in many cases.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1076456354/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006196331232786179,
                        "severe_toxicity": 0.00012205768143758178,
                        "obscene": 0.000187979792826809,
                        "threat": 0.0001241730060428381,
                        "insult": 0.00017111848865170032,
                        "identity_attack": 0.00013924716040492058
                    }
                }
            ]
        },
        "104": {
            "html_url": "https://github.com/psf/requests/issues/6086",
            "id": 1170383353,
            "number": 6086,
            "title": "urllib.request.proxy_bypass makes DNS request without using configured proxies when system has NO_PROXY configured at some level",
            "created_at": "2022-03-16T00:04:14Z",
            "updated_at": "2022-03-28T16:47:16Z",
            "closed_at": null,
            "body": "When using Requests via a SOCKS5 proxy on one of the latest MacBook Pros (Apple Silicon), the DNS requests are not correctly passed to the proxy server even when using the \"socks5h\" scheme. Instead, the DNS resolution happens at the level of the client, causing a DNS leak.\r\n\r\nThis happens with various versions/combinations of Requests/PySocks/Python, the latter being the Apple Silicon versions obtained through pyenv. I have tested this using the local SOCKS5 proxy server provided by Tor.\r\n\r\nIn more detail, I tested the bug on various pyenv Python distributions, labeled 3.8 to 3.10 plus miniforge3, with Requests from v2.16.0 to v2.27.1, and PySocks from v1.5.7 to v1.7.1 (not every single version in between). In what follows, I'll use an example System Information output.\r\n\r\nAlso, I used Wireshark to monitor the DNS requests, and I used curl with the --proxy socks5h://127.0.0.1:9050 flag as a control, to make sure that the local Tor proxy was working properly and that the DNS leak is indeed specific to Python/Requests/PySocks.\r\n\r\nI am not able to confirm whether the DNS leak also happens on Python versions obtained other than through pyenv. On an Intel MacBook using an Anaconda Python version and the latest Requests/PySocks, the leak does not occur.\r\n\r\n## Expected Result\r\n\r\nWhen using the \"socks5h\" scheme, the DNS requests should be forwarded to the SOCKS proxy.\r\n\r\n## Actual Result\r\n\r\nThe DNS requests are sent from the client instead, causing a DNS leak.\r\n\r\n## Reproduction Steps\r\n\r\nInstall any Apple Silicon Python version from pyenv (see above for the versions I tested) and start Tor.\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n    \"http\": \"socks5h://127.0.0.1:9050\",\r\n    \"https\": \"socks5h://127.0.0.1:9050\",\r\n}\r\n\r\nresp = requests.get(\"https://\"+url, proxies=proxies)\r\n```\r\n\r\nMonitor the outgoing DNS requests using Wireshark. If they are sent via the outbound network interface to your pre-configured DNS server (as opposed to the local interface, destination IP 127.0.0.1, port 9050), a DNS leak is occurring.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"21.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010df\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.8\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
            "author_association": "NONE",
            "comments": 15,
            "state": "open",
            "user": {
                "login": "GiorgioComitini",
                "id": 76849071,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6086/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1068597406",
                    "id": 1068597406,
                    "created_at": "2022-03-16T00:23:16Z",
                    "updated_at": "2022-03-16T00:23:16Z",
                    "author_association": "MEMBER",
                    "body": "Hi @GiorgioComitini, thanks for bringing this to our attention. From what you've described above, I believe we can already tell this is an issue at the [PySocks](https://github.com/Anorov/PySocks) layer or potentially even CPython. Requests doesn't actually handle any of the socks5 workflow, it's offloaded to urllib3 in [this module](https://github.com/urllib3/urllib3/blob/1.26.x/src/urllib3/contrib/socks.py), which then in turn calls into the socks connection from pysocks.\r\n\r\nI think the next step here would be to verify if PySocks actually works for this case, and work backwards from there. Presumably we could do something like the code below to verify:\r\n\r\n```python\r\nimport socks\r\n\r\ns = socks.socksocket() # Same API as socket.socket in the standard lib\r\ns.set_proxy(socks.PROXY_TYPE_SOCKS5, \"127.0.0.1\", 9050, rdns=True) \r\n\r\ns.connect((\"www.somesite.com\", 80))\r\ns.sendall(\"GET / HTTP/1.1 ...\")\r\nprint(s.recv(4096))\r\n```\r\n\r\nI don't have any of the above infrastructure set up currently or immediate access to an m1 mac. We can add this to the backlog, but it may be faster if you can use the above to check in your current setup.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1068597406/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000837373489048332,
                        "severe_toxicity": 0.00010903656220762059,
                        "obscene": 0.00018994258425664157,
                        "threat": 0.00011200765584362671,
                        "insult": 0.00017544470028951764,
                        "identity_attack": 0.0001404664508299902
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1068601967",
                    "id": 1068601967,
                    "created_at": "2022-03-16T00:29:14Z",
                    "updated_at": "2022-03-16T00:29:14Z",
                    "author_association": "MEMBER",
                    "body": "@nateprewitt From inspecting the code from urllib3 -> PySocks it appears that things are working as expected? Just like you it'd take a second for me to get a setup to verify the bytes sent over the wire.\r\n\r\n@GiorgioComitini could you also [try reproducing with only urllib3](https://urllib3.readthedocs.io/en/stable/advanced-usage.html#socks-proxies)?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1068601967/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0038013148587197065,
                        "severe_toxicity": 8.617147977929562e-05,
                        "obscene": 0.0002964518789667636,
                        "threat": 0.00011025356070604175,
                        "insult": 0.0003191059222444892,
                        "identity_attack": 0.00016316228720825166
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1068610552",
                    "id": 1068610552,
                    "created_at": "2022-03-16T00:42:53Z",
                    "updated_at": "2022-03-16T00:42:53Z",
                    "author_association": "NONE",
                    "body": "Hey there, thank you for the quick reply. I tried both your suggestions, and no DNS leak appears to occur when using either socks or urllib3 directly.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1068610552/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GiorgioComitini",
                        "id": 76849071,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006402678554877639,
                        "severe_toxicity": 0.0001158973464043811,
                        "obscene": 0.00017499810201115906,
                        "threat": 0.0001200597471324727,
                        "insult": 0.00017849190044216812,
                        "identity_attack": 0.00013373614638112485
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1068642647",
                    "id": 1068642647,
                    "created_at": "2022-03-16T01:38:42Z",
                    "updated_at": "2022-03-16T01:38:42Z",
                    "author_association": "MEMBER",
                    "body": "So that's pretty interesting if it's the same versions being used with Requests. The only socks specific code in Requests is [here](https://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/adapters.py#L181-L191). We create a copy of urllib3's SOCKSProxyManager and then use that to service requests for any URL scheme starting with \"socks\". We pull the [connection](https://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/adapters.py#L304-L311) from that manager anytime a proxy is chosen.\r\n\r\nThe only other component that's unique to Requests would be our [proxy resolution](https://github.com/psf/requests/blob/main/requests/utils.py#L837-L861) logic. We do consider environment variables, .netrc files, and system configurations when determining if a proxy specification is actually used. Is it possible something is configured on your Mac that's excluding use of the `socks5h` proxy or routing it to a different proxy?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1068642647/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009497073478996754,
                        "severe_toxicity": 0.0001078032873920165,
                        "obscene": 0.00020908653095830232,
                        "threat": 0.0001161862674052827,
                        "insult": 0.00017578026745468378,
                        "identity_attack": 0.0001381395704811439
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1069469052",
                    "id": 1069469052,
                    "created_at": "2022-03-16T18:49:38Z",
                    "updated_at": "2022-03-16T18:49:38Z",
                    "author_association": "NONE",
                    "body": "I can confirm that the versions should be the same (by looking at the urllib3.\\_\\_file\\_\\_'s called by the main python script and from Requests' adapters module). My environment (see below) does not seem to contain any variable related to proxies:\r\n\r\n```bash\r\n\r\n$ /usr/bin/env\r\n\r\nPWD=/Users/giorgiocomitini/.pyenv/versions/3.10-base/lib/python3.10/site-packages/requests\r\nPYENV_ROOT=/Users/giorgiocomitini/.pyenv\r\nTERM_SESSION_ID=[xxx]\r\nHOME=/Users/giorgiocomitini\r\nCONDA_SHLVL=0\r\nTMPDIR=[xxx]\r\nSHELL=/opt/homebrew/bin/fish\r\nCONDA_PYTHON_EXE=/Users/giorgiocomitini/.pyenv/versions/conda/bin/python\r\nSHLVL=1\r\nTERM_PROGRAM=Apple_Terminal\r\nUSER=giorgiocomitini\r\nPYENV_SHELL=fish\r\nTERM=xterm-256color\r\nSSH_AUTH_SOCK=/private/tmp/com.apple.launchd.[xxx]/Listeners\r\nPATH=/Users/giorgiocomitini/.pyenv/versions/conda/condabin:/Users/giorgiocomitini/.pyenv/shims:/Users/giorgiocomitini/.pyenv/bin:/Users/giorgiocomitini/.shims:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\r\nXPC_SERVICE_NAME=0\r\nXPC_FLAGS=0x0\r\nTERM_PROGRAM_VERSION=444\r\nCONDA_EXE=/Users/giorgiocomitini/.pyenv/versions/conda/bin/conda\r\nLANG=it_IT.UTF-8\r\nLOGNAME=giorgiocomitini\r\n__CFBundleIdentifier=com.apple.Terminal\r\n```\r\n\r\n(I also ran the script with bash with the same results, so the problem is not related to the fish shell. Moreover, I checked the config files for both fish and bash, and there's nothing there related to proxies).\r\n\r\nAre you able to point me to any configuration specifically considered by Requests, to make sure that nothing is interfering with the proxy resolution?\r\n\r\nOther tests I did:\r\n\r\n- I used a custom SSH SOCKS proxy instead of the Tor one, and it still leaks (so the problem is not Tor-related)\r\n- I used a non-pyenv version of Python (namely, the homebrew-installed 3.10 Python version) with the latest Requests and PySocks, and it still leaks (so the problem is not pyenv-related)\r\n- As a control, I used both the Tor and the SSH proxy on Firefox (with remote DNS on), and it doesn't leak (so the problem is not system-wide, as already confirmed by using curl and bare urllib3)\r\n\r\nSome other hints:\r\n\r\n```python\r\n>> resp = requests.get(...)\r\n\r\n>> resp.connection.proxy_manager\r\n{'socks5h://127.0.0.1:9050': <urllib3.contrib.socks.SOCKSProxyManager at 0x111640730>}\r\n\r\n>> resp.connection.proxy_manager['socks5h://127.0.0.1:9050'].proxy_url\r\n'socks5h://127.0.0.1:9050'\r\n```\r\n\r\nso the scheme seems to have gone through to the SOCKSProxyManager object (though I don't really know how it works, so I might be mistaken).\r\n\r\nFinally, in the utils module, I added a debug line to print out the resolved proxies:\r\n\r\n```python\r\ndef resolve_proxies(request, proxies, trust_env=True):\r\n    proxies = proxies if proxies is not None else {}\r\n    url = request.url\r\n    scheme = urlparse(url).scheme\r\n    no_proxy = proxies.get('no_proxy')\r\n    new_proxies = proxies.copy()\r\n\r\n    if trust_env and not should_bypass_proxies(url, no_proxy=no_proxy):\r\n        environ_proxies = get_environ_proxies(url, no_proxy=no_proxy)\r\n\r\n        proxy = environ_proxies.get(scheme, environ_proxies.get('all'))\r\n\r\n        if proxy:\r\n            new_proxies.setdefault(scheme, proxy)\r\n    print(new_proxies) #DEBUG\r\n    return new_proxies\r\n```\r\n\r\nand I get the correct proxies:\r\n\r\n```python\r\nOrderedDict([('http', 'socks5h://127.0.0.1:9050'), ('https', 'socks5h://127.0.0.1:9050')])\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1069469052/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GiorgioComitini",
                        "id": 76849071,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008867282303981483,
                        "severe_toxicity": 0.00010928169649560004,
                        "obscene": 0.00019930604321416467,
                        "threat": 0.00011757148604374379,
                        "insult": 0.0001802518090698868,
                        "identity_attack": 0.00013883363862987608
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1071192106",
                    "id": 1071192106,
                    "created_at": "2022-03-17T18:29:54Z",
                    "updated_at": "2022-03-17T18:33:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I suspect https://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/utils.py#L789 is our problem. All the way in `urllib.request` it calls `gethostbyname` https://github.com/python/cpython/blob/ba76f901923d80ad9b24bb1636aa751d55e0c768/Lib/urllib/request.py#L2594",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1071192106/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.004563641268759966,
                        "severe_toxicity": 0.0001006124512059614,
                        "obscene": 0.0004188391612842679,
                        "threat": 0.00013661480625160038,
                        "insult": 0.0003042916941922158,
                        "identity_attack": 0.00017297567683272064
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1071202532",
                    "id": 1071202532,
                    "created_at": "2022-03-17T18:41:48Z",
                    "updated_at": "2022-03-17T18:41:48Z",
                    "author_association": "MEMBER",
                    "body": "The quickest way to confirm that would be to set `trust_env` to False and see if the behavior goes away.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1071202532/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007908635307103395,
                        "severe_toxicity": 0.00011418269423302263,
                        "obscene": 0.00017552000645082444,
                        "threat": 0.00013732923252973706,
                        "insult": 0.00017914526688400656,
                        "identity_attack": 0.00014089800242800266
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1071294563",
                    "id": 1071294563,
                    "created_at": "2022-03-17T19:46:46Z",
                    "updated_at": "2022-03-17T19:47:07Z",
                    "author_association": "NONE",
                    "body": "Setting trust_env to False indeed prevents the leak!\r\n\r\nSo, if it's not an environment variable (since no proxy variable is returned by /usr/bin/env), what could it be? I found no .netrc nor _netrc files in my system.\r\n\r\nI don't understand if @sigmavirus24's suggestion is related to the env or not.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1071294563/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GiorgioComitini",
                        "id": 76849071,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001136166276410222,
                        "severe_toxicity": 9.874059469439089e-05,
                        "obscene": 0.0001865351659944281,
                        "threat": 0.00011005104897776619,
                        "insult": 0.0001846991217462346,
                        "identity_attack": 0.00013735922402702272
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1071407558",
                    "id": 1071407558,
                    "created_at": "2022-03-17T20:37:42Z",
                    "updated_at": "2022-03-17T20:37:42Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It's related to how we check if you have the host you're trying to visit configured in the NO_PROXY setting. It's a standard library function that doesn't understand socks",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1071407558/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009113220730796456,
                        "severe_toxicity": 0.00010233946522930637,
                        "obscene": 0.0001670506753725931,
                        "threat": 0.00011408539285184816,
                        "insult": 0.0001842562051024288,
                        "identity_attack": 0.0001410753175150603
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1071516547",
                    "id": 1071516547,
                    "created_at": "2022-03-17T21:28:15Z",
                    "updated_at": "2022-03-17T21:28:15Z",
                    "author_association": "NONE",
                    "body": "Yes, that's it!\r\n\r\nSo, in my system settings for the proxies (Network->Advanced->Proxies) I have an \"Ignore the proxy settings for the following hosts and domains\" field, and the hosts and domains to be ignored are *.local and 169.254/16 (which by the way are precisely those reported in the comments in urllib.request). If I delete these, the DNS doesn't leak anymore. This is why my old Mac didn't leak: it's not that it's an Intel vs. Apple CPU, it's just that I did not have those exceptions on (I guess they are set by default depending on the MacOS version). This issue's title needs to be changed, then.\r\n\r\nI see where's the problem. The standard library's urllib needs to know the host's IP in order to compare it with the system exceptions. If it does not know it, it issues a DNS request. This behavior may be consistent with an observation I had made previously, namely that a single DNS request is subject to the leak, as opposed to e.g. multiple requests that would need to be issued if DN resolution were to be performed completely on the client's side (think about redirections). The rest of the conversation happens on the proxy as it should be.\r\n\r\nShall I assume then that this is an actual bug, albeit related to how Requests interacts with urllib and MacOS?\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1071516547/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GiorgioComitini",
                        "id": 76849071,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008829112048260868,
                        "severe_toxicity": 0.00010701534483814612,
                        "obscene": 0.00019481945491861552,
                        "threat": 0.0001089410507120192,
                        "insult": 0.00017452835163567215,
                        "identity_attack": 0.0001366252254229039
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1072487817",
                    "id": 1072487817,
                    "created_at": "2022-03-18T14:53:32Z",
                    "updated_at": "2022-03-18T14:53:32Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Shall I assume then that this is an actual bug, albeit related to how Requests interacts with urllib and MacOS?\r\n\r\nThere's absolutely nothing we can do to fix this short of completely re-implementing large portions of `urllib.request`.\r\n\r\nThis might be a \"Known Issue\" with PySocks+Requests (because I suspect there are similar settings on Linux and Windows) that we can document a user-based change for, but we will not accept the maintenance burden necessary to \"fix\" this.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1072487817/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007523269159719348,
                        "severe_toxicity": 0.0001114974293159321,
                        "obscene": 0.00017750344704836607,
                        "threat": 0.00011935954535147175,
                        "insult": 0.00017519862740300596,
                        "identity_attack": 0.0001375916472170502
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1072517613",
                    "id": 1072517613,
                    "created_at": "2022-03-18T15:24:39Z",
                    "updated_at": "2022-03-18T15:24:39Z",
                    "author_association": "NONE",
                    "body": "I understand this, and I think documenting the issue is a good start.\r\n\r\nNonetheless, I believe that this might be a (quite severe) security issue that should still be addressed in some way. For future versions of Requests, would it be feasible - or even desirable, for general-purpose usage - to have the proxy resolution logic not look at the environment/system as soon as proxies are specified to Requests as arguments? After all, if I'm using proxies through Requests (as opposed to at the system level), it's because I want Requests - and not my system - to manage the proxies. Of course, I do not have a clear picture of the proxy resolution logic, so if this does not make sense to you I apologize.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1072517613/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GiorgioComitini",
                        "id": 76849071,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005325309466570616,
                        "severe_toxicity": 0.00013560235674958676,
                        "obscene": 0.00019635781063698232,
                        "threat": 0.00013455658336170018,
                        "insult": 0.00017638654389884323,
                        "identity_attack": 0.0001443173678126186
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1073006811",
                    "id": 1073006811,
                    "created_at": "2022-03-19T13:05:48Z",
                    "updated_at": "2022-03-19T13:05:48Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> After all, if I'm using proxies through Requests (as opposed to at the system level), it's because I want Requests - and not my system - to manage the proxies\r\n\r\nThat's what `trust_env=False` is for. Unfortunately, many people expect to be able to override one specific value and merge the rest together which is why we perform the behaviour you've observed.\r\n\r\nSome folks want the behaviour of having an environment with `http_proxy` and `https_proxy` and `no_proxy` and then to override in a single request `requests.get(url, proxies={\"http\": \"..\"})` but to still use `https_proxy` and `no_proxy`. The best way to disable that is `trust_env=False`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1073006811/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008187294006347656,
                        "severe_toxicity": 0.00011030067253159359,
                        "obscene": 0.00018655508756637573,
                        "threat": 0.00011984425509581342,
                        "insult": 0.0001727831258904189,
                        "identity_attack": 0.00013586068234872073
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1073008755",
                    "id": 1073008755,
                    "created_at": "2022-03-19T13:17:35Z",
                    "updated_at": "2022-03-19T13:17:35Z",
                    "author_association": "NONE",
                    "body": "Got it, thanks. This is why I asked if it would even be desirable (to me, yes, but to others, it depends).\r\n\r\nDo you confirm that the only way to set ```trust_env``` to ```False``` is either to change the code in https://github.com/psf/requests/blob/main/requests/sessions.py#L398 or to issue requests exclusively through sessions objects? E.g.\r\n\r\n```python\r\n>> from requests import Session\r\n\r\n>> session = Session()\r\n\r\n>> session.trust_env=False\r\n\r\n>> session.request(...)\r\n```\r\nI.e. that ```trust_env``` cannot be passed as a parameter to one of the API functions?\r\n\r\nAnyways, thanks to you all guys for the useful answers.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1073008755/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GiorgioComitini",
                        "id": 76849071,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005938538815826178,
                        "severe_toxicity": 0.00012578458699863404,
                        "obscene": 0.00019613475888036191,
                        "threat": 0.00012364758003968745,
                        "insult": 0.0001725258189253509,
                        "identity_attack": 0.00013728799240197986
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1080895869",
                    "id": 1080895869,
                    "created_at": "2022-03-28T16:47:16Z",
                    "updated_at": "2022-03-28T16:47:16Z",
                    "author_association": "MEMBER",
                    "body": "Hi @GiorgioComitini,\r\n\r\nApologies for the delay. Yes, this is intended to be a Session-wide setting rather than per request. Either you trust the host or you don't. In general with Requests, you should always be using your own Session for anything outside of basic testing/prototyping. If you truly need to toggle between trusting and not trusting the environment in the same code base, you might consider doing something like:\r\n\r\n```python\r\ntrusted_session = Session()\r\nuntrusted_session = Session()\r\nuntrusted_session.trust_env = False\r\n[...]\r\n```\r\n\r\nIt's probably worth taking a closer look to determine if that's really necessary though.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1080895869/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000570434785913676,
                        "severe_toxicity": 0.00012701516970992088,
                        "obscene": 0.00018135132268071175,
                        "threat": 0.00013510763528756797,
                        "insult": 0.00017492003098595887,
                        "identity_attack": 0.0001426449598511681
                    }
                }
            ]
        },
        "105": {
            "html_url": "https://github.com/psf/requests/pull/6048",
            "id": 1113918664,
            "number": 6048,
            "title": "Fixing unicode surrogates in POST data lead to exception",
            "created_at": "2022-01-25T13:55:14Z",
            "updated_at": "2022-03-09T18:26:01Z",
            "closed_at": null,
            "body": "Closes #6008\r\nFixing the unicode surrogates issue",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "mftb",
                "id": 1322800,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6048/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1063228035",
                    "id": 1063228035,
                    "created_at": "2022-03-09T18:26:01Z",
                    "updated_at": "2022-03-09T18:26:01Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 @nateprewitt PTAL",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1063228035/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mftb",
                        "id": 1322800,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0016668711323291063,
                        "severe_toxicity": 9.044704347616062e-05,
                        "obscene": 0.00020217338169459254,
                        "threat": 9.371425403514877e-05,
                        "insult": 0.00020453771867323667,
                        "identity_attack": 0.00015443448501173407
                    }
                }
            ]
        },
        "106": {
            "html_url": "https://github.com/psf/requests/issues/6026",
            "id": 1091897772,
            "number": 6026,
            "title": "UnicodeDecodeError after following a chain of redirects ",
            "created_at": "2022-01-01T21:42:39Z",
            "updated_at": "2024-09-20T01:27:26Z",
            "closed_at": null,
            "body": "#6006\r\n\r\nSomething confuses requests (or urllib3?) along the way\r\n\r\nActual Result\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 92: invalid continuation byte\r\n\r\nReproduction Steps\r\nimport requests\r\nrequests.get(\"https://www.lavozdegalicia.es/noticia/deportes/2021/12/13/psg-juve-united-nuevos-rivales-espa%C3%B1oles-champions/00031639396272418389372.htm\")\r\n\r\nSystem Information\r\n$ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.0\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.0-17763-Microsoft\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010cf\",\r\n    \"version\": \"21.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n@sigmavirus24 you have been too harsh on this one.\r\n\r\nTraceback (most recent call last):\r\nFile \"\", line 1, in\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\api.py\", line 76, in get\r\nreturn request('get', url, params=params, **kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\api.py\", line 61, in request\r\nreturn session.request(method=method, url=url, **kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 542, in request\r\nresp = self.send(prep, **send_kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 677, in send\r\nhistory = [resp for resp in gen]\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 677, in\r\nhistory = [resp for resp in gen]\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 150, in resolve_redirects\r\nurl = self.get_redirect_target(resp)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 116, in get_redirect_target\r\nreturn to_native_string(location, 'utf8')\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests_internal_utils.py\", line 25, in to_native_string\r\nout = string.decode(encoding)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 92: invalid continuation byte\r\n\r\nThe guilty part there is return to_native_string(location, 'utf8') Trying to decode the URL to native utf8 when it should rather \"URL encode\" it. I am not an HTTP expert, but this exception should be handled more gracefully anyway.\r\n\r\nThe location given by the remote for redirection is as follow:\r\n\r\nb'http://www.lavozdegalicia.es/noticia/deportes/2021/12/13/psg-juve-united-nuevos-rivales-espa\\xf1oles-champions/00031639396272418389372.htm'\r\n\r\nShould the \\xf1 be decoded as follow %F1 ?\r\n\r\nI can see that this behavior is already followed by Chrome.\r\n\r\n",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "wodim",
                "id": 1001553,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6026/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1003743008",
                    "id": 1003743008,
                    "created_at": "2022-01-02T16:41:06Z",
                    "updated_at": "2022-01-02T16:41:06Z",
                    "author_association": "MEMBER",
                    "body": "Hi @wodim,\r\n\r\nTo actually address your issue, the URI being returned by this redirect is invalid. All byte sequences that aren't listed as `unreserved` or `sub-delim` MUST be percent encoded in the path ([ref](https://datatracker.ietf.org/doc/html/rfc3986#section-3.3)). The website is doing this correctly for other paths, so it appears this is a defect in this specific resource.\r\n\r\nFor Requests, we _may_ be able to be more tolerant of this behavior. Any solution we implement is purely guessing and trying to support broken behavior though, which we typically avoid. We could potentially try to percent-encode this when the `UnicodeDecodeError` is raised. Given this is the first report of the issue in at least the last 5 years, I'm not sure it's a common enough defect to special case.\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1003743008/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006248969002626836,
                        "severe_toxicity": 0.00011918064410565421,
                        "obscene": 0.00018072783132083714,
                        "threat": 0.0001215846641571261,
                        "insult": 0.00017331742856185883,
                        "identity_attack": 0.00014002567331772298
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1387669603",
                    "id": 1387669603,
                    "created_at": "2023-01-18T19:42:08Z",
                    "updated_at": "2023-01-18T19:42:08Z",
                    "author_association": "NONE",
                    "body": "I'm encountering this error as well for https://www.liveinternet.ru/tags/%EF%F0%E5%E7%E8%E4%E5%ED%F2%FB%2B%D1%D8%C0/ (and various other pages on that site)\r\n\r\nI think a good fix would be to catch the malformed redirect URL (or any similar invalid header) and raise something that inherits from RequestException, rather than raising a UnicodeDecodeError.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1387669603/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rhettlunn",
                        "id": 415581,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0013753597158938646,
                        "severe_toxicity": 9.950925596058369e-05,
                        "obscene": 0.00023365256492979825,
                        "threat": 0.00011412771709728986,
                        "insult": 0.00019906219677068293,
                        "identity_attack": 0.0001384835341013968
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1453669816",
                    "id": 1453669816,
                    "created_at": "2023-03-03T15:06:58Z",
                    "updated_at": "2023-03-03T15:06:58Z",
                    "author_association": "NONE",
                    "body": "This is happening to me as well. One source site is now returning those malformed URLs during redirects, and there is now way to bypass it as far as I understand it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1453669816/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vkruoso",
                        "id": 293572,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006386603927239776,
                        "severe_toxicity": 0.00011972888751188293,
                        "obscene": 0.0001802798215067014,
                        "threat": 0.00012546427024062723,
                        "insult": 0.00017877192294690758,
                        "identity_attack": 0.0001403994974680245
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2362528801",
                    "id": 2362528801,
                    "created_at": "2024-09-20T01:27:24Z",
                    "updated_at": "2024-09-20T01:27:24Z",
                    "author_association": "NONE",
                    "body": "I have another instance of this issue, which unfortunately I cannot share as its private to my employer. Firefox and Chrome both handle the URL I've encountered cleanly as per the behavior @wodim describes.\r\n\r\nI see that that [the fork niquests) has a bugfix for this issue](https://github.com/jawah/niquests/pull/20; it could be worth borrowing their change. Alternatively a more meaningful exception than UnicodeDecodeError would be useful.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2362528801/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SamStephens",
                        "id": 1034921,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006331685581244528,
                        "severe_toxicity": 0.0001195595832541585,
                        "obscene": 0.00017977583047468215,
                        "threat": 0.00012630585115402937,
                        "insult": 0.0001750588562572375,
                        "identity_attack": 0.00014003663090988994
                    }
                }
            ]
        },
        "107": {
            "html_url": "https://github.com/psf/requests/issues/6025",
            "id": 1091484277,
            "number": 6025,
            "title": "Support for proxy that requires DigestAuth",
            "created_at": "2021-12-31T09:01:04Z",
            "updated_at": "2024-08-30T08:42:02Z",
            "closed_at": null,
            "body": "Requests seems not to have support for proxies which requires DigestAuth, only BasicAuth.\r\n\r\nIn [this SO post](https://stackoverflow.com/a/60031108/1719931) there is an authorization module that implements support for proxies that require DigestAuth, and also allow to connect to HTTPS websites.\r\n\r\n[requests-toolbet](https://github.com/requests/toolbelt) (I don't know whether it is an official project of requests) has a [HTTPProxyDigestAuth](https://toolbelt.readthedocs.io/en/latest/authentication.html#httpproxydigestauth) class, but doesn't [allow to connect to HTTPS websites](https://github.com/requests/toolbelt/issues/321).",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "raffaem",
                "id": 54762742,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6025/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1003743477",
                    "id": 1003743477,
                    "created_at": "2022-01-02T16:44:51Z",
                    "updated_at": "2022-01-02T16:44:51Z",
                    "author_association": "MEMBER",
                    "body": "Hi @raffaem,\r\n\r\nCan you try using the `HTTPProxyDigestAuth` class with Requests 2.25.1? There is currently a bug with Requests 2.26.0 with proxy authorization headers. I'm not certain, but I believe this may be related to what you're seeing. We're intending to release Requests 2.27.0 tomorrow which will address this issue.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1003743477/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006979985046200454,
                        "severe_toxicity": 0.00011365280079189688,
                        "obscene": 0.0001776842982508242,
                        "threat": 0.00012023640738334507,
                        "insult": 0.00017142208525910974,
                        "identity_attack": 0.00013883125211577863
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1003756490",
                    "id": 1003756490,
                    "created_at": "2022-01-02T18:29:35Z",
                    "updated_at": "2022-01-02T18:31:14Z",
                    "author_association": "NONE",
                    "body": "> Hi @raffaem,\r\n> \r\n> Can you try using the `HTTPProxyDigestAuth` class with Requests 2.25.1? There is currently a bug with Requests 2.26.0 with proxy authorization headers. I'm not certain, but I believe this may be related to what you're seeing. We're intending to release Requests 2.27.0 tomorrow which will address this issue.\r\n\r\nNada, it fails even with requests 2.25.1\r\n\r\nHere is the code:\r\n```\r\n#!/usr/bin/env python3\r\n\r\nimport requests\r\nfrom requests_toolbelt.auth.http_proxy_digest import HTTPProxyDigestAuth\r\n\r\nprint(\"Requests version=\"+str(requests.__version__))\r\n\r\nproxies = {\r\n    \"http\": \"http://proxy.polimi.it:8080\",\r\n    \"https\": \"http://proxy.polimi.it:8080\",\r\n}\r\n\r\nauth = HTTPProxyDigestAuth(\"USERNAME\", \"PASSWORD\")\r\n\r\nurl = \"http://verify.proxy.polimi.it\"\r\ns = requests.get(url, proxies=proxies, auth=auth)\r\nprint(s.status_code)\r\n\r\nurl = \"https://dev.elsevier.com\"\r\ns = requests.get(url, proxies=proxies, auth=auth)\r\nprint(s.status_code)\r\n```\r\n\r\nHere is the output:\r\n```\r\n$ ./toolbelt_test.py \r\nRequests version=2.25.1\r\n200\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 696, in urlopen\r\n    self._prepare_proxy(conn)\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 964, in _prepare_proxy\r\n    conn.connect()\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/connection.py\", line 366, in connect\r\n    self._tunnel()\r\n  File \"/usr/lib64/python3.10/http/client.py\", line 924, in _tunnel\r\n    raise OSError(f\"Tunnel connection failed: {code} {message.strip()}\")\r\nOSError: Tunnel connection failed: 407 Proxy Authentication Required\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/raffaele/.local/lib/python3.10/site-packages/requests/adapters.py\", line 439, in send\r\n    resp = conn.urlopen(\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 755, in urlopen\r\n    retries = retries.increment(\r\n  File \"/usr/lib/python3.10/site-packages/urllib3/util/retry.py\", line 574, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='dev.elsevier.com', port=443): Max retries exceeded with url: / (Caused by ProxyError('Cannot connect to proxy.', OSError('Tunnel connection failed: 407 Proxy Authentication Required')))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/run/media/raffaele/55ab61c4-83cf-4d9f-a5cd-7fcfdc14b4fb/data/progetti_miei/pybliometrics_test/./toolbelt_test.py\", line 20, in <module>\r\n    s = requests.get(url, proxies=proxies, auth=auth)\r\n  File \"/home/raffaele/.local/lib/python3.10/site-packages/requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/raffaele/.local/lib/python3.10/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/raffaele/.local/lib/python3.10/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/raffaele/.local/lib/python3.10/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/raffaele/.local/lib/python3.10/site-packages/requests/adapters.py\", line 510, in send\r\n    raise ProxyError(e, request=request)\r\nrequests.exceptions.ProxyError: HTTPSConnectionPool(host='dev.elsevier.com', port=443): Max retries exceeded with url: / (Caused by ProxyError('Cannot connect to proxy.', OSError('Tunnel connection failed: 407 Proxy Authentication Required')))\r\n```\r\nWorks fine with the [implementation of Tey' from StackOverflow](https://stackoverflow.com/a/60031108/1719931)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1003756490/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "raffaem",
                        "id": 54762742,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0015810399781912565,
                        "severe_toxicity": 0.00010250218474538997,
                        "obscene": 0.0002501090057194233,
                        "threat": 0.00010576225758995861,
                        "insult": 0.0001906993129523471,
                        "identity_attack": 0.00014598348934669048
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1003757215",
                    "id": 1003757215,
                    "created_at": "2022-01-02T18:36:07Z",
                    "updated_at": "2022-01-02T18:36:07Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for checking @raffaem. Looking at the StackOverflow post, there's some pretty extensive monkey-patching for both Requests, urllib3 and httplib to make this possible. This isn't something we're likely to ever add directly to Requests and I'm doubtful it would even make it into the Requests toolbelt. Unfortunately, I don't see a clean way for us to do this with what's currently exposed from urllib3/httplib.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1003757215/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000701931887306273,
                        "severe_toxicity": 0.00011165074101882055,
                        "obscene": 0.00017992983339354396,
                        "threat": 0.00011491605982882902,
                        "insult": 0.00017294219287578017,
                        "identity_attack": 0.0001363046030746773
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1003758085",
                    "id": 1003758085,
                    "created_at": "2022-01-02T18:43:33Z",
                    "updated_at": "2022-01-02T18:43:33Z",
                    "author_association": "NONE",
                    "body": "Uhm can we work with `urllib3/httplib` for them to expose what we need?\r\n\r\n`HTTPProxyDigestAuth` is less useful if you can't connect to HTTPS websites, as most websites today are HTTPS\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1003758085/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "raffaem",
                        "id": 54762742,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008398743229918182,
                        "severe_toxicity": 0.00010739195568021387,
                        "obscene": 0.0001751433446770534,
                        "threat": 0.00012004921882180497,
                        "insult": 0.00017713654960971326,
                        "identity_attack": 0.00013715910608880222
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1003758918",
                    "id": 1003758918,
                    "created_at": "2022-01-02T18:51:08Z",
                    "updated_at": "2022-01-02T18:51:08Z",
                    "author_association": "MEMBER",
                    "body": "You can read all of the patching changes made [here](https://gist.github.com/Tey/ded2486da8a69bb84d2dce94e2e09ff7#file-requests_digest_proxy-py-L124-L153), with several of them overriding behavior from the standard library. That would require changes to CPython itself, meaning the earliest this behavior could be available is in 3.11 or 3.12. We'd need someone to drive those changes to expose APIs for urllib3 to do this, or _potentially_ rework how urllib3 interacts with `tunnel` calls. I'm not sure if the latter is even possible at first glance though.\r\n\r\nThat's all going to be an extremely time intensive change though that likely won't be widely available for at least a couple years. The short term solution may be the proposed patch in the StackOverflow question. It's not something we can support or include directly in Requests though.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1003758918/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006415047100745142,
                        "severe_toxicity": 0.00012153528223279864,
                        "obscene": 0.0001939274516189471,
                        "threat": 0.00012661829532589763,
                        "insult": 0.00017297384329140186,
                        "identity_attack": 0.00013830063107889146
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2320393300",
                    "id": 2320393300,
                    "created_at": "2024-08-30T07:53:00Z",
                    "updated_at": "2024-08-30T07:53:29Z",
                    "author_association": "NONE",
                    "body": "`http.client` in Python3.12 has made some modifications to the `HTTPConnection._tunnel()` as seen [here](https://github.com/python/cpython/blob/3.12/Lib/http/client.py#L968-L979). It still raises OSError but preserves header information which can be accessed via `self.get_proxy_response_headers()`.\r\n\r\nDo these changes make it a little bit easier to extract the challenge and re-use it to send the correct header using requests or requests-toolbelt?\r\n\r\nI understand it would require urllib3 to be updated but the change would be much smaller now that headers are accessible to urllib3 when calling `_tunnel()` and failing.\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2320393300/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "redbaron4",
                        "id": 4869037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006579279433935881,
                        "severe_toxicity": 0.00011704260396072641,
                        "obscene": 0.00018295092741027474,
                        "threat": 0.00012184185470687225,
                        "insult": 0.00017264643975067884,
                        "identity_attack": 0.00013730122009292245
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2320511827",
                    "id": 2320511827,
                    "created_at": "2024-08-30T08:42:02Z",
                    "updated_at": "2024-08-30T08:42:02Z",
                    "author_association": "NONE",
                    "body": "Related request to httpx: https://github.com/encode/httpx/issues/2033",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2320511827/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "raffaem",
                        "id": 54762742,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006200289353728294,
                        "severe_toxicity": 0.00012141898332629353,
                        "obscene": 0.00018348936282563955,
                        "threat": 0.00012201275967527181,
                        "insult": 0.00017702748300507665,
                        "identity_attack": 0.00014112565258983523
                    }
                }
            ]
        },
        "108": {
            "html_url": "https://github.com/psf/requests/issues/6015",
            "id": 1089176381,
            "number": 6015,
            "title": "Possible issue with proxies and TLS versions when using a session.",
            "created_at": "2021-12-27T11:27:52Z",
            "updated_at": "2024-05-24T21:23:59Z",
            "closed_at": null,
            "body": "Using a session or a request object with the same parameters should yield the same results.\r\n\r\nWhen a proxy is used, and when the target website supports TLS 1.0 and TLS 1.1 (or does not support TLS 1.3, I could not figure it out), a request object works fine, whereas a session throws a SSL Error.\r\n\r\n## Expected Result\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n  'http': 'http://127.0.0.1:8888',\r\n  'https': 'http://127.0.0.1:8888',\r\n}\r\n\r\nrequests.get('https://sidep.gouv.fr/', proxies=proxies)\r\n\r\nsession = requests.Session()\r\nsession.proxies.update(proxies)\r\nsession.get('https://sidep.gouv.fr/')\r\n```\r\n\r\nThe two ways to get the data should yield the same result.\r\n\r\n## Actual Result\r\n\r\nThe request works, but not with the session:\r\n\r\n```\r\nHTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 696, in urlopen\r\n    self._prepare_proxy(conn)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 964, in _prepare_proxy\r\n    conn.connect()\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connection.py\", line 364, in connect    \r\n    conn = self._connect_tls_proxy(hostname, conn)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connection.py\", line 501, in _connect_tls_proxy\r\n    socket = ssl_wrap_socket(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\ssl_.py\", line 453, in ssl_wrap_socket\r\n    ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\ssl_.py\", line 495, in _ssl_wrap_socket_impl\r\n    return ssl_context.wrap_socket(sock)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 512, in wrap_socket\r\n    return self.sslsocket_class._create(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 1070, in _create\r\n    self.do_handshake()\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 1341, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\adapters.py\", line 439, in send        \r\n    resp = conn.urlopen(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 755, in urlopen\r\n    retries = retries.increment(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\retry.py\", line 574, in increment  \r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy\\__main__.py\", line 45, in <module>\r\n    cli.main()\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy/..\\debugpy\\server\\cli.py\", line 444, in main\r\n    run()\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy/..\\debugpy\\server\\cli.py\", line 285, in run_file\r\n    runpy.run_path(target_as_str, run_name=compat.force_str(\"__main__\"))\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 269, in run_path\r\n    return _run_module_code(code, init_globals, run_name,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 96, in _run_module_code\r\n    _run_code(code, mod_globals, init_globals,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"c:\\Users\\Max\\testssl.py\", line 16, in <module>\r\n    raise e\r\n  File \"c:\\Users\\Max\\testssl.py\", line 13, in <module>\r\n    session.get('https://sidep.gouv.fr/')\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 555, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 542, in request     \r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 655, in send        \r\n    r = adapter.send(request, **kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\adapters.py\", line 514, in send        \r\n    raise SSLError(e, request=request)\r\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\n```\r\n\r\nWhen using a TLS 1.3 enabled (which seem to mean TLS 1.0 and 1.1 disabled) website, both versions work, for example:\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n  'http': 'http://127.0.0.1:8888',\r\n  'https': 'http://127.0.0.1:8888',\r\n}\r\n\r\nrequests.get('https://example.com/', proxies=proxies)\r\n\r\nsession = requests.Session()\r\nsession.proxies.update(proxies)\r\nsession.verify = False\r\nsession.get('https://example.com/')\r\n```\r\n\r\nWithout the proxy, it works fine for both websites. I spend a couple hours trying with many websites to figure out the breaking cause, and I believe it is the TLS version.\r\n\r\n## System Information\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "defunes43",
                "id": 1909717,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6015/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1001899325",
                    "id": 1001899325,
                    "created_at": "2021-12-28T06:55:40Z",
                    "updated_at": "2021-12-28T06:55:40Z",
                    "author_association": "NONE",
                    "body": "Update: by analogy with https://github.com/psf/requests/issues/5943, downgrading to urllib 1.25.11 makes it work in all cases.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1001899325/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "defunes43",
                        "id": 1909717,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006195495370775461,
                        "severe_toxicity": 0.00012069279182469472,
                        "obscene": 0.00018285361875314265,
                        "threat": 0.00012242485536262393,
                        "insult": 0.00017489334277343005,
                        "identity_attack": 0.00013876508455723524
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2130362556",
                    "id": 2130362556,
                    "created_at": "2024-05-24T21:08:57Z",
                    "updated_at": "2024-05-24T21:18:22Z",
                    "author_association": "NONE",
                    "body": "I'm facing this same issue. Despite being used as the [example in the proxies documentation](https://requests.readthedocs.io/en/latest/user/advanced/#proxies), using a URL with `http://` scheme prefix with the `https` key in the proxies dictionary results in a `requests.exceptions.SSLError`, or worse, seems to hang indefinitely in CI.\r\n\r\nSimple example to help repro:\r\n\r\n```python3\r\nimport requests\r\n\r\nproxies = {\r\n    \"https\": \"http://myproxy:port\",\r\n    \"http\": \"http://myproxy:port\",\r\n}\r\nrequests.get(some_url, proxies=proxies, verify=False)\r\n```\r\n\r\nnever connects to the proxy. There also don't seem to be any test cases for this, which is perhaps why it wasn't caught before now.\r\n\r\nEdit: Seeing this with requests-2.32.2, urllib3-2.2.1. Pinning urllib3 to 1.25.11 does seem to resolve this, will open or update an issue there.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2130362556/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tw4l",
                        "id": 6758804,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000735824869479984,
                        "severe_toxicity": 0.0001145760907093063,
                        "obscene": 0.00019302830332890153,
                        "threat": 0.00011580621503526345,
                        "insult": 0.00017286898219026625,
                        "identity_attack": 0.00013835074787493795
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2130382306",
                    "id": 2130382306,
                    "created_at": "2024-05-24T21:23:59Z",
                    "updated_at": "2024-05-24T21:23:59Z",
                    "author_association": "NONE",
                    "body": "On investigating a bit closer, it seems that perhaps the thrown exception is expected behavior in more recent versions of `urllib3`: https://github.com/urllib3/urllib3/pull/2613. So at the least, the `requests` documentation should be updated, but it would be great if there were a fix to this regression in terms of what users expect from `requests`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2130382306/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tw4l",
                        "id": 6758804,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005776271573267877,
                        "severe_toxicity": 0.0001272249937755987,
                        "obscene": 0.00018721654487308115,
                        "threat": 0.00012877029075752944,
                        "insult": 0.0001777222496457398,
                        "identity_attack": 0.0001428582618245855
                    }
                }
            ]
        },
        "109": {
            "html_url": "https://github.com/psf/requests/issues/6008",
            "id": 1082739182,
            "number": 6008,
            "title": "Unicode surrogates in POST data lead to exception",
            "created_at": "2021-12-16T23:50:15Z",
            "updated_at": "2021-12-17T02:21:58Z",
            "closed_at": null,
            "body": "<!-- Summary. -->\r\n\r\nIn requests 2.26.0 with Python 3, when passing unicode strings with surrogate characters as POST data (either directly as a `str` or as part of a `dict`), sending the request throws an exception.\r\n\r\n## Expected Result\r\n\r\nThe library should not throw an exception, even when fed with unvalidated user input.\r\n\r\n<!-- What you expected. -->\r\n\r\n## Actual Result / Reproduction Steps\r\n\r\n```\r\n>>> import requests\r\n>>> requests.__version__\r\n'2.26.0'\r\n\r\n>>> requests.post('https://example.invalid', data={'name': 'test\\udced\\udcb3\\udc83.pdf'})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 117, in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 528, in request\r\n    prep = self.prepare_request(req)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 466, in prepare_request\r\n    hooks=merge_hooks(request.hooks, self.hooks),\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 319, in prepare\r\n    self.prepare_body(data, files, json)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 515, in prepare_body\r\n    body = self._encode_params(data)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 104, in _encode_params\r\n    v.encode('utf-8') if isinstance(v, str) else v))\r\nUnicodeEncodeError: 'utf-8' codec can't encode characters in position 4-6: surrogates not allowed\r\n\r\n>>> requests.post('https://example.com/', 'test\\udced\\udcb3\\udc83.pdf')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 117, in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/adapters.py\", line 449, in send\r\n    timeout=timeout\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 706, in urlopen\r\n    chunked=chunked,\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 394, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connection.py\", line 239, in request\r\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\r\n  File \"/usr/lib/python3.7/http/client.py\", line 1260, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.7/http/client.py\", line 1305, in _send_request\r\n    body = _encode(body, 'body')\r\n  File \"/usr/lib/python3.7/http/client.py\", line 174, in _encode\r\n    (name.title(), data[err.start:err.end], name)) from None\r\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 4-6: Body ('\\udced\\udcb3\\udc83') is not valid Latin-1. Use body.encode('utf-8') if you want to send it encoded in UTF-8.\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.0-17-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010104f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n-----\r\nIn [requests/models.py](https://github.com/psf/requests/blob/39d0fdd9096f7dceccbc8f82e1eda7dd64717a8e/requests/models.py), there are several calls like `some_string.encode('utf-8')`. I suppose changing them to `some_string.encode('utf-8', 'surrogatepass')` would at least fix the first reproduction case. Not sure about the second, since the exception occurs in http.client there.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "pcworld",
                "id": 1506734,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6008/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "110": {
            "html_url": "https://github.com/psf/requests/issues/6004",
            "id": 1077668422,
            "number": 6004,
            "title": "For Morsel cookies requests expects wrong Expires time format",
            "created_at": "2021-12-11T22:49:51Z",
            "updated_at": "2023-09-28T09:09:55Z",
            "closed_at": null,
            "body": "I'm not sure about this, but it looks that requests is expecting invalid date format in Expires section in Cookies passed as Morsel objects.\r\n\r\n`morsel_to_cookie` (from `requests/cookie.py`) function parse `expires` attr if there is no `max-age` (which is OK) using format from `time_template`. However this format is set as `'%a, %d-%b-%Y %H:%M:%S GMT'` which is none of allowed expires section date value described in RFC (https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1).\r\n\r\nThe nearest format is the first choice from https://www.rfc-editor.org/rfc/rfc2616#section-3.3.1. The difference is that between date parts there should be a space, but requests expects dash.\r\n\r\nSee Reproduction Steps for very simple example which bases on Python std libs only and crashes.\r\n\r\n## Expected Result\r\n\r\nIt's expected that requests properly accepts Morsel cookies when expires follows RFC https://www.rfc-editor.org/rfc/rfc2616#section-3.3.1.\r\n\r\n## Actual Result\r\n\r\nThere is `ValueError` raised by strptime that passed value does not match format.\r\nExample:\r\n`ValueError: time data 'Thu, 01 Jan 1970 00:00:00 GMT' does not match format '%a, %d-%b-%Y %H:%M:%S GMT'`\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\n    from http.cookies import SimpleCookie\r\n    from requests.cookies import RequestsCookieJar\r\n    cookies = SimpleCookie()\r\n    cookies.load('auth_session=null; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; httponly; samesite=strict')\r\n\r\n    jar = RequestsCookieJar()\r\n    jar.update(cookies)\r\n```\r\n\r\nExample above is a simplified case of using [`async_asgi_testclient`](https://github.com/vinissimus/async-asgi-testclient) to test application written with [`Starlette`](https://www.starlette.io/) with `SessionMiddleware`. The `async_asgi_testclient` collects cookies using `SimpleCookie` class from standard `http` lib and then pass them to `requests` lib which is used to perform client test requests.\r\n\r\nBut this issue is not related to these packages as I reproduced it using only Python standard `http` lib and `requests` as above.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.15.0-1-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n",
            "author_association": "NONE",
            "comments": 9,
            "state": "open",
            "user": {
                "login": "druid8",
                "id": 43011904,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/6004/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/999417659",
                    "id": 999417659,
                    "created_at": "2021-12-22T09:21:09Z",
                    "updated_at": "2021-12-22T10:19:19Z",
                    "author_association": "NONE",
                    "body": "@druid8, I am no expert but after searching for a bit it seems that **http.cookies.Morsel** follows rfc2109 attributes which expects `'%a, %d-%b-%Y %H:%M:%S GMT'` as to be its `expires` attr format\r\n\r\nReferences: [https://docs.python.org/3/library/http.cookies.html]()\r\n[https://datatracker.ietf.org/doc/html/rfc2109.html#section-10.1.2]()",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/999417659/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "yashd26",
                        "id": 65943606,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006460114964284003,
                        "severe_toxicity": 0.00011797656043199822,
                        "obscene": 0.00019035906007047743,
                        "threat": 0.00011527472088346258,
                        "insult": 0.0001722013985272497,
                        "identity_attack": 0.00013456866145133972
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/999418278",
                    "id": 999418278,
                    "created_at": "2021-12-22T09:22:04Z",
                    "updated_at": "2021-12-22T09:22:04Z",
                    "author_association": "NONE",
                    "body": "> @druid8, I am no expert but after searching for a bit it seems that **http.cookies.Morsel** (python `Morsel module` - parent of `morsel_to_cookie`) follows rfc2109 attributes which expects `'%a, %d-%b-%Y %H:%M:%S GMT'` as to be its `expires` attr format\r\n> \r\n> References: https://docs.python.org/3/library/http.cookies.html https://datatracker.ietf.org/doc/html/rfc2109.html#section-10.1.2\r\n\r\nDo correct me if am wrong somewhere :)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/999418278/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "yashd26",
                        "id": 65943606,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006435856339521706,
                        "severe_toxicity": 0.00011798556079156697,
                        "obscene": 0.0001863289508037269,
                        "threat": 0.00011877359065692872,
                        "insult": 0.00017263030167669058,
                        "identity_attack": 0.00013508135452866554
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/999442509",
                    "id": 999442509,
                    "created_at": "2021-12-22T09:58:03Z",
                    "updated_at": "2021-12-22T09:58:03Z",
                    "author_association": "NONE",
                    "body": "Correct, however RFC2109 is obsolete and many frameworks and browsers follows RFC2616, none of new async-based web frameworks which I've seen supports old format - all of them generate cookie `expire` in one of RFC2616 format.\r\nWeb browsers also expects a 'spaced' format, but old one is and probably for a long time still will be supported: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#permanent_cookie.\r\n\r\nHowever this issue cause that if someone is using requests library to talk with software which sends cookies in RFC2616 it won't work. Maybe as a fix there should be a set of formats, and library should convert all allowed formats to the one expected by Morsel.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/999442509/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "druid8",
                        "id": 43011904,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007699424168094993,
                        "severe_toxicity": 0.000112227673525922,
                        "obscene": 0.00017176485562231392,
                        "threat": 0.00012452267401386052,
                        "insult": 0.00017760875925887376,
                        "identity_attack": 0.00014468416338786483
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/999445225",
                    "id": 999445225,
                    "created_at": "2021-12-22T10:02:22Z",
                    "updated_at": "2021-12-22T10:02:22Z",
                    "author_association": "NONE",
                    "body": "And one more thing, in my reproduction steps the code works as expected until\r\n```python\r\n    jar = RequestsCookieJar()\r\n    jar.update(cookies)\r\n```\r\nStandard library `SimpleCookie` accepts passed cookie value and parse it correctly.\r\nThe issue is later, when RequestsCookieJar() is updated, so maybe conversion is not needed at all.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/999445225/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "druid8",
                        "id": 43011904,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006635401514358819,
                        "severe_toxicity": 0.00011797970364568755,
                        "obscene": 0.00018548483785707504,
                        "threat": 0.00012264943507034332,
                        "insult": 0.0001785501226549968,
                        "identity_attack": 0.00013762313756160438
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/999498591",
                    "id": 999498591,
                    "created_at": "2021-12-22T11:23:00Z",
                    "updated_at": "2021-12-22T11:23:40Z",
                    "author_association": "NONE",
                    "body": "> And one more thing, in my reproduction steps the code works as expected until\r\n> \r\n> ```python\r\n>     jar = RequestsCookieJar()\r\n>     jar.update(cookies)\r\n> ```\r\n> \r\n> Standard library `SimpleCookie` accepts passed cookie value and parse it correctly. The issue is later, when RequestsCookieJar() is updated, so maybe conversion is not needed at all.\r\n\r\nCorrect, `SimpleCookie.load()` already parses the cookie value into morse format whereas when passed to `RequestCookieJar` all RFC2109 cookies are parsed as RFC2965 or Netscape which I think is causing the issue, this indeed implies conversion is not at all needed.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/999498591/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "yashd26",
                        "id": 65943606,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007547306595370173,
                        "severe_toxicity": 0.0001118296422646381,
                        "obscene": 0.00018679857021197677,
                        "threat": 0.00011958329560002312,
                        "insult": 0.0001761393214110285,
                        "identity_attack": 0.0001346422068309039
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1066700985",
                    "id": 1066700985,
                    "created_at": "2022-03-14T12:00:01Z",
                    "updated_at": "2022-03-14T12:00:01Z",
                    "author_association": "NONE",
                    "body": "@druid8 Running into the same issue. Did you find a workaround?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1066700985/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mrgrain",
                        "id": 379814,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000713863002602011,
                        "severe_toxicity": 0.00011234481644351035,
                        "obscene": 0.00017533014761283994,
                        "threat": 0.00011427897698013112,
                        "insult": 0.00017922352708410472,
                        "identity_attack": 0.00013794949336443096
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1067123281",
                    "id": 1067123281,
                    "created_at": "2022-03-14T17:59:17Z",
                    "updated_at": "2022-03-14T17:59:17Z",
                    "author_association": "NONE",
                    "body": "@mrgrain I have only a monkey-patch for this. Below is my workaround for pytest, however it can be easily integrated with any other code.\r\n\r\n```python\r\n\r\n@pytest.fixture(scope='session')\r\ndef patch_requests():\r\n    from requests import cookies\r\n    org_mtc = cookies.morsel_to_cookie\r\n\r\n    def _patch(value):\r\n        if value['expires']:\r\n            # requests accept invalid datetime format in cookies expires part\r\n            # convert valid RFC formats to expected by requests\r\n            # bug reported: https://github.com/psf/requests/issues/6004\r\n            dt = time.strptime(value['expires'], '%a, %d %b %Y %H:%M:%S GMT')\r\n            value['expires'] = time.strftime('%a, %d-%b-%Y %H:%M:%S GMT', dt)\r\n        return org_mtc(value)\r\n\r\n    try:\r\n        cookies.morsel_to_cookie = _patch\r\n        yield\r\n    finally:\r\n        cookies.morsel_to_cookie = org_mtc\r\n\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1067123281/reactions",
                        "total_count": 5,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "druid8",
                        "id": 43011904,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0024940643925219774,
                        "severe_toxicity": 9.971071995096281e-05,
                        "obscene": 0.00031168852001428604,
                        "threat": 0.00011012914910679683,
                        "insult": 0.00023232793319039047,
                        "identity_attack": 0.00015730736777186394
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1470024182",
                    "id": 1470024182,
                    "created_at": "2023-03-15T13:35:51Z",
                    "updated_at": "2023-03-15T13:58:55Z",
                    "author_association": "NONE",
                    "body": "I just ran into this issue yesterday and was confused as to why this has been a long-standing issue. I think for the sake of backwards compatibility we should try parsing both the new format first, then fallback to the older rfc version upon failure. This will allow older applications to function as expected. Right now I'm doing the following in my code.\r\n\r\n```python\r\nimport contextlib\r\nfrom datetime import datetime\r\nfrom http.cookies import SimpleCookie\r\nimport requests\r\n\r\nsess = requests.Session()\r\n...\r\nresp = sess.get(...)\r\n# all cookies are stored in a singular Set-Cookie header, so we need to massage them out\r\n# http.cookies.SimpleCookie to the rescue!\r\ncookies = SimpleCookie(resp.headers[\"set-cookie\"])\r\nfor item in cookies.items():\r\n    if \"expires\" in item[1]:\r\n        # account for newer, superseding RFC2616#section-14.21 over RFC2109#section-10.1.2\r\n        with contextlib.suppress(ValueError):\r\n            # if this fails, the application/server is using older RFC2109 expires date standard\r\n            # therefore, we can silently suppress the error.\r\n            item[1][\"expires\"] = (\r\n                datetime.strptime(item[1][\"expires\"], \"%a, %d %b %Y %H:%M:%S GMT\")\r\n            ).strftime(\"%a, %d-%b-%Y %H:%M:%S GMT\")\r\n    sess.cookies.set(*item)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1470024182/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "caffeinatedMike",
                        "id": 22151742,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012137861922383308,
                        "severe_toxicity": 0.00010241444397252053,
                        "obscene": 0.00022275741503108293,
                        "threat": 0.00010676380043150857,
                        "insult": 0.00018515986448619515,
                        "identity_attack": 0.00013898078759666532
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1738764001",
                    "id": 1738764001,
                    "created_at": "2023-09-28T09:09:55Z",
                    "updated_at": "2023-09-28T09:09:55Z",
                    "author_association": "NONE",
                    "body": "I know this doesn't help, but it's not even correct for RFC2109 by the looks of it. From [section 10.1.2](https://datatracker.ietf.org/doc/html/rfc2109.html#section-10.1.2):\r\n> Wdy, DD-Mon-YY HH:MM:SS GMT\r\n\r\nRequests [is using](https://github.com/psf/requests/blob/ee93fac6b2f715151f1aa9a1a06ddba9f7dcc59a/src/requests/cookies.py#L502C9-L502C52):\r\n```\r\n        time_template = \"%a, %d-%b-%Y %H:%M:%S GMT\"\r\n```\r\n\r\nThe directives for these are defined [here](https://docs.python.org/3/library/time.html#time.strftime) which states:\r\n> %y  Year without century as a decimal number [00,99].\r\n> %Y  Year with century as a decimal number.\r\n\r\nI wonder if this has ever worked?\r\n\r\n```\r\n$ python3\r\nPython 3.11.5 (main, Sep  2 2023, 14:16:33) [GCC 13.2.1 20230801] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from http.cookies import SimpleCookie\r\n>>> from requests.cookies import RequestsCookieJar\r\n>>> cookies = SimpleCookie()\r\n>>> cookies.load('__cf_bm=truncated_jibberish; path=/; expires=Thu, 28-Sep-23 09:34:34 GMT; domain=.sstatic.net; HttpOnly; Secure; SameSite=None')\r\n>>> jar = RequestsCookieJar()\r\n>>> jar.update(cookies)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.11/site-packages/requests/cookies.py\", line 364, in update\r\n    super().update(other)\r\n  File \"<frozen _collections_abc>\", line 949, in update\r\n  File \"/usr/lib/python3.11/site-packages/requests/cookies.py\", line 341, in __setitem__\r\n    self.set(name, value)\r\n  File \"/usr/lib/python3.11/site-packages/requests/cookies.py\", line 219, in set\r\n    c = morsel_to_cookie(value)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/site-packages/requests/cookies.py\", line 503, in morsel_to_cookie\r\n    expires = calendar.timegm(time.strptime(morsel[\"expires\"], time_template))\r\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/_strptime.py\", line 562, in _strptime_time\r\n    tt = _strptime(data_string, format)[0]\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/_strptime.py\", line 349, in _strptime\r\n    raise ValueError(\"time data %r does not match format %r\" %\r\nValueError: time data 'Thu, 28-Sep-23 09:34:34 GMT' does not match format '%a, %d-%b-%Y %H:%M:%S GMT'\r\n>>> \r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1738764001/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "boltronics",
                        "id": 250531,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001078917528502643,
                        "severe_toxicity": 0.00010435444710310549,
                        "obscene": 0.00021786594879813492,
                        "threat": 0.00010699432459659874,
                        "insult": 0.00017910700989887118,
                        "identity_attack": 0.00013615767238661647
                    }
                }
            ]
        },
        "111": {
            "html_url": "https://github.com/psf/requests/issues/5975",
            "id": 1052405538,
            "number": 5975,
            "title": "Request doesn't provide a way to refresh headers for each retry, making it impossible to regenerate expired Authorization headers",
            "created_at": "2021-11-12T21:02:34Z",
            "updated_at": "2023-07-18T02:03:47Z",
            "closed_at": null,
            "body": "I am using requests 2.23.0 with Python 3.8. \r\n\r\nMy app configures the `requests.packages.urllib3.util.retry.Retry` instance and then passes it via the `max_retries` arg to `requests.adapters.HTTPAdapter` constructor and then mounts the adapter as follows:\r\n\r\n```\r\nclass RetriableSslSession(requests.Session):\r\n    def __init__(self):\r\n        super(RetriableSslSession, self).__init__()\r\n\r\n        self.mount('https://', create_default_ssl_adapter())\r\n```\r\n\r\nThen before making a request, my app sets `session.auth` to an instance of [EdgeGridAuth](https://github.com/akamai/AkamaiOPEN-edgegrid-python/blob/master/akamai/edgegrid/edgegrid.py) that is derived from `requests.auth.AuthBase`.\r\n\r\nSince EdgeGridAuth implements the [AuthBase.\\_\\_call\\_\\_](https://github.com/akamai/AkamaiOPEN-edgegrid-python/blob/bbfd58b75a61684ef72e29d2dab2e81492b3f4cb/akamai/edgegrid/edgegrid.py#L257) method, I expected that the Authorization header would be generated for each retry. However, in our apache proxy logs, we're seeing the same Authorization header reused from time to time, which suggests that retries are not causing the Authorization header to be generated.\r\n\r\nCould you please let me know what I may be doing wrong and explain how to cause the Authorization header to be re-generated for each Retry?",
            "author_association": "NONE",
            "comments": 10,
            "state": "open",
            "user": {
                "login": "vitaly-krugl",
                "id": 1441066,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5975/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/967569103",
                    "id": 967569103,
                    "created_at": "2021-11-12T21:14:24Z",
                    "updated_at": "2021-11-12T21:14:24Z",
                    "author_association": "MEMBER",
                    "body": "Hi @vitaly-krugl, to clarify your issue, you're seeing the same Authorization reused in _all_ retries or is the issue intermittent?\r\n\r\nIf it's consistent, can you provide a simple reproduction using only code from Requests and urllib3? That will help rule out issues in your Auth, Session, and Retry implementations. If it's intermittent, we'll need more info around the retries and what triggered them. That will help identify if this is in fact a bug in Requests.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/967569103/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005891765467822552,
                        "severe_toxicity": 0.00012194541341159493,
                        "obscene": 0.00018145823560189456,
                        "threat": 0.00012424608576111495,
                        "insult": 0.00017332419520244002,
                        "identity_attack": 0.00013924197992309928
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/967724513",
                    "id": 967724513,
                    "created_at": "2021-11-12T23:23:37Z",
                    "updated_at": "2021-11-12T23:24:14Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt - per your understanding, is the auth hook (`AuthBase.__call__()`) supposed to be called for each retry attempt?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/967724513/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vitaly-krugl",
                        "id": 1441066,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001032957574352622,
                        "severe_toxicity": 9.671220323070884e-05,
                        "obscene": 0.00019548226555343717,
                        "threat": 0.00010158390796277672,
                        "insult": 0.00019134153262712061,
                        "identity_attack": 0.00012795119255315512
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/967730634",
                    "id": 967730634,
                    "created_at": "2021-11-12T23:43:52Z",
                    "updated_at": "2021-11-12T23:43:52Z",
                    "author_association": "MEMBER",
                    "body": "I believe your auth hook should only be invoked [here](https://github.com/psf/requests/blob/main/requests/models.py#L557-L558) which happens during request preparation unless otherwise invoked directly.\r\n\r\nIf your Adapter isn't handling anything with retries and relies solely on urllib3, I wouldn't expect auth to be recomputed.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/967730634/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006241924129426479,
                        "severe_toxicity": 0.0001196475132019259,
                        "obscene": 0.0001797000877559185,
                        "threat": 0.0001251926296390593,
                        "insult": 0.00017476949142292142,
                        "identity_attack": 0.0001382526388624683
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/968071572",
                    "id": 968071572,
                    "created_at": "2021-11-13T13:48:29Z",
                    "updated_at": "2021-11-13T13:48:29Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> If your Adapter isn't handling anything with retries and relies solely on urllib3, I wouldn't expect auth to be recomputed.\r\n\r\nThis is 100% correct. You're operating at 2 different levels",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/968071572/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010066734394058585,
                        "severe_toxicity": 0.00010185308201471344,
                        "obscene": 0.00016990902076940984,
                        "threat": 0.00012198390322737396,
                        "insult": 0.00020041856623720378,
                        "identity_attack": 0.0001403529167873785
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/968091466",
                    "id": 968091466,
                    "created_at": "2021-11-13T16:05:23Z",
                    "updated_at": "2021-11-15T22:58:03Z",
                    "author_association": "NONE",
                    "body": "Thank you all for confirming that my current retry configuration approach doesn't facilitate re-computation of auth upon each retry. In this case, what is the correct way to configure retries and auth so that auth will be recomputed upon each retry?\r\n\r\nKnown working doc links/example links would be much appreciated! Thank you in advance.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/968091466/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vitaly-krugl",
                        "id": 1441066,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000527012802194804,
                        "severe_toxicity": 0.0001341387105640024,
                        "obscene": 0.0001862969802459702,
                        "threat": 0.00014116292004473507,
                        "insult": 0.00017861822561826557,
                        "identity_attack": 0.00014221023593563586
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/969780391",
                    "id": 969780391,
                    "created_at": "2021-11-16T03:20:00Z",
                    "updated_at": "2021-11-16T03:20:00Z",
                    "author_association": "NONE",
                    "body": "I also added the [comment](https://github.com/urllib3/urllib3/issues/1172#issuecomment-969509640) in the urllib3 [issue](https://github.com/urllib3/urllib3/issues/1172) asking for additional hooks in urllib3 that would enable python-requests to add support for updating auth during retries.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/969780391/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vitaly-krugl",
                        "id": 1441066,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006164989899843931,
                        "severe_toxicity": 0.00012155915464973077,
                        "obscene": 0.00018712891323957592,
                        "threat": 0.00012037522537866607,
                        "insult": 0.00017675980052445084,
                        "identity_attack": 0.00014028976147528738
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/970283076",
                    "id": 970283076,
                    "created_at": "2021-11-16T13:37:45Z",
                    "updated_at": "2021-11-16T13:37:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Without knowing what you're telling urllib3 to retry or what the exact behavior is of your service we can't help you and support requests are best asked on Stack overflow. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/970283076/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008733609574846923,
                        "severe_toxicity": 0.00010619053500704467,
                        "obscene": 0.00017533615755382925,
                        "threat": 0.0001257685071323067,
                        "insult": 0.00018489224021323025,
                        "identity_attack": 0.00013572847819887102
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/986272075",
                    "id": 986272075,
                    "created_at": "2021-12-05T17:48:56Z",
                    "updated_at": "2021-12-05T17:48:56Z",
                    "author_association": "NONE",
                    "body": "(cc @sigmavirus24)\r\n\r\nI need the  `AuthBase.__call__` method of the [EdgeGridAuth](https://github.com/akamai/AkamaiOPEN-edgegrid-python/blob/master/akamai/edgegrid/edgegrid.py) instance which I assign to `session.auth` to be called for each retry attempt that is attempted as the result of the urllib3 Retry instance that I assigned as outlined in the description section of this issue in order to re-generate the Authorization header.\r\n\r\nThe reason for this requirement is that the Authorization header value has a short TTL, so it needs to be regenerated for **each** retry attempt and the new value of the Authorization header needs to be used by urllib3 when it's sending the corresponding retry request to the server.\r\n\r\nThe Retry instance is configured as follows:\r\n```\r\nurllib3_retry.Retry(\r\n    total=DEFAULT_MAX_TOTAL_RETRIES,\r\n    connect=DEFAULT_MAX_CONNECTION_RETRIES,\r\n    read=DEFAULT_MAX_READ_RETRIES,\r\n    redirect=0,\r\n    method_whitelist= frozenset(\r\n        {'PUT', 'GET', 'OPTIONS', 'HEAD', 'DELETE', 'TRACE'}),\r\n    status_forcelist= frozenset(\r\n        {429, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 598}),\r\n    backoff_factor=1/10000,\r\n    raise_on_redirect=False,\r\n    raise_on_status=False)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/986272075/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vitaly-krugl",
                        "id": 1441066,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007172969053499401,
                        "severe_toxicity": 0.0001157020014943555,
                        "obscene": 0.00019809126388281584,
                        "threat": 0.00011682896001730114,
                        "insult": 0.00017498209490440786,
                        "identity_attack": 0.00013482682697940618
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1103100283",
                    "id": 1103100283,
                    "created_at": "2022-04-19T20:22:24Z",
                    "updated_at": "2022-04-19T20:22:24Z",
                    "author_association": "NONE",
                    "body": "I have the same problem. I'm hitting an API that requires an `Auth-Signature` header, which is a signed hexdigest using a nonce based on the UNIX value of now. In the last retry, the signature is already expired. It would be great if there was a way to recalculate a header value on each retry. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1103100283/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "keyvanm",
                        "id": 2993698,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009041287703439593,
                        "severe_toxicity": 0.00010406457295175642,
                        "obscene": 0.000201695307623595,
                        "threat": 0.0001056958208209835,
                        "insult": 0.0001845449151005596,
                        "identity_attack": 0.00013194129860494286
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1639164399",
                    "id": 1639164399,
                    "created_at": "2023-07-18T02:01:13Z",
                    "updated_at": "2023-07-18T02:01:13Z",
                    "author_association": "NONE",
                    "body": "Dear maintainers, is there a solution in the works for this?\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1639164399/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vitaly-krugl",
                        "id": 1441066,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006992115522734821,
                        "severe_toxicity": 0.00011402035306673497,
                        "obscene": 0.0001717874692985788,
                        "threat": 0.00012851563224103302,
                        "insult": 0.00018256530165672302,
                        "identity_attack": 0.00013647809100802988
                    }
                }
            ]
        },
        "112": {
            "html_url": "https://github.com/psf/requests/pull/5953",
            "id": 1021171999,
            "number": 5953,
            "title": "Add ipv6 support to should_bypass_proxies",
            "created_at": "2021-10-08T14:38:07Z",
            "updated_at": "2024-05-17T15:14:30Z",
            "closed_at": null,
            "body": "Add support to should_bypass_proxies to support\r\nIPv6 ipaddresses and CIDRs in no_proxy. Includes\r\nadding IPv6 support to various other helper functions.",
            "author_association": "NONE",
            "comments": 10,
            "state": "open",
            "user": {
                "login": "derekhiggins",
                "id": 883848,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5953/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1375410162",
                    "id": 1375410162,
                    "created_at": "2023-01-09T10:37:39Z",
                    "updated_at": "2023-01-09T10:37:39Z",
                    "author_association": "NONE",
                    "body": "Hi @nateprewitt @sethmlarson , is this something you'd consider merging ? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1375410162/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "derekhiggins",
                        "id": 883848,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007859804318286479,
                        "severe_toxicity": 0.00010758177086245269,
                        "obscene": 0.00017178810958284885,
                        "threat": 0.00011591603106353432,
                        "insult": 0.00018288935825694352,
                        "identity_attack": 0.00014034248306415975
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1378848522",
                    "id": 1378848522,
                    "created_at": "2023-01-11T14:37:42Z",
                    "updated_at": "2023-01-11T14:37:42Z",
                    "author_association": "NONE",
                    "body": "I'm facing this same issue.  @nateprewitt @sethmlarson Any update on your thoughts?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1378848522/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "melewitz",
                        "id": 14969286,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007190332980826497,
                        "severe_toxicity": 0.00011227402865188196,
                        "obscene": 0.0001774623233359307,
                        "threat": 0.00011524910951266065,
                        "insult": 0.00017771648708730936,
                        "identity_attack": 0.00013911763380747288
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1757573119",
                    "id": 1757573119,
                    "created_at": "2023-10-11T12:23:00Z",
                    "updated_at": "2023-10-11T12:23:00Z",
                    "author_association": "NONE",
                    "body": "Running into the same problem with this, it sure would be nice to have the ability to specify IPv6 CIDRs in no_proxy.  What's holding this up?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1757573119/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "novacain1",
                        "id": 10089626,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007531974697485566,
                        "severe_toxicity": 0.00011020006058970466,
                        "obscene": 0.00018032315711025149,
                        "threat": 0.0001190328985103406,
                        "insult": 0.00017274821584578604,
                        "identity_attack": 0.00013712745567318052
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1829751884",
                    "id": 1829751884,
                    "created_at": "2023-11-28T12:32:29Z",
                    "updated_at": "2023-11-28T12:32:38Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt @sigmavirus24 @sethmlarson would you have a chance to look at this please, its been hanging around for over 2 years and still causing me problems. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1829751884/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "derekhiggins",
                        "id": 883848,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008546016179025173,
                        "severe_toxicity": 0.0001049546044669114,
                        "obscene": 0.0001762170868460089,
                        "threat": 0.00011151561193400994,
                        "insult": 0.00017846467380877584,
                        "identity_attack": 0.00013473595026880503
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1855917580",
                    "id": 1855917580,
                    "created_at": "2023-12-14T14:07:09Z",
                    "updated_at": "2023-12-14T14:07:09Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It'd be nice to have this implemented. Is there any way I can help?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1855917580/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "frenzymadness",
                        "id": 5688939,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005249354871921241,
                        "severe_toxicity": 0.0001408950483892113,
                        "obscene": 0.00019426427024882287,
                        "threat": 0.00014515232760459185,
                        "insult": 0.00018264050595462322,
                        "identity_attack": 0.00014937648666091263
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1856181181",
                    "id": 1856181181,
                    "created_at": "2023-12-14T16:40:24Z",
                    "updated_at": "2023-12-14T16:40:24Z",
                    "author_association": "NONE",
                    "body": "Hi @frenzymadness , if you can review or confirm that this works for your use case then that would be appreciated but\r\nultimately this PR has been waiting on reviews  from one of the maintainers I'm not sure how best to get it some traction besides pinging them on here.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1856181181/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "derekhiggins",
                        "id": 883848,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005482719861902297,
                        "severe_toxicity": 0.00012938521103933454,
                        "obscene": 0.00018472167721483856,
                        "threat": 0.00013794450205750763,
                        "insult": 0.0001764580374583602,
                        "identity_attack": 0.00014123225992079824
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1873983387",
                    "id": 1873983387,
                    "created_at": "2024-01-02T12:45:29Z",
                    "updated_at": "2024-01-02T12:45:29Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "We are going to test this change internally to get some confidence.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1873983387/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "frenzymadness",
                        "id": 5688939,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005461741820909083,
                        "severe_toxicity": 0.00013595620112027973,
                        "obscene": 0.00018782768165692687,
                        "threat": 0.00013911483983974904,
                        "insult": 0.00017590148490853608,
                        "identity_attack": 0.00015129419625736773
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1876572202",
                    "id": 1876572202,
                    "created_at": "2024-01-04T07:17:05Z",
                    "updated_at": "2024-01-04T07:17:05Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Derek tested the package in OpenShift 4.15 and the functionality proposed here works as expected. Is there any chance to merge this?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1876572202/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "frenzymadness",
                        "id": 5688939,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005906014703214169,
                        "severe_toxicity": 0.0001273688394576311,
                        "obscene": 0.0001775161363184452,
                        "threat": 0.000134833506308496,
                        "insult": 0.00018175935838371515,
                        "identity_attack": 0.00014871337043587118
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1910001132",
                    "id": 1910001132,
                    "created_at": "2024-01-25T11:40:33Z",
                    "updated_at": "2024-01-25T11:40:33Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "During additional testing, my colleague raised an interesting question: Are `::/0` and `0.0.0.0/0` valid values for `no_proxy`? The current implementation for IPv4 does not allow masks to be lower than 1 and the new implementation for IPv6 does the same.\r\n\r\nI see a use-case for `::/0` - let's say I have a proxy running on both protocols but I want it to be used only for IPv4 - then it might make sense to use `NO_PROXY` for all IPv6 addresses. What do you think?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1910001132/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "frenzymadness",
                        "id": 5688939,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005977673572488129,
                        "severe_toxicity": 0.0001223010622197762,
                        "obscene": 0.00018879763956647366,
                        "threat": 0.00012116430298192427,
                        "insult": 0.00016913589206524193,
                        "identity_attack": 0.00013934093294665217
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2110666789",
                    "id": 2110666789,
                    "created_at": "2024-05-14T16:35:38Z",
                    "updated_at": "2024-05-14T16:35:38Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "What can I do to get this merged? We've reviewed the change and tested it in a real environment with real use cases. Is there anything else we can do?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2110666789/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "frenzymadness",
                        "id": 5688939,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005816352204419672,
                        "severe_toxicity": 0.0001269903441425413,
                        "obscene": 0.00017671598470769823,
                        "threat": 0.00013557648344431072,
                        "insult": 0.00017973572539631277,
                        "identity_attack": 0.00014593504602089524
                    }
                }
            ]
        },
        "113": {
            "html_url": "https://github.com/psf/requests/issues/5950",
            "id": 1016443852,
            "number": 5950,
            "title": "RequestsCookieJar._find_on_duplicates wrongly fails on cookie with empty value",
            "created_at": "2021-10-05T15:06:09Z",
            "updated_at": "2022-08-31T12:03:33Z",
            "closed_at": null,
            "body": "Getting the value of  a cookie which is set without a value by a website raises a `KeyError`. I don't know if this is by design. Browsers seem to accept these kind of cookies, even though this behaviour seems like bad practice.\r\n\r\n## Expected Result\r\n\r\nAn empty string.\r\n\r\n## Actual Result\r\n\r\n`RequestsCookieJar._find_no_duplicates` raises a `KeyError`\r\n\r\n## Reproduction Steps\r\nIn `ipython`:\r\n```python\r\nimport requests\r\nresp = requests.get(\"https://www.pib-insurance.com/\")\r\nresp.cookies.get_dict() # pretty print cookies\r\nresp.cookies[\"firstname\"]\r\n```\r\n\r\n## Fix\r\nI think last `if` in `_find_no_duplicates` (line **397** of `cookies.py`) should be `if toReturn is not None:` to accommodate for cookies without values.\r\n\r\nThanks!",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "alexpostolache",
                "id": 61288277,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5950/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1003065787",
                    "id": 1003065787,
                    "created_at": "2021-12-30T15:00:49Z",
                    "updated_at": "2021-12-30T15:00:49Z",
                    "author_association": "NONE",
                    "body": "Mark\uff0cthe same problem ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1003065787/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "feilins",
                        "id": 36399738,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008056459482759237,
                        "severe_toxicity": 0.00010713287338148803,
                        "obscene": 0.00018265879771206528,
                        "threat": 0.00010517511691432446,
                        "insult": 0.0001756336714606732,
                        "identity_attack": 0.00013599808153230697
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1232846047",
                    "id": 1232846047,
                    "created_at": "2022-08-31T12:03:33Z",
                    "updated_at": "2022-08-31T12:03:33Z",
                    "author_association": "NONE",
                    "body": "Mark, the same problem",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1232846047/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "conhaifeng",
                        "id": 13365122,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011207968927919865,
                        "severe_toxicity": 9.802720887819305e-05,
                        "obscene": 0.00019697137759067118,
                        "threat": 9.733689512358978e-05,
                        "insult": 0.0001829237153287977,
                        "identity_attack": 0.00013542234955821186
                    }
                }
            ]
        },
        "114": {
            "html_url": "https://github.com/psf/requests/issues/5936",
            "id": 998380556,
            "number": 5936,
            "title": "`cert` parameter does not accept a single `pathlib.Path` object as argument",
            "created_at": "2021-09-16T16:01:24Z",
            "updated_at": "2023-02-01T04:49:33Z",
            "closed_at": null,
            "body": "requests seems to have special handling for when the `cert` parameter is a single `str`, but does not extend the same special handling to `pathlib.Path`, meaning currently you either have to do `cert=str(path)` or `cert=(path, path)`.\r\n\r\n## Expected Result\r\n\r\n`Path` objects should be handled just like `str`.\r\n\r\n## Actual Result\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/adapters.py\", line 416, in send\r\n    self.cert_verify(conn, request.url, verify, cert)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/adapters.py\", line 243, in cert_verify\r\n    conn.cert_file = cert[0]\r\nTypeError: 'PosixPath' object is not subscriptable\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nfrom pathlib import Path\r\n\r\nimport requests\r\n\r\nrequests.get('https://example.com', cert=Path('cert.pem'))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.5\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.2\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.0-8-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.6\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "ghost",
                "id": 10137,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5936/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/921045392",
                    "id": 921045392,
                    "created_at": "2021-09-16T16:19:51Z",
                    "updated_at": "2021-09-16T16:19:51Z",
                    "author_association": "MEMBER",
                    "body": "Hi @nyuszika7h, this seems like a reasonable request but is going to be somewhat difficult to implement prior to dropping 2.7 support. We don't intend to add backports as a dependency, so we'll leave this a todo for when the project finally moves to only Python 3 support. Thanks!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/921045392/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006114562856964767,
                        "severe_toxicity": 0.00012174685252830386,
                        "obscene": 0.00018009374616667628,
                        "threat": 0.00013207043230067939,
                        "insult": 0.00017288218077737838,
                        "identity_attack": 0.0001408190291840583
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/921706463",
                    "id": 921706463,
                    "created_at": "2021-09-17T11:01:32Z",
                    "updated_at": "2021-09-17T11:01:32Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I don't think this is entirely reasonable as pathlib is garabage. Expecting it to just work in places clearly documented as accepting either `str` or `Tuple[str, str]` isn't reasonable. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/921706463/reactions",
                        "total_count": 6,
                        "+1": 0,
                        "-1": 6,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001109350356273353,
                        "severe_toxicity": 9.761258843354881e-05,
                        "obscene": 0.00019854358106385916,
                        "threat": 9.679274808149785e-05,
                        "insult": 0.00019680090190377086,
                        "identity_attack": 0.00013961238437332213
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/921712492",
                    "id": 921712492,
                    "created_at": "2021-09-17T11:11:47Z",
                    "updated_at": "2021-09-17T11:16:05Z",
                    "author_association": "NONE",
                    "body": "How exactly is it \"garbage\"? It has existed since Python 3.4 and is becoming a standard, take it up with the Python maintainers, not me. If you're developing a standalone program you have every right to not use pathlib if you don't like it, but developers of a major library used by thousands of other developers should consider supporting it regardless of their personal views. It doesn't really add any undue maintenance burden either.\r\n\r\n`tuple[Path, Path]` already works fine with requests today, and if type hints are a concern, it can be done with an union type which is the officially recommended way if you need backwards compatibility with `str`. (In an ideal world, maybe we'd *only* accept `Path` objects, but that's not quite feasible yet \u2013 backwards compatibility is a concern and I would at least like `p''` literals in that case \u2013 so a simple type alias can be created instead to keep function signatures simple.)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/921712492/reactions",
                        "total_count": 3,
                        "+1": 3,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ghost",
                        "id": 10137,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.002885127440094948,
                        "severe_toxicity": 9.823813888942823e-05,
                        "obscene": 0.00032958664814941585,
                        "threat": 0.0001122917965403758,
                        "insult": 0.00025442041805945337,
                        "identity_attack": 0.00016037077875807881
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/931758148",
                    "id": 931758148,
                    "created_at": "2021-09-30T22:54:57Z",
                    "updated_at": "2021-09-30T22:54:57Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It makes sense that it would be a good idea to allow some sort of path-like object, even without specifying examples of path-like object types with type hinting. If you look at https://docs.python.org/3/glossary.html#term-path-like-object and https://docs.python.org/3/library/os.html#os.PathLike, it shouldn't be unreasonable to check if an object is path-like.\r\n\r\nThe docs do mention [here](https://docs.python.org/3/library/os.html#os.PathLike) that `os.PathLike` is new in version 3.6. So, to preserve backwards compatibility we can check for `hasattr(cert, '__fspath__')` rather than checking `isinstance(cert, os.PathLike)`. I recommend doing a similar check for if the object is subscriptable `hasattr(cert, '__getitem__')`, to prevent subscriptable-related `TypeError`s that could otherwise be handled.\r\n\r\nWe can replace...\r\n\r\nhttps://github.com/psf/requests/blob/e8a9bd7415986278fe41736a3c224232b9f98c39/requests/adapters.py#L241-L247\r\n\r\nWith...\r\n\r\n```python3\r\nif cert:\r\n    if not isinstance(cert, basestring):\r\n        # a subscriptable object\r\n        if hasattr(cert, '__getitem__'):\r\n            conn.cert_file = cert[0]\r\n            conn.key_file = cert[1]\r\n        elif hasattr(cert, '__fspath__'):\r\n            # a path-like object implements __fspath__\r\n            # see https://docs.python.org/3/library/os.html#os.PathLike\r\n            conn.cert_file = cert.__fspath__()\r\n        else:\r\n            conn.cert_file = str(cert)\r\n    else:\r\n        conn.cert_file = cert\r\n        conn.key_file = None\r\n```\r\n\r\nThough I've never used `pathlib` yet, if it is being mentioned in Python's stdlib docs and is becoming more standard, it may be good to start looking into backwards-compatible ways to support it, like in the example above. We can handle more types this way, and if errors occur, they should be because the string provided was an invalid path to a certificate, rather than because the type provided wasn't acceptable.\r\n\r\n**If `os.path` is allowing path-like objects, Requests should, too** ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/931758148/reactions",
                        "total_count": 3,
                        "+1": 3,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "steveberdy",
                        "id": 86739818,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009117363370023668,
                        "severe_toxicity": 0.00010851027036551386,
                        "obscene": 0.00019820197485387325,
                        "threat": 0.00011544523295015097,
                        "insult": 0.0001760798622854054,
                        "identity_attack": 0.0001391652476741001
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/932284424",
                    "id": 932284424,
                    "created_at": "2021-10-01T14:33:45Z",
                    "updated_at": "2021-10-01T14:33:45Z",
                    "author_association": "NONE",
                    "body": "While requests still supports Python 2, it's probably better to use `getattr()` rather than `hasattr()` as the latter catches all exceptions, not just AttributeError. But hopefully in the next major release that won't be a problem anymore as Python 2 is EOL.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/932284424/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ghost",
                        "id": 10137,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006501268362626433,
                        "severe_toxicity": 0.00012003433948848397,
                        "obscene": 0.00018933721003122628,
                        "threat": 0.00012073975085513666,
                        "insult": 0.0001762633037287742,
                        "identity_attack": 0.00014090914919506758
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1411417539",
                    "id": 1411417539,
                    "created_at": "2023-02-01T03:41:05Z",
                    "updated_at": "2023-02-01T03:41:05Z",
                    "author_association": "NONE",
                    "body": "Hi all,\r\n\r\nJust combing through issues in some of my favorite python libs looking for ways to contribute. \r\n\r\nSeems y'all have dropped support for Python 2 in the requests library, so this might be a great thing to implement at this time, unless there's something I'm not understanding fully. I'm looking for issues good for a GitHub newbie to tackle. And, while I would love to help with this, it seems @steveberdy has a solution in the notes above, so I wouldn't want to steal thunder by patching in code they've written.\r\n\r\nSorry for any misunderstandings and hope this helps.\r\nThanks.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1411417539/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "brianpatman",
                        "id": 12590775,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005655047134496272,
                        "severe_toxicity": 0.00012729453737847507,
                        "obscene": 0.00018393289064988494,
                        "threat": 0.0001324101467616856,
                        "insult": 0.00017589460185263306,
                        "identity_attack": 0.0001426773378625512
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1411458886",
                    "id": 1411458886,
                    "created_at": "2023-02-01T04:49:33Z",
                    "updated_at": "2023-02-01T04:49:33Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This issue is still ongoing with v2.28.2. I think I'll make a PR since this doesn't exactly break the rules for the indefinite feature-freeze.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1411458886/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "steveberdy",
                        "id": 86739818,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006911708624102175,
                        "severe_toxicity": 0.00011604973406065255,
                        "obscene": 0.00017828421550802886,
                        "threat": 0.00012325310672167689,
                        "insult": 0.0001733493263600394,
                        "identity_attack": 0.00014198491408023983
                    }
                }
            ]
        },
        "115": {
            "html_url": "https://github.com/psf/requests/pull/5922",
            "id": 985083834,
            "number": 5922,
            "title": "Always use value of session.verify when set, fixes #5921",
            "created_at": "2021-09-01T12:20:19Z",
            "updated_at": "2021-09-01T12:47:59Z",
            "closed_at": null,
            "body": "This fixes https://github.com/psf/requests/issues/5921 where the value of REQUESTS_CA_BUNDLE is read even when certificate verification is disabled through the session.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "brmzkw",
                "id": 795841,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5922/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "116": {
            "html_url": "https://github.com/psf/requests/pull/5915",
            "id": 980930645,
            "number": 5915,
            "title": "Adds a Realistic WSGI Server for Testing",
            "created_at": "2021-08-27T06:49:12Z",
            "updated_at": "2023-09-12T02:53:52Z",
            "closed_at": null,
            "body": "Sending of chunked-encoded data is not currently tested to be correct anywhere in requests' tests, and is called out as a needed improvement in #5906.  This is a hurdle to accepting #5664, a change which would both simplify requests' code and consistently use [urllib3 for retrying errors](https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html).  \r\n\r\nThe [existing test server](https://github.com/psf/requests/blob/main/tests/testserver/server.py) is a simple socket that can send and receive data and is not aware of HTTP protocols.  Therefore, using it to verify correct sending of chunked-encoded data, for instance, would ultimately become a change-detector test.  \r\n\r\nThis change seeks to remedy that while also taking a step towards both simplifying and strengthening requests' tests.\r\n\r\nWe strengthen requests' tests by introducing the popular [Werkzeug library](https://github.com/pallets/werkzeug) as an explicit test dependency ([Flask](https://github.com/pallets/flask), which uses Werkzeug, is already a test dependency).  By doing so, we leverage their authority as an implementer of [PEP 3333](https://www.python.org/dev/peps/pep-3333/) to validate our own implementation of chunked encoding.  This implicitly future-proofs against any hypothetical breaking changes to the standard by testing against Werkzeug's trusted implementation.\r\n\r\nWe also simplify requests' tests, since the implementation of the test [WerkzeugServer](https://github.com/psf/requests/commit/f1f838e36bc24fb40d7121e72298da3e5a7149ff#diff-a53b39ec2e425dad0c8387f8402839b2ec328e93494086ed66abb4b49708deeb) here is substantially more concise than the [current test server](https://github.com/psf/requests/blob/main/tests/testserver/server.py).  If this change is accepted, in another pull request I will refactor all of requests' tests to use the WerkzeugServer rather than the current test server.  ",
            "author_association": "CONTRIBUTOR",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "theGOTOguy",
                "id": 1411050,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5915/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/907467736",
                    "id": 907467736,
                    "created_at": "2021-08-27T20:48:14Z",
                    "updated_at": "2021-08-27T20:49:20Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Finally got the test server to verify that it is actually ready to accept connections in a robust way!  Sorry about holding the test queue up for so long.  ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/907467736/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "theGOTOguy",
                        "id": 1411050,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00064400042174384,
                        "severe_toxicity": 0.00011778816406149417,
                        "obscene": 0.00017234530241694301,
                        "threat": 0.0001228214823640883,
                        "insult": 0.00017543583817314357,
                        "identity_attack": 0.0001405940274707973
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1025103086",
                    "id": 1025103086,
                    "created_at": "2022-01-30T09:21:50Z",
                    "updated_at": "2022-01-30T09:21:50Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This PR has been sitting here for a while and I'm wondering if there's still any interest from the maintainers with regard to improving your tests.\r\n\r\nIf I can get some feedback that you would prefer to test against a realistic WSGI server instead of the existing simple socket and that you'd accept the PR, I'll refactor all of your tests to use the `WerkzeugServer` implemented here, simplify your code, and hopefully make it easier to make forward progress in the future because of the greater confidence imparted by more realistic tests.\r\n\r\nIf there is no interest, I'll close this PR.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1025103086/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "theGOTOguy",
                        "id": 1411050,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005884781130589545,
                        "severe_toxicity": 0.0001272429508389905,
                        "obscene": 0.00018885380995925516,
                        "threat": 0.00013785810733679682,
                        "insult": 0.00017425847181584686,
                        "identity_attack": 0.00014217458374332637
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1025291581",
                    "id": 1025291581,
                    "created_at": "2022-01-31T01:17:59Z",
                    "updated_at": "2022-01-31T01:17:59Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "There's interest in _adding_ a WSGI server not in _replacing_ it entirely. There are tests that a socket server is still incredibly valuable for and tests that a higher level server would be better suited to.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1025291581/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006075374549254775,
                        "severe_toxicity": 0.00012363248970359564,
                        "obscene": 0.00017879561346489936,
                        "threat": 0.00013381319877225906,
                        "insult": 0.0001767240755725652,
                        "identity_attack": 0.00014275572902988642
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1025303539",
                    "id": 1025303539,
                    "created_at": "2022-01-31T01:42:24Z",
                    "updated_at": "2022-01-31T01:42:24Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@sigmavirus24 Sure, I buy that.  In the interest of closing this PR and making things better, I need clarification on how you want to proceed:\r\n\r\n- We could merge this as a body of work and proceed to add WSGI tests piecemeal going forward on a case-by-case basis.\r\n- I could make a separate WSGI version of all tests, so that there would be both a socket and WSGI version of every existing test.\r\n- You could clarify which specific tests you would prefer a WSGI version of and I can refactor only that subset.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1025303539/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "theGOTOguy",
                        "id": 1411050,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005530935595743358,
                        "severe_toxicity": 0.00013110954023431987,
                        "obscene": 0.00018847819592338055,
                        "threat": 0.00013674618094228208,
                        "insult": 0.00017594023665878922,
                        "identity_attack": 0.00014441773237194866
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1229116491",
                    "id": 1229116491,
                    "created_at": "2022-08-27T04:01:16Z",
                    "updated_at": "2022-08-27T04:01:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'd still like to see requests move towards more realistic testing against an actual implementation of PEP 3333.  If any specific guidance can be provided on what the expectations are in order to merge this PR, I will make the necessary modifications or refactor additional tests.  \r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1229116491/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "theGOTOguy",
                        "id": 1411050,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005446766735985875,
                        "severe_toxicity": 0.0001347895449725911,
                        "obscene": 0.0001850128755904734,
                        "threat": 0.00014551985077559948,
                        "insult": 0.00017740311159286648,
                        "identity_attack": 0.0001494676835136488
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1714887374",
                    "id": 1714887374,
                    "created_at": "2023-09-12T02:53:52Z",
                    "updated_at": "2023-09-12T02:53:52Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hello!  This pull request is very old, but I still feel that adding realistic tests against a reference implementation of PEP 3333 would be worthwhile.\r\n\r\nIf any guidance can be provided as to what the maintainers' expectations are in order to merge this change, then I will be happy to conform to those expectations and also to refactor any desired subset of the existing tests.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1714887374/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "theGOTOguy",
                        "id": 1411050,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005669014062732458,
                        "severe_toxicity": 0.00012907185009680688,
                        "obscene": 0.00017815217142924666,
                        "threat": 0.00013819306332152337,
                        "insult": 0.0001796471478883177,
                        "identity_attack": 0.00014579652633983642
                    }
                }
            ]
        },
        "117": {
            "html_url": "https://github.com/psf/requests/issues/5871",
            "id": 944382996,
            "number": 5871,
            "title": "Make chardet/charset_normalizer optional?",
            "created_at": "2021-07-14T12:34:54Z",
            "updated_at": "2022-01-13T16:35:47Z",
            "closed_at": null,
            "body": "With a routine version bump of requirements, I noticed `chardet` had been switched out for `charset_normalizer` (which I had never heard of before) in #5797, apparently due to LGPL license concerns.\r\n\r\nI agree with @sigmavirus24's comment https://github.com/psf/requests/pull/5797#issuecomment-875158955 that it's strange for something as central in the Python ecosystem as `requests` is (45k stars, 8k forks, many contributors at the time of writing)  to switch to such a relatively unknown and unproven library (132 stars, 5 forks, 2 contributors) for a _hard_ dependency in something as central in the Python ecosystem as `requests` is. \r\n\r\nThe release notes say you could use `pip install \"requests[use_chardet_on_py3]\"` to use `chardet` instead of `charset_normalizer`, but with that extra set both libraries get installed.\r\n\r\nI would imagine many users don't really necessarily need the charset detection features in Requests; could we open a discussion on making both `chardet`/`charset_normalizer` optional, \u00e1 la `requests[chardet]` or `requests[charset_normalizer]`?\r\n\r\nAFAICS, the only place where `chardet` is actually used in `requests` is `Response.apparent_encoding`, which is used by `Response.text` when there is no determined encoding. \r\n\r\nMaybe `apparent_encoding` could try to\r\n\r\n1. as a built-in first attempt, try decoding the content as UTF-8 (which would likely be successful for many cases)\r\n2. if neither `chardet` or `charset_normalizer` is installed, warn the user (\"No encoding detection library is installed. Falling back to XXXX. Please see YYYY for instructions\" or somesuch) and return e.g. `ascii`\r\n3. use either chardet library as per usual",
            "author_association": "NONE",
            "comments": 23,
            "state": "open",
            "user": {
                "login": "akx",
                "id": 58669,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5871/reactions",
                "total_count": 8,
                "+1": 8,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/879854653",
                    "id": 879854653,
                    "created_at": "2021-07-14T12:37:11Z",
                    "updated_at": "2021-07-14T12:37:11Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "`apparent_encoding` genuinely just needs to go away. That can't be done until a major release. Once that happens, we don't need dependencies on either library",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/879854653/reactions",
                        "total_count": 6,
                        "+1": 6,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006472730310633779,
                        "severe_toxicity": 0.00012233150482643396,
                        "obscene": 0.00018409255426377058,
                        "threat": 0.00012869601778220385,
                        "insult": 0.0001766565110301599,
                        "identity_attack": 0.00014320318587124348
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/879992079",
                    "id": 879992079,
                    "created_at": "2021-07-14T15:30:41Z",
                    "updated_at": "2021-07-14T15:30:41Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hi @akx \r\n\r\nHopefully, this change will benefit the people who actually depend on charset detection.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/879992079/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Ousret",
                        "id": 9326700,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006352848140522838,
                        "severe_toxicity": 0.00012179608893347904,
                        "obscene": 0.00017115063383243978,
                        "threat": 0.00013789201329927891,
                        "insult": 0.0001823568600229919,
                        "identity_attack": 0.0001431425625924021
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/880087676",
                    "id": 880087676,
                    "created_at": "2021-07-14T17:45:33Z",
                    "updated_at": "2021-07-14T17:57:09Z",
                    "author_association": "NONE",
                    "body": "`charset_normalizer` cannot correctly handle some very normal entries, e.g., an empty JSON response:\r\n\r\n```python\r\n>>> import charset_normalizer\r\n>>> charset_normalizer.detect(b'{}')\r\n/home/tseaver/projects/agendaless/Google/src/python-cloud-core/.nox/unit-3-6/lib/python3.6/site-packages/charset_normalizer/api.py:95: UserWarning: Trying to detect encoding from a tiny portion of (2) byte(s).\r\n  warn('Trying to detect encoding from a tiny portion of ({}) byte(s).'.format(length))\r\n{'encoding': 'utf_16_be', 'language': '', 'confidence': 1.0}\r\n>>> b'{}'.decode('utf_16_be')\r\n'\u7b7d'\r\n```\r\n\r\nNote that `charset_normalizer.detect` is actually deprecated:\r\n\r\n```python\r\n>>> print(charset_normalizer.detect.__doc__)\r\n\r\n    chardet legacy method\r\n    Detect the encoding of the given byte string. It should be mostly backward-compatible.\r\n    Encoding name will match Chardet own writing whenever possible. (Not on encoding name unsupported by it)\r\n    This function is deprecated and should be used to migrate your project easily, consult the documentation for\r\n    further information. Not planned for removal.\r\n\r\n    :param byte_str:     The byte sequence to examine.\r\n    \r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/880087676/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tseaver",
                        "id": 242750,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006997251766733825,
                        "severe_toxicity": 0.00011516376252984628,
                        "obscene": 0.00019191580940969288,
                        "threat": 0.00011367578554200009,
                        "insult": 0.00017580523854121566,
                        "identity_attack": 0.000137446477310732
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/880090628",
                    "id": 880090628,
                    "created_at": "2021-07-14T17:50:13Z",
                    "updated_at": "2021-07-14T17:50:13Z",
                    "author_association": "MEMBER",
                    "body": "Thanks @tseaver, I believe this is something we'd called out in initial testing. The same issue happened for large strings containing only numbers but was seemingly randomly categorized as utf-16. I was under the impression this had been resolved though.\r\n\r\n@Ousret can you take a look at this when you have a moment?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/880090628/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005582040175795555,
                        "severe_toxicity": 0.00012678139319177717,
                        "obscene": 0.00018409780750516802,
                        "threat": 0.00012892705854028463,
                        "insult": 0.0001741070009302348,
                        "identity_attack": 0.00014031343744136393
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/880111141",
                    "id": 880111141,
                    "created_at": "2021-07-14T18:20:55Z",
                    "updated_at": "2021-07-14T18:20:55Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hi @tseaver \r\n\r\nThanks for the report, I have seen that you opened an issue in `charset_normalizer`. I will pursue this in the issue.\r\n@nateprewitt of course.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/880111141/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Ousret",
                        "id": 9326700,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005863997503183782,
                        "severe_toxicity": 0.00012379387044347823,
                        "obscene": 0.0001893321459647268,
                        "threat": 0.00012181350030004978,
                        "insult": 0.0001774310221662745,
                        "identity_attack": 0.00013718055561184883
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/880289759",
                    "id": 880289759,
                    "created_at": "2021-07-15T00:07:04Z",
                    "updated_at": "2021-07-15T00:07:04Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Hopefully, this change will benefit the people who actually depend on charset detection.\r\n\r\nAs I said, most people end up far more frustrated by this \"feature\" than helped by it. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/880289759/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006565937073901296,
                        "severe_toxicity": 0.00012152832641731948,
                        "obscene": 0.00016988713468890637,
                        "threat": 0.0001364356721751392,
                        "insult": 0.00018045231990981847,
                        "identity_attack": 0.0001440148043911904
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/880411800",
                    "id": 880411800,
                    "created_at": "2021-07-15T05:41:12Z",
                    "updated_at": "2021-07-15T05:51:34Z",
                    "author_association": "NONE",
                    "body": "The change causes issues on my side as well.  Seems `charset_normalizer` does not detect below ascii string correctly (even when using the newest 2.0.2 version)\r\n\r\n````\r\n>>> rawdata = b'g4UsPJdfzNkGW2jwmKDGDilKGKYtpF2X.mx3MaTWL1tL7CNn5U7DeCcodKX7S3lwwJPKNjBT8etY'\r\n\r\n>>> import charset_normalizer\r\n>>> detected_cn = charset_normalizer.detect(rawdata)\r\n>>> detected_cn\r\n{'encoding': 'utf_16_le', 'language': '', 'confidence': 1.0}\r\n\r\n>>> import chardet\r\n>>> detected_cd = chardet.detect(rawdata)\r\n>>> print(detected_cd)\r\n{'encoding': 'ascii', 'confidence': 1.0, 'language': ''}\r\n>>>\r\n````\r\n\r\nFor the moment I am using the workaround described in your release note. Will open an issue in `charset_normalizer`.\r\n\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/880411800/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "grindsa",
                        "id": 12475288,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.004762648139148951,
                        "severe_toxicity": 0.0001183136337203905,
                        "obscene": 0.0005696871085092425,
                        "threat": 0.00017773309082258493,
                        "insult": 0.0003470242372713983,
                        "identity_attack": 0.0001872424327302724
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/880654192",
                    "id": 880654192,
                    "created_at": "2021-07-15T12:29:06Z",
                    "updated_at": "2021-07-15T12:29:06Z",
                    "author_association": "NONE",
                    "body": "I took the liberty of implementing a version of what I drafted out in the original post in PR #5875. \r\n\r\nDecoding ASCII and UTF-8 ([\"UTF-8 is used by 97.0% of all the websites whose character encoding we know.\"](https://w3techs.com/technologies/details/en-utf8)) will continue to work without those libraries, and a helpful error is raised in other cases.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/880654192/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "akx",
                        "id": 58669,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005766524118371308,
                        "severe_toxicity": 0.00012455748219508678,
                        "obscene": 0.0001851559936767444,
                        "threat": 0.00012245135440025479,
                        "insult": 0.00017589628987479955,
                        "identity_attack": 0.00014205939078237861
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/913665390",
                    "id": 913665390,
                    "created_at": "2021-09-06T13:49:49Z",
                    "updated_at": "2021-09-06T13:49:49Z",
                    "author_association": "NONE",
                    "body": "Although it's solved, just wanted to mention that this is indeed a crucial mechanic, since `charset_normalizer` is still \"young\". For example, it doesn't work properly on Debian in some cases, while is quite consistent on Windows.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/913665390/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "a-maliarov",
                        "id": 53064218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005912844208069146,
                        "severe_toxicity": 0.00012941124441567808,
                        "obscene": 0.0001988318981602788,
                        "threat": 0.00012519513256847858,
                        "insult": 0.0001798511075321585,
                        "identity_attack": 0.00014265748905017972
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/913726644",
                    "id": 913726644,
                    "created_at": "2021-09-06T15:24:37Z",
                    "updated_at": "2021-09-06T15:24:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@a-maliarov can you explain yourself with the \u2018work consistent on Windows but not Debian\u2019 ? Need concrete case.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/913726644/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Ousret",
                        "id": 9326700,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007104109972715378,
                        "severe_toxicity": 0.00011247077054576948,
                        "obscene": 0.0001689759810687974,
                        "threat": 0.00011604541941778734,
                        "insult": 0.00017516137450002134,
                        "identity_attack": 0.0001404940412612632
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/913733232",
                    "id": 913733232,
                    "created_at": "2021-09-06T15:37:00Z",
                    "updated_at": "2021-09-06T15:37:00Z",
                    "author_association": "NONE",
                    "body": "@Ousret hi, I think it would be better to post my specific issue within `charset_normalizer`'s repository. Will do later.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/913733232/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 1
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "a-maliarov",
                        "id": 53064218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000606843619607389,
                        "severe_toxicity": 0.0001235232484759763,
                        "obscene": 0.00018102998728863895,
                        "threat": 0.0001307286584051326,
                        "insult": 0.0001753453689161688,
                        "identity_attack": 0.00013952773588243872
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/924747838",
                    "id": 924747838,
                    "created_at": "2021-09-22T09:26:39Z",
                    "updated_at": "2021-09-22T09:26:39Z",
                    "author_association": "NONE",
                    "body": "I am still not sure how it impacted me, but I had an encoding issue when upgrading requests to 2.26 with my pdf generation. As far as I can tell, the lib I am using (xhtml2pdf) does not use requests or chardet/charset_normalizer directly.\r\n\r\nThe code is simply:\r\n\r\n```python\r\nhtml = 'html unicode string'\r\ninput_file = io.BytesIO(html.encode('utf-8'))\r\ntemp_file = NamedTemporaryFile('wb', delete=False)\r\nxhtml2pdf.pisa.CreatePDF(input_file, temp_file, encoding='utf8')\r\n```\r\n\r\nI'm not even sure how to find where or how the change to charset_normalizer impacted this. My solution for now has been to pin requests to 2.25.1.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/924747838/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Gagaro",
                        "id": 3845486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006478450959548354,
                        "severe_toxicity": 0.0001187860470963642,
                        "obscene": 0.00018888406339101493,
                        "threat": 0.00012065930059179664,
                        "insult": 0.000174951390363276,
                        "identity_attack": 0.0001369468664051965
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/924790213",
                    "id": 924790213,
                    "created_at": "2021-09-22T10:16:20Z",
                    "updated_at": "2021-09-22T10:20:18Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> I'm not even sure how to find where or how the change to charset_normalizer impacted this. My solution for now has been to pin requests to 2.25.1.\r\n\r\nYou can simply install `chardet` @Gagaro and it will be fully backwards-compatible (or use the right extra when installing requests)\r\nIn your requirements add requests as `requests[use_chardet_on_py3]==2.26.0` or install it with `pip install \"requests[use_chardet_on_py3]==2.26.0\"` - this should solve the problem entirely.\r\n\r\nIf not, then it means that it was a different chnage in 2.26.0 that impacted you.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/924790213/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "potiuk",
                        "id": 595491,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006700576050207019,
                        "severe_toxicity": 0.00011705933866323903,
                        "obscene": 0.00018407884635962546,
                        "threat": 0.00012219171912875026,
                        "insult": 0.00017491236212663352,
                        "identity_attack": 0.0001370566023979336
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/924835933",
                    "id": 924835933,
                    "created_at": "2021-09-22T11:20:43Z",
                    "updated_at": "2021-09-22T11:20:43Z",
                    "author_association": "NONE",
                    "body": "Thanks, it works with `[use_chardet_on_py3]`. I still don't see how this sub-dependency can have this impact.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/924835933/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Gagaro",
                        "id": 3845486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006263156537897885,
                        "severe_toxicity": 0.00011872829782078043,
                        "obscene": 0.00018098978034686297,
                        "threat": 0.00012060569861205295,
                        "insult": 0.0001722204324323684,
                        "identity_attack": 0.00013708535698242486
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/924844199",
                    "id": 924844199,
                    "created_at": "2021-09-22T11:33:26Z",
                    "updated_at": "2021-09-22T11:33:26Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Thanks, it works with `[use_chardet_on_py3]`. I still don't see how this sub-dependency can have this impact.\r\n\r\nUsing the charset-normalizer was done in backwards-compatible way to give people who implicitly depend on results of `chardet`  an easy way to switch back to use chardet. \r\n\r\nSimply - if chardet is installed, it will be used instead of charset-normalizer.\r\n\r\nIt's known \"property\" of charset-normalizer that it sometimes might produce different results than chardet when encoding is guessed from content. Both Chardet and Charset-normalizer use some kind of heuristics to determine that and they both use different optimisations and shortcuts to make this guess \"fast\". \r\n\r\nSo when @ashb  implemented the change he thought about users like you who might somehow depend on the way how chardet detects it and if chardet is installed, it will be used. The Gist of the change was that chardet should not be a \"required\" dependency because of the licencing is used. So it's not mandatory for requests. But if you install it as an optional extra or manually, that's fine (and to keep backwards compatibiliy it will be used as optional component). Thanks to that, the LGPL license (as being optional) does not limit the users of requests in  redistributing their code and their users to redistribute it further.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/924844199/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "potiuk",
                        "id": 595491,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007293716189451516,
                        "severe_toxicity": 0.00011230572272324935,
                        "obscene": 0.00018398024258203804,
                        "threat": 0.00011838133650599048,
                        "insult": 0.0001734539691824466,
                        "identity_attack": 0.00013668776955455542
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/924872715",
                    "id": 924872715,
                    "created_at": "2021-09-22T12:14:12Z",
                    "updated_at": "2021-09-22T12:14:12Z",
                    "author_association": "NONE",
                    "body": "Yes I understand all that, what I don't is why does it impact `xhtml2pdf` which does not depend on `requests` / `chardet` / `charset-normalizer` :\r\n\r\n```\r\nxhtml2pdf==0.2.4\r\n  - html5lib [required: >=1.0, installed: 1.1]\r\n    - six [required: >=1.9, installed: 1.15.0]\r\n    - webencodings [required: Any, installed: 0.5.1]\r\n  - Pillow [required: Any, installed: 7.2.0]\r\n  - pyPdf2 [required: Any, installed: 1.26.0]\r\n  - reportlab [required: >=3.0, installed: 3.5.46]\r\n    - pillow [required: >=4.0.0, installed: 7.2.0]\r\n  - six [required: Any, installed: 1.15.0]\r\n  ```\r\n\r\nDo `chardet` or `charset-normalizer` modify some things globally which could explain the side effects?\r\n\r\nThanks for taking the time to explain all of that.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/924872715/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Gagaro",
                        "id": 3845486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007613418274559081,
                        "severe_toxicity": 0.0001109707955038175,
                        "obscene": 0.00018967510550282896,
                        "threat": 0.00011409192666178569,
                        "insult": 0.00017273651610594243,
                        "identity_attack": 0.0001340382150374353
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/924883090",
                    "id": 924883090,
                    "created_at": "2021-09-22T12:28:28Z",
                    "updated_at": "2021-09-22T12:28:28Z",
                    "author_association": "NONE",
                    "body": "@Gagaro `html5lib` optionally requires `chardet` and likely behaves differently if it's not installed.\r\n\r\nhttps://github.com/html5lib/html5lib-python/blob/f7cab6f019ce94a1ec0192b6ff29aaebaf10b50d/requirements-optional.txt#L7-L9",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/924883090/reactions",
                        "total_count": 3,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 2,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "akx",
                        "id": 58669,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007841330370865762,
                        "severe_toxicity": 0.00011043833364965394,
                        "obscene": 0.0001824024220695719,
                        "threat": 0.00011977067333646119,
                        "insult": 0.00017859626677818596,
                        "identity_attack": 0.0001404431532137096
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/924884433",
                    "id": 924884433,
                    "created_at": "2021-09-22T12:30:23Z",
                    "updated_at": "2021-09-22T12:30:23Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> @Gagaro `html5lib` optionally requires `chardet` and likely behaves differently if it's not installed.\r\n\r\nAh. So requests is not the only one with optional chardet dependency :)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/924884433/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "potiuk",
                        "id": 595491,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007560862577520311,
                        "severe_toxicity": 0.00010864860087167472,
                        "obscene": 0.00018035118409898132,
                        "threat": 0.00011565942986635491,
                        "insult": 0.00017541242414154112,
                        "identity_attack": 0.00013423852215055376
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/924908362",
                    "id": 924908362,
                    "created_at": "2021-09-22T13:02:38Z",
                    "updated_at": "2021-09-22T13:02:38Z",
                    "author_association": "NONE",
                    "body": "Indeed, nice catch! So we actually depend on `chardet` without even knowing it :sweat_smile: .",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/924908362/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Gagaro",
                        "id": 3845486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.013441412709653378,
                        "severe_toxicity": 0.00010502649092813954,
                        "obscene": 0.0007161395624279976,
                        "threat": 0.00015481030277442187,
                        "insult": 0.0006251777522265911,
                        "identity_attack": 0.00023470331507269293
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/980057771",
                    "id": 980057771,
                    "created_at": "2021-11-26T15:26:35Z",
                    "updated_at": "2021-11-26T15:26:35Z",
                    "author_association": "NONE",
                    "body": "I just upgraded from 2.25.1 to 2.26.0 and my logs now fill up with charset_normalizer lines, \r\nTons of them, I can fix it if I add explicit headers like `'Content-Type': 'application/scim+json; charset=utf-8'` to rest-apis and requests, but what about all the rest-apis out there without charset in characters, what is the workaround here.\r\nI really do not see any reason for chardet or charset_normalizer at all in requests, just crash if we fail to decode so we can fix it.\r\nit is just bloating the library, My initial tests also show that it is slower than previous version when using it with jwt tokens and base64 encoding. \r\n\r\nBelow is an excerp from a response from a keycloak(redhats OIDC OAUTH2 server) jwt token:\r\n```\r\n20211126154014.190|WARNING|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:104|override steps (5) and chunk_size (512) as content does not fit (192 byte(s) given) parameters.\r\n20211126154014.203|WARNING|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:104|override steps (5) and chunk_size (512) as content does not fit (192 byte(s) given) parameters.\r\n20211126154014.245|WARNING|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:104|override steps (5) and chunk_size (512) as content does not fit (316 byte(s) given) parameters.\r\n20211126154015.964|WARNING|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:104|override steps (5) and chunk_size (512) as content does not fit (3 byte(s) \r\ngiven) parameters.\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/980057771/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fenchu",
                        "id": 11349883,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.002883443608880043,
                        "severe_toxicity": 0.00010462306090630591,
                        "obscene": 0.00037870940286666155,
                        "threat": 0.0001314915280090645,
                        "insult": 0.0002495716034900397,
                        "identity_attack": 0.0001543707330711186
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/980066035",
                    "id": 980066035,
                    "created_at": "2021-11-26T15:41:31Z",
                    "updated_at": "2021-11-26T15:41:31Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Just install `chardet`. \r\n\r\nAnd yeah. I think requests maintainer want to remove both in the future.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/980066035/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "potiuk",
                        "id": 595491,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006545337964780629,
                        "severe_toxicity": 0.0001181963671115227,
                        "obscene": 0.00017821064102463424,
                        "threat": 0.0001260863646166399,
                        "insult": 0.0001754013792378828,
                        "identity_attack": 0.00013863890490029007
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1012162584",
                    "id": 1012162584,
                    "created_at": "2022-01-13T14:00:14Z",
                    "updated_at": "2022-01-13T14:00:14Z",
                    "author_association": "NONE",
                    "body": "I also see performance degradation after moving from 2.25.1 to higher, this just bloats requests.\r\n\r\nwith `requests==2.27.1` I is now even worse, info in this module is like DEBUG.\r\n\r\nThis call resulting in this have the following header:\r\n```\r\n    headers = {\r\n        'Accept': 'application/scim+json',\r\n        'Content-Type': 'application/scim+json; charset=utf-8',\r\n        'Authorization': f\"Bearer {access_token}\"\r\n    }\r\n```\r\n\r\n```\r\n20220113145635.412|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:376|ascii passed initial chaos probing. Mean measured chaos is 0.000000 %\r\n20220113145635.415|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:430|ascii is most likely the one. Stopping the process.\r\n20220113145635.416|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:376|ascii passed initial chaos probing. Mean measured chaos is 0.000000 %\r\n20220113145635.417|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:430|ascii is most likely the one. Stopping the process.\r\n20220113145635.538|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:376|ascii passed initial chaos probing. Mean measured chaos is 0.000000 %\r\n20220113145635.541|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:430|ascii is most likely the one. Stopping the process.\r\n20220113145636.303|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:376|ascii passed initial chaos probing. Mean measured chaos is 0.000000 %\r\n20220113145636.304|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:430|ascii is most likely the one. Stopping the process.\r\n20220113145636.307|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:376|ascii passed initial chaos probing. Mean measured chaos is 0.000000 %\r\n20220113145636.308|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:430|ascii is most likely the one. Stopping the process.\r\n20220113145636.373|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:376|ascii passed initial chaos probing. Mean measured chaos is 0.000000 %\r\n20220113145636.373|INFO|C:\\dist\\venvs\\trk-fullstack-test\\lib\\site-packages\\charset_normalizer\\api.py:430|ascii is most likely the one. Stopping the process.\r\n```\r\n\r\nSo the first thing I do in my logging module is:\r\n```\r\nlogging.getLogger('charset_normalizer').disabled = True\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1012162584/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fenchu",
                        "id": 11349883,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.004588206764310598,
                        "severe_toxicity": 0.00010076088074129075,
                        "obscene": 0.000445418554591015,
                        "threat": 0.0001489672577008605,
                        "insult": 0.00031295756343752146,
                        "identity_attack": 0.0001704223977867514
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1012223649",
                    "id": 1012223649,
                    "created_at": "2022-01-13T15:08:04Z",
                    "updated_at": "2022-01-13T16:35:47Z",
                    "author_association": "MEMBER",
                    "body": "@fenchu this isn't really relevant to this issue and alternatives to not use charset_normalizer have already been provided. There are also multiple ways to disable the use of character detection entirely. You've explicitly chosen the _one_ API that provides this feature. Reposting your grievance repeatedly isn't furthering the conversation here.\r\n\r\nSo to recap the thread for future readers:\r\n\r\n1. Yes, it should be optional. We want to remove character detection entirely. It doesn't belong in Requests. This won't happen until we major version bump.\r\n2. Installing `chardet` manually or using `requests[use_chardet_on_py3]` will have the exact same functionality in 2.27.1 as it did in 2.25.1.\r\n3. `content` and `iter_content` both expose the data returned by the response _without_ any attempted character encoding. If you don't think the character encoding is correct and don't want to use an auto-encoder, you can either manually encode the `content` bytes or [set the `encoding` attribute](https://github.com/psf/requests/blob/main/requests/models.py#L865-L867) on the Response before calling `.text`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1012223649/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007278319098986685,
                        "severe_toxicity": 0.00011349729174980894,
                        "obscene": 0.00018279277719557285,
                        "threat": 0.000121442717500031,
                        "insult": 0.00017451655003242195,
                        "identity_attack": 0.0001378671731799841
                    }
                }
            ]
        },
        "118": {
            "html_url": "https://github.com/psf/requests/pull/5860",
            "id": 938529554,
            "number": 5860,
            "title": "Document de-duplication of keys for params and data",
            "created_at": "2021-07-07T06:17:40Z",
            "updated_at": "2022-06-11T06:26:05Z",
            "closed_at": null,
            "body": "and format the files dict format correctly",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "verhovsky",
                "id": 5687998,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5860/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "119": {
            "html_url": "https://github.com/psf/requests/issues/5833",
            "id": 904032198,
            "number": 5833,
            "title": "Discrepancies between self-prepared and session-prepared request headers",
            "created_at": "2021-05-27T17:50:01Z",
            "updated_at": "2022-01-06T12:57:11Z",
            "closed_at": null,
            "body": "If we prepare a request normally (the `prepare()` method), it does not include any additional headers by default, even if the resulting prepared request is sent via a session.\r\n\r\nHowever, if the request is prepared via the session (the `prepare_request(Request)` method), then it will include a few headers by default: `Accept`, `Accept-Encoding`, `User-Agent`, and `Connection`.\r\n\r\nThere are some (arguably buggy) HTTP servers that apparently will reject any request that includes the `Accept` or `Accept-Encoding` header with 406 Not Acceptable.\r\n\r\nThis situation led to major confusion when trying to fix our usage of this library to send all the requests through a single session in order to leverage cookie handling.\r\n\r\nThis default header logic does not appear to be documented anywhere. I also think it is very confusing that a self-prepared request and a session-prepared request would have different headers. Unfortunately, I assume this cannot be changed easily for fear of breaking backwards compatibility.",
            "author_association": "NONE",
            "comments": 9,
            "state": "open",
            "user": {
                "login": "rittneje",
                "id": 28784688,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5833/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/849958441",
                    "id": 849958441,
                    "created_at": "2021-05-27T21:37:16Z",
                    "updated_at": "2021-05-27T21:37:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'm fairly certain this was at one point covered in our docs. With that in mind, why is this a _bug report_? How can you expect `Request.prepare()` to do something with session state when it doesn't have access to the session?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/849958441/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000598239537794143,
                        "severe_toxicity": 0.0001236082025570795,
                        "obscene": 0.0001828065433073789,
                        "threat": 0.00012917342246510088,
                        "insult": 0.00017463172844145447,
                        "identity_attack": 0.0001388560194754973
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/849968254",
                    "id": 849968254,
                    "created_at": "2021-05-27T21:57:18Z",
                    "updated_at": "2021-05-27T21:57:18Z",
                    "author_association": "NONE",
                    "body": "`Accept`, `Accept-Encoding`, and `User-Agent` have nothing to do with session state. Only the `Connection: keep-alive` header really makes sense to be different since without a session I assume there's no pool.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/849968254/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rittneje",
                        "id": 28784688,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006349678733386099,
                        "severe_toxicity": 0.00011961135896854103,
                        "obscene": 0.00018663532682694495,
                        "threat": 0.00012223832891322672,
                        "insult": 0.00017369627312291414,
                        "identity_attack": 0.00013509526615962386
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/849975700",
                    "id": 849975700,
                    "created_at": "2021-05-27T22:12:49Z",
                    "updated_at": "2021-05-27T22:12:49Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Except that commonly people set these on the session and expect them to be session-level state. I think this is complicated by the fact that `Request.prepare()` is primarily used by folks who want complete control over their headers and everything else. This is why `Session.prepare_request()` was introduced - to do the things some people think should just :sparkes: magically :sparkles: happen and might be the \"only right\" behaviour (in their expectation). \r\n\r\nAt one point this was documented roughly as:\r\n\r\n- `Request.prepare()` + `Session.send()` is complete control and `Session.send()` shouldn't really be tacking on anything extra\r\n- `Request` + `Session.prepare_request()` + `Session.send()` has more control but also does the things that you might want Requests to handle (like reasonable default headers and applying session state)\r\n- `Session.request` (and friends) is for folks that don't need a more complex way of building requests\r\n- `requests.request` (and friends) is for quickstart and other quick usage that doesn't need session state persisted between requests\r\n\r\nI can see where you're coming from, but it's not backwards compatible nor is it how it was designed or documented",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/849975700/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006649648421443999,
                        "severe_toxicity": 0.00011934179929085076,
                        "obscene": 0.00019149611762259156,
                        "threat": 0.00012195576709927991,
                        "insult": 0.00017216363630723208,
                        "identity_attack": 0.00013580266386270523
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/849981712",
                    "id": 849981712,
                    "created_at": "2021-05-27T22:25:42Z",
                    "updated_at": "2021-05-27T22:25:42Z",
                    "author_association": "NONE",
                    "body": "To clarify, what I consider the issue here is not the existence of `Session.headers` itself, as in the ability to set headers on the session that get auto-applied to all requests. Rather, the issue is the default `Session.headers`, which (except for `Connection`) seem completely arbitrary, so it is very confusing why they are the defaults at all.\r\n\r\nAt the very least I think these default headers should be mentioned in the documentation, since for me at least it was entirely unexpected and undesirable.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/849981712/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rittneje",
                        "id": 28784688,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005595165421254933,
                        "severe_toxicity": 0.00013028662942815572,
                        "obscene": 0.00019817741122096777,
                        "threat": 0.00012420985149219632,
                        "insult": 0.00017674076661933213,
                        "identity_attack": 0.00014174115494824946
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/849990764",
                    "id": 849990764,
                    "created_at": "2021-05-27T22:47:14Z",
                    "updated_at": "2021-05-27T22:47:14Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "If it's not already documented, I'd merge a PR with that addition.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/849990764/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000588327762670815,
                        "severe_toxicity": 0.000126662605907768,
                        "obscene": 0.00019075658929068595,
                        "threat": 0.00012859507114626467,
                        "insult": 0.00018003606237471104,
                        "identity_attack": 0.00013946188846603036
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1006468597",
                    "id": 1006468597,
                    "created_at": "2022-01-06T10:47:20Z",
                    "updated_at": "2022-01-06T10:47:20Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Definitely an issue, I can't disable User-Agent in a Session context even with a prepared request : \r\n![cancer useragent](https://upload.illya.network/_files/3pylf37a.png)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1006468597/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "notAutomne",
                        "id": 2185992,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011894250055775046,
                        "severe_toxicity": 9.698445501271635e-05,
                        "obscene": 0.00020048087753821164,
                        "threat": 0.00010131758608622476,
                        "insult": 0.00018863820878323168,
                        "identity_attack": 0.00013905980449635535
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1006563776",
                    "id": 1006563776,
                    "created_at": "2022-01-06T12:51:32Z",
                    "updated_at": "2022-01-06T12:51:32Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "You can remove it after the fact:\r\n\r\n\r\n```py\r\nreq = requests.Request(...)\r\nprepared = session.prepare_request(req)\r\ndel prepared.headers['User-Agent']\r\nsession.send(prepared)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1006563776/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007869374239817262,
                        "severe_toxicity": 0.00010947130795102566,
                        "obscene": 0.00019856363360304385,
                        "threat": 0.00010976022167596966,
                        "insult": 0.00017665888299234211,
                        "identity_attack": 0.0001302390592172742
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1006567010",
                    "id": 1006567010,
                    "created_at": "2022-01-06T12:55:44Z",
                    "updated_at": "2022-01-06T12:55:44Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> You can remove it after the fact:\r\n> \r\n> ```python\r\n> req = requests.Request(...)\r\n> prepared = session.prepare_request(req)\r\n> del prepared.headers['User-Agent']\r\n> session.send(prepared)\r\n> ```\r\n\r\nSame issue : \r\n![](https://upload.illya.network/_files/udgacn1n.png)\r\n![](https://upload.illya.network/_files/8v6fucl8.png)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1006567010/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "notAutomne",
                        "id": 2185992,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007765956688672304,
                        "severe_toxicity": 0.00011055349750677124,
                        "obscene": 0.0001908049889607355,
                        "threat": 0.00011332295252941549,
                        "insult": 0.00017345578817185014,
                        "identity_attack": 0.00013290740025695413
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1006568224",
                    "id": 1006568224,
                    "created_at": "2022-01-06T12:57:11Z",
                    "updated_at": "2022-01-06T12:57:11Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Ah, right. Unfortunately the API right now is too limited to allow us to provide a clean way around what urllib3 does by default now (where if I remember correctly they want a sentinel value).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1006568224/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006144816288724542,
                        "severe_toxicity": 0.00012239451461937279,
                        "obscene": 0.00017845956608653069,
                        "threat": 0.00012727353896480054,
                        "insult": 0.00017681761528365314,
                        "identity_attack": 0.00014192915114108473
                    }
                }
            ]
        },
        "120": {
            "html_url": "https://github.com/psf/requests/pull/5816",
            "id": 891696495,
            "number": 5816,
            "title": "Warn user if environment variables are used",
            "created_at": "2021-05-14T07:43:32Z",
            "updated_at": "2022-06-02T08:14:12Z",
            "closed_at": null,
            "body": "When session.verify=False, session.trust_env=True and\r\nREQUESTS_CA_BUNDLE or CURL_CA_BUNDLE is defined as environment\r\nvariables then, notify user that requests will use environment variables\r\nrather than silently failing.\r\n\r\npartially fixes: #3829\r\n\r\nSigned-off-by: Abhijeet Kasurde <akasurde@redhat.com>",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "Akasurde",
                "id": 633765,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5816/reactions",
                "total_count": 10,
                "+1": 5,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 5,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/841075865",
                    "id": 841075865,
                    "created_at": "2021-05-14T07:44:37Z",
                    "updated_at": "2021-05-14T07:44:37Z",
                    "author_association": "NONE",
                    "body": "I spend hours debugging this error. I am aware that this odd behavior is fixed in 3.* release.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/841075865/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Akasurde",
                        "id": 633765,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007224325090646744,
                        "severe_toxicity": 0.00011134878877783194,
                        "obscene": 0.0001766684727044776,
                        "threat": 0.00011936547525692731,
                        "insult": 0.0001782782783266157,
                        "identity_attack": 0.00013488777040038258
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/841387339",
                    "id": 841387339,
                    "created_at": "2021-05-14T17:16:49Z",
                    "updated_at": "2021-05-14T17:19:03Z",
                    "author_association": "NONE",
                    "body": "Really nice pr, I checked it \u2013 warnings works well, can save a tons of devs time.\r\nIt would be nice to have more verbose warning text, for those who are not familiar with this problem.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/841387339/reactions",
                        "total_count": 3,
                        "+1": 3,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hardenchant",
                        "id": 17965301,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007677590474486351,
                        "severe_toxicity": 0.00010765987099148333,
                        "obscene": 0.00018491604714654386,
                        "threat": 0.00011039326636819169,
                        "insult": 0.00017627456691116095,
                        "identity_attack": 0.00013081457291264087
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/845703875",
                    "id": 845703875,
                    "created_at": "2021-05-21T06:50:10Z",
                    "updated_at": "2021-05-21T06:50:10Z",
                    "author_association": "NONE",
                    "body": "> It would be nice to have more verbose warning text, for those who are not familiar with this problem.\r\n\r\nCould you please suggest something? \ud83d\ude02 \r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/845703875/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Akasurde",
                        "id": 633765,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006317291408777237,
                        "severe_toxicity": 0.00012354740465525538,
                        "obscene": 0.00017078613745979965,
                        "threat": 0.0001397967425873503,
                        "insult": 0.00018153835844714195,
                        "identity_attack": 0.00014299701433628798
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/875165237",
                    "id": 875165237,
                    "created_at": "2021-07-07T00:09:23Z",
                    "updated_at": "2021-07-07T00:09:23Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Closing/re-opening since I can't trigger CI to run here",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/875165237/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.02178255282342434,
                        "severe_toxicity": 0.00011754401930375025,
                        "obscene": 0.0009350726031698287,
                        "threat": 0.0003048265352845192,
                        "insult": 0.0007698059198446572,
                        "identity_attack": 0.0003199302009306848
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1144558001",
                    "id": 1144558001,
                    "created_at": "2022-06-02T07:50:05Z",
                    "updated_at": "2022-06-02T07:50:05Z",
                    "author_association": "NONE",
                    "body": "What's the status of this PR?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1144558001/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "intgr",
                        "id": 137616,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007219008402898908,
                        "severe_toxicity": 0.00011244770576013252,
                        "obscene": 0.0001965698756976053,
                        "threat": 0.00010679474507924169,
                        "insult": 0.00017178287089336663,
                        "identity_attack": 0.00013238476822152734
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1144562077",
                    "id": 1144562077,
                    "created_at": "2022-06-02T07:54:49Z",
                    "updated_at": "2022-06-02T07:54:49Z",
                    "author_association": "NONE",
                    "body": "> I am aware that this odd behavior is fixed in 3.* release.\r\n\r\nFrom #6050 looks like 3.x isn't going to happen any time soon, and commitments to fix things in 3.x don't necessarily hold.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1144562077/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "intgr",
                        "id": 137616,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006264795665629208,
                        "severe_toxicity": 0.00012083235924364999,
                        "obscene": 0.00018527149222791195,
                        "threat": 0.0001245435851160437,
                        "insult": 0.0001758573780534789,
                        "identity_attack": 0.0001405023504048586
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1144573534",
                    "id": 1144573534,
                    "created_at": "2022-06-02T08:07:41Z",
                    "updated_at": "2022-06-02T08:07:41Z",
                    "author_association": "NONE",
                    "body": "> What's the status of this PR?\r\n\r\nI would love to see this PR getting merged. Let me know if you need something from myside.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1144573534/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Akasurde",
                        "id": 633765,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000642745231743902,
                        "severe_toxicity": 0.00012006776523776352,
                        "obscene": 0.00018184204236604273,
                        "threat": 0.0001254775415873155,
                        "insult": 0.00017206811753567308,
                        "identity_attack": 0.00013772238162346184
                    }
                }
            ]
        },
        "121": {
            "html_url": "https://github.com/psf/requests/issues/5814",
            "id": 886491580,
            "number": 5814,
            "title": "Merging of default HTTP headers with specified headers breaks the defined ordering",
            "created_at": "2021-05-11T08:33:34Z",
            "updated_at": "2021-05-11T16:58:38Z",
            "closed_at": null,
            "body": "Even if headers are defined in an ``OrderedDict``, their order might change if they coincide with the ``default_headers`` set in ``utils.py``, namely ``User-Agent``, ``Accept-Encoding``, ``Accept``, and ``Connection``.\r\n\r\n## Expected Result\r\nThe order of the headers should not change when passed as an ``OrderedDict``. So for example:\r\n\r\n```python\r\nimport requests\r\nfrom collections import OrderedDict\r\n\r\nheaders = OrderedDict([\r\n    (\"Accept\",   '1'),\r\n    (\"Accept-Encoding\",   '2'),\r\n    (\"User-Agent\",   '3'),\r\n])\r\nr = requests.get('http://www.example.com', headers=headers)\r\n```\r\n\r\nshould result in the ``Accept`` header coming first, followed by ``Accept-Encoding`` and finally ``User-Agent``.\r\n\r\n## Actual Result\r\nThe ``User-Agent`` comes first, followed by ``Accept-Encoding`` and then ``Accept`` \r\n\r\n## Reason\r\nThe default headers --- as set by ``requests.utils.default_headers()`` --- are merged with the user specified headers by the function ``requests.sessions.merge_settings``. This function first takes the default headers and then updates that with the user specified headers. This ensures that user specified headers overwrite the default ones.\r\n\r\nHowever, the update process does not change the order of the default headers. So when setting ``User-Agent`` after ``Accept``, this will not be taken into account as both headers are already in the default headers and in reverse order.\r\n\r\nA fix to ``merge_settings`` could be to take the user specified headers first, and then iterate over the default headers and add them in if their are misssing.\r\n\r\n## Workaround\r\nIf one wants exactly the headers specified, one can first create a ``Session`` and remove the default headers:\r\n\r\n```\r\ns = requests.Session()\r\ns.headers = {}\r\nr = s.get(url, headers=headers, ...)\r\n```\r\n\r\nHaving a way to change the default headers on the ``requests`` module would be a welcome addition. So one could change, for example, the user agent in one place and have it affect all requests calls that follow.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom collections import OrderedDict\r\n\r\nheaders = OrderedDict([\r\n    (\"Accept\",   '1'),\r\n    (\"Accept-Encoding\",   '2'),\r\n    (\"User-Agent\",   '3'),\r\n])\r\nr = requests.get('http://www.example.com', headers=headers)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"3.3.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.8.0-50-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010109f\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.4\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "baderj",
                "id": 5196024,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5814/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/838288432",
                    "id": 838288432,
                    "created_at": "2021-05-11T11:12:19Z",
                    "updated_at": "2021-05-11T11:12:19Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "We provide no guarantees of heading ordering because the specification does not require ordering be preserved and we've never attempted to preserve ordering. That turns this into a feature request and the project is under a feature freeze",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/838288432/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006700848462060094,
                        "severe_toxicity": 0.00011765670933527872,
                        "obscene": 0.00017203825700562447,
                        "threat": 0.00013261307321954519,
                        "insult": 0.00017764804942999035,
                        "identity_attack": 0.00014161577564664185
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/838442057",
                    "id": 838442057,
                    "created_at": "2021-05-11T13:07:32Z",
                    "updated_at": "2021-05-11T13:07:32Z",
                    "author_association": "NONE",
                    "body": "Unfortunately there are many cases where the ordering of headers are used to detect and block requests from ``requests``. But I understand that ``requests`` sticks to the specification and the feature freeze means there should always be the workaround with sessions that can be used.\r\n\r\nI'm sorry for the useless issue.\r\n\r\nMy confusion stems from the usage of ``OrderedDict``, which implies that the header should be sorted. There is even a [test case](https://github.com/psf/requests/blob/f6d43b03fbb9a1e75ed63a9aa15738a8fce99b50/tests/test_requests.py#L449) ``test_headers_preserve_order(self, httpbin)`` with docstring \r\n\r\n> Preserve order when headers provided as OrderedDict.\r\n\r\nThe *english* documentation explains header orderings very well and that they are not 100% guaranteed: https://docs.python-requests.org/en/master/user/advanced/#header-ordering  , but I might have read the German translation, which does not yet have the section on header orderings. I will try to write a pull request for the German version.\r\n\r\nPlease close the issue\r\n\r\n\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/838442057/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "baderj",
                        "id": 5196024,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007534329197369516,
                        "severe_toxicity": 0.00011334521695971489,
                        "obscene": 0.00018934965191874653,
                        "threat": 0.0001180924809887074,
                        "insult": 0.00017207943892572075,
                        "identity_attack": 0.0001377757143927738
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/838829624",
                    "id": 838829624,
                    "created_at": "2021-05-11T16:58:38Z",
                    "updated_at": "2021-05-11T16:58:38Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hm, I'm surprised we have that test case. I don't know when we changed that but it must be fairly recent. I guess that's a good reason to look into this further if I find the time nad not close it",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/838829624/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005586314364336431,
                        "severe_toxicity": 0.0001293815003009513,
                        "obscene": 0.00018428398470859975,
                        "threat": 0.0001323498145211488,
                        "insult": 0.00017636551638133824,
                        "identity_attack": 0.00014656202984042466
                    }
                }
            ]
        },
        "122": {
            "html_url": "https://github.com/psf/requests/pull/5779",
            "id": 836016285,
            "number": 5779,
            "title": "sets a default timeout and resolves #3070",
            "created_at": "2021-03-19T13:50:35Z",
            "updated_at": "2022-01-03T15:05:49Z",
            "closed_at": null,
            "body": "This sets a (very high) default timeout which is guaranteed not to create any breaking changes while also fixing the longstanding issue of requests possibly hanging indefinitely in any script where the dev forgot to include a timeout. I would like to urge this commit make it into the next minor release version with the possibility of lowering the timeout to 300 seconds in the next major release version.\r\n\r\nPlease see the discussion at https://github.com/psf/requests/issues/3070",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "grintor",
                "id": 3444196,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5779/reactions",
                "total_count": 4,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 4,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/802910920",
                    "id": 802910920,
                    "created_at": "2021-03-19T15:21:06Z",
                    "updated_at": "2021-03-19T15:21:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'd vote for going straight to whatever timeouts browsers have as the default and skipping the intermediate step your have here, but anything will be an important improvement.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/802910920/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mlissner",
                        "id": 236970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006082484032958746,
                        "severe_toxicity": 0.00012690173753071576,
                        "obscene": 0.0001799214369384572,
                        "threat": 0.00013813628174830228,
                        "insult": 0.0001789975940482691,
                        "identity_attack": 0.00014599434507545084
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/804851743",
                    "id": 804851743,
                    "created_at": "2021-03-23T12:11:45Z",
                    "updated_at": "2021-03-23T12:11:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "There are - unfortunately - people who've been made to feel unsafe contributing on issue #3070 who have emailed me in the past to urge this not be changed in a minor release. This is - regardless of what you think - backwards incompatible and thus not capable of being accepted under our policies for compatibility in minor and patch releases.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/804851743/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005688645760528743,
                        "severe_toxicity": 0.0001287723716814071,
                        "obscene": 0.00018022602307610214,
                        "threat": 0.0001386309741064906,
                        "insult": 0.00017652282258495688,
                        "identity_attack": 0.0001454718440072611
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/804926333",
                    "id": 804926333,
                    "created_at": "2021-03-23T14:00:08Z",
                    "updated_at": "2021-03-23T14:00:08Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "That's fine. Can we do a major release for this then? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/804926333/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mlissner",
                        "id": 236970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000617561920080334,
                        "severe_toxicity": 0.00012324594717938453,
                        "obscene": 0.00018514663679525256,
                        "threat": 0.00012381795386318117,
                        "insult": 0.0001772041287040338,
                        "identity_attack": 0.00013901061902288347
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/804941740",
                    "id": 804941740,
                    "created_at": "2021-03-23T14:20:01Z",
                    "updated_at": "2021-03-23T14:20:01Z",
                    "author_association": "NONE",
                    "body": "That is unfortunate that those people felt unsafe in the discussion. I know people can be terrible sometimes, and I wish everyone could always remain civil. While I find it far-fetched that there is a request takes over 15 minutes to respond, (and the server application does not time-out the connection itself first) I don't find it impossible, so I can understand why the change is considered to be not backwards compatible. I hope that you will still make the 300ms timeout in the next major release though.\r\n\r\nOn the other hand, there is an even more minor change, which I feel certain is not a breaking one, that I would like to propose. Setting a default value for the *Connect* timeout, (while leaving the read timeout indefinite), and making it's value higher than the TCP connect timeout of any supported operating system, could not possibly cause a breaking change and would prevent most deadlocks.\r\n\r\nHave a look at this image from my Ubuntu server: \r\n\r\n![image](https://user-images.githubusercontent.com/3444196/112159075-2292ea00-8bbf-11eb-83e1-aeff08fa1be2.png)\r\n\r\nAs you can see, it timed out in 130 seconds. Now, I know what you may be thinking, \"that's just the ssh application timing out, and does not reflect some hard boundary set by the OS\". But have a look at this:\r\n\r\n![image](https://user-images.githubusercontent.com/3444196/112159269-5a019680-8bbf-11eb-993d-bde270a1df27.png)\r\n\r\nIt times out because 130 seconds is the hard-limit on TCP connections in Linux (which is actually [documented here](https://blog.cloudflare.com/when-tcp-sockets-refuse-to-die/#synsent:~:text=the%20whole%20process%20takes%20130%20seconds%2C%20until%20the%20kernel%20gives%20up%20with%20the%20ETIMEDOUT%20errno.))\r\n\r\nIf you perform a similar test on windows, you will find the timeout is 21 seconds (which is actually [documented here](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc739819(v=ws.10)?redirectedfrom=MSDN#tcpmaxconnectretransmissions:~:text=(decimal)-,Default%3A%202,Description%3A%20This%20parameter%20determines%20the%20number%20of%20times%20that%20TCP%20retransmits%20a%20connect%20request%20(a%20SYN%20segment)%20before%20aborting%20the%20attempt.%20The%20retransmission%20time%2Dout%20is%20doubled%20with%20each%20successive%20retransmission%20in%20a%20given%20connect%20attempt.%20The%20initial%20time%2Dout%20is%20controlled%20by%20the%20TcpInitialRtt%20registry%20value))\r\n\r\nAnd for macOS, the value is 60 seconds. I can't find documentation on it, but you can repeat the test from the screenshots and see.\r\n\r\nSo you see that having a connection timeout of greater than 131 seconds serves no purpose because the underlying TCP connection will have been torn down by the OS at that point.\r\n\r\nI think that having the library waiting on a connection that can't possibly exist can be considered a bug and should be fixed in a non-major release. It will prevent deadlocks in most situations and can't possibly break anything.\r\n\r\nI will edit my pull request for these changes.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/804941740/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "grintor",
                        "id": 3444196,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001505957217887044,
                        "severe_toxicity": 0.00010496892355149612,
                        "obscene": 0.0002431055618217215,
                        "threat": 0.00012409217015374452,
                        "insult": 0.00019232284103054553,
                        "identity_attack": 0.0001500248326919973
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/805117675",
                    "id": 805117675,
                    "created_at": "2021-03-23T18:07:43Z",
                    "updated_at": "2021-03-23T20:40:33Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@grintor and @sigmavirus24, I'm going to move back to #3070 to try to move the conversation forward on this, since I feel like we lack direction on this issue. Maybe we can get consensus around the fix over there, and then implement it here. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/805117675/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mlissner",
                        "id": 236970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005596767878159881,
                        "severe_toxicity": 0.00013109603605698794,
                        "obscene": 0.0001888842525659129,
                        "threat": 0.00013554365432355553,
                        "insult": 0.00017930386820808053,
                        "identity_attack": 0.0001468944683438167
                    }
                }
            ]
        },
        "123": {
            "html_url": "https://github.com/psf/requests/pull/5776",
            "id": 833712902,
            "number": 5776,
            "title": "Added explanation why the timeout is doubled.(#5773)",
            "created_at": "2021-03-17T12:21:12Z",
            "updated_at": "2022-01-03T15:22:26Z",
            "closed_at": null,
            "body": "## issue\r\n\r\n#5773",
            "author_association": "NONE",
            "comments": 8,
            "state": "open",
            "user": {
                "login": "cpyberry",
                "id": 80456253,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5776/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/802713541",
                    "id": 802713541,
                    "created_at": "2021-03-19T10:14:02Z",
                    "updated_at": "2021-03-19T10:14:02Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24\n\nI added what the user should do and made the phenomenon stand out.\n\nIf you have time, I'd be happy if you could see it\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/802713541/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cpyberry",
                        "id": 80456253,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005270311376079917,
                        "severe_toxicity": 0.0001368356606690213,
                        "obscene": 0.00018972664838656783,
                        "threat": 0.00014204205945134163,
                        "insult": 0.00017713994020596147,
                        "identity_attack": 0.00014751515118405223
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/817910953",
                    "id": 817910953,
                    "created_at": "2021-04-12T15:34:08Z",
                    "updated_at": "2021-04-12T15:34:08Z",
                    "author_association": "NONE",
                    "body": "Hi,\r\n\r\nI would like to tell what I  understand on what you  want to publish, and possibly,  suggest a different worlds to  be more accurate.\r\n\r\nIn Networking, we have a reference model set by ISO, called OSI Ref Model,  it is a 7 layers  reference model that, by ISO, could made any complaint system , interoperable.\r\n\r\nSaying that,  HTTP/HTTPS is a High L4 Protocol, while a connection is High L3/ Low L4 Pair...based on this....a Read Timeout, really means that once  all higher security layer have been passed  a sessin with a server is established, and a request has been made....without any protocol response status within the time set as timeout, it should be consider as a read timeout, the connection timeout, means that, when the orignation point request or has a established connection with an endpoint does not response within the timeout defined.\r\n\r\nHTTP Keepalive is a way to call  TCP Keealive mechanims to take care of that connection, but...as the RFC Standard is Out of this world, the endpoint commonly drip the connectn without notification...so a Relk Read Timeout...is now conerted as a Connection Timeout..\r\n\r\nAnd  Finallly, just to be crystal....timeout is not being double by client....it is really set by Server side response.\r\n\r\nCheers",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/817910953/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006875444669276476,
                        "severe_toxicity": 0.00011460013774922118,
                        "obscene": 0.00019247546151746064,
                        "threat": 0.00011368424020474777,
                        "insult": 0.00016906300152186304,
                        "identity_attack": 0.00013434978609438986
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/818598257",
                    "id": 818598257,
                    "created_at": "2021-04-13T09:36:29Z",
                    "updated_at": "2021-04-13T09:52:52Z",
                    "author_association": "NONE",
                    "body": "I will use it as a reference.\n\nI'm really thankful to you",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/818598257/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cpyberry",
                        "id": 80456253,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005229301750659943,
                        "severe_toxicity": 0.00014227574865799397,
                        "obscene": 0.00019051539129577577,
                        "threat": 0.00015371563495136797,
                        "insult": 0.00017610286886338145,
                        "identity_attack": 0.0001463945663999766
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/818724409",
                    "id": 818724409,
                    "created_at": "2021-04-13T13:12:16Z",
                    "updated_at": "2021-04-13T13:12:16Z",
                    "author_association": "NONE",
                    "body": "I made some changes so that some people could understand",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/818724409/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cpyberry",
                        "id": 80456253,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006282574613578618,
                        "severe_toxicity": 0.00012309559679124504,
                        "obscene": 0.00018492733943276107,
                        "threat": 0.0001339343434665352,
                        "insult": 0.00017663362086750567,
                        "identity_attack": 0.0001361374306725338
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/825858466",
                    "id": 825858466,
                    "created_at": "2021-04-23T19:00:19Z",
                    "updated_at": "2021-04-23T19:00:19Z",
                    "author_association": "NONE",
                    "body": "The IETF Standard defines a 2 hours lapse in order to start sending TCP KA Packets, obviously, it is too long, so server managers decrease that value in order to allocate the available resource properly... I.E, Netflix have a 4 minutes timeout, instead of 2 hours.... so no matter if you have enabled HTTP KA.... the server side will drop the connection on its side after 4 minutes and when  the  client side tries to get  data on  a open soclet, it will fail, cais, that socket no logr exists...BTW, NF,  has a avascript code, thtat modifies the connectin time out to 2 min.\r\n\r\nSo, having the requests/urllib3 tieout parameter enabled, it wont make any diffrence, since  the server might  drop the soclet before the client reches its threshold",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/825858466/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008646592614240944,
                        "severe_toxicity": 0.00010975268378388137,
                        "obscene": 0.00020002566452603787,
                        "threat": 0.00011612335219979286,
                        "insult": 0.0001769660593708977,
                        "identity_attack": 0.00013931954163126647
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/825966387",
                    "id": 825966387,
                    "created_at": "2021-04-23T22:27:34Z",
                    "updated_at": "2021-04-23T22:27:34Z",
                    "author_association": "NONE",
                    "body": "Wow!\nI learned for the first time that the initial value of keepalive was 2 hours.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/825966387/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cpyberry",
                        "id": 80456253,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006518283626064658,
                        "severe_toxicity": 0.00011783141235355288,
                        "obscene": 0.0001735918049234897,
                        "threat": 0.00012303481344133615,
                        "insult": 0.0001774990523699671,
                        "identity_attack": 0.0001385232899338007
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/875166333",
                    "id": 875166333,
                    "created_at": "2021-07-07T00:12:03Z",
                    "updated_at": "2021-07-07T00:12:03Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@cpyberry I don't understand the documentation you've added here any longer. It's vague, unclear, and roundabout. You've been given clear suggestions that you can simply apply and would get this PR merged. Please either update this or close it, as I will not accept these updates in their current state",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/875166333/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00055403244914487,
                        "severe_toxicity": 0.00012910347140859812,
                        "obscene": 0.00018776483193505555,
                        "threat": 0.00013100917567498982,
                        "insult": 0.0001758454745868221,
                        "identity_attack": 0.00014282108168117702
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/876101555",
                    "id": 876101555,
                    "created_at": "2021-07-08T03:49:45Z",
                    "updated_at": "2021-07-08T04:06:41Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 \nFirst of all, I apologize for leaving this pull request for several months.\n\nI want to commit the changes you have suggested, but my stupid additional commits have made it an \"old suggestion\".\n\nApparently, github can only commit latest suggestions.\n\nIs it possible to make the same proposal again?\n\nNext time I will not do stupid things.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/876101555/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cpyberry",
                        "id": 80456253,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.03504950553178787,
                        "severe_toxicity": 0.00017875026969704777,
                        "obscene": 0.0036327852867543697,
                        "threat": 0.0002831819001585245,
                        "insult": 0.0017333908472210169,
                        "identity_attack": 0.00026226582122035325
                    }
                }
            ]
        },
        "124": {
            "html_url": "https://github.com/psf/requests/pull/5748",
            "id": 805501636,
            "number": 5748,
            "title": "Fix: #4362 - Redirect resolved even though allow_redirects is set to False causing exception for unsupported connection adapter",
            "created_at": "2021-02-10T13:12:54Z",
            "updated_at": "2021-12-29T03:56:43Z",
            "closed_at": null,
            "body": "Good evening\r\n\r\nThe problem was that when checking, we got data that passed the condition test: they contained `:` , and the request did not start with `http`. Example `0.0.0.0:8080`.\r\n\r\nDone:\r\n- [x] Fix #4362\r\n- [x] Add and fix tests\r\n- [x] make test\r\n- [x] flake8 (diff)",
            "author_association": "CONTRIBUTOR",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "luckydenis",
                "id": 41421345,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5748/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/776701583",
                    "id": 776701583,
                    "created_at": "2021-02-10T13:21:31Z",
                    "updated_at": "2021-02-10T13:21:31Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Good evening, @kennethreitz42\r\n\r\nPlease review my edits when you have some free time",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/776701583/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "luckydenis",
                        "id": 41421345,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000651923066470772,
                        "severe_toxicity": 0.00012094013800378889,
                        "obscene": 0.0001773520343704149,
                        "threat": 0.00014289708633441478,
                        "insult": 0.0001760872546583414,
                        "identity_attack": 0.00013991864398121834
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/978186964",
                    "id": 978186964,
                    "created_at": "2021-11-24T20:10:03Z",
                    "updated_at": "2021-11-24T20:10:03Z",
                    "author_association": "MEMBER",
                    "body": "Hi @LuckyDenis, we're looking at this as a possible candidate for 2.27.0. There was some feedback left in July on the current proposal. Would you have time to rebase this change and address that?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/978186964/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005891849868930876,
                        "severe_toxicity": 0.00012334140774328262,
                        "obscene": 0.00017694311100058258,
                        "threat": 0.00012925892951898277,
                        "insult": 0.00017915073840413243,
                        "identity_attack": 0.00014374083548318595
                    }
                }
            ]
        },
        "125": {
            "html_url": "https://github.com/psf/requests/issues/5746",
            "id": 805400543,
            "number": 5746,
            "title": "content-type: text/csv does not apply UTF-8-decoding by default (RFC 7111 violation?)",
            "created_at": "2021-02-10T10:50:42Z",
            "updated_at": "2021-02-10T11:01:38Z",
            "closed_at": null,
            "body": "Created a test/repro/MWE sheet here with a cell containing the letter `\u00f6`: https://docs.google.com/spreadsheets/d/1q02F0AjDfCo_XlgFtT7HHU96emOcyf0PRQGKGoQTXCE/edit?usp=sharing\r\n\r\nWhen you HTTP GET `https://docs.google.com/spreadsheets/d/1q02F0AjDfCo_XlgFtT7HHU96emOcyf0PRQGKGoQTXCE/export?format=csv` Google generates and sends a CSV document with UTF-8-encoded text in the response body.\r\n\r\nFetching this URL with `requests` and accessing the response content with the `text` attribute reveals that `requests` does _not_ UTF-8-decode the response body bytes:\r\n\r\n```text\r\n$ python -c 'import requests; r=requests.get(\"https://docs.google.com/spreadsheets/d/1q02F0AjDfCo_XlgFtT7HHU96emOcyf0PRQGKGoQTXCE/export?format=csv\"); print(r.text)'\r\nfoo,bar,umlaut: \u00c3\u00b6\u00c3\u00b6\r\n```\r\n\r\nLibrary version:\r\n```\r\n$ pip list | grep requests\r\nrequests                 2.25.1\r\n```\r\n\r\n\r\n\r\nResponse headers (from a `curl -v ...`):\r\n\r\n```\r\n> GET /<snip> HTTP/2\r\n> Host: doc-14-2s-sheets.googleusercontent.com\r\n> user-agent: curl/7.69.1\r\n> accept: */*\r\n> \r\n{ [5 bytes data]\r\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\r\n{ [264 bytes data]\r\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\r\n{ [264 bytes data]\r\n* old SSL session ID is stale, removing\r\n{ [5 bytes data]\r\n* Connection state changed (MAX_CONCURRENT_STREAMS == 100)!\r\n} [5 bytes data]\r\n< HTTP/2 200 \r\n< content-type: text/csv\r\n< x-robots-tag: noindex, nofollow, nosnippet\r\n< cache-control: no-cache, no-store, max-age=0, must-revalidate\r\n< pragma: no-cache\r\n< expires: Mon, 01 Jan 1990 00:00:00 GMT\r\n< date: Wed, 10 Feb 2021 10:12:52 GMT\r\n< content-disposition: attachment; filename=\"<snip>.csv\"; filename*=UTF-8''<snip>.csv\r\n< access-control-allow-origin: *\r\n< access-control-expose-headers: Cache-Control,Content-Disposition,Content-Encoding,Content-Length,Content-Type,Date,Expires,Pragma,Server,Transfer-Encoding\r\n< content-security-policy: base-uri 'self';object-src 'self';report-uri https://docs.google.com/spreadsheets/cspreport;script-src 'nonce-+Qyt<snip>w' 'unsafe-inline' 'strict-dynamic' https: http: 'unsafe-eval';worker-src 'self'\r\n< content-security-policy: frame-ancestors 'self' https://docs.google.com\r\n< x-frame-options: ALLOW-FROM https://docs.google.com\r\n< x-content-type-options: nosniff\r\n< x-xss-protection: 1; mode=block\r\n< server: GSE\r\n< alt-svc: h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"\r\n< accept-ranges: none\r\n< vary: Accept-Encoding\r\n```\r\n\r\nSo, there is `content-type: text/csv`, i.e. no `'charset'` specification.\r\n\r\nI am not sure if [RFC 7111](https://tools.ietf.org/html/rfc7111) is the most recent / authoritative reference, but it says about the `text/csv` media type that\r\n\r\n```\r\n      The \"charset\" parameter specifies the charset employed by the CSV\r\n      content.  In accordance with RFC 6657 [RFC6657], the charset\r\n      parameter SHOULD be used, and if it is not present, UTF-8 SHOULD\r\n      be assumed as the default (this implies that US-ASCII CSV will\r\n      work, even when not specifying the \"charset\" parameter).  Any\r\n      charset defined by IANA for the \"text\" tree may be used in\r\n      conjunction with the \"charset\" parameter.\r\n```\r\n\r\n\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "jgehrcke",
                "id": 265630,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5746/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/776626744",
                    "id": 776626744,
                    "created_at": "2021-02-10T10:58:13Z",
                    "updated_at": "2021-02-10T10:58:13Z",
                    "author_association": "NONE",
                    "body": "Given this a quick stab at https://github.com/psf/requests/pull/5747. Would appreciate an initial review and opinions. Thanks!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/776626744/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jgehrcke",
                        "id": 265630,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005716375890187919,
                        "severe_toxicity": 0.00012664847599808127,
                        "obscene": 0.00018195270968135446,
                        "threat": 0.00013286648027133197,
                        "insult": 0.00017639831639826298,
                        "identity_attack": 0.0001404589565936476
                    }
                }
            ]
        },
        "126": {
            "html_url": "https://github.com/psf/requests/issues/5745",
            "id": 804678861,
            "number": 5745,
            "title": "HTTPDigestAuth uses quotes for algorithm and qop tokens of the Digest header",
            "created_at": "2021-02-09T15:53:28Z",
            "updated_at": "2021-02-09T15:53:28Z",
            "closed_at": null,
            "body": "The `HTTPDigestAuth.build_digest_header()` method produces the Digest header witch contains quoted strings for `algorithm` and `qop` tokens. E.g.:\r\n`\r\nDigest username=\"admin\", realm=\"server\", nonce=\"QScBItGtnPq4Dz3v25Tht4SlctJnsR\", uri=\"/api/v1/info\", response=\"e0d12a4b85789351a847c773e6f4b30e\", algorithm=\"MD5\", qop=\"auth\", nc=00000001, cnonce=\"0f905170a2cafe15\"`\r\n\r\nWhile according to [RFC 7616](https://tools.ietf.org/html/rfc7616) these tokens must not be quoted:\r\n`\r\nDigest username=\"admin\", realm=\"server\", nonce=\"QScBItGtnPq4Dz3v25Tht4SlctJnsR\", uri=\"/api/v1/info\", response=\"e0d12a4b85789351a847c773e6f4b30e\", algorithm=MD5, qop=auth, nc=00000001, cnonce=\"0f905170a2cafe15\"`\r\n\r\nBelow is the [corresponding part of the RFC](https://tools.ietf.org/html/rfc7616#section-3.4):\r\n\r\n_For historical reasons, a sender MUST only generate the quoted string syntax for the following parameters: username, realm, nonce, uri, response, cnonce, and opaque._\r\n\r\n_For historical reasons, a sender MUST NOT generate the quoted string syntax for the following parameters: algorithm, qop, and nc._\r\n\r\nThis can also be seen in [requests examples](https://tools.ietf.org/html/rfc7616#section-3.9) in the RFC.\r\n\r\nCurrent behavior may cause problems with some servers. The following subclass can be used as a temporary workaround:\r\n\r\n```\r\nclass FixedHTTPDigestAuth(HTTPDigestAuth):\r\n    def build_digest_header(self, method, url):\r\n        header = super().build_digest_header(method, url)\r\n        invalid_parts = ('algorithm', 'qop')\r\n        parts = header.split(', ')\r\n        for i, part in enumerate(parts):\r\n            if any(part.startswith(ip + '=') for ip in invalid_parts):\r\n                parts[i] = part.replace('\"', '')\r\n        header = ', '.join(parts)\r\n        return header\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "alex-che",
                "id": 4246686,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5745/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "127": {
            "html_url": "https://github.com/psf/requests/issues/5744",
            "id": 802720321,
            "number": 5744,
            "title": "urllib3 LocationParseError (label empty or too long) uncaught by requests",
            "created_at": "2021-02-06T15:06:05Z",
            "updated_at": "2021-02-20T09:37:35Z",
            "closed_at": null,
            "body": "When accessing an URL with a label with more than 63 characters, an `urllib3.exceptions.LocationParseError` (label empty or too long) is returned without being caught by requests. \r\nMaybe this is related to #4746?\r\n\r\n## Expected Result\r\n\r\nNo exception, or an exception raised by requests (maybe InvalidURL?).\r\n\r\n## Actual Result\r\n\r\nException is not caught by requests. \r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nrequests.get('http://1234567890123456789012345678901234567890123456789012345678901234.com')\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/adapters.py\", line 439, in send\r\n    resp = conn.urlopen(\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connectionpool.py\", line 699, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connectionpool.py\", line 394, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connection.py\", line 234, in request\r\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 1255, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 1301, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 1250, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 1010, in _send_output\r\n    self.send(msg)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 950, in send\r\n    self.connect()\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connection.py\", line 200, in connect\r\n    conn = self._new_conn()\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    conn = connection.create_connection(\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/util/connection.py\", line 69, in create_connection\r\n    return six.raise_from(\r\n  File \"<string>\", line 3, in raise_from\r\nurllib3.exceptions.LocationParseError: Failed to parse: '1234567890123456789012345678901234567890123456789012345678901234.com', label empty or too long\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.11-100.fc32.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010109f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.2\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}    \r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "cknabs",
                "id": 33416700,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5744/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/782595713",
                    "id": 782595713,
                    "created_at": "2021-02-20T09:37:35Z",
                    "updated_at": "2021-02-20T09:37:35Z",
                    "author_association": "NONE",
                    "body": "After sifting through similar issues/PR, it seems that this could be solved similarly to #2344, i.e., catch `urllib3.exceptions.LocationParseError` for every call to `urllib3.util.parse_url` and raise an `requests.exceptions.InvalidURL` instead. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/782595713/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cknabs",
                        "id": 33416700,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008179924916476011,
                        "severe_toxicity": 0.0001074872343451716,
                        "obscene": 0.00019633834017440677,
                        "threat": 0.0001091990852728486,
                        "insult": 0.00018098477448802441,
                        "identity_attack": 0.00013197652879171073
                    }
                }
            ]
        },
        "128": {
            "html_url": "https://github.com/psf/requests/issues/5743",
            "id": 802017200,
            "number": 5743,
            "title": "Loss of the cookie state when using max-age=0.",
            "created_at": "2021-02-05T09:48:37Z",
            "updated_at": "2021-02-06T16:43:22Z",
            "closed_at": null,
            "body": "Summary.\r\nLoss of the `cookie` state when receiving a response from the server containing the lifetime in the format `max-age=0`.\r\n\r\n## Expected Result\r\n\r\n```python\r\nimport requests\r\nr = requests.get('http://127.0.0.1:5000/expire')\r\n>>> r.headers\r\n{'Set-Cookie': 'test=test; Path=/; Max-Age=0', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '10', 'Server': 'Werkzeug/1.0.1 Python/3.8.7', 'Date': 'Fri, 05 Feb 2021 09:26:48 GMT'}\r\n>>> r.cookies\r\n<RequestsCookieJar[Cookie(version=0, name='test', value='test', port=None, port_specified=False, domain='127.0.0.1', domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=1612520808, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False)]>\r\n```\r\n\r\n## Actual Result\r\n\r\n```python\r\n>>> import requests\r\n>>> r = requests.get('http://127.0.0.1:5000/expire')\r\n>>> r.headers\r\n{'Set-Cookie': 'test=test; Path=/; Max-Age=0', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14', 'Server': 'Werkzeug/1.0.1 Python/3.8.7', 'Date': 'Fri, 05 Feb 2021 09:16:43 GMT'}\r\n>>> r.cookies\r\n<RequestsCookieJar[]>\r\n```\r\n\r\n## Reproduction Steps\r\n\r\napp.py\r\n```python\r\nfrom flask import Flask, make_response\r\n\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route('/expire')\r\ndef expire():\r\n    return \"Expired cookie\", {'Set-Cookie': 'test=test; Path=/; Max-Age=0'}\r\n```\r\nStart app: `FLASK_APP=app.py flask run -p 5000`\r\n\r\ntest.py\r\n```python\r\nimport requests\r\n\r\n\r\nr = requests.get('http://127.0.0.1:5000/expire')\r\nprint('headers:', r.headers)\r\nprint()\r\nprint('cookies:', r.cookies)\r\n```\r\n\r\noutput\r\n```bash\r\nheaders: {'Set-Cookie': 'test=test; Path=/; Max-Age=0', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14', 'Server': 'Werkzeug/1.0.1 Python/3.8.7', 'Date': 'Fri, 05 Feb 2021 09:40:32 GMT'}\r\n\r\ncookies: <RequestsCookieJar[]>\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```bash\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.8.0-41-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "CONTRIBUTOR",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "luckydenis",
                "id": 41421345,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5743/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/774504956",
                    "id": 774504956,
                    "created_at": "2021-02-06T16:43:21Z",
                    "updated_at": "2021-02-06T16:43:21Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Good evening.\r\nThe cookie state is deleted at this location.\r\nhttps://github.com/python/cpython/blob/39aeb9ff9064808b08ec629403edbc36a232369b/Lib/http/cookiejar.py#L1548-L1561",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/774504956/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "luckydenis",
                        "id": 41421345,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008230256498791277,
                        "severe_toxicity": 0.00010870653204619884,
                        "obscene": 0.0001803066406864673,
                        "threat": 0.00012007990153506398,
                        "insult": 0.00018376213847659528,
                        "identity_attack": 0.00013958322233520448
                    }
                }
            ]
        },
        "129": {
            "html_url": "https://github.com/psf/requests/pull/5735",
            "id": 796256743,
            "number": 5735,
            "title": "5677: Respect variable precedence in session",
            "created_at": "2021-01-28T18:44:04Z",
            "updated_at": "2022-01-03T15:25:21Z",
            "closed_at": null,
            "body": "- Move `Session#merge_environment_variables` from `Session#request` to `Session#send` to make it consistent\r\n- On `Session#send` change variable precedence to (higher precedence first) `kwargs` -> `session args` -> `environment`.",
            "author_association": "CONTRIBUTOR",
            "comments": 12,
            "state": "open",
            "user": {
                "login": "mateusduboli",
                "id": 1688249,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5735/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/792559731",
                    "id": 792559731,
                    "created_at": "2021-03-08T08:06:48Z",
                    "updated_at": "2021-03-08T08:06:48Z",
                    "author_association": "NONE",
                    "body": "I propose the following change at line:\r\nhttps://github.com/psf/requests/blob/913880c45a3a8c3bf6b298e9c38709cd95a9c97c/requests/sessions.py#L530\r\n\r\nReplace it by:\r\n\r\n```python\r\nproxies = proxies or self.proxies\r\n```\r\n\r\nThis change will make this hierarchy `kwargs` -> `session args` -> `environment` to be respected with no need to change anywhere else. Solving problems also with pip as discussed [here](https://github.com/pypa/pip/issues/9691#issuecomment-791608247) \r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/792559731/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "junqfisica",
                        "id": 23016078,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008259427268058062,
                        "severe_toxicity": 0.00010974902397720143,
                        "obscene": 0.00019717543909791857,
                        "threat": 0.00011815274774562567,
                        "insult": 0.00017773496801964939,
                        "identity_attack": 0.00013711609062738717
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/792624454",
                    "id": 792624454,
                    "created_at": "2021-03-08T09:40:31Z",
                    "updated_at": "2021-03-08T09:40:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I've added a test case, and changed the strategy.\r\n\r\nNow we are merging the session and request settings before we ever look into the environment, that way the precedence becomes more explicit.\r\n\r\nCan you test this patch with https://github.com/pypa/pip/issues/9691 @junqfisica ?\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/792624454/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mateusduboli",
                        "id": 1688249,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005656920839101076,
                        "severe_toxicity": 0.00012651184806600213,
                        "obscene": 0.0001799722231226042,
                        "threat": 0.0001275718241231516,
                        "insult": 0.00017679587472230196,
                        "identity_attack": 0.00014336795720737427
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/792631539",
                    "id": 792631539,
                    "created_at": "2021-03-08T09:52:20Z",
                    "updated_at": "2021-03-08T09:52:20Z",
                    "author_association": "NONE",
                    "body": "@mateusduboli Yes, your commit 57ddecdd2af7bf45f85f38cf63cc5d72de529336, also fixes the problem with [ pypa/pip#9691](https://github.com/pypa/pip/issues/9691#issue-823218500). :)\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/792631539/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 1,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "junqfisica",
                        "id": 23016078,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.004522234667092562,
                        "severe_toxicity": 0.00010276133252773434,
                        "obscene": 0.0004631663905456662,
                        "threat": 0.00014509227185044438,
                        "insult": 0.00031337974360212684,
                        "identity_attack": 0.00016932144353631884
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/792663672",
                    "id": 792663672,
                    "created_at": "2021-03-08T10:41:03Z",
                    "updated_at": "2021-03-08T10:45:32Z",
                    "author_association": "NONE",
                    "body": "> `proxies = proxies or self.proxies`\r\n\r\nin fact, the solutions of you two are similar: merging `func args` with `session.self` first, then with env.  \r\nand `mateusduboli` does more work: move all merging (not only proxies) to `merge_environment_settings()`, adjust the code sequence after merging so that `kwargs` will not be overwritten.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/792663672/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "CrazyBoyFeng",
                        "id": 1733254,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007213338394649327,
                        "severe_toxicity": 0.0001126694623962976,
                        "obscene": 0.0001821109908632934,
                        "threat": 0.00011928434105357155,
                        "insult": 0.0001778663572622463,
                        "identity_attack": 0.00013639690587297082
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/812461639",
                    "id": 812461639,
                    "created_at": "2021-04-02T09:57:28Z",
                    "updated_at": "2021-04-02T09:57:28Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@CrazyBoyFeng Do we need any additional review on this, so it can be merged?\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/812461639/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mateusduboli",
                        "id": 1688249,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008431531605310738,
                        "severe_toxicity": 0.00010384767665527761,
                        "obscene": 0.0001821523328544572,
                        "threat": 0.00010697637480916455,
                        "insult": 0.00018229619308840483,
                        "identity_attack": 0.00013298536941874772
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/812572576",
                    "id": 812572576,
                    "created_at": "2021-04-02T15:13:25Z",
                    "updated_at": "2021-04-02T15:13:25Z",
                    "author_association": "NONE",
                    "body": "> Do we need any additional review on this, so it can be merged?\r\n\r\nI used this fix with `pip`, and it works fine with the `--proxy` parameter.  \r\nI think it can be merged.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/812572576/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "CrazyBoyFeng",
                        "id": 1733254,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005656098364852369,
                        "severe_toxicity": 0.00012838077964261174,
                        "obscene": 0.00018765941786114126,
                        "threat": 0.00012613651051651686,
                        "insult": 0.00017710699466988444,
                        "identity_attack": 0.00014339065819513053
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/817142709",
                    "id": 817142709,
                    "created_at": "2021-04-10T14:10:41Z",
                    "updated_at": "2021-04-10T14:10:41Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@sigmavirus24, can you take a look at these changes?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/817142709/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mateusduboli",
                        "id": 1688249,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005915245274081826,
                        "severe_toxicity": 0.00012350852193776518,
                        "obscene": 0.0001785480708349496,
                        "threat": 0.00012390819028951228,
                        "insult": 0.00017653494433034211,
                        "identity_attack": 0.00014249134983401746
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/834306726",
                    "id": 834306726,
                    "created_at": "2021-05-07T11:54:49Z",
                    "updated_at": "2021-05-07T11:54:49Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt, can you maybe take a look at this PR before the next release?  We would really appreciate this bugfix included in the next available version of requests. Thank you.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/834306726/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tscheburaschka",
                        "id": 28730622,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006239735521376133,
                        "severe_toxicity": 0.00011903810809599236,
                        "obscene": 0.00018314956105314195,
                        "threat": 0.00012294638145249337,
                        "insult": 0.00017416942864656448,
                        "identity_attack": 0.00013665987353306264
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/926611716",
                    "id": 926611716,
                    "created_at": "2021-09-24T13:08:57Z",
                    "updated_at": "2021-09-24T13:08:57Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@nateprewitt thanks for taking a look at this!\r\n\r\nI'm wondering why this is a tagged as a `Breaking API Change`, I can understand that it should not go through a `patch` revision, but it does keeps the API as intended on the docs.\r\n\r\nI'm guessing if we not consider it as such it would be less hassle to merge it, could you clarify it better?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/926611716/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mateusduboli",
                        "id": 1688249,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005955268279649317,
                        "severe_toxicity": 0.00012132339179515839,
                        "obscene": 0.00018150806135963649,
                        "threat": 0.00012475706171244383,
                        "insult": 0.0001726288319332525,
                        "identity_attack": 0.00013652897905558348
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/929256660",
                    "id": 929256660,
                    "created_at": "2021-09-28T14:02:34Z",
                    "updated_at": "2021-09-28T14:02:34Z",
                    "author_association": "NONE",
                    "body": "This should be considered as a bug, I think.\r\nWhen there are both environment variables and argument of `requests.session` about the proxy, `requests` eventually takes the system environment variable. This is not the usual practice.\r\nIf this is not considered as a bug, then it needs to be answered: how to use `session` with a custom proxy argument when the environment variable `http_proxy` or `https_proxy` exists?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/929256660/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "CrazyBoyFeng",
                        "id": 1733254,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006447226041927934,
                        "severe_toxicity": 0.00012015733227599412,
                        "obscene": 0.0001818883465602994,
                        "threat": 0.0001252938964171335,
                        "insult": 0.0001744508190313354,
                        "identity_attack": 0.00014034207561053336
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/939367412",
                    "id": 939367412,
                    "created_at": "2021-10-09T21:58:57Z",
                    "updated_at": "2021-10-09T23:11:05Z",
                    "author_association": "MEMBER",
                    "body": "Hi @mateusduboli, the reason we have this marked as a breaking change is we're doing a pretty fundamental change to the Session API here. The last PR (#5888) that was introduced for this had some non-trivial impact that's made Requests 2.26.0 unusable for a number of our dependents. It arguably shouldn't have been merged to begin with.\r\n\r\nI know we've discussed the session precedence issue more than once previously, but I wasn't able to find actual issue numbers. `send` and `request` are not intended to function identically and trying to accomplish that breaks a few different workflows. `send` is intended to do almost nothing to the request and send the PreparedRequest exactly as it was created. This has drifted over the years, so it's no longer entirely true, but this change will make the situation worse.\r\n\r\nI think we need to reevaluate how these interfaces actually operate going into a new major version. Until then though, this has been the behavior of `send` for 7+ years, and there's a lot of infrastructure that will stop behaving correctly because of this.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/939367412/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005910052568651736,
                        "severe_toxicity": 0.00012477621203288436,
                        "obscene": 0.00018749736773315817,
                        "threat": 0.00012523644545581192,
                        "insult": 0.00017287310038227588,
                        "identity_attack": 0.00014148795162327588
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/939373868",
                    "id": 939373868,
                    "created_at": "2021-10-09T23:06:08Z",
                    "updated_at": "2021-10-09T23:07:48Z",
                    "author_association": "MEMBER",
                    "body": ">  If this is not considered as a bug, then it needs to be answered: how to use session with a custom proxy argument when the environment variable http_proxy or https_proxy exists?\r\n\r\n@CrazyBoyFeng I'm reading over the pip issue more and while I agree this far from optimal, as I've stated above, it's kind of where we are. We would _like_ to fix this but can't currently.\r\n\r\nFor the interim, I'm failing to see why `pip` cannot handle this the same way they do timeout. Requests 2.x was specifically designed to ignore Session.timeout because the maintainers at the time didn't agree with it being a session level property. To get around this, Pip created its own `timeout` attribute and sets it on each request before calling into Requests. The same thing can be done with proxies. This doesn't require a patch or change to the vendored code, and produces the desired outcome.\r\n\r\ne.g.\r\n\r\nhttps://github.com/pypa/pip/blob/3ab760aaa17fdc7f00c468a529241164b070b353/src/pip/_internal/network/session.py#L443-L449\r\n\r\nWould become:\r\n```python\r\ndef request(self, method, url, *args, **kwargs):\r\n    # type: (str, str, *Any, **Any) -> Response\r\n    # Allow setting a default timeout on a session\r\n    kwargs.setdefault(\"timeout\", self.timeout)\r\n+   if self.proxies:\r\n+       kwargs.setdefault(\"proxies\", self.proxies)\r\n\r\n    # Dispatch the actual request\r\n    return super().request(method, url, *args, **kwargs)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/939373868/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009537243167869747,
                        "severe_toxicity": 0.00010619225213304162,
                        "obscene": 0.00020206971385050565,
                        "threat": 0.00011531430209288374,
                        "insult": 0.0001783908373909071,
                        "identity_attack": 0.0001376224827254191
                    }
                }
            ]
        },
        "130": {
            "html_url": "https://github.com/psf/requests/issues/5731",
            "id": 792638349,
            "number": 5731,
            "title": "no/no_proxy is not honoured",
            "created_at": "2021-01-23T19:59:26Z",
            "updated_at": "2024-02-06T17:54:56Z",
            "closed_at": null,
            "body": "I guess PRs are overlooked without an Issues. It's about #5596 and the way handle no_proxy. Since urllib handles `no_proxy` properly, it's the logic in requests that messes with the env in a seemingly twisted way.\r\n\r\n## Expected Result\r\n\r\nThe ability to use no_proxy vairable via OS and function arguments.\r\n\r\n## Actual Result\r\n\r\nOnly OS `no_proxy` ENV is being processed. Uncer certain conditions that were described multiple times in the `no_proxy` issues.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.9.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.9\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.18-10-pve\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010107f\",\r\n    \"version\": \"19.1.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.23.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010107f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.9\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n",
            "author_association": "NONE",
            "comments": 8,
            "state": "open",
            "user": {
                "login": "Suika",
                "id": 2320837,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5731/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1160633176",
                    "id": 1160633176,
                    "created_at": "2022-06-20T16:15:12Z",
                    "updated_at": "2022-06-20T16:37:29Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I have the same issue: `no_proxy` is ignored in a simple `requests.get()` call:\r\n```\r\nimport requests\r\n\r\nproxies = {\r\n  'http': 'proxy.example.com',\r\n  'no_proxy': 'google.com'\r\n}\r\n\r\nrequests.get('http://google.com/', proxies=proxies)\r\n```\r\n\r\nWith 2.28.0 this yields:\r\n\r\n```\r\nrequests.exceptions.ProxyError: HTTPConnectionPool(host='proxy.example.com', port=80): Max retries exceeded with url: http://google.com/ (Caused by ProxyError('Cannot connect to proxy.', NewConnectionError('<urllib3.connection.HTTPConnection object at 0x10418f5b0>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known')))\r\n```\r\n\r\nSet the following in bash:\r\n```\r\nexport http_proxy=\"proxy.example.com\"\r\nexport no_proxy=\"google.com\"\r\n```\r\n\r\nand the `requests.get('http://google.com/')` works just fine.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1160633176/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "RichieB2B",
                        "id": 1461970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009066318743862212,
                        "severe_toxicity": 0.0001092089805752039,
                        "obscene": 0.0002072169736493379,
                        "threat": 0.00011031077156076208,
                        "insult": 0.0001784231571946293,
                        "identity_attack": 0.00013791187666356564
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1160820882",
                    "id": 1160820882,
                    "created_at": "2022-06-20T20:25:17Z",
                    "updated_at": "2022-06-20T20:25:17Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Where is it documented that what you believe is a big should work? At no point has this library supported what you've made up",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1160820882/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007221554405987263,
                        "severe_toxicity": 0.00011266044020885602,
                        "obscene": 0.0001675509411143139,
                        "threat": 0.00011873135372297838,
                        "insult": 0.0001741568121360615,
                        "identity_attack": 0.0001413438149029389
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1160874826",
                    "id": 1160874826,
                    "created_at": "2022-06-20T21:52:02Z",
                    "updated_at": "2022-06-20T22:50:25Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "From the [2.14.0 release history](https://github.com/psf/requests/blob/main/HISTORY.md#2140-2017-05-09) \"Improvements\" section:\r\n```\r\n- It is now possible to pass ``no_proxy`` as a key to the ``proxies`` dictionary to provide handling similar to the ``NO_PROXY`` environment variable.\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1160874826/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "RichieB2B",
                        "id": 1461970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006081527681089938,
                        "severe_toxicity": 0.00012137083103880286,
                        "obscene": 0.00018660773639567196,
                        "threat": 0.00011885777348652482,
                        "insult": 0.0001743631873978302,
                        "identity_attack": 0.00013658353418577462
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1161154925",
                    "id": 1161154925,
                    "created_at": "2022-06-21T02:49:57Z",
                    "updated_at": "2022-06-21T02:49:57Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So something from ages ago that is likely not documented elsewhere? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1161154925/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006543791387230158,
                        "severe_toxicity": 0.0001181477855425328,
                        "obscene": 0.00017971156921703368,
                        "threat": 0.00012053901446051896,
                        "insult": 0.00017907029541675001,
                        "identity_attack": 0.00013906975800637156
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1161339113",
                    "id": 1161339113,
                    "created_at": "2022-06-21T06:59:08Z",
                    "updated_at": "2022-06-21T06:59:08Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It all comes down to feature request https://github.com/psf/requests/issues/2817 and the implementation https://github.com/psf/requests/commit/85400d8d6751071ef78f042d1efa72bdcf76cc0e not actually working. If you think this is not a bug I'd happily create a documentation PR instead.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1161339113/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "RichieB2B",
                        "id": 1461970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007746893679723144,
                        "severe_toxicity": 0.00011333235306665301,
                        "obscene": 0.00019192806212231517,
                        "threat": 0.0001227024185936898,
                        "insult": 0.0001760496525093913,
                        "identity_attack": 0.00013483993825502694
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1162215349",
                    "id": 1162215349,
                    "created_at": "2022-06-21T19:12:33Z",
                    "updated_at": "2022-06-21T19:12:33Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I did some more testing and was able to make an exception using the per-host proxy settings:\r\n```\r\nproxies = {\r\n  'http': 'http://proxy.example.com',\r\n  'http://google.com': '',\r\n}\r\n```\r\nThis is more flexible than the `no_proxy` mechanism so I can live with it not working as described. \r\n\r\nI've made a PR to clarify this in the documentation at #6172 ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1162215349/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "RichieB2B",
                        "id": 1461970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005830492009408772,
                        "severe_toxicity": 0.0001314980472670868,
                        "obscene": 0.0002084867301164195,
                        "threat": 0.00012306790449656546,
                        "insult": 0.0001784510532161221,
                        "identity_attack": 0.00014186339103616774
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1823929852",
                    "id": 1823929852,
                    "created_at": "2023-11-23T07:45:13Z",
                    "updated_at": "2023-11-26T06:57:50Z",
                    "author_association": "NONE",
                    "body": "## `no_proxy` doesn't work\r\n\r\n```bash\r\npython3 -c 'import requests; print(requests.get(\"http://ipinfo.io/ip\", proxies={\"no_proxy\":\"ipinfo.io\",\"http\":\"http://myproxy:3128\"}).text)'\r\n```\r\n\r\n## `no_proxy` works\r\n\r\n```bash\r\nexport no_proxy=ipinfo.io\r\nexport http_proxy=http://myproxy:3128\r\n\r\npython3 -c 'import requests; print(requests.get(\"http://ipinfo.io/ip\").text)'\r\n```\r\n\r\n----\r\n\r\nThe difference is caused by this `if` statement:\r\n\r\n```python\r\n        if \"proxies\" not in kwargs:\r\n            kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\r\n```\r\n\r\n`no_proxy` is handled by `resolve_proxies()`\r\n\r\nhttps://github.com/psf/requests/blob/main/src/requests/sessions.py#L683-L684",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1823929852/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vimagick",
                        "id": 6779585,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001177838072180748,
                        "severe_toxicity": 0.00010746079351520166,
                        "obscene": 0.00023699720622971654,
                        "threat": 0.00010634325008140877,
                        "insult": 0.00018089523655362427,
                        "identity_attack": 0.00014277247828431427
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1930373097",
                    "id": 1930373097,
                    "created_at": "2024-02-06T17:03:07Z",
                    "updated_at": "2024-02-06T17:54:56Z",
                    "author_association": "NONE",
                    "body": "EDIT: I mistakenly thought that this was working in 2.25.0, but this was because in 2.25.0 the `send` operation was not even using the OS env settings at all (as opposed to the `post` function). I therefore wonder if the following analysis is even relevant ? \r\n\r\nIt still seems from the code that the `no_proxy` variable is not read when a `send` (and not a `post`) is performed. This is because `resolve_proxies` (where the issue is) is only used in `send` and not in `post`. `post` relies on `request`, which as opposed to `send`, uses `merge_environment_settings` for proxy resolution and not `resolve_proxies`. This is not very consistent, maybe something to improve ?\r\n\r\n------\r\n\r\nI ran into this today\r\n\r\n> Only OS no_proxy ENV is being processed.\r\n\r\nActually, in `requests==2.31.0` the OS env variable `no_proxy` is not processed correctly anymore. ~~It was working correctly in `2.25.0` though, I just checked. So this is a regression.~~ It seems to be related to the fact that once `get_environ_proxies()` is called, the `no_proxy` part of its contents is not returned.\r\n\r\nhttps://github.com/psf/requests/blob/4f3f189d6b7d2a19ff73dfb4a3e39713d4abe01a/src/requests/utils.py#L876-L882\r\n\r\nYou can see that `new_proxies` \r\n\r\n - is updated with the entry in `environ_proxies` corresponding to the `scheme`, \r\n - but is not updated with the `no_proxy` contents if any in `environ_proxies`\r\n\r\nShould I open a separate issue ?\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1930373097/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "smarie",
                        "id": 3236794,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007326824124902487,
                        "severe_toxicity": 0.00011523768625920638,
                        "obscene": 0.00019938111654482782,
                        "threat": 0.00011439749505370855,
                        "insult": 0.0001724524627206847,
                        "identity_attack": 0.00013574362674262375
                    }
                }
            ]
        },
        "131": {
            "html_url": "https://github.com/psf/requests/issues/5726",
            "id": 791814139,
            "number": 5726,
            "title": "Possible memory leaking when combining session, threading and proxies",
            "created_at": "2021-01-22T08:42:05Z",
            "updated_at": "2023-11-03T02:03:03Z",
            "closed_at": null,
            "body": "I it helps I got error `OSError: [Errno 24] Too many open files` when running script, not sure if it is related with memory leak, I solved setting to 10000 `ulimit -n 10000`\r\n\r\n## Expected Result\r\n\r\nRAM usage kept under reasonable limits\r\n\r\n## Actual Result\r\n\r\nRAM usage doesn't stop growing\r\n\r\n## Reproduction Steps\r\n\r\nI usually wouldn't be posting target website or the proxy credentials, but in this case I think they are needed for reproduce the bug.\r\n\r\n```\r\nimport requests\r\nfrom threading import Thread\r\nfrom time import sleep\r\n\r\nsession = requests.Session()\r\nfrom memory_profiler import profile\r\nfrom random import randrange\r\nfinished = False\r\n\r\n\r\ndef get_proxy():\r\n    proxy = \"http://lum-customer-hl_f53c879b-zone-static-session-\" + str(randrange(999999)) + \":au2d3rzz8tut@zproxy.lum-superproxy.io:22225\"\r\n    return {\r\n        \"http\": proxy,\r\n        \"https\": proxy\r\n    }\r\n\r\n\r\ndef make_request(url):\r\n    session.get(url, proxies=get_proxy())\r\n\r\ndef worker():\r\n    while True:\r\n        if finished: return\r\n        make_request(\"http://1000imagens.com/\")\r\n\r\n\r\n@profile\r\ndef main():\r\n    global finished\r\n    threads = []\r\n    for i in range(2):\r\n        t = Thread(target=worker)\r\n        t.start()\r\n        threads.append(t)\r\n\r\n    count = 0\r\n    while True:\r\n        sleep(1)\r\n        count += 1\r\n        if count == 300:\r\n            finished = True\r\n            return\r\n\r\nmain()\r\n```\r\n\r\n## System Information\r\n\r\n    $ python3.9 -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-134-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n```\r\n# lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.5 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n```\r\n\r\nI tried with python versions 3.6, 3.8 and 3.9 and found no difference.\r\n\r\n## Output of memory_profiler\r\n```\r\nLine #    Mem usage    Increment  Occurences   Line Contents\r\n============================================================\r\n    31     23.8 MiB     23.8 MiB           1   @profile\r\n    32                                         def main():\r\n    33                                             global finished\r\n    34     23.8 MiB      0.0 MiB           1       threads = []\r\n    35     23.8 MiB      0.0 MiB           3       for i in range(2):\r\n    36     23.8 MiB      0.0 MiB           2           t = Thread(target=worker)\r\n    37     23.8 MiB      0.0 MiB           2           t.start()\r\n    38     23.8 MiB      0.0 MiB           2           threads.append(t)\r\n    39\r\n    40     23.8 MiB      0.0 MiB           1       count = 0\r\n    41                                             while True:\r\n    42    547.1 MiB    523.2 MiB         300           sleep(1)\r\n    43    547.1 MiB      0.0 MiB         300           count += 1\r\n    44    547.1 MiB      0.0 MiB         300           if count == 300:\r\n    45    547.1 MiB      0.0 MiB           1               finished = True\r\n    46    547.1 MiB      0.0 MiB           1               return\r\n```\r\n\r\nAfter 5 minutes it eats +500MB ram. If I leave it running indefinitely it would consume all available ram and would be killed. \r\n\r\n",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "jaimecoj",
                "id": 9117697,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5726/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/765244909",
                    "id": 765244909,
                    "created_at": "2021-01-22T08:52:12Z",
                    "updated_at": "2021-01-22T08:52:12Z",
                    "author_association": "NONE",
                    "body": "If I add `verify=False` to same script it doesn't leak, so it seems related to SSL verification\r\n\r\n```\r\nLine #    Mem usage    Increment  Occurences   Line Contents\r\n============================================================\r\n    31     23.9 MiB     23.9 MiB           1   @profile\r\n    32                                         def main():\r\n    33                                             global finished\r\n    34     23.9 MiB      0.0 MiB           1       threads = []\r\n    35     24.2 MiB      0.0 MiB           3       for i in range(2):\r\n    36     24.1 MiB      0.0 MiB           2           t = Thread(target=worker)\r\n    37     24.2 MiB      0.3 MiB           2           t.start()\r\n    38     24.2 MiB      0.0 MiB           2           threads.append(t)\r\n    39\r\n    40     24.2 MiB      0.0 MiB           1       count = 0\r\n    41                                             while True:\r\n    42     67.5 MiB     43.3 MiB         300           sleep(1)\r\n    43     67.5 MiB      0.0 MiB         300           count += 1\r\n    44     67.5 MiB      0.0 MiB         300           if count == 300:\r\n    45     67.5 MiB      0.0 MiB           1               finished = True\r\n    46     67.5 MiB      0.0 MiB           1               return\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/765244909/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jaimecoj",
                        "id": 9117697,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.009083461947739124,
                        "severe_toxicity": 0.00011555845412658527,
                        "obscene": 0.0010039795888587832,
                        "threat": 0.00018720512161962688,
                        "insult": 0.00046084701898507774,
                        "identity_attack": 0.00017705550999380648
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/766088241",
                    "id": 766088241,
                    "created_at": "2021-01-23T14:30:59Z",
                    "updated_at": "2021-01-23T14:30:59Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Yes. Every report of a memory leak we've had has been related to using TLS. We've never been able to track it further than the SSL library",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/766088241/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006677461205981672,
                        "severe_toxicity": 0.00011594687384786084,
                        "obscene": 0.00017822932568378747,
                        "threat": 0.0001210144255310297,
                        "insult": 0.00017163682787213475,
                        "identity_attack": 0.00013824064808432013
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/878161847",
                    "id": 878161847,
                    "created_at": "2021-07-12T10:26:19Z",
                    "updated_at": "2021-07-12T10:32:11Z",
                    "author_association": "NONE",
                    "body": "when using random proxy, session.get_adapter(\"http://\").proxy_manager dnot remove  ProxyManager Object.\r\ntoo many ProxyManger object  to memory leaking.\r\nsession = requests.session()\r\nfor x in range(1, 100):\r\n    try:\r\n        session.get(\"http://test.comaaa\", proxies={\"http\": \"http://{}:{}\".format(x,x)}, timeout=0.1)\r\n    except:\r\n        continue\r\nprint(session.get_adapter(\"http://\").proxy_manager)\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/878161847/reactions",
                        "total_count": 2,
                        "+1": 1,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "shukai",
                        "id": 1468514,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008986934553831816,
                        "severe_toxicity": 0.00010742298036348075,
                        "obscene": 0.00020992012287024409,
                        "threat": 0.00010796119022415951,
                        "insult": 0.00017722812481224537,
                        "identity_attack": 0.00013344062608666718
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1016268319",
                    "id": 1016268319,
                    "created_at": "2022-01-19T09:56:31Z",
                    "updated_at": "2022-01-19T09:56:31Z",
                    "author_association": "NONE",
                    "body": "+1 same issue here",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1016268319/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "timreibe",
                        "id": 38082956,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007877369062043726,
                        "severe_toxicity": 0.00010886088421102613,
                        "obscene": 0.00018961867317557335,
                        "threat": 0.00010741355799837038,
                        "insult": 0.00017447693971917033,
                        "identity_attack": 0.00013600935926660895
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1158773759",
                    "id": 1158773759,
                    "created_at": "2022-06-17T11:21:19Z",
                    "updated_at": "2022-06-17T11:21:19Z",
                    "author_association": "NONE",
                    "body": "+1 same issue here",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1158773759/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ll125498a",
                        "id": 55335051,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007877369062043726,
                        "severe_toxicity": 0.00010886088421102613,
                        "obscene": 0.00018961867317557335,
                        "threat": 0.00010741355799837038,
                        "insult": 0.00017447693971917033,
                        "identity_attack": 0.00013600935926660895
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1788361230",
                    "id": 1788361230,
                    "created_at": "2023-11-01T03:44:15Z",
                    "updated_at": "2023-11-01T03:44:15Z",
                    "author_association": "NONE",
                    "body": "> when using random proxy, session.get_adapter(\"http://\").proxy_manager dnot remove ProxyManager Object. too many ProxyManger object to memory leaking. session = requests.session() for x in range(1, 100): try: session.get(\"http://test.comaaa\", proxies={\"http\": \"http://{}:{}\".format(x,x)}, timeout=0.1) except: continue print(session.get_adapter(\"http://\").proxy_manager)\r\n\r\nsure, at this method **requests.adapters.HTTPAdapter.proxy_manager_for()**  when using proxy, **manager = self.proxy_manager[proxy] = proxy_from_url(...)**,this is a cache, here every random proxy comes into self.proxy_manager(a dict), when using a session, this proxy_manager won't clear its' values and become bigger to leak memory.   To solve this, we need to pop values in it manually?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1788361230/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "yoursock",
                        "id": 38520161,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011927844025194645,
                        "severe_toxicity": 0.00010248526814393699,
                        "obscene": 0.00022780556173529476,
                        "threat": 0.00010855031723622233,
                        "insult": 0.0001818545424612239,
                        "identity_attack": 0.00013411710096988827
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1789956552",
                    "id": 1789956552,
                    "created_at": "2023-11-02T02:21:31Z",
                    "updated_at": "2023-11-03T02:03:03Z",
                    "author_association": "NONE",
                    "body": "> > when using random proxy, session.get_adapter(\"http://\").proxy_manager dnot remove ProxyManager Object. too many ProxyManger object to memory leaking. session = requests.session() for x in range(1, 100): try: session.get(\"http://test.comaaa\", proxies={\"http\": \"http://{}:{}\".format(x,x)}, timeout=0.1) except: continue print(session.get_adapter(\"http://\").proxy_manager)\r\n> \r\n> sure, at this method **requests.adapters.HTTPAdapter.proxy_manager_for()** when using proxy, **manager = self.proxy_manager[proxy] = proxy_from_url(...)**,this is a cache, here every random proxy comes into self.proxy_manager(a dict), when using a session, this proxy_manager won't clear its' values and become bigger to leak memory. To solve this, we need to pop values in it manually?\r\n\r\nHere's my solution:  use **self.session = requests.sessions.Session()** to handle cookies for website's login, use **with self.session.get(url, headers=headers, proxies=self.proxies, ...) as self.response:** to ensure response closed after request, and then at the method that changes the **self.proxies**,  use **self.session.get_adapter(\"https://\").proxy_manager.clear()** to clear the proxy_maneger's cache. This works for me.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1789956552/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "yoursock",
                        "id": 38520161,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001871902379207313,
                        "severe_toxicity": 0.00010375978308729827,
                        "obscene": 0.0003018032293766737,
                        "threat": 0.0001131978933699429,
                        "insult": 0.00020380731439217925,
                        "identity_attack": 0.00013865304936189204
                    }
                }
            ]
        },
        "132": {
            "html_url": "https://github.com/psf/requests/issues/5725",
            "id": 791526254,
            "number": 5725,
            "title": "Support for logging is abysmal, and documentation is missing",
            "created_at": "2021-01-21T22:03:23Z",
            "updated_at": "2022-02-21T22:54:10Z",
            "closed_at": null,
            "body": "Attempting to change logging for requests is very complicated, can only be done application-wide (I think), and the documentation is missing.\r\n\r\nGoogle finds many incorrect suggestions (mainly pointing to readthedocs documentation of requests version 0.x), the only workable information I found was at this stack overflow thread: https://stackoverflow.com/questions/10588644/how-can-i-see-the-entire-http-request-thats-being-sent-by-my-python-application\r\n\r\nAs a first step it would be good if the information from this thread (insofar as it is still correct) was included in the documentation somewhere.\r\n\r\nBut it would be a lot nicer if there was easier support for logging, possibly through a toolbelt module or something. Controlling logging on a fine-grained scale is vital, especially when you are trying to debug things like SSL-related errors (which are rather unintelligible in their own right) in a large scale application.\r\n\r\nI understand that part of the problem is with urllib3, but I guess I have to start somewhere.\r\n\r\nAnd I'm willing to help, if personpower is an issue.",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "jackjansen",
                "id": 4665100,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5725/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/831075332",
                    "id": 831075332,
                    "created_at": "2021-05-03T07:22:39Z",
                    "updated_at": "2021-05-03T07:22:39Z",
                    "author_association": "NONE",
                    "body": "I guess nobody would mind if information from https://docs.python-requests.org/en/master/api/#api-changes will get its own Debugging chapter.\r\n\r\nMerging the actual code into helper method might not be accepted as that will lead to many pull requests with different formats that people want. For example, sometimes I want HAR dump (#16) to compare with browser, sometimes to compare to `curl` output, and sometimes colorful thing like `httpie -v`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/831075332/reactions",
                        "total_count": 2,
                        "+1": 1,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "abitrolly",
                        "id": 8781107,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000637155375443399,
                        "severe_toxicity": 0.00011921032273676246,
                        "obscene": 0.00018166113295592368,
                        "threat": 0.0001222146674990654,
                        "insult": 0.00017364710220135748,
                        "identity_attack": 0.00013790438242722303
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1043786999",
                    "id": 1043786999,
                    "created_at": "2022-02-18T02:54:54Z",
                    "updated_at": "2022-02-18T02:54:54Z",
                    "author_association": "NONE",
                    "body": "I think it's important to support logging. There are many code like this where I use requests:\r\n```\r\nres = requets.post(url, data) \r\nif res.status_code >= 400:\r\n    logger.error(res.text)\r\nres.raise_for_status()\r\n```\r\n\r\nI think the `raise_for_status` should get the requests logger and log the error response.\r\n\r\nFurther more, the method should add parameter like `check=True` as [subprocess](https://docs.python.org/3/library/subprocess.html) did.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1043786999/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ramwin",
                        "id": 17930851,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005887723527848721,
                        "severe_toxicity": 0.00012532986875157803,
                        "obscene": 0.0001916610635817051,
                        "threat": 0.00012624131340999156,
                        "insult": 0.00017211718659382313,
                        "identity_attack": 0.00013878360914532095
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1047280130",
                    "id": 1047280130,
                    "created_at": "2022-02-21T22:54:09Z",
                    "updated_at": "2022-02-21T22:54:09Z",
                    "author_association": "NONE",
                    "body": "@ramwin as the OP of this issue I think your problem is completely different: you want help from requests to make it easier to do logging for your own application.\r\n\r\nThis report is about logging what requests itself is doing internally, to debug internal issues inside requests (or, more likely, in my code using requests or in the server that requests is communicating with).\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1047280130/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jackjansen",
                        "id": 4665100,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007049472187645733,
                        "severe_toxicity": 0.00011460003588581458,
                        "obscene": 0.00017608440248295665,
                        "threat": 0.00011989340418949723,
                        "insult": 0.0001771597017068416,
                        "identity_attack": 0.00013892209972254932
                    }
                }
            ]
        },
        "133": {
            "html_url": "https://github.com/psf/requests/issues/5714",
            "id": 781373560,
            "number": 5714,
            "title": "Inconsistent behavior after redirects when passing cookies directly",
            "created_at": "2021-01-07T14:57:10Z",
            "updated_at": "2021-01-07T23:40:23Z",
            "closed_at": null,
            "body": "I have noticed that cookies passed directly (no session) behave strangely. When passed as the `cookie` argument, cookies are persisted after all redirects (even cross-domain and when expired explicitly).  When passed as the `Cookie` header, the header is dropped after any redirect. \r\n\r\nI came across this behavior when discussing the same issue for the `httpx` library (https://github.com/encode/httpx/issues/1404). I do not know whether this behavior is intended. If it is, I would be glad for an explanation behind this design choice.\r\n\r\n## Expected Result\r\n\r\nI would expect cookies passed as the `cookie` argument to work the same way as if a single-use session was used, and the `Cookie` header to be passed regardless of redirects.\r\n\r\n## Actual Result\r\n\r\n`cookie` argument cookies are always passed (regardless of being expired or the redirect being cross-domain), while `Cookie` header cookies are always dropped (even on same-domain redirects).\r\n\r\n## Reproduction Steps\r\n\r\nServer:\r\n```python\r\nimport flask\r\napp = flask.Flask(__name__)\r\n\r\n@app.route('/r')\r\ndef r():\r\n    return \"yes\" if \"test\" in flask.request.cookies else \"no\"\r\n\r\n@app.route('/same_domain_redirect')\r\ndef same_domain_redirect():\r\n    return flask.redirect(\"/r\", code=302)\r\n\r\n@app.route('/cross_domain_redirect')\r\ndef cross_domain_redirect():\r\n    return flask.redirect(\"http://localhost:5000/r\", code=302)\r\n\r\n@app.route('/same_domain_redirect_expire')\r\ndef same_domain_redirect_expire():\r\n    resp = flask.redirect(\"/r\", code=302)\r\n    resp.set_cookie('test', '', expires=0)\r\n    return resp\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\n```\r\n\r\nClient:\r\n```python\r\nimport requests\r\n\r\nprint(requests.get(\"http://127.0.0.1:5000/same_domain_redirect\", cookies={ \"test\": \"test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/cross_domain_redirect\", cookies={ \"test\": \"test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/same_domain_redirect_expire\", cookies={ \"test\": \"test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/same_domain_redirect\", headers={ \"Cookie\": \"test=test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/cross_domain_redirect\", headers={ \"Cookie\": \"test=test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/same_domain_redirect_expire\", headers={ \"Cookie\": \"test=test\" }).content)\r\n```\r\n\r\n## System Information\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010107f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.2\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "JanPokorny",
                "id": 4580066,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5714/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/756284736",
                    "id": 756284736,
                    "created_at": "2021-01-07T18:08:01Z",
                    "updated_at": "2021-01-07T18:08:01Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This is expected behaviour as the `cookies` argument doesn't provide a domain attribute for us to check. I've discouraged this usage in the past and even started building something to make handling cookies (and then passing that to Requests) more sensible (such that it would be harder to do this here) but it's incomplete",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/756284736/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006341106491163373,
                        "severe_toxicity": 0.00012059591972501948,
                        "obscene": 0.0001797326549421996,
                        "threat": 0.00012583281204570085,
                        "insult": 0.00017398518684785813,
                        "identity_attack": 0.00014104493311606348
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/756288340",
                    "id": 756288340,
                    "created_at": "2021-01-07T18:14:46Z",
                    "updated_at": "2021-01-07T18:14:46Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 So why is the Cookie header being cleared? I would expect that cookies passed as the `cookies` argument to have the same behavior as directly passing the `Cookie` header, whatever that behavior is.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/756288340/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "JanPokorny",
                        "id": 4580066,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006643900414928794,
                        "severe_toxicity": 0.00011714845459209755,
                        "obscene": 0.00018087384523823857,
                        "threat": 0.00011839602666441351,
                        "insult": 0.00017785787349566817,
                        "identity_attack": 0.0001381493202643469
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/756295948",
                    "id": 756295948,
                    "created_at": "2021-01-07T18:27:27Z",
                    "updated_at": "2021-01-07T18:27:27Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So it's a semantic difference. If you pass `auth=ClassInheritingFromAuthBase` we also behave differently from passing `headers={\"Authorization\": \"...\"}`. The behaviour for scrubbing the header provided by the user that contains sensitive information is a security precaution. Unfortunately the cookies behaviour has been cemented since 0.x releases and the cookies parameter is just a short-cut to pain and misery. Luckily, in our understanding, exceedingly few people use it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/756295948/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0035255069378763437,
                        "severe_toxicity": 9.282663086196408e-05,
                        "obscene": 0.00033370734308846295,
                        "threat": 0.00011601222649915144,
                        "insult": 0.00026707813958637416,
                        "identity_attack": 0.00015613606956321746
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/756446952",
                    "id": 756446952,
                    "created_at": "2021-01-07T23:24:04Z",
                    "updated_at": "2021-01-07T23:24:04Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 I understand. I ask this because I've been affected by an ugly bug that resulted from a different behavior of `requests` and `httpx`, and there's currently a discussion happening in https://github.com/encode/httpx/issues/1404 about what should be the \"correct\" behavior.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/756446952/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "JanPokorny",
                        "id": 4580066,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006448205676861107,
                        "severe_toxicity": 0.00012004566815448925,
                        "obscene": 0.00018426377209834754,
                        "threat": 0.0001219457553816028,
                        "insult": 0.0001736908161547035,
                        "identity_attack": 0.00014124102017376572
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/756453144",
                    "id": 756453144,
                    "created_at": "2021-01-07T23:40:23Z",
                    "updated_at": "2021-01-07T23:40:23Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "\"correct\" would be `cookies={\"foo\": \"bar\"}` is great for testing things but an awful pattern for security in general (`cookies=SomeCookieJarPleaseGodNotTheStdlib(...)`). `Cookie: foo=bar` headers set on a request should be assumed to be for a single domain and redirects that end up on HTTP (I can see the case for http -> http not removing the header, but it's _safer_ to remove it), or domain (even to a subdomain) need to remove the header because you can't be 100% certain it's intended for any other requests like that.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/756453144/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007913566078059375,
                        "severe_toxicity": 0.00011072387860622257,
                        "obscene": 0.00018933847604785115,
                        "threat": 0.00011657734285108745,
                        "insult": 0.0001739666040521115,
                        "identity_attack": 0.0001367498334730044
                    }
                }
            ]
        },
        "134": {
            "html_url": "https://github.com/psf/requests/issues/5709",
            "id": 774742813,
            "number": 5709,
            "title": "Cookies are lost on 307 redirects",
            "created_at": "2020-12-25T14:42:22Z",
            "updated_at": "2020-12-25T14:58:28Z",
            "closed_at": null,
            "body": "When I submit a request, I get a 307 response and a cookie. But when the request is repeated, the cookie is not added.\r\n\r\nAdded request logging:\r\n```\r\ntry:\r\n    import http.client as http_client\r\nexcept ImportError:\r\n    # Python 2\r\n    import httplib as http_client\r\nhttp_client.HTTPConnection.debuglevel = 1\r\n\r\n# You must initialize logging, otherwise you'll not see debug output.\r\nimport logging\r\nlogging.basicConfig()\r\nlogging.getLogger().setLevel(logging.DEBUG)\r\nrequests_log = logging.getLogger(\"requests.packages.urllib3\")\r\nrequests_log.setLevel(logging.DEBUG)\r\nrequests_log.propagate = True\r\n```\r\n\r\nResult (first 2 requests):\r\n```\r\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): www.dns-shop.ru:443\r\nsend: b'GET /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/ HTTP/1.1\\r\\nHost: www.dns-shop.ru\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\r\nDEBUG:urllib3.connectionpool:https://www.dns-shop.ru:443 \"GET /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/ HTTP/1.1\" 307 0\r\nreply: 'HTTP/1.1 307 TemporaryRedirect\\r\\n'\r\nheader: Server: Variti/0.9.3a\r\nheader: Date: Fry, 25 Dec 2020 14:3753 GMT\r\nheader: Set-Cookie: ipp_uid_tst=1608907073940/2LhuRHu-NT--na0AX4hLKg; Expires=; Domain=; Path=/\r\nheader: Location: /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/\r\nheader: Connection: keep-alive\r\nheader: Keep-Alive: timeout=60\r\nheader: Content-Length: 0\r\n\r\nsend: b'GET /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/ HTTP/1.1\\r\\nHost: www.dns-shop.ru\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\r\nDEBUG:urllib3.connectionpool:https://www.dns-shop.ru:443 \"GET /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/ HTTP/1.1\" 307 0\r\nreply: 'HTTP/1.1 307 TemporaryRedirect\\r\\n'\r\nheader: Server: Variti/0.9.3a\r\nheader: Date: Fry, 25 Dec 2020 14:3754 GMT\r\nheader: Set-Cookie: ipp_uid_tst=1608907074028/oOg1XsGU12ZE8PkUludY5g; Expires=; Domain=; Path=/\r\nheader: Location: /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/\r\nheader: Connection: keep-alive\r\nheader: Keep-Alive: timeout=60\r\nheader: Content-Length: 0\r\n```\r\n\r\n## Expected Result\r\n\r\nHTTP 200, OK\r\n\r\n## Actual Result\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:/Users/ipetrash/Projects/SimplePyScripts/html_parsing/www_dns_shop_ru/get_price.py\", line 17, in <module>\r\n    rs = requests.get('https://www.dns-shop.ru/')\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\sessions.py\", line 677, in send\r\n    history = [resp for resp in gen]\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\sessions.py\", line 677, in <listcomp>\r\n    history = [resp for resp in gen]\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\sessions.py\", line 166, in resolve_redirects\r\n    raise TooManyRedirects('Exceeded {} redirects.'.format(self.max_redirects), response=resp)\r\nrequests.exceptions.TooManyRedirects: Exceeded 30 redirects.\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nsession = requests.session()\r\nrs = session.get('https://www.dns-shop.ru/')\r\nprint(rs)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{                                   \r\n  \"chardet\": {                      \r\n    \"version\": \"3.0.4\"              \r\n  },                                \r\n  \"cryptography\": {                 \r\n    \"version\": \"2.7\"                \r\n  },                                \r\n  \"idna\": {                         \r\n    \"version\": \"2.8\"                \r\n  },                                \r\n  \"implementation\": {               \r\n    \"name\": \"CPython\",              \r\n    \"version\": \"3.7.3\"              \r\n  },                                \r\n  \"platform\": {                     \r\n    \"release\": \"10\",                \r\n    \"system\": \"Windows\"             \r\n  },                                \r\n  \"pyOpenSSL\": {                    \r\n    \"openssl_version\": \"1010103f\",  \r\n    \"version\": \"17.2.0\"             \r\n  },                                \r\n  \"requests\": {                     \r\n    \"version\": \"2.25.1\"             \r\n  },                                \r\n  \"system_ssl\": {                   \r\n    \"version\": \"1010108f\"           \r\n  },                                \r\n  \"urllib3\": {                      \r\n    \"version\": \"1.24.2\"             \r\n  },                                \r\n  \"using_pyopenssl\": true           \r\n}                                   \r\n```\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "gil9red",
                "id": 6244078,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5709/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/751259942",
                    "id": 751259942,
                    "created_at": "2020-12-25T14:58:27Z",
                    "updated_at": "2020-12-25T14:58:27Z",
                    "author_association": "NONE",
                    "body": "Rewrote the code to manually handle redirects and forwarding cookies.\r\n\r\nPS. after I sent the cookie, there was no 307 on subsequent requests.\r\n\r\nThey have interesting protection ...\r\n\r\n[Code:](https://github.com/gil9red/SimplePyScripts/blob/7c3fc621399d7ec32bfde9174d5d47dfed30282d/html_parsing/www_dns_shop_ru/get_price.py#L31)\r\n```\r\nfrom http.cookies import SimpleCookie\r\nfrom typing import Optional\r\nfrom urllib.parse import urljoin\r\n\r\nimport requests\r\n\r\nsession = requests.session()\r\nsession.headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0'\r\n\r\ndef get_price(url: str) -> Optional[int]:\r\n    cookies = None\r\n    attempts = 30\r\n\r\n    while True:\r\n        attempts -= 1\r\n        if attempts <= 0:\r\n            raise Exception('Too many redirects!')\r\n\r\n        rs = session.get(url, allow_redirects=False, cookies=cookies)\r\n\r\n        redirect_url = rs.headers.get('Location')\r\n        if redirect_url:\r\n            url = urljoin(rs.url, redirect_url)\r\n            if rs.cookies:\r\n                cookies = rs.cookies\r\n                continue\r\n\r\n            cookies = rs.headers.get('Set-Cookie')\r\n            if cookies:\r\n                cookies = {key: value.value for key, value in SimpleCookie(cookies).items()}\r\n\r\n            continue\r\n\r\n        break\r\n    ...\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/751259942/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gil9red",
                        "id": 6244078,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001064686686731875,
                        "severe_toxicity": 0.00010341720917494968,
                        "obscene": 0.00021619642211589962,
                        "threat": 0.00010684516746550798,
                        "insult": 0.00018189649563282728,
                        "identity_attack": 0.00013821941684000194
                    }
                }
            ]
        },
        "135": {
            "html_url": "https://github.com/psf/requests/pull/5693",
            "id": 764088748,
            "number": 5693,
            "title": "Pass urllib3.SKIP_HEADER when headers should be unset",
            "created_at": "2020-12-12T17:32:16Z",
            "updated_at": "2022-02-17T15:48:57Z",
            "closed_at": null,
            "body": "urllib3 introduced some default headers and a way to skip them if\r\ndesired. Let's use that sentinel value to pass along information about\r\nRequests' users desire to skip those headers as well.\r\n\r\nCloses gh-5671\r\n\r\n---\r\nI'm pretty sure the tests will fail to start with, but wanted to get a sketch of something up for early review",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "sigmavirus24",
                "id": 240830,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5693/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "136": {
            "html_url": "https://github.com/psf/requests/issues/5692",
            "id": 762917561,
            "number": 5692,
            "title": "requests.auth.HTTPDigestAuth does not support qop=auth-int",
            "created_at": "2020-12-11T21:18:45Z",
            "updated_at": "2020-12-11T21:18:45Z",
            "closed_at": null,
            "body": "## Summary: \r\nWhen using requests.auth.HTTPDigestAuth, if the www-authenticate digest back has a qop value of 'auth-int', build_digest_header returns None, which makes http.client.HTTPConnection.putheader throw an exception because *values expects to be a set of Strings or Bytes.\r\n\r\n## Expected Result:\r\nI expect a valid Digest in return, or at least an Exception that input data is bad\r\n\r\n## Actual Result:\r\nTypeError Exception - expected string or bytes-like object\r\n\r\n## Reproduction Steps\r\n```\r\nimport requests\r\nrequests.get('https://device.hostname/api/auth', auth=requests.auth.HTTPDigestAuth('login','password')\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"20.2.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.24.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010108f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.9\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n## Working Fix\r\nrequests.auth.HTTPDigestAuth.build_digest_header has the following code, which is causing the return of None:\r\n```\r\n        if not qop:\r\n            respdig = KD(HA1, \"%s:%s\" % (nonce, HA2))\r\n        elif qop == 'auth' or 'auth' in qop.split(','):\r\n            noncebit = \"%s:%s:%s:%s:%s\" % (\r\n                nonce, ncvalue, cnonce, 'auth', HA2\r\n            )\r\n            respdig = KD(HA1, noncebit)\r\n        else:\r\n            # XXX handle auth-int.\r\n            return None\r\n```\r\n\r\nPatches Needed:\r\nrequests.auth.HTTPDigestAuth.build_digest_header needs to have an optional arg for body, which should be the bytes of the body of the request or None\r\n```\r\ndef build_digest_header(self, method, url, body=b''):\r\n```\r\n\r\nThe qop value should be put into a list:\r\n```\r\n        qop = self._thread_local.chal.get('qop')\r\n        if qop:\r\n            qop = [x.strip() for x in qop.split(',')]\r\n```\r\n\r\nA2 needs to be calculated differently if auth-int:\r\n\r\n```\r\n        if qop and 'auth-int' in qop:\r\n            A2 = '%s:%s:%s' % (method, path, hash_utf8(body or b''))\r\n        else:\r\n            A2 = '%s:%s' % (method, path)\r\n```\r\n\r\nAnd the qop test block needs to be changed:\r\n```\r\n        if not qop:\r\n            respdig = KD(HA1, \"%s:%s\" % (nonce, HA2))\r\n        else:\r\n            if 'auth' in qop or 'auth-int' in qop:\r\n                noncebit = \"%s:%s:%s:%s:%s\" % (\r\n                    nonce, ncvalue, cnonce, ','.join(qop), HA2\r\n                )\r\n                respdig = KD(HA1, noncebit)\r\n            else:\r\n                raise NotImplementedError('qop value of \"%s\" is not implemented.' % (','.join(qop)))\r\n```\r\n\r\nAlso the last check before returning digest:\r\n```\r\n        if qop:\r\n            base += ', qop=%s, nc=%s, cnonce=\"%s\"' % (','.join(qop), ncvalue, cnonce)\r\n```\r\n\r\nNow to change the callers:\r\nhandle_401 needs to be changed to add the body arg:\r\n```\r\n            prep.headers['Authorization'] = self.build_digest_header(\r\n                prep.method, prep.url, prep.body)\r\n```\r\n\r\n__call__ needs to be changed to add the body arg:\r\n```\r\n            r.headers['Authorization'] = self.build_digest_header(r.method, r.url, r.body)\r\n```\r\n\r\nAnd that should create a fully working framework for auth-int with RFC 2617",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "ATXadam",
                "id": 13699256,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5692/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "137": {
            "html_url": "https://github.com/psf/requests/issues/5677",
            "id": 755724610,
            "number": 5677,
            "title": "Session does not consistently respects proxy environment variables.",
            "created_at": "2020-12-03T00:55:49Z",
            "updated_at": "2023-06-26T12:06:39Z",
            "closed_at": null,
            "body": "There are inconsistencies when working with proxy environment variables using `Session` objects.\r\n\r\nWhen using `Session#request` or verb methods (`get`, `post`, `put`), those work correctly and use the proxy when they are present.\r\n\r\nHowever `Session#send(PreparedRequest)` does not respect the variables by default, but does when it handles redirect responses, e.g. `303`.\r\n\r\nI've written a test class to present this behavior.\r\n\r\n## Expected Result\r\n\r\nAll methods in `Session` to respect the proxy variable.\r\n\r\n## Actual Result\r\n\r\n`Session#send(PreparedRequest)` does not respect proxy environment variables.\r\n\r\n## Reproduction Steps\r\n\r\nTest case 1 fails with a successful request.\r\n\r\n```python\r\nimport requests\r\nimport pytest\r\n\r\n# Copied from requests/tests/utils.py for making this a standalone\r\nimport os\r\nimport contextlib\r\n\r\n@contextlib.contextmanager\r\ndef override_environ(**kwargs):\r\n    save_env = dict(os.environ)\r\n    for key, value in kwargs.items():\r\n        if value is None:\r\n            del os.environ[key]\r\n        else:\r\n            os.environ[key] = value\r\n    try:\r\n        yield\r\n    finally:\r\n        os.environ.clear()\r\n        os.environ.update(save_env)\r\n\r\nclass TestSession:\r\n\r\n    def test_respect_proxy_env_on_send(self):\r\n        session = requests.Session()\r\n\r\n        # Does not respect the proxy configuration and ignores the proxy\r\n        request = requests.Request(\r\n            method='GET', url='https://www.google.com/'\r\n        )\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                session.send(request.prepare())\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n        \r\n    def test_respect_proxy_env_on_send_with_redirects(self):\r\n        session = requests.Session()\r\n\r\n        # Returns a 303 to www.google.com and respects the proxy\r\n        request = requests.Request(\r\n            method='GET', url='https://google.com/'\r\n        )\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                session.send(request.prepare())\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n\r\n    def test_respect_proxy_env_on_get(self):\r\n        session = requests.Session()\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                # No redirects\r\n                session.get('https://www.google.com')\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n\r\n    def test_respect_proxy_env_on_request(self):\r\n        session = requests.Session()\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                # No redirects\r\n                session.request(method='GET', url='https://www.google.com')\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n```\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.9.8-100.fc32.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020ff\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.2\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "CONTRIBUTOR",
            "comments": 9,
            "state": "open",
            "user": {
                "login": "mateusduboli",
                "id": 1688249,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5677/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/740631334",
                    "id": 740631334,
                    "created_at": "2020-12-08T13:51:58Z",
                    "updated_at": "2020-12-08T13:51:58Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I believe things will work if you use `Session.prepare_request(request)` instead of `request.prepare()`. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/740631334/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005527686444111168,
                        "severe_toxicity": 0.00013517979823518544,
                        "obscene": 0.00020416810002643615,
                        "threat": 0.0001344247575616464,
                        "insult": 0.0001801189937395975,
                        "identity_attack": 0.00014267217193264514
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/740634359",
                    "id": 740634359,
                    "created_at": "2020-12-08T13:56:55Z",
                    "updated_at": "2020-12-08T13:57:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Doesn't seem to be the case.\r\n\r\n```python\r\n    def test_respect_proxy_env_on_send_session_prepared_request(self):\r\n        session = requests.Session()\r\n\r\n        # Does not respect the proxy configuration and ignores the proxy\r\n        request = requests.Request(\r\n            method='GET', url='https://www.google.com/'\r\n        )\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                prepared = session.prepare_request(request)\r\n                session.send(prepared)\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n```\r\n\r\nResult:\r\n```\r\n_______________________________________________________ TestSession.test_respect_proxy_env_on_send_session_prepared_request ________________________________________________________\r\n\r\nself = <test_session.TestSession object at 0x7f0b9d517fd0>\r\n\r\n    def test_respect_proxy_env_on_send_session_prepared_request(self):\r\n        session = requests.Session()\r\n\r\n        # Does not respect the proxy configuration and ignores the proxy\r\n        request = requests.Request(\r\n            method='GET', url='https://www.google.com/'\r\n        )\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                prepared = session.prepare_request(request)\r\n                session.send(prepared)\r\n>               assert False, \"The proxy is invalid this request should not be successful.\"\r\nE               AssertionError: The proxy is invalid this request should not be successful.\r\nE               assert False\r\n```\r\n\r\nReading the code I know the issue is that there is no call to `rebuild_proxies` on the `send` workflow, and that `proxies` are not set on the request, but rather during request transmission.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/740634359/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mateusduboli",
                        "id": 1688249,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0013243367429822683,
                        "severe_toxicity": 0.00010326269693905488,
                        "obscene": 0.00023048561706673354,
                        "threat": 0.00011165787873324007,
                        "insult": 0.00018378824461251497,
                        "identity_attack": 0.00014304774231277406
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/769075427",
                    "id": 769075427,
                    "created_at": "2021-01-28T14:05:06Z",
                    "updated_at": "2021-01-28T14:05:06Z",
                    "author_association": "NONE",
                    "body": "Hello,\r\nI would like to add to the topic of this issue. As far as I can see, the hierarchy of proxy-settings applied to the final request is not consistent or at least not as I would expect.\r\nFrom my understanding, the documentation suggests the following hierarchy of settings (right supersedes left):\r\n`environment variables` < `session settings` < `method call kwargs` \r\nDuring usage I found that the actual hierarchy implemented is (only for proxy settings):\r\n`session settings` < `environment variables` < `method call kwargs`\r\nIs this intended behavior?\r\nIf so, I would suggest to clarify the respective documentation.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/769075427/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tscheburaschka",
                        "id": 28730622,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005545311723835766,
                        "severe_toxicity": 0.00012864779273513705,
                        "obscene": 0.00019163584511261433,
                        "threat": 0.00012815510854125023,
                        "insult": 0.00017397507326677442,
                        "identity_attack": 0.00013963901437819004
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/769266670",
                    "id": 769266670,
                    "created_at": "2021-01-28T17:58:36Z",
                    "updated_at": "2021-01-28T17:59:27Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The [line changed](https://github.com/psf/requests/blob/master/requests/sessions.py#L626-L636) on the PR has the erroneous precedence format you are mentioning, I'll fix that to be consistent.\r\n\r\nYou mention there might be other code paths using an incorrect one as well, can you point to those? And also the docs in which you saw this precedence mentioned?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/769266670/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mateusduboli",
                        "id": 1688249,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006227009580470622,
                        "severe_toxicity": 0.0001177026133518666,
                        "obscene": 0.00017903803382068872,
                        "threat": 0.00012160436745034531,
                        "insult": 0.00017528384341858327,
                        "identity_attack": 0.00013694360677618533
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/769316762",
                    "id": 769316762,
                    "created_at": "2021-01-28T19:23:43Z",
                    "updated_at": "2021-01-28T19:30:09Z",
                    "author_association": "NONE",
                    "body": "After thinking a bit more about it, I guess the problem arises in `Session.merge_environment_settings()` [here](https://github.com/psf/requests/blob/8c211a96cdbe9fe320d63d9e1ae15c5c07e179f8/requests/sessions.py#L701). The proxy-settings from environment are merged into proxy-settings from kwargs before session properties are merged.\r\nI first thought the problem can be avoided if line 722 is placed before 707.\r\nNow I see, that the `verify`-kwarg has the same behavior (although that did not bother me so far), so I wonder how much of it is actually intended.\r\n\r\nI know, I should probably rather make a PR with some regression tests to prove my solution. It would take some time though, since I have to get used to the process first.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/769316762/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tscheburaschka",
                        "id": 28730622,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000643647275865078,
                        "severe_toxicity": 0.00012297628563828766,
                        "obscene": 0.00019774760585278273,
                        "threat": 0.00012501070159487426,
                        "insult": 0.00017543650756124407,
                        "identity_attack": 0.0001398703461745754
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/769339022",
                    "id": 769339022,
                    "created_at": "2021-01-28T19:55:49Z",
                    "updated_at": "2021-01-28T19:55:49Z",
                    "author_association": "NONE",
                    "body": "Concerning the documentation, I read the section [Proxies](https://github.com/psf/requests/blob/master/docs/user/advanced.rst#proxies) as if the environment configuration is \"overridden\" by settings in Python code, and the examples shown suggest the hierarchy I indicated above.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/769339022/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tscheburaschka",
                        "id": 28730622,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005723673384636641,
                        "severe_toxicity": 0.0001257826661458239,
                        "obscene": 0.00018593495769891888,
                        "threat": 0.00012189297558506951,
                        "insult": 0.00017709500389173627,
                        "identity_attack": 0.00014127198664937168
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1399000853",
                    "id": 1399000853,
                    "created_at": "2023-01-20T21:58:05Z",
                    "updated_at": "2023-01-20T21:58:05Z",
                    "author_association": "NONE",
                    "body": "\ud83d\udc4b we're also encountering this issue in our [python library](https://github.com/braintree/braintree_python). `rebuild_proxies` didn't update settings for us, but calling `session.proxies.update(requests.utils.getproxies())` did. \r\n\r\nHope this helps other folks running into this issue, and thanks @mateusduboli for your excellent breakdown with tests, this really helped out our investigation \ud83d\ude04",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1399000853/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hollabaq86",
                        "id": 22104233,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000633764429949224,
                        "severe_toxicity": 0.00011925988656003028,
                        "obscene": 0.00017921840480994433,
                        "threat": 0.0001223116705659777,
                        "insult": 0.00017378822667524219,
                        "identity_attack": 0.00013883125211577863
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1461729652",
                    "id": 1461729652,
                    "created_at": "2023-03-09T10:14:57Z",
                    "updated_at": "2023-03-09T10:14:57Z",
                    "author_association": "NONE",
                    "body": "> \ud83d\udc4b we're also encountering this issue in our [python library](https://github.com/braintree/braintree_python). `rebuild_proxies` didn't update settings for us, but calling `session.proxies.update(requests.utils.getproxies())` did.\r\n> \r\n> Hope this helps other folks running into this issue, and thanks @mateusduboli for your excellent breakdown with tests, this really helped out our investigation \ud83d\ude04\r\n\r\nI had the same issue and @hollabaq86's workaround is best I found so far. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1461729652/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "leodinas-hao",
                        "id": 26642035,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006150018889456987,
                        "severe_toxicity": 0.00012176845484646037,
                        "obscene": 0.00018463890592101961,
                        "threat": 0.00012308539589866996,
                        "insult": 0.0001737905404297635,
                        "identity_attack": 0.00013937042967882007
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1607333125",
                    "id": 1607333125,
                    "created_at": "2023-06-26T12:06:39Z",
                    "updated_at": "2023-06-26T12:06:39Z",
                    "author_association": "NONE",
                    "body": "I'll add my cents here.\r\n\r\nOn Windows, the proxy hierarchy is broken too, and since the environment settings also come from the registry, it's nearly impossible to diagnose why the proxies set in the session are not in use. Few users are aware that Requests will fetch settings from the Windows Registry.\r\n\r\nIn https://github.com/psf/requests/blob/main/requests/sessions.py#L758 we can see that environment settings are merged in the requests settings before the session settings are merged. The merge mechanism is conservative and does not overwrite previous settings, so session settings won't overwrite environment settings.\r\n\r\nIMHO, environment settings should be merged with with session settings then with requests settings. With the current mechanism, environment settings should be merged after the session settings.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1607333125/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "manuco",
                        "id": 243316,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005796672194264829,
                        "severe_toxicity": 0.00012799390242435038,
                        "obscene": 0.00019050358969252557,
                        "threat": 0.00013093362213112414,
                        "insult": 0.00017722930351737887,
                        "identity_attack": 0.000142889199196361
                    }
                }
            ]
        },
        "138": {
            "html_url": "https://github.com/psf/requests/issues/5671",
            "id": 752649243,
            "number": 5671,
            "title": "Urllib3 >1.26.x | Introduces default User-Agent header",
            "created_at": "2020-11-28T10:32:24Z",
            "updated_at": "2022-01-06T16:40:21Z",
            "closed_at": null,
            "body": "With pyrequest pullrequest https://github.com/psf/requests/commit/03957eb1c2b9a1e5e6d61f5e930d7c5ed7cfe853 v2.25.0 urllib3 is updated to v1.26.0. with this version bump urllib3 has changed default behavior in regards to header \"User-Agent\" : https://pypi.org/project/urllib3/ \r\n\r\nurllib3 1.26.0\r\n```\r\nAdded default User-Agent header to every request (Pull #1750)\r\nAdded urllib3.util.SKIP_HEADER for skipping User-Agent, Accept-Encoding, and Host headers from being automatically emitted with requests (Pull #2018)\r\n```\r\nUrllib3 now introduces default User-Agent header when no user-agent header is set. Urlib3 also introduces the function \"urllib3.util.SKIP_HEADER\" as a means to deactivate default user-agent header.\r\n\r\n## Expected Result\r\n\r\nPyrequest should adopt easy means of deactivating \"User-Agent\" headers by utilizing the \"urllib3.util.SKIP_HEADER\" function\r\n\r\n## Actual Result\r\n\r\nDefault \"User-agent\" header is enforced when no header= is specified.\r\nby using headers={\"User-Agent\": none} no longer deactivate default \"user-agent\" while using headers={\"User-Agent\": \"\"} will deactivate \"user-agent\" header\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nreq = Request('POST', url=BASE_URL + endpoint, data=params).prepare()  \r\n```\r\n---> Deafult \"user-agent\" is enforced \"User-Agent: python-urllib3/1.26.2\"\r\n```\r\nreq = Request('POST', url=BASE_URL + endpoint, headers={\"User-Agent\": None}, data=params).prepare()\r\n```\r\n ---> Does not deactivate \"User-Agent\"\r\n```\r\nreq = Request('POST', url=BASE_URL + endpoint, headers={\"User-Agent\": \"\"}, data=params).prepare()\r\n```\r\nDeactivates \"User-Agent\" succesfully\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n<paste here>\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n\r\nPython 3.8, Docker\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "prilly-dev",
                "id": 66376450,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5671/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [
                {
                    "login": "sigmavirus24",
                    "id": 240830,
                    "node_id": "MDQ6VXNlcjI0MDgzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/sigmavirus24",
                    "html_url": "https://github.com/sigmavirus24",
                    "followers_url": "https://api.github.com/users/sigmavirus24/followers",
                    "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
                    "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
                    "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
                    "repos_url": "https://api.github.com/users/sigmavirus24/repos",
                    "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
                    "type": "User",
                    "user_view_type": "public",
                    "site_admin": false
                }
            ],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/742970197",
                    "id": 742970197,
                    "created_at": "2020-12-11T05:02:00Z",
                    "updated_at": "2020-12-11T05:02:00Z",
                    "author_association": "MEMBER",
                    "body": "Hi @prilly-dev, thanks for bringing this to our attention. I was actually surprised to see Requests wasn't emitting a header here, but it appears this is specific to the Session workflow.\r\n\r\nWe'll probably need something that is tolerant to urllib3 < 1.26 not being installed.  I'm not immediately sure if that means conditionally relying on the urllib3 SKIP_HEADER util in compat or if there are other options. We'll take a look at getting a fix together.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/742970197/reactions",
                        "total_count": 4,
                        "+1": 4,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005808131536468863,
                        "severe_toxicity": 0.00012230980792082846,
                        "obscene": 0.000184640841325745,
                        "threat": 0.0001240168057847768,
                        "insult": 0.00017423121607862413,
                        "identity_attack": 0.0001382461778121069
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1006735307",
                    "id": 1006735307,
                    "created_at": "2022-01-06T16:40:21Z",
                    "updated_at": "2022-01-06T16:40:21Z",
                    "author_association": "MEMBER",
                    "body": "For anyone still trying to work around this issue. The temporary solution is as follows:\r\n\r\n```python\r\nimport requests\r\nimport urllib3\r\n\r\n# Where user-agent is the header you want to exclude.\r\n# You can find the full list of \"skippable headers\" at urllib3.util.SKIPPABLE_HEADERS\r\nheaders = {'user-agent': urllib3.util.SKIP_HEADER, ... }\r\n\r\nreq = Request('GET', someurl)\r\nprep = req.prepare()\r\nprep.headers = headers\r\n\r\ns = requests.Session()\r\nresp = s.send(prep)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1006735307/reactions",
                        "total_count": 4,
                        "+1": 4,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007496442412957549,
                        "severe_toxicity": 0.00011014469055226073,
                        "obscene": 0.00018673375598154962,
                        "threat": 0.00011587912013055757,
                        "insult": 0.00017407546692993492,
                        "identity_attack": 0.0001319667062489316
                    }
                }
            ]
        },
        "139": {
            "html_url": "https://github.com/psf/requests/issues/5668",
            "id": 750244584,
            "number": 5668,
            "title": "Request with chunked encoding doesn't respect timeout",
            "created_at": "2020-11-25T01:30:18Z",
            "updated_at": "2024-07-02T11:46:46Z",
            "closed_at": null,
            "body": "If I use requests to send a POST request and pass in a generator (and therefore the request uses chunked encoding), the timeout parameter is not respected. If I use a fixed bytes object instead of a generator, the timeout is respected.\r\n\r\n## Expected Result\r\n\r\nThe request should time out (in the reproduction steps below, after 2 seconds).\r\n\r\n## Actual Result\r\n\r\nThe request did not time out. The reproduction steps below print \"Connecting to http://localhost:15382/\" and then hangs there.\r\n\r\n## Reproduction Steps\r\n\r\nRun \"nc -l 15382\", and then the program below: \r\n\r\n```python\r\nimport requests\r\n\r\nurl = \"http://localhost:15382/\"\r\n\r\ndef generator():\r\n    yield b\"a\"\r\n    yield b\"b\"\r\n\r\nprint(f\"Connecting to {url}\")\r\ntry:\r\n    requests.post(url, timeout=2, data=generator())\r\n    print(f\"Completed connecting to {url}\")\r\nexcept Exception as exc:\r\n    print(f\"Got {exc}\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-111-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010104f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nIt appears that HTTPAdapter.send() uses the timeout for non-chunked requests, but not for chunked requests, so that may be the cause of this issue.\r\n\r\n(I initially investigated this bug after finding that my POST request of a large file to an HTTPS server was timing out after about 6 minutes (when I had a 10 minute timeout set). I haven't been able to reproduce the 6 minute timeout with a simple test case, but it seems like that may consist of 1 minute to send the large file, and after sending the file, it looks like openssl may have a default 5 minute timeout if not overridden. If this analysis is correct, a fix should also ensure the openssl timeout is updated as well.)",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "kchen",
                "id": 31767,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5668/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/741796407",
                    "id": 741796407,
                    "created_at": "2020-12-09T14:13:00Z",
                    "updated_at": "2020-12-09T14:13:00Z",
                    "author_association": "NONE",
                    "body": "We also ran into this issue the other day. The default timeout seems to be infinite, so if you're unlucky the HTTP POST request will end up blocking forever.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/741796407/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "grove",
                        "id": 326795,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001396853243932128,
                        "severe_toxicity": 9.273090108763427e-05,
                        "obscene": 0.00018021331925410777,
                        "threat": 0.00010996167111443356,
                        "insult": 0.00022385689953807741,
                        "identity_attack": 0.00014377386833075434
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/773728372",
                    "id": 773728372,
                    "created_at": "2021-02-05T02:00:23Z",
                    "updated_at": "2021-02-05T02:00:23Z",
                    "author_association": "NONE",
                    "body": "it depends on the  http response header",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/773728372/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007407699595205486,
                        "severe_toxicity": 0.00011249854287598282,
                        "obscene": 0.00018141187319997698,
                        "threat": 0.00012150121619924903,
                        "insult": 0.00017281871987506747,
                        "identity_attack": 0.00013548137212637812
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2182611299",
                    "id": 2182611299,
                    "created_at": "2024-06-21T11:56:36Z",
                    "updated_at": "2024-06-21T11:56:36Z",
                    "author_association": "NONE",
                    "body": "We are observing that behaviour too. Did you manage to fix that?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2182611299/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Uxio0",
                        "id": 6909403,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006044558249413967,
                        "severe_toxicity": 0.00012525077909231186,
                        "obscene": 0.00018076764536090195,
                        "threat": 0.00012648073607124388,
                        "insult": 0.00018155497673433274,
                        "identity_attack": 0.00014405821275431663
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2183187717",
                    "id": 2183187717,
                    "created_at": "2024-06-21T17:51:56Z",
                    "updated_at": "2024-06-21T17:51:56Z",
                    "author_association": "NONE",
                    "body": "Nope, I worked around it. (My project uses gevent, and so I wrapped the requests call in a gevent timeout.)\r\n\r\nFor unrelated reasons, though, my project is moving to httpx, and the test case above (replacing requests with httpx) works fine, so that would be another workaround.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2183187717/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kchen",
                        "id": 31767,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005932449130341411,
                        "severe_toxicity": 0.0001274525566259399,
                        "obscene": 0.0001994754420593381,
                        "threat": 0.00012141795014031231,
                        "insult": 0.00017876902711577713,
                        "identity_attack": 0.0001406787778250873
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2202948391",
                    "id": 2202948391,
                    "created_at": "2024-07-02T11:46:45Z",
                    "updated_at": "2024-07-02T11:46:45Z",
                    "author_association": "NONE",
                    "body": "> Nope, I worked around it. (My project uses gevent, and so I wrapped the requests call in a gevent timeout.)\r\n\r\nReally nice, we are using `gevent` too\r\n\r\n> For unrelated reasons, though, my project is moving to httpx, and the test case above (replacing requests with httpx) works fine, so that would be another workaround.\r\n\r\n`httpx` is not working well for us, though, we can reproduce the same behaviour\r\n\r\nThank you for your suggestions!\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2202948391/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Uxio0",
                        "id": 6909403,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005706174415536225,
                        "severe_toxicity": 0.00012735743075609207,
                        "obscene": 0.00019240648543927819,
                        "threat": 0.00012597639579325914,
                        "insult": 0.00017527783347759396,
                        "identity_attack": 0.00013912360009271652
                    }
                }
            ]
        },
        "140": {
            "html_url": "https://github.com/psf/requests/pull/5665",
            "id": 746843383,
            "number": 5665,
            "title": "Add support for HTTPS proxies.",
            "created_at": "2020-11-19T19:00:06Z",
            "updated_at": "2022-01-03T15:23:25Z",
            "closed_at": null,
            "body": "Starting with 1.26 urllib3 now supports HTTPS proxies. To enable the support two changes are needed:\r\n\r\n* An additional proxy_kwargs argument that can be passed from the session. This dictionary will be used to pass any arguments needed to the underlying adapter. The parameter is optional.\r\n* The use_forwarding_for_https mode requires us to send the absolute URI when enabled.\r\n\r\nThe resulting API is very similar except it takes an additional parameter when needed. An example:\r\n\r\n```\r\n    session = requests.Session()\r\n    proxies = {\"http\": \"https://proxy.example\", \"https\": \"https://proxy.example\"}\r\n\r\n    proxies_kwargs = {\r\n        \"proxy_ssl_context\": proxy_ssl_context(),\r\n    }\r\n\r\n    response = session.get(\r\n       \"https://www.google.com\", proxies=proxies, proxies_kwargs=proxies_kwargs\r\n    )\r\n```\r\n",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "jalopezsilva",
                "id": 1276443,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5665/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/730705205",
                    "id": 730705205,
                    "created_at": "2020-11-19T23:38:37Z",
                    "updated_at": "2020-11-19T23:38:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Requests is under feature freeze which means we will not add any additional keyword arguments to the public API like this.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/730705205/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006451974040828645,
                        "severe_toxicity": 0.00011811760487034917,
                        "obscene": 0.00017415980983059853,
                        "threat": 0.00012753630289807916,
                        "insult": 0.00017441855743527412,
                        "identity_attack": 0.00014084440772421658
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/733395393",
                    "id": 733395393,
                    "created_at": "2020-11-25T00:58:29Z",
                    "updated_at": "2020-11-25T00:58:29Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 thanks for the feedback! Is adding an additional keyword argument to the public API the only concern? I've been reviewing the options available and there's no easy way around this unless we modify the ``proxy_manager_for`` method in ``HTTPAdapter``\r\n\r\nCould we add a proxy_kwargs attribute to HTTPAdapter? Rather than passing the ``proxy_kwargs`` dictionary through multiple top level APIs we could expose it like this:\r\n\r\n```\r\ns = requests.Session()\r\ns.adapters['https://'].proxy_kwargs = { ... }\r\n```\r\nThat minimizes some of the changes needed. Would that work?\r\n\r\nFacebook needs these changes upstreamed so I would love it if we can find a path forward here. I can create our own ``HTTPAdapter`` internally but t it leaves the ``requests`` community without being able to benefit from the work I put in to expand the [HTTPS proxy support in urllib3.](https://github.com/urllib3/urllib3/pull/1923)\r\n\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/733395393/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jalopezsilva",
                        "id": 1276443,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006735833012498915,
                        "severe_toxicity": 0.00011804272799054161,
                        "obscene": 0.00018254545284435153,
                        "threat": 0.00012507651990745217,
                        "insult": 0.00016817341384012252,
                        "identity_attack": 0.00013783969916403294
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/875622787",
                    "id": 875622787,
                    "created_at": "2021-07-07T13:52:13Z",
                    "updated_at": "2021-07-07T13:52:13Z",
                    "author_association": "MEMBER",
                    "body": "@nateprewitt Are we still planning on doing this for 2.26.0? It doesn't look like it's moved since being added to the milestone.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/875622787/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007606688304804265,
                        "severe_toxicity": 0.00010815449786605313,
                        "obscene": 0.0001771048118826002,
                        "threat": 0.00011256647849222645,
                        "insult": 0.000178128742845729,
                        "identity_attack": 0.00013703046715818346
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/875763763",
                    "id": 875763763,
                    "created_at": "2021-07-07T16:49:49Z",
                    "updated_at": "2021-07-07T16:49:49Z",
                    "author_association": "MEMBER",
                    "body": "I popped it out of 2.26.0 so we can get a release unblocked. I'll follow up with @jalopezsilva on getting this in the next minor release.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/875763763/reactions",
                        "total_count": 4,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 4,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006667941343039274,
                        "severe_toxicity": 0.00011868426372529939,
                        "obscene": 0.00018185001681558788,
                        "threat": 0.0001286413025809452,
                        "insult": 0.00017757793830242008,
                        "identity_attack": 0.00013940126518718898
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/875771719",
                    "id": 875771719,
                    "created_at": "2021-07-07T17:01:23Z",
                    "updated_at": "2021-07-07T17:01:23Z",
                    "author_association": "NONE",
                    "body": "That would be amazing @nateprewitt. Let me know which changes are required. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/875771719/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 1,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jalopezsilva",
                        "id": 1276443,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000671024841722101,
                        "severe_toxicity": 0.00011715896107489243,
                        "obscene": 0.00017741901683621109,
                        "threat": 0.00012624937517102808,
                        "insult": 0.0001791856047930196,
                        "identity_attack": 0.00013709203631151468
                    }
                }
            ]
        },
        "141": {
            "html_url": "https://github.com/psf/requests/issues/5641",
            "id": 729507670,
            "number": 5641,
            "title": "Bad escaping of double quote in uploaded file",
            "created_at": "2020-10-26T12:08:14Z",
            "updated_at": "2023-10-10T17:51:55Z",
            "closed_at": null,
            "body": "Uploading a file whose name contains double quotes (\") in the file, requests replaces the character with %22. This is not reversible because the %  char is not escaped (it's not possible to tell apart a literal %22 from a quote), and it's different from what a browser does. Browsers seem to use backslash escape instead (tested with Firefox).\r\n\r\n## Expected Result\r\n\r\nIn a shell run:\r\n```\r\n$ nc -l 0.0.0.0 8080 | grep filename\r\n```\r\n\r\nIn Python\r\n```\r\nrequests.post(\"http://localhost:8080/\", files={'file': (\"\"\"foo% 'bar\" \\u20ac.txt\"\"\", open(\"README.rst\"))})\r\n```\r\n\r\nExpected, what a browser returns, in the nc shell:\r\n\r\n```\r\nContent-Disposition: form-data; name=\"file\"; filename=\"foo% 'bar\\\" \u20ac.txt\"\r\n```\r\n\r\n## Actual Result\r\n\r\n```\r\nContent-Disposition: form-data; name=\"file\"; filename=\"foo% 'bar%22 \u20ac.txt\"\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.0-51-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.24.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.8\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "dvarrazzo",
                "id": 199429,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5641/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/716583539",
                    "id": 716583539,
                    "created_at": "2020-10-26T14:28:49Z",
                    "updated_at": "2020-10-26T14:28:49Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> This is not reversible because the % char is not escaped (it's not possible to tell apart a literal %22 from a quote)\r\n\r\nI don't think this is categorically true and there's information missing from here that isn't present. In general, the RFCs don't have specific guidance around this and so this behaviour doesn't violate any of them from my reads. In fact, none of them suggest how to handle a DQUOTE in this particular case. That said, unencoded DQUOTEs are very explicitly used to delimit the filename. So if something is unescaping the `%22` for you, I'd argue that's because the RFC has undefined behaviour and that library/tool/etc is stepping beyond what it should. Further, `filename` should primarily be `US-ASCII` so for latin-1 characters and others, I'd expect us to try to use `filename*=` which _explicitly_ calls for URL quoting characters",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/716583539/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008951123454608023,
                        "severe_toxicity": 0.00010440997721161693,
                        "obscene": 0.00019265430455561727,
                        "threat": 0.00011294020077912137,
                        "insult": 0.00017752646817825735,
                        "identity_attack": 0.0001359507441520691
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/716601721",
                    "id": 716601721,
                    "created_at": "2020-10-26T14:56:12Z",
                    "updated_at": "2020-10-26T15:07:14Z",
                    "author_association": "NONE",
                    "body": "> I don't think this is categorically true\r\n\r\nMaybe it is not clear, but a file called `\"%22` is passed by requests as `%22%22`, which is categorically not reversible. Whether the standard is explicit or not about what to do is probably open to interpretation and I'm sure you know more than what I do about it :)\r\n\r\n```\r\n>>> requests.post(\"http://localhost:8080/\", files={'file': ('\"%22', open(\"README.rst\"))})\r\n$ nc -l 0.0.0.0 8080 | grep filename\r\nContent-Disposition: form-data; name=\"file\"; filename=\"%22%22\"\r\n```\r\n\r\nif any you should percent-escape the percent too to make it reversible (yielding `%22%2522`); however I can tell you that in the test suite I'm working for, in a FastAPI project, the file name recieved by the client will not be unescaped and will be seen as `%22%2522`, whereas such file name is understood correctly using backslash escaping. Maybe there is a bug for them too, on the receiving side, however they grok an upload from Firefox no problem.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/716601721/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dvarrazzo",
                        "id": 199429,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008219985174946487,
                        "severe_toxicity": 0.0001076382104656659,
                        "obscene": 0.00018629449186846614,
                        "threat": 0.0001131113531300798,
                        "insult": 0.00017518609820399433,
                        "identity_attack": 0.00013792516256216913
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/717297002",
                    "id": 717297002,
                    "created_at": "2020-10-27T14:49:14Z",
                    "updated_at": "2020-10-27T14:49:14Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Yeah, it's unsurprising for a web-servers to not code to a standard in Python regrettably. Many don't support the standard for using `filename*=` either. Also worth pointing out that Requests delegates this to [urllib3](https://github.com/urllib3/urllib3/blob/16b7b332fd1b84c2d465f11d17658c1e83d3f20f/src/urllib3/fields.py#L265) which I think has been updated to the latest and \"greatest\" HTML5 standard around `multipart/form-data` so beyond the decades old standards that aren't being observed, there are newer ones that it seems like server implementers are also ignoring. (sarcastic-yay) Regardless, you're correct. The url-encoding here isn't correct.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/717297002/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001208846690133214,
                        "severe_toxicity": 9.711300663184375e-05,
                        "obscene": 0.00020837265765294433,
                        "threat": 0.00010258519614581019,
                        "insult": 0.0001856858580140397,
                        "identity_attack": 0.0001371164689771831
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/726869798",
                    "id": 726869798,
                    "created_at": "2020-11-13T16:45:21Z",
                    "updated_at": "2020-11-13T18:54:22Z",
                    "author_association": "NONE",
                    "body": "Try this:\r\n\r\n\"maingame\": {\r\n  \"day1\": {\r\n    \"text1\": \"Tag 1\",\r\n     \"text2\": \"Heute startet unsere Rundreise \\\" Example text\\\". Jeden Tag wird ein neues Reiseziel angesteuert bis wir.</strong> \"\r\n  }\r\n}\r\n\r\n> When rendering in the html it shows as \\\"Example text\\\". What is the correct way?\r\nMay be it will help check the link in below.\r\nI found it at [here](https://stackoverflow.com/questions/15637429/how-to-escape-double-quotes-in-json)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/726869798/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "YashVadhadiya",
                        "id": 61732752,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008003089460544288,
                        "severe_toxicity": 0.00011020710371667519,
                        "obscene": 0.00019360633450560272,
                        "threat": 0.00010983005631715059,
                        "insult": 0.00017837280756793916,
                        "identity_attack": 0.00013688576291315258
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1319364076",
                    "id": 1319364076,
                    "created_at": "2022-11-17T23:56:18Z",
                    "updated_at": "2022-11-17T23:56:18Z",
                    "author_association": "NONE",
                    "body": "> Browsers seem to use backslash escape instead (tested with Firefox).\r\n\r\nFirefox (now) also replaces `\"` with `%22`, so it does not backslash escape (anymore, maybe it did 2 years ago when this issue was opened). Chrome and curl do exactly the same.\r\nSo I wouldn't say requests is broken, it just works like all other clients/browsers out there. (I am not saying this is good, it's just how it is).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1319364076/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mkurz",
                        "id": 644927,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006921009044162929,
                        "severe_toxicity": 0.00011728762183338404,
                        "obscene": 0.0001844260114012286,
                        "threat": 0.00012213486479595304,
                        "insult": 0.00017355108866468072,
                        "identity_attack": 0.000140669391839765
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1755947454",
                    "id": 1755947454,
                    "created_at": "2023-10-10T17:51:55Z",
                    "updated_at": "2023-10-10T17:51:55Z",
                    "author_association": "NONE",
                    "body": "I am seeing this issue as well. If I try to upload a file named \"file\\r\\n%64.txt\", it gets encoded to \"file%0D%0A%64.txt\", which decodes back to \"file\\r\\nd.txt\". The literal percent sign in the filename should be getting percent-encoded along with the newline and carriage return.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1755947454/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dpitch40",
                        "id": 1520538,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008468004525639117,
                        "severe_toxicity": 0.00010969126742566004,
                        "obscene": 0.00020334612054284662,
                        "threat": 0.0001154810088337399,
                        "insult": 0.00017851812299340963,
                        "identity_attack": 0.00013759636203758419
                    }
                }
            ]
        },
        "142": {
            "html_url": "https://github.com/psf/requests/issues/5613",
            "id": 714114435,
            "number": 5613,
            "title": "Support for SameSite cookie flag.",
            "created_at": "2020-10-03T15:33:09Z",
            "updated_at": "2020-10-03T22:33:48Z",
            "closed_at": null,
            "body": "Hi,\r\n\r\nHave you any plan to expose `samesite` cookie flag?\r\n",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "anio",
                "id": 3686626,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5613/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/703121677",
                    "id": 703121677,
                    "created_at": "2020-10-03T15:34:15Z",
                    "updated_at": "2020-10-03T15:34:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "We use the standard library which doesn't expose it but I'm working on [moreos](/sigmavirus24/moreos) which will have a cookie jar that's saner, more secure, and would expose this for Requests as a drop-in replacement",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/703121677/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005978767876513302,
                        "severe_toxicity": 0.00012445051106624305,
                        "obscene": 0.0001812714763218537,
                        "threat": 0.0001291826629312709,
                        "insult": 0.00017509992176201195,
                        "identity_attack": 0.00014284776989370584
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/703123067",
                    "id": 703123067,
                    "created_at": "2020-10-03T15:45:10Z",
                    "updated_at": "2020-10-03T15:45:10Z",
                    "author_association": "NONE",
                    "body": "You are right, but I think it's possible to add to newer python versions. I added it to my fork for my use case.\r\n\r\nhttps://github.com/anio/requests/commit/ae838c9741e39d53dea780d72137dfc4ad048b04",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/703123067/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "anio",
                        "id": 3686626,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006851432262919843,
                        "severe_toxicity": 0.0001181091574835591,
                        "obscene": 0.0001815274590626359,
                        "threat": 0.0001254781527677551,
                        "insult": 0.00017962351557798684,
                        "identity_attack": 0.00014251771790441126
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/703172754",
                    "id": 703172754,
                    "created_at": "2020-10-03T22:33:48Z",
                    "updated_at": "2020-10-03T22:33:48Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Newer python versions aren't all we support and further, don't have a samesite attribute here",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/703172754/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007888952386565506,
                        "severe_toxicity": 0.00010925168317044154,
                        "obscene": 0.00017378457414451987,
                        "threat": 0.00012386482558213174,
                        "insult": 0.00017509791359771043,
                        "identity_attack": 0.00013963035598862916
                    }
                }
            ]
        },
        "143": {
            "html_url": "https://github.com/psf/requests/pull/5596",
            "id": 708215345,
            "number": 5596,
            "title": "Fix no_proxy and no, not being respected. Merge self.proxies and proxies",
            "created_at": "2020-09-24T14:21:15Z",
            "updated_at": "2024-05-16T03:04:27Z",
            "closed_at": null,
            "body": "Since no_proxy is not working as intended, I tried fixing it with least intrsion into whole process.\r\nIt is contained to the `merge_environment_settings` and `request` function. In the `request` the proxy from request and proxy from session are merged. Having the request proxy overwrite the session proxy where needed.\r\n\r\nThe  `should_bypass_proxies` is applied outside `get_environ_proxies` in `merge_environment_settings`, since `no_proxy` is only applied to OS ENV and not the proxies set in `requests` or `Sessions`\r\n\r\nShould close #4871, I hope.",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "Suika",
                "id": 2320837,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5596/reactions",
                "total_count": 4,
                "+1": 4,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1160645410",
                    "id": 1160645410,
                    "created_at": "2022-06-20T16:27:46Z",
                    "updated_at": "2022-06-20T16:27:46Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This patched fixed #5731 for me. I was very surprised this patch has not gotten any attention yet. Is there anything missing before it can be considered?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1160645410/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "RichieB2B",
                        "id": 1461970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005672132247127593,
                        "severe_toxicity": 0.00012752901238854975,
                        "obscene": 0.00018445501336827874,
                        "threat": 0.00012649086420424283,
                        "insult": 0.00017957967065740377,
                        "identity_attack": 0.00014380403445102274
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1317102622",
                    "id": 1317102622,
                    "created_at": "2022-11-16T14:23:34Z",
                    "updated_at": "2022-11-16T14:23:34Z",
                    "author_association": "NONE",
                    "body": "Hi @Suika and @RichieB2B, we are also dealing with this issue, any updates?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1317102622/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kurago-dev",
                        "id": 103569850,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006307461299002171,
                        "severe_toxicity": 0.00011931631161132827,
                        "obscene": 0.0001793708943296224,
                        "threat": 0.00013057603791821748,
                        "insult": 0.00017591826326679438,
                        "identity_attack": 0.00013781827874481678
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1317579183",
                    "id": 1317579183,
                    "created_at": "2022-11-16T19:45:42Z",
                    "updated_at": "2022-11-16T19:45:42Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I found a work around that I described at https://github.com/psf/requests/issues/5731#issuecomment-1162215349 and in #6172 \r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1317579183/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "RichieB2B",
                        "id": 1461970,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000596218800637871,
                        "severe_toxicity": 0.00012386117305140942,
                        "obscene": 0.00018580876349005848,
                        "threat": 0.00012258255446795374,
                        "insult": 0.00017625809414312243,
                        "identity_attack": 0.00013904270599596202
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1403476580",
                    "id": 1403476580,
                    "created_at": "2023-01-25T11:38:26Z",
                    "updated_at": "2023-01-25T11:38:26Z",
                    "author_association": "NONE",
                    "body": "Hi, we are also being hit by that and would appreciate if this issue would be fixed.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1403476580/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "livenson",
                        "id": 524168,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008716442389413714,
                        "severe_toxicity": 0.00010670597839634866,
                        "obscene": 0.00017472033505328,
                        "threat": 0.00012202882498968393,
                        "insult": 0.0001815760915633291,
                        "identity_attack": 0.00014006013225298375
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1833747935",
                    "id": 1833747935,
                    "created_at": "2023-11-30T13:03:07Z",
                    "updated_at": "2023-11-30T13:03:07Z",
                    "author_association": "NONE",
                    "body": "Also being hit by this; in our case it's setting `proxies` on the Session instance, but then the call to `proxies = merge_settings(...)` basically doesn't respect `should_bypass_proxy()` because it happens later.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1833747935/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "JMMarchant",
                        "id": 13064654,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009165119263343513,
                        "severe_toxicity": 0.0001070480138878338,
                        "obscene": 0.00019488076213747263,
                        "threat": 0.00011140125570818782,
                        "insult": 0.0001784643391147256,
                        "identity_attack": 0.00013854850840289146
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1961184126",
                    "id": 1961184126,
                    "created_at": "2024-02-23T11:45:10Z",
                    "updated_at": "2024-02-23T11:45:10Z",
                    "author_association": "NONE",
                    "body": "@Suika thank you for your work\r\n\r\n> any updates?\r\n\r\nthis issue is known for at least 5 years (#4871)\r\nso i would not wait for \"maintainers\" to merge this patch\r\n\r\nin general, waiting for pypi releases is a bad habit\r\njust add this fork as a git module in `vendor/requests`\r\nuse `sys.path.append(\"vendor/requests/src\")` and get on with life...\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1961184126/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "milahu",
                        "id": 12958815,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008677246514707804,
                        "severe_toxicity": 0.00010661668056854978,
                        "obscene": 0.0001777968427632004,
                        "threat": 0.00012679155042860657,
                        "insult": 0.00018376809020992368,
                        "identity_attack": 0.0001354456035187468
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2113927552",
                    "id": 2113927552,
                    "created_at": "2024-05-16T03:04:25Z",
                    "updated_at": "2024-05-16T03:04:25Z",
                    "author_association": "NONE",
                    "body": "LGTM, im working for corp env, when setting up a Windows proxy, the 'no' and 'no_proxy' are fail in requests.get('http://localhost:8000', proxies={'http': proxy, 'https': proxy, 'no': 'localhost, 127.0.0.1'})\r\n![image](https://github.com/psf/requests/assets/65639657/f182566c-20f4-46e8-aabf-6ec5c342d26d)\r\n![image](https://github.com/psf/requests/assets/65639657/8fdff2f1-063b-4587-ad7d-7dcbb1be7b61)\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2113927552/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "pinnnkman",
                        "id": 65639657,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012030916986986995,
                        "severe_toxicity": 0.00010082402877742425,
                        "obscene": 0.0002192488027503714,
                        "threat": 0.00010178947559325024,
                        "insult": 0.00018378176901023835,
                        "identity_attack": 0.00013573624892160296
                    }
                }
            ]
        },
        "144": {
            "html_url": "https://github.com/psf/requests/issues/5575",
            "id": 692373612,
            "number": 5575,
            "title": "Requests ignores HSTS if redirected to http:// version of site",
            "created_at": "2020-09-03T21:18:32Z",
            "updated_at": "2020-10-14T13:24:55Z",
            "closed_at": null,
            "body": "Requests will follow an unencrypted http:// redirect from a site that implements HSTS.\r\n\r\n## Expected Result\r\n\r\nI expected Requests to force https:// handling of all http:// URLs for a site which has advertised Strict-Transport-Security.\r\n\r\n## Actual Result\r\n\r\nRequests followed a 301 redirect to Location: http://site and, since port 80 was blocked for that site, spun forever and timed out.  \r\n\r\n(Note, the fact that an HSTS site is redirecting to a closed and unencrypted port is a sin on the site's behalf, not being defended here, but it illustrates the HSTS handling very nicely.  Requests times out because it tries to follow the http:// link.  Chrome, Firefox, Edge, and Internet Explorer all ignore the http:// referral and rewrite it as https://, arriving at the target landing page.  Chrome developer mode describes it as a \"307 Internal Redirect\" and \"Non-Authoritative-Reason: HSTS\").\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nr = requests.get('https://olb.bsf.net', timeout=(3,15))\r\n\r\n```\r\nSite sends a 302 Redirect to /login, then a 301 Redirect to http://olb.bsf.net/login/.  This last redirect to an unencrypted URL is what exposes the behavior.  Since the site doesn't listen on port 80, this request will time out and throw an urllib3.exceptions.MaxRetryError error.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.7.6-x86_64-linode136\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 8,
            "state": "open",
            "user": {
                "login": "gowenfawr",
                "id": 6210340,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5575/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/687072118",
                    "id": 687072118,
                    "created_at": "2020-09-04T10:49:19Z",
                    "updated_at": "2020-09-04T10:49:19Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "See also https://github.com/psf/requests/issues/3872 - this isn't supported by Requests (unfortunately) and the corresponding work in urllib3 never landed",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/687072118/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006476811831817031,
                        "severe_toxicity": 0.00011738159810192883,
                        "obscene": 0.0001768607908161357,
                        "threat": 0.00012015263928333297,
                        "insult": 0.00017344224033877254,
                        "identity_attack": 0.0001387293596053496
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/708259824",
                    "id": 708259824,
                    "created_at": "2020-10-14T08:52:22Z",
                    "updated_at": "2020-10-14T08:52:22Z",
                    "author_association": "NONE",
                    "body": "@gowenfawr can you please confirm that the redirect stucks on the _second_ redirect (which explicitly mentions http:// )? \r\nI noticed a probably similar (or at least connecting) issue, I made a GET request against https://my-site/delete-confirm/ which replied with 302 and location=/delete-success in headers and then I got a \r\nConnectionError: HTTPConnectionPool(host='my-site', **port:80**) max retries exceeded with url: /delete-success.\r\nMy expectation (based on https://tools.ietf.org/html/rfc3986#section-5) is that since the first request is made against https://, the second one should do the same but apparently it uses http://. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/708259824/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "visko-sc",
                        "id": 66418513,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006668513524346054,
                        "severe_toxicity": 0.00011653211549855769,
                        "obscene": 0.00019239106040913612,
                        "threat": 0.0001161814943770878,
                        "insult": 0.0001703331945464015,
                        "identity_attack": 0.00013335005496628582
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/708318645",
                    "id": 708318645,
                    "created_at": "2020-10-14T10:40:06Z",
                    "updated_at": "2020-10-14T10:40:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@visko-sc can you share how you're confirming this? I wonder if you could try using a session (`s`) and sending the original request with `allow_redirects=False` and then call `next(s.resolve_redirects(resp, resp.request, yield_requests=True))` and inspect the `.url` attribute to verify your theory. If the location is `/delete-success` you're correct that it should be using `https://`. (That's what https://github.com/psf/requests/blob/143150233162d609330941ec2aacde5ed4caa510/requests/sessions.py#L188 does)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/708318645/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006458757561631501,
                        "severe_toxicity": 0.00011692335101542994,
                        "obscene": 0.00018447841284796596,
                        "threat": 0.00011745280789909884,
                        "insult": 0.00016993671306408942,
                        "identity_attack": 0.00013529071293305606
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/708335594",
                    "id": 708335594,
                    "created_at": "2020-10-14T11:16:38Z",
                    "updated_at": "2020-10-14T11:16:38Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 with the session, the resolved redirect shows correct value:\r\n`prepped = next(s.resolve_redirects(resp, resp.request, yield_requests=True))` and \r\n`prepped.url == https://my-site/delete-success`.\r\nHowever, when I do `session.send(prepped, timeout=10)`, I get\r\n`{ConnectTimeout}HTTPConnectionPool(host='my-site', port=80): Max retries exceeded with url: /delete-success/ (Caused by ConnectTimeoutError(<urllib3.connection.HTTPConnection object at 0x7f397cf097f0>, 'Connection to my-site timed out. (connect timeout=10)'))`\r\n\r\nPreviously what I have done:\r\n- `requests.get('https://my-site/delete-confirm')` raised the same exception as above and \r\n- `requests.get('https://my-site/delete-confirm', allow_redirects=False)` returned with a Response object where\r\n`response.headers['location'] == '/delete-success'`",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/708335594/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "visko-sc",
                        "id": 66418513,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007093025487847626,
                        "severe_toxicity": 0.00011956971866311505,
                        "obscene": 0.00020650061196647584,
                        "threat": 0.00011711863771779463,
                        "insult": 0.0001763742620823905,
                        "identity_attack": 0.00013815036800224334
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/708376481",
                    "id": 708376481,
                    "created_at": "2020-10-14T12:43:26Z",
                    "updated_at": "2020-10-14T12:43:26Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So can you alter `session.send(prepped, timeout=10)` to `session.send(prepped, timeout=10, allow_redirects=False)` and see if you get another redirect and where that one sends you?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/708376481/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008463297854177654,
                        "severe_toxicity": 0.00010651374032022431,
                        "obscene": 0.00018215840100310743,
                        "threat": 0.00011873066978296265,
                        "insult": 0.0001807893713703379,
                        "identity_attack": 0.00013108778512105346
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/708378817",
                    "id": 708378817,
                    "created_at": "2020-10-14T12:47:51Z",
                    "updated_at": "2020-10-14T12:47:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "(To be clear, I have a suspicion your server is redirecting you to `http://` eventually expecting HSTS to kick in but we don't support HSTS so we're doing what the server has told us to do.)\r\n\r\nAlso, do you actually get a `strict-transport-secuity` header at any point?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/708378817/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006113225244916975,
                        "severe_toxicity": 0.0001209740512422286,
                        "obscene": 0.00018009392078965902,
                        "threat": 0.00012494683323893696,
                        "insult": 0.00017399746866431087,
                        "identity_attack": 0.00013840287283528596
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/708398762",
                    "id": 708398762,
                    "created_at": "2020-10-14T13:23:10Z",
                    "updated_at": "2020-10-14T13:23:10Z",
                    "author_association": "NONE",
                    "body": "Oh, you are right, 302 is followed by 301, this time pointing to `http://my-site/delete-success`. I do get the `strict-transport-security`, but I understand that this is not supported yet. Thanks for your time and pointing out this issue.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/708398762/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "visko-sc",
                        "id": 66418513,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00055484235053882,
                        "severe_toxicity": 0.00013124212273396552,
                        "obscene": 0.00019442400662228465,
                        "threat": 0.00012759592209476978,
                        "insult": 0.00017633575771469623,
                        "identity_attack": 0.00014377525076270103
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/708399783",
                    "id": 708399783,
                    "created_at": "2020-10-14T13:24:55Z",
                    "updated_at": "2020-10-14T13:24:55Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@visko-sc no worries. My hope is that our conversation debugging this helps others understand how to debug it as well. I have ideas on how HSTS might be supported, but no time to implement them",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/708399783/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006350640906020999,
                        "severe_toxicity": 0.0001199685430037789,
                        "obscene": 0.00017165728786494583,
                        "threat": 0.00012940631131641567,
                        "insult": 0.00017658949946053326,
                        "identity_attack": 0.00014278759772423655
                    }
                }
            ]
        },
        "145": {
            "html_url": "https://github.com/psf/requests/issues/5544",
            "id": 668903401,
            "number": 5544,
            "title": "Raising readtimeout instead of connecttimeout",
            "created_at": "2020-07-30T15:57:31Z",
            "updated_at": "2021-08-10T13:47:24Z",
            "closed_at": null,
            "body": "My timeout is set to `(1,10)` AKA connect=1, read=10 and when it times out, I can see either:\r\n\r\n> HTTPSConnectionPool(host='cloud-collector.newrelic.com', port=443): Read timed out. (read timeout=10)\r\n\r\nor \r\n\r\n> HTTPSConnectionPool(host='cloud-collector.newrelic.com', port=443): Read timed out. (read timeout=1)\r\n\r\n<img width=\"1320\" alt=\"Screenshot 2020-07-30 at 16 36 08\" src=\"https://user-images.githubusercontent.com/1932338/88945113-7d20b400-d285-11ea-8189-ea68dfc7e9ff.png\">\r\n\r\nThe second one looks like definitely a connect timeout and should mention `connect` instead of `read`. Currently it's possibly making one believe that the timeouts are not being applied correctly.",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "stephanebruckert",
                "id": 1932338,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5544/reactions",
                "total_count": 1,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 1
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/689672061",
                    "id": 689672061,
                    "created_at": "2020-09-09T16:23:51Z",
                    "updated_at": "2020-09-09T16:23:51Z",
                    "author_association": "NONE",
                    "body": "I'm not sure if this is related, but it's a read timeout issue.  I have timeout=60 but this exception is thrown <= 154ms after the post?\r\n```\r\n2020-09-06 09:28:12,599 Controller polyinterface      DEBUG    pgSession: Ecobee Controller:post: Sending: url=https://api.ecobee.com/token payload={}\r\n2020-09-06 09:29:12,735 Controller polyinterface      ERROR    pgSession: Ecobee Controller:post: Connection error for https://api.ecobee.com/token: HTTPSConnectionPool(host='api.ecobee.com', port=443): Read timed out. (read timeout=60)\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/689672061/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jimboca",
                        "id": 1578044,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006721948739141226,
                        "severe_toxicity": 0.0001156600919784978,
                        "obscene": 0.00018737584468908608,
                        "threat": 0.00011774694576160982,
                        "insult": 0.00017400576325599104,
                        "identity_attack": 0.00013474238221533597
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/696767443",
                    "id": 696767443,
                    "created_at": "2020-09-22T14:42:28Z",
                    "updated_at": "2020-09-22T14:45:18Z",
                    "author_association": "NONE",
                    "body": "I have the same problem. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/696767443/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "shmilylty",
                        "id": 24275308,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008891848265193403,
                        "severe_toxicity": 0.00011100180563516915,
                        "obscene": 0.00019218608213122934,
                        "threat": 0.00010245508019579574,
                        "insult": 0.0001826023799367249,
                        "identity_attack": 0.0001423100766260177
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/696768298",
                    "id": 696768298,
                    "created_at": "2020-09-22T14:43:49Z",
                    "updated_at": "2020-09-22T14:43:49Z",
                    "author_association": "MEMBER",
                    "body": "Please do not ping random people.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/696768298/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "alex",
                        "id": 772,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007560044759884477,
                        "severe_toxicity": 0.0001128893782151863,
                        "obscene": 0.00016925172531045973,
                        "threat": 0.00012858807167503983,
                        "insult": 0.00018612935673445463,
                        "identity_attack": 0.00013766933989245445
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/696772147",
                    "id": 696772147,
                    "created_at": "2020-09-22T14:49:59Z",
                    "updated_at": "2020-09-22T14:49:59Z",
                    "author_association": "NONE",
                    "body": "> Please do not ping random people.\r\n\r\nI'm sorry, I didn't notice the problem.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/696772147/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "shmilylty",
                        "id": 24275308,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007253183866851032,
                        "severe_toxicity": 0.00011332177382428199,
                        "obscene": 0.00016924412921071053,
                        "threat": 0.00012190460256533697,
                        "insult": 0.00018082367023453116,
                        "identity_attack": 0.0001372595870634541
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/745078955",
                    "id": 745078955,
                    "created_at": "2020-12-15T06:17:28Z",
                    "updated_at": "2020-12-15T06:17:28Z",
                    "author_association": "NONE",
                    "body": "I have the same issue too. And when I narrow down connect timeout to 0.01, It raise the correct ConnectTimeout Exception.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/745078955/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Ovi3",
                        "id": 29408109,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006288643344305456,
                        "severe_toxicity": 0.00012194192822789773,
                        "obscene": 0.00018794269999489188,
                        "threat": 0.00012097923900000751,
                        "insult": 0.0001756872661644593,
                        "identity_attack": 0.0001391396508552134
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/773727941",
                    "id": 773727941,
                    "created_at": "2021-02-05T01:59:15Z",
                    "updated_at": "2021-02-05T01:59:15Z",
                    "author_association": "NONE",
                    "body": "both are related...depending on your OS, if our OS have TCP keepalive enable you will get a ReadTimeout, if not, probably will get ConnectionTimeout or ConnectionReset.... please make sure you have tcp KA enabled\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/773727941/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000637994846329093,
                        "severe_toxicity": 0.00012087038339814171,
                        "obscene": 0.00018350212485529482,
                        "threat": 0.00012905891344416887,
                        "insult": 0.00017557792307343334,
                        "identity_attack": 0.00013816803402733058
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/896043148",
                    "id": 896043148,
                    "created_at": "2021-08-10T13:47:24Z",
                    "updated_at": "2021-08-10T13:47:24Z",
                    "author_association": "NONE",
                    "body": "I've found this issue at the urllib3 github page - they seems to be related ;)\r\nhttps://github.com/urllib3/urllib3/issues/1366\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/896043148/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kodokami",
                        "id": 35411417,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006493302062153816,
                        "severe_toxicity": 0.00011871187598444521,
                        "obscene": 0.00018058950081467628,
                        "threat": 0.00012347179290372878,
                        "insult": 0.00017677716095931828,
                        "identity_attack": 0.00013913925795350224
                    }
                }
            ]
        },
        "146": {
            "html_url": "https://github.com/psf/requests/issues/5540",
            "id": 665135091,
            "number": 5540,
            "title": "iter_lines is still broken?",
            "created_at": "2020-07-24T12:27:57Z",
            "updated_at": "2023-11-10T21:01:17Z",
            "closed_at": null,
            "body": "I don't understand.\r\n\r\nI can't iterate \"\\r\\n\" because \"\\r\" and \"\\n\" can be read into different chunks. \r\n\r\nBut I can't even get solve this problem by explicitly setting the final delimiter \"\\n\"\r\n\r\n      for line in (_.strip() for _ in resp.iter_lines(delimiter=b\"\\n\")):\r\n          print(line)\r\n\r\nbecause if chunk end with \"\\r\\n\", then `lines = chunk.split(delimiter)` in `iter_lines` append empty extra line (but chunk.splitlines() not)\r\n\r\nthe same problem and just with \"\\n\" - if chunk end with delimiter, then we get an extra empty line. Which forces you to set a large buffer size if line length is unknown\r\n\r\n\r\nSo if the `split(...)` adds an extra line, why not remove it?\r\n\r\n        if delimiter:\r\n            lines = chunk.split(delimiter)\r\n            if lines and not lines[-1]:\r\n                lines.pop(-1)\r\n        else:\r\n            lines = chunk.splitlines()\r\n\r\n",
            "author_association": "NONE",
            "comments": 9,
            "state": "open",
            "user": {
                "login": "vitidev",
                "id": 2243958,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5540/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/663649778",
                    "id": 663649778,
                    "created_at": "2020-07-24T17:32:07Z",
                    "updated_at": "2020-07-24T17:32:07Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> I can't iterate \"\\r\\n\" because \"\\r\" and \"\\n\" can be read into different chunks.\r\n\r\n\r\n\r\n>  I can't even get solve this problem\r\n\r\nI still don't understand your problem but I think you have unrealistic expectations of what iter_lines does. Your issue isn't cogent enough for me to make sense of it and sounds like you're having trouble using the API which makes this appropriate for StackOverflow. You've not identified a clear bug (from what little I can understand in your issue) with the documented API",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/663649778/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0013691103085875511,
                        "severe_toxicity": 9.41792968660593e-05,
                        "obscene": 0.00021100635058246553,
                        "threat": 0.0001083681927411817,
                        "insult": 0.00019306897593196481,
                        "identity_attack": 0.00013786520867142826
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/663696165",
                    "id": 663696165,
                    "created_at": "2020-07-24T19:26:19Z",
                    "updated_at": "2020-07-24T19:27:51Z",
                    "author_association": "NONE",
                    "body": "I expect that\r\n\r\n    with open('src.txt', 'r') as f:\r\n          for line in f:\r\n\r\n   and with the same file\r\n\r\n    resp = requests.get('http://127.0.0.1:5000/src.txt', stream=True)\r\n           for line in resp.iter_lines(delimiter=b\"\\n\"):\r\n\r\nShould be equivalent\r\n\r\nfile `src.txt` contains \"\\r\\n\" and I don't expect it to work correctly because the current implementation is broken [#4629](https://github.com/psf/requests/pull/4629),  [#3894](https://github.com/psf/requests/pull/3984), [#4271](https://github.com/psf/requests/issues/4271), [#2431](https://github.com/psf/requests/pull/2431)\r\n\r\nSo I use an explicit **single byte** delimiter \"\\n\", and expect everything to be fine. \r\n\r\nBut in this case internals begins to be used `chunk.split`, which leads to the appearance of empty lines (which are not in the original file.\r\n\r\nI see this is an old known issue. Here I see in the comments to the code `requests/models.py` (v3.0)\r\n\r\n      # Calling `.split(delimiter)` will always end with whatever text\r\n      # remains beyond the delimiter, or '' if the delimiter is the end\r\n      # of the text.  On the other hand, `.splitlines()` doesn't include\r\n      # a '' if the text ends in a line delimiter.\r\n      #\r\n      # For example:\r\n      #\r\n      #     'abc\\ndef\\n'.split('\\n')  ~> ['abc', 'def', '']\r\n      #     'abc\\ndef\\n'.splitlines() ~> ['abc', 'def']\r\n      #\r\n      # So if we have a specified delimiter, we always pop the final\r\n      # item and prepend it to the next chunk.\r\n      #\r\n      # If we're using `splitlines()`, we only do this if the chunk\r\n      # ended midway through a line.\r\n\r\nso this is both a description of the problem and a question - why not fix this aspect for versions 2.x? I don't see any breaking changes here. the function will stop producing empty strings that it shouldn't already. And I will be able to use built in `iter-lines` functionality instead of custom implementation.\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/663696165/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vitidev",
                        "id": 2243958,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0021795076318085194,
                        "severe_toxicity": 0.00010600458335829899,
                        "obscene": 0.0003534128190949559,
                        "threat": 0.00011760421330109239,
                        "insult": 0.000218391083762981,
                        "identity_attack": 0.00014223126345314085
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/663999975",
                    "id": 663999975,
                    "created_at": "2020-07-26T15:09:01Z",
                    "updated_at": "2020-07-26T15:09:01Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> why not fix this aspect for versions 2.x? I\r\n\r\n3.0 is never happening, so it won't be backported to 2.x\r\n\r\n> I don't see any breaking changes here.\r\n\r\nI'm not surprised. Unfortunately a lot of things are incredibly closely attached to the current behaviour of this library and even if we can say \"Well they _shouldn't_ be relying on that\" it would still break those folks and would be backwards incompatible as a result. The unfortunate reality is that you and I can't predict every way that someone uses this library. Just because you can't see a reason for using it that way, doesn't mean someone is and strong backwards-compatibility is important at this stage. \r\n\r\nIf 3.0 were to ever happen, that would be the time to change this behaviour but 3.0 isn't happening",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/663999975/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006574916187673807,
                        "severe_toxicity": 0.0001187746092909947,
                        "obscene": 0.00017978080722969025,
                        "threat": 0.0001259022974409163,
                        "insult": 0.00017169165948871523,
                        "identity_attack": 0.00014103134162724018
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/664175283",
                    "id": 664175283,
                    "created_at": "2020-07-27T07:38:41Z",
                    "updated_at": "2020-07-27T07:38:41Z",
                    "author_association": "NONE",
                    "body": ">The unfortunate reality is that you and I can't predict every way that someone uses this library.\r\n\r\nI can not agree.\r\n\r\nThe changes are different. And specifically, **these changes** do not break anything.\r\n\r\nThe method generates random empty lines. **And this is only a special case when the delimiter is specified**\r\n And the user only has 2 options:\r\n\r\n- ignore (filter) such empty lines, if there is knowledge that the source should not contain empty lines\r\n- not use a method at all, but its own implementation, because outside of the method, you cannot separate fake empty lines from real ones from the source.\r\n\r\nAnd if the method stops generating random empty lines, then will be no point in filtering, but it won't break anything\r\n\r\nIt is impossible to imagine that someone would base their logic on a side property (actually a bug) of the \"randomly generate empty lines\" method. To base logic on a side effect of a method that can (and should) be corrected at any time is extremely dumb\r\n\r\nAnd for those who do not use an explicit delimiter, nothing will change at all.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/664175283/reactions",
                        "total_count": 5,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vitidev",
                        "id": 2243958,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.006509519647806883,
                        "severe_toxicity": 0.00010171117901336402,
                        "obscene": 0.00046094213030301034,
                        "threat": 0.00015185757365543395,
                        "insult": 0.0004240433918312192,
                        "identity_attack": 0.00020682180183939636
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1407249526",
                    "id": 1407249526,
                    "created_at": "2023-01-28T01:48:14Z",
                    "updated_at": "2023-01-28T05:08:09Z",
                    "author_association": "NONE",
                    "body": "@calpeterson ran into this same issue, and filed saulpw/visidata#1704.\r\n\r\nI agree with @vitidev that `iter_lines()` should behave identically to iterating over the exact same file contents on local disk using a standard file pointer.  Otherwise it is a subtly wrong function, as it can generate spurious blank lines if the delimiter happens to straddle a chunk boundary.\r\n\r\nTracking down the various PRs, it seems like the fix in #3984 was eventually merged into a proposed 3.0 branch, but as @sigmavirus24 says above, \"3.0 isn't happening\".   So if I understand correctly, `iter_lines()` has a fundamental bug, no fix has been allowed into the current major version, and there will be no next major version.\r\n\r\nPlease allow a fix for this issue to be merged into the mainline requests library.  I assure you, more people are depending on the expected behavior than are depending on the broken behavior, and it is only a matter of time until they hit this bug.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1407249526/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "saulpw",
                        "id": 236498,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006952708936296403,
                        "severe_toxicity": 0.00012087798677384853,
                        "obscene": 0.0001938775385497138,
                        "threat": 0.0001245575986104086,
                        "insult": 0.00017723893688526005,
                        "identity_attack": 0.00014537312381435186
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1407255986",
                    "id": 1407255986,
                    "created_at": "2023-01-28T02:07:37Z",
                    "updated_at": "2023-01-28T02:07:37Z",
                    "author_association": "NONE",
                    "body": "I am curious about the claim that \"3.0 is never happening\". It contradicts this page where it seems requests is open to major releases, just they would be infrequent: https://requests.readthedocs.io/en/latest/community/release-process/#major-releases",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1407255986/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "anjakefala",
                        "id": 7489659,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005670905229635537,
                        "severe_toxicity": 0.00012698538193944842,
                        "obscene": 0.0001838546886574477,
                        "threat": 0.0001253112277481705,
                        "insult": 0.00017243536422029138,
                        "identity_attack": 0.00014254869893193245
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1804815108",
                    "id": 1804815108,
                    "created_at": "2023-11-09T22:59:02Z",
                    "updated_at": "2023-11-09T22:59:02Z",
                    "author_association": "NONE",
                    "body": "I'd be happy to try to develop a fix for this issue.\n\nSo long as the issue *isn't* fixed, it's a trap for the unwary, and the documentation should point out that it's broken.  Currently the documentation *actively encourages* people to use `iter_lines` together with `stream=True`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1804815108/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bemoody",
                        "id": 7748246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007997432840056717,
                        "severe_toxicity": 0.00010995014599757269,
                        "obscene": 0.00017323068459518254,
                        "threat": 0.00012359971879050136,
                        "insult": 0.00018068269127979875,
                        "identity_attack": 0.00014360369823407382
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1804852179",
                    "id": 1804852179,
                    "created_at": "2023-11-09T23:45:06Z",
                    "updated_at": "2023-11-09T23:45:06Z",
                    "author_association": "NONE",
                    "body": "The following might work but is untested.\n```\ndiff --git a/src/requests/models.py b/src/requests/models.py\nindex 44556394..6683ad92 100644\n--- a/src/requests/models.py\n+++ b/src/requests/models.py\n@@ -861,6 +861,13 @@ class Response:\n \n         pending = None\n \n+        if decode_unicode:\n+            lf = '\\n'\n+            cr = '\\r'\n+        else:\n+            lf = b'\\n'\n+            cr = b'\\r'\n+\n         for chunk in self.iter_content(\n             chunk_size=chunk_size, decode_unicode=decode_unicode\n         ):\n@@ -869,18 +876,48 @@ class Response:\n \n             if delimiter:\n                 lines = chunk.split(delimiter)\n-            else:\n-                lines = chunk.splitlines()\n-\n-            if lines and lines[-1] and chunk and lines[-1][-1] == chunk[-1]:\n+                # If the chunk ends with the delimiter, then lines[-1]\n+                # is empty.  Otherwise lines[-1] is not empty.  Either\n+                # way, lines[-1] shouldn't be treated as a separate\n+                # line, but should be prepended to the following\n+                # chunk.\n                 pending = lines.pop()\n             else:\n-                pending = None\n+                lines = chunk.splitlines()\n+                # If the chunk ends with 'XYZ\\n' or 'XYZ\\r\\n', then\n+                # lines[-1] is 'XYZ'.  Either way, the following byte\n+                # is the start of a new line.\n+                if chunk.endswith(lf):\n+                    pending = None\n+                # If the chunk ends with 'XYZ\\r', then lines[-1] is\n+                # 'XYZ'.  We don't know yet if the next byte will be\n+                # '\\n' (and should be treated as part of this line's\n+                # ending) or something else (and is the start of a new\n+                # line.)  So leave this line, with its '\\r', pending.\n+                elif chunk.endswith(cr):\n+                    pending = lines.pop() + cr\n+                # If the chunk doesn't end with '\\r' or '\\n', then\n+                # lines[-1] isn't a complete line and should be\n+                # prepended to the following chunk.\n+                else:\n+                    pending = lines.pop()\n \n             yield from lines\n \n         if pending is not None:\n-            yield pending\n+            if not delimiter:\n+                # If the final chunk ends with CR, then CR will have\n+                # been included in 'pending' above, and should be\n+                # discarded.  Note that when delimiter = None, the\n+                # caller wants splitlines() behavior, which means not\n+                # generating a final empty string if the response ends\n+                # with a line terminator.\n+                yield pending.rstrip(cr)\n+            else:\n+                # When delimiter != None, the caller wants split()\n+                # behavior, which means generating a final empty\n+                # string if the response ends with the delimiter.\n+                yield pending\n \n     @property\n     def content(self):\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1804852179/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bemoody",
                        "id": 7748246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0015695662004873157,
                        "severe_toxicity": 0.00010206951264990494,
                        "obscene": 0.00026506269932724535,
                        "threat": 0.00011319033364998177,
                        "insult": 0.00019463693024590611,
                        "identity_attack": 0.00014125098823569715
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1806424883",
                    "id": 1806424883,
                    "created_at": "2023-11-10T21:01:17Z",
                    "updated_at": "2023-11-10T21:01:17Z",
                    "author_association": "NONE",
                    "body": "I'll say one more thing on the question of backward compatibility.\n\nI found 82 instances of `.iter_lines(` in Debian:\nhttps://codesearch.debian.net/search?literal=1&q=.iter_lines(+filetype%3Apython+-package%3Arequests\n\nBased on a *very* quick assessment:\n- 29 instances are unrelated to Requests.\n- 25 instances are broken in some way because of this bug.  (I didn't count how many of them were using `stream=True`.)\n- 25 instances are not broken because they ignore blank lines.\n- 3 instances I couldn't immediately assess.\n\nSo that's 50% of actual users of this method that are currently broken, and 0% that would be rendered broken by fixing this bug.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1806424883/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bemoody",
                        "id": 7748246,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006829544436186552,
                        "severe_toxicity": 0.00011478222586447373,
                        "obscene": 0.00018246313265990466,
                        "threat": 0.00011700142931658775,
                        "insult": 0.00017381904763169587,
                        "identity_attack": 0.00013823549670632929
                    }
                }
            ]
        },
        "147": {
            "html_url": "https://github.com/psf/requests/issues/5536",
            "id": 660816593,
            "number": 5536,
            "title": "When stream=True iter_content(chunk_size=None) reads the input as a single big chunk",
            "created_at": "2020-07-19T12:45:58Z",
            "updated_at": "2023-11-09T15:26:01Z",
            "closed_at": null,
            "body": "[According to the documentation](https://2.python-requests.org/en/master/api/#requests.Response.iter_content) when stream=True iter_content(chunk_size=None) \"will read data as it arrives in whatever size the chunks are received\", But it actually collects all input into a single big bytes object consuming large amounts of memory and entirely defeating the purpose of iter_content().\r\n\r\n## Expected Result\r\n\r\niter_content(chunk_size=None) yields \"data as it arrives in whatever size the chunks are received\".\r\n\r\n## Actual Result\r\n\r\nA single big chunk\r\n\r\n## Reproduction Steps\r\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/hexagonrecursion/requests-bug/c34439734aca44a8b5df85d606b2ac63ca0510f0?filepath=repro.ipynb)\r\n```python\r\nfrom requests import get\r\nURL = 'https://dl.fedoraproject.org/pub/alt/iot/32/IoT/x86_64/images/Fedora-IoT-32-20200603.0.x86_64.raw.xz'\r\nr = get(URL, stream=True)\r\nfor b in r.iter_content(chunk_size=None):\r\n    print(len(b))\r\n```\r\nprints\r\n```\r\n533830860\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.9.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.9\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.104+\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010107f\",\r\n    \"version\": \"19.1.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.23.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010107f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.9\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 15,
            "state": "open",
            "user": {
                "login": "hexagonrecursion",
                "id": 52621858,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5536/reactions",
                "total_count": 5,
                "+1": 5,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/660660298",
                    "id": 660660298,
                    "created_at": "2020-07-19T15:10:13Z",
                    "updated_at": "2020-07-19T15:10:13Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "`chunk_size=None` as you've quoted relies on the size of the data as sent by the server. If there server is sending everything all at once and it's all on the socket, what do you expect the library to do differently?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/660660298/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006601306376978755,
                        "severe_toxicity": 0.00011514552898006514,
                        "obscene": 0.0001766541536198929,
                        "threat": 0.00011774548329412937,
                        "insult": 0.0001748670038068667,
                        "identity_attack": 0.00013575423508882523
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/660667947",
                    "id": 660667947,
                    "created_at": "2020-07-19T16:00:13Z",
                    "updated_at": "2020-07-19T16:00:13Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 I don't think the server sends the file all at once. The example above produces no output for ~30 seconds and then prints 533830860. This starts printing right away:\r\n```python3\r\nfrom requests import get\r\nURL = 'https://dl.fedoraproject.org/pub/alt/iot/32/IoT/x86_64/images/Fedora-IoT-32-20200603.0.x86_64.raw.xz'\r\nr = get(URL, stream=True)\r\nfor b in r.iter_content(chunk_size=2**23):\r\n    print(len(b))\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/660667947/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hexagonrecursion",
                        "id": 52621858,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000750903389416635,
                        "severe_toxicity": 0.00011046508006984368,
                        "obscene": 0.000188434001756832,
                        "threat": 0.00011321397323627025,
                        "insult": 0.00017240412125829607,
                        "identity_attack": 0.0001326978235738352
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/664434720",
                    "id": 664434720,
                    "created_at": "2020-07-27T14:35:54Z",
                    "updated_at": "2020-07-27T14:43:06Z",
                    "author_association": "NONE",
                    "body": "I have the same issue with 2.24.0\r\n\r\nWhen I use a `chunk_size` of `1` I get the expected output but with a huge overhead.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/664434720/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "laktak",
                        "id": 959858,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007343418546952307,
                        "severe_toxicity": 0.00011396100308047608,
                        "obscene": 0.00017958771786652505,
                        "threat": 0.00011441374954301864,
                        "insult": 0.00017697397561278194,
                        "identity_attack": 0.0001399977772962302
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/739646016",
                    "id": 739646016,
                    "created_at": "2020-12-07T03:49:04Z",
                    "updated_at": "2020-12-07T03:49:04Z",
                    "author_association": "NONE",
                    "body": "Can confirm the same is occurring.\r\n\r\nWorks as with `chunk_size=1`, hangs with `None`.\r\n\r\nCan try to put together a reproducible example if that's helpful?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/739646016/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "djrobstep",
                        "id": 2441221,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006453385576605797,
                        "severe_toxicity": 0.00011819298379123211,
                        "obscene": 0.0001806189538910985,
                        "threat": 0.00011962185089942068,
                        "insult": 0.00017694427515380085,
                        "identity_attack": 0.0001370692771160975
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/751926306",
                    "id": 751926306,
                    "created_at": "2020-12-29T02:42:31Z",
                    "updated_at": "2020-12-29T02:42:31Z",
                    "author_association": "NONE",
                    "body": "As promised, here's a reproducible example against httpbin.org:\r\n\r\n```\r\nimport requests\r\nchunk_size = None\r\n\r\nURL = 'https://httpbin.org/drip?duration=2'\r\n\r\nr = requests.get(URL, stream=True)\r\n\r\nfor x in r.iter_content(chunk_size=chunk_size):\r\n    print(f'response: {x}')\r\n```\r\n\r\nRun this and you'll see that `iter_content` waits until the request is fully complete to return anything.\r\n\r\nChange the chunk_size to 1 and everything works nicely (albeit with high overhead).\r\n\r\nIf somebody can point me in the right direction, I'm happy to investigate this and do what is required to fix it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/751926306/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "djrobstep",
                        "id": 2441221,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000639155157841742,
                        "severe_toxicity": 0.00011963210999965668,
                        "obscene": 0.00018256076145917177,
                        "threat": 0.00013120734365656972,
                        "insult": 0.00017205368203576654,
                        "identity_attack": 0.0001367777440464124
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1083354701",
                    "id": 1083354701,
                    "created_at": "2022-03-30T16:23:37Z",
                    "updated_at": "2022-03-30T16:23:37Z",
                    "author_association": "NONE",
                    "body": "Any resolution to this? I am also still seeing this on v2.25.1",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1083354701/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "stephen-goveia",
                        "id": 27365528,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006528373924084008,
                        "severe_toxicity": 0.00011697822628775612,
                        "obscene": 0.0001777373399818316,
                        "threat": 0.00012702813546638936,
                        "insult": 0.0001740485749905929,
                        "identity_attack": 0.0001384862989652902
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1083394590",
                    "id": 1083394590,
                    "created_at": "2022-03-30T17:04:33Z",
                    "updated_at": "2022-03-30T17:04:33Z",
                    "author_association": "MEMBER",
                    "body": "Hi @stephen-goveia, this is a behavior in urllib3 as noted in urllib3/urllib3#2123. We aren't able to change it in Requests, so the outcome will be determined by whether this makes it into the urllib3 v2 release.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1083394590/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000622509338427335,
                        "severe_toxicity": 0.00012168219836894423,
                        "obscene": 0.00019147602142766118,
                        "threat": 0.0001221467537106946,
                        "insult": 0.00017545590526424348,
                        "identity_attack": 0.00013797765132039785
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1083436628",
                    "id": 1083436628,
                    "created_at": "2022-03-30T17:47:50Z",
                    "updated_at": "2022-03-30T17:47:50Z",
                    "author_association": "NONE",
                    "body": "thanks @nateprewitt!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1083436628/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "stephen-goveia",
                        "id": 27365528,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0017842903034761548,
                        "severe_toxicity": 8.927132148528472e-05,
                        "obscene": 0.00021227683464530855,
                        "threat": 9.88078536465764e-05,
                        "insult": 0.0002040676772594452,
                        "identity_attack": 0.00014666352944914252
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1214813157",
                    "id": 1214813157,
                    "created_at": "2022-08-15T09:26:52Z",
                    "updated_at": "2022-08-18T17:25:54Z",
                    "author_association": "NONE",
                    "body": "Hi. I don't understand why this issue is still open.\r\nHere is a link to [the official documentation](https://requests.readthedocs.io/en/latest/api/#requests.Response.iter_content).\r\n\r\n> chunk_size must be of type int or None. A value of None will function differently depending on the value of stream. stream=True will read data as it arrives in whatever size the chunks are received. If stream=False, data is returned as a single chunk.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1214813157/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Karmavil",
                        "id": 2354060,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006448922213166952,
                        "severe_toxicity": 0.00011714924039551988,
                        "obscene": 0.0001817467127693817,
                        "threat": 0.00011967181490035728,
                        "insult": 0.00017337709141429514,
                        "identity_attack": 0.00013562601816374809
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1221861363",
                    "id": 1221861363,
                    "created_at": "2022-08-22T05:41:54Z",
                    "updated_at": "2022-08-22T05:41:54Z",
                    "author_association": "NONE",
                    "body": "Even after setting stream=True this is still an issue:\r\n\r\n```py3\r\nimport requests\r\nimport time\r\n\r\nchunk_size = None\r\n\r\nURL = 'https://httpbin.org/drip?duration=20&numbytes=4'\r\n\r\nr = requests.get(URL, stream=True)\r\n\r\nt = time.monotonic()\r\nfor x in r.iter_content(chunk_size=chunk_size):\r\n    t2 = time.monotonic()\r\n    print(f'{t2 - t}')\r\n    t = time.monotonic()    \r\n```\r\nprints:\r\n```\r\n15.593049310147762\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1221861363/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hexagonrecursion",
                        "id": 52621858,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008651315001770854,
                        "severe_toxicity": 0.0001064750540535897,
                        "obscene": 0.00020007336570415646,
                        "threat": 0.00010615550854709,
                        "insult": 0.00017485982971265912,
                        "identity_attack": 0.00013264620793052018
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1222289180",
                    "id": 1222289180,
                    "created_at": "2022-08-22T12:28:17Z",
                    "updated_at": "2022-08-22T12:28:17Z",
                    "author_association": "NONE",
                    "body": "Please keep in mind that I'm making this comment as a user, not as a contributor.\r\n\r\nYou're right. It is.. but please [read the documentation](https://requests.readthedocs.io/en/latest/api/#requests.Response.iter_content). \r\nAll I'm saying is that the documentation is clear enough, (**or at least it is today**):\r\n>  When stream=True is set on the request, this avoids reading the content at once into memory for large responses\r\n\r\nWhat should the module do when you ask not to download everything at once but to download \"Nothing\"? \r\nShould it throw an error? \r\nShould it not download anything at all?\r\n\r\nJust check the _content-length_ **header** and set a suitable chunk size when dealing with large files",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1222289180/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Karmavil",
                        "id": 2354060,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007512909360229969,
                        "severe_toxicity": 0.00011047541192965582,
                        "obscene": 0.0001741923624649644,
                        "threat": 0.00012110309035051614,
                        "insult": 0.00017424352699890733,
                        "identity_attack": 0.00013600157399196178
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1368028851",
                    "id": 1368028851,
                    "created_at": "2022-12-30T17:43:57Z",
                    "updated_at": "2022-12-30T17:43:57Z",
                    "author_association": "NONE",
                    "body": "It is not only about large files, it is also about SSE (server sent events). They are streamed, and clients expect them to arrive directly after the server sends them.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1368028851/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bablokb",
                        "id": 9638355,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007315173279494047,
                        "severe_toxicity": 0.0001152385666500777,
                        "obscene": 0.00017947268497664481,
                        "threat": 0.00012486607010941952,
                        "insult": 0.00017501763068139553,
                        "identity_attack": 0.00013693982327822596
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1673299166",
                    "id": 1673299166,
                    "created_at": "2023-08-10T14:10:37Z",
                    "updated_at": "2023-08-10T14:10:37Z",
                    "author_association": "NONE",
                    "body": "No movement on this in ~8 months... Any update?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1673299166/reactions",
                        "total_count": 2,
                        "+1": 0,
                        "-1": 2,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dmyoung9",
                        "id": 101432365,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006326253642328084,
                        "severe_toxicity": 0.00012194809823995456,
                        "obscene": 0.00018951890524476767,
                        "threat": 0.00012289937876630574,
                        "insult": 0.0001822525664465502,
                        "identity_attack": 0.00014023479889146984
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1676582026",
                    "id": 1676582026,
                    "created_at": "2023-08-14T02:27:04Z",
                    "updated_at": "2023-08-14T02:27:04Z",
                    "author_association": "NONE",
                    "body": "Possible workaround using the `Response.raw.stream()`, seems to work on my end:\r\n\r\n```python\r\nresp = requests.get(\"something\", stream=True)\r\nfor chunk in resp.raw.stream():\r\n   print(f\"chunk size: {len(chunk)}\")\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1676582026/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mbhynes",
                        "id": 10452129,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006611093413084745,
                        "severe_toxicity": 0.00011689247912727296,
                        "obscene": 0.00019222531409468502,
                        "threat": 0.00011756071035051718,
                        "insult": 0.00017442338867112994,
                        "identity_attack": 0.0001338366710115224
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1804043749",
                    "id": 1804043749,
                    "created_at": "2023-11-09T15:26:01Z",
                    "updated_at": "2023-11-09T15:26:01Z",
                    "author_association": "NONE",
                    "body": "@mbhynes Not sure what you were doing to have that \"work\", but it certainly doesn't do what I'd expect...\r\n\r\n```python\r\nimport requests\r\nurl = \"https://httpbin.org/drip?duration=2&numbytes=8\"\r\nresp = requests.get(url, stream=True)\r\nfor chunk in resp.raw.stream():\r\n   print(f\"chunk size: {len(chunk)}\")\r\n```\r\njust gives me a single 8-byte chunk back after 2 seconds, rather than 8 single byte chunks every few hundred milliseconds.\r\n\r\nI'd assume your endpoint happens to be returning the data via a \"chunked transfer encoding\" which has been able to handle streaming data in chunks for a long time already, but you could check by doing:\r\n```python\r\nprint(resp.headers.get(\"transfer-encoding\"))\r\n```\r\n---\r\nThat said, I've created a pull-request with `urllib3` (https://github.com/urllib3/urllib3/pull/3186) that can be built on to enable streaming in cases like this and I'd hope would allow the normal `iter_content` method to yield data in appropriately sized chunks.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1804043749/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "smason",
                        "id": 1433005,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007331626256927848,
                        "severe_toxicity": 0.0001134981430368498,
                        "obscene": 0.00019587349379435182,
                        "threat": 0.0001122536850743927,
                        "insult": 0.00017343577928841114,
                        "identity_attack": 0.0001343171315966174
                    }
                }
            ]
        },
        "148": {
            "html_url": "https://github.com/psf/requests/issues/5503",
            "id": 641242223,
            "number": 5503,
            "title": "Performance: Response.content is unnecessarily slow",
            "created_at": "2020-06-18T14:13:55Z",
            "updated_at": "2020-06-30T06:34:24Z",
            "closed_at": null,
            "body": "The core of Response.content looks like this (where CONTENT_CHUNK_SIZE is 10KB):\r\n```python\r\nself._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\r\n```\r\nThat is suboptimal for several reasons:\r\n1. All the data has to be read into a temporary `bytes`, then copied into the joined buffer.\r\n2. It's also memory-inefficient: the CPython implementation of bytes.join first converts the generator to a sequence, so if the content is 1GB, you will temporarily have 2GB of memory used.\r\n3. 10KB isn't really big enough to amortise all the overheads (increasing it significantly improves performance).\r\n\r\nIt looks like this used to be done with `self.raw.read`, but it was changed to the current approach [8 years ago](https://github.com/psf/requests/commit/00b13673e32e45d2eb6517c0cf81915467331d8f). I've tried a quick test to switch back to `self.raw.read(decode_content=True)`, but it's failing some unit tests, presumably because of subtleties in handling Content-Encoding. If the maintainers agree that this is worth pursuing then I can work on dealing with the corner cases to make a PR.\r\n\r\n## Expected Result\r\n\r\nI expect `resp.content` from a non-streamed request to have similar performance to `resp.raw.read()` from a streamed request.\r\n\r\n## Actual Result\r\n\r\nI've benchmarked `response.content` at 590 MB/s and `response.raw.read()`see sample code below) at 3180 MB/s \u2014 5.4x faster. With 10-25 Gb/s networking becoming pretty standard in the data centre, this represents a significant bottleneck.\r\n\r\n```python\r\ndef load_requests_naive(url: str) -> bytes:\r\n    with requests.get(url) as resp:\r\n        return resp.content\r\n\r\ndef load_requests_stream(url: str) -> bytes:\r\n    with requests.get(url, stream=True) as resp:\r\n        return resp.raw.read()\r\n```\r\n\r\n## Reproduction Steps\r\nYou'll need to run an HTTP server that can deliver a large file at high bandwidth (I happen to have Minio+Varnish on my local machine, but I'm sure other servers e.g. Apache could be used). Then run the script below as `httpbench-requests.py all http://...`. Note that Python 3.8 (or possibly it was 3.7) improved the performance of http.client.HTTPResponse.read, so if you use an older Python version the difference in performance is less enormous, but still >2x on my machine.\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\r\nimport argparse\r\nimport gc\r\nimport hashlib\r\nimport http.client\r\nimport io\r\nimport socket\r\nimport textwrap\r\nimport time\r\nimport urllib.parse\r\nfrom typing import Callable, Tuple, Optional\r\n\r\nimport requests\r\nimport numpy as np\r\n\r\n\r\n_Method = Callable[[str], bytes]\r\nMETHODS = {}\r\n\r\n\r\ndef method(name: str) -> Callable[[_Method], _Method]:\r\n    def decorate(func: _Method) -> _Method:\r\n        METHODS[name] = func\r\n        return func\r\n\r\n    return decorate\r\n\r\n\r\n@method('requests-naive')\r\ndef load_requests_naive(url: str) -> bytes:\r\n    with requests.get(url) as resp:\r\n        return resp.content\r\n\r\n\r\n@method('requests-stream-read')\r\ndef load_requests_stream(url: str) -> bytes:\r\n    with requests.get(url, stream=True) as resp:\r\n        return resp.raw.read()\r\n\r\n\r\ndef measure_method(method: str, args: argparse.Namespace) -> None:\r\n    rates = []\r\n    for i in range(args.passes):\r\n        gc.collect()\r\n        start = time.monotonic()\r\n        data = METHODS[method](args.url)\r\n        stop = time.monotonic()\r\n        elapsed = stop - start\r\n        rates.append(len(data) / elapsed)\r\n        del data\r\n    mean = np.mean(rates)\r\n    std = np.std(rates) / np.sqrt(args.passes - 1)\r\n    print('{}: {:.1f} \u00b1 {:.1f} MB/s'.format(method, mean / 1e6, std / 1e6))\r\n\r\n\r\ndef main():\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument('--passes', type=int, default=5)\r\n    parser.add_argument('method')\r\n    parser.add_argument('url')\r\n    args = parser.parse_args()\r\n    if args.method not in METHODS and args.method != 'all':\r\n        parser.error('Method must be \"all\" or one of {}'.format(set(METHODS.keys())))\r\n\r\n    if args.method == 'all':\r\n        for method in METHODS:\r\n            measure_method(method, args)\r\n    else:\r\n        measure_method(args.method, args)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.9\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.0-37-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.24.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.9\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "CONTRIBUTOR",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "bmerry",
                "id": 1963944,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5503/reactions",
                "total_count": 1,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 1,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/651412779",
                    "id": 651412779,
                    "created_at": "2020-06-29T23:01:30Z",
                    "updated_at": "2020-06-29T23:01:30Z",
                    "author_association": "NONE",
                    "body": "so, use BytesIO is better?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/651412779/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GoddessLuBoYan",
                        "id": 38455509,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014000876108184457,
                        "severe_toxicity": 9.30693931877613e-05,
                        "obscene": 0.00021004045265726745,
                        "threat": 0.00010451766138430685,
                        "insult": 0.00019656162476167083,
                        "identity_attack": 0.00013609965390060097
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/651561704",
                    "id": 651561704,
                    "created_at": "2020-06-30T06:04:25Z",
                    "updated_at": "2020-06-30T06:04:25Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> so, use BytesIO is better?\r\n\r\nAre you suggesting replacing `''.join` with BytesIO for joining together all the 10KB pieces? It won't avoid having two copies of all the data around at once because `BytesIO.getvalue` makes a copy. I haven't measured the performance but I'd be surprised if it's any better.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/651561704/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bmerry",
                        "id": 1963944,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009831265779212117,
                        "severe_toxicity": 0.00010084517998620868,
                        "obscene": 0.00018801295664161444,
                        "threat": 0.00011079738760599867,
                        "insult": 0.00018029856437351555,
                        "identity_attack": 0.00013625624706037343
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/651575071",
                    "id": 651575071,
                    "created_at": "2020-06-30T06:34:24Z",
                    "updated_at": "2020-06-30T06:34:24Z",
                    "author_association": "NONE",
                    "body": "yeah",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/651575071/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GoddessLuBoYan",
                        "id": 38455509,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0015659021446481347,
                        "severe_toxicity": 0.00011744676157832146,
                        "obscene": 0.00037534500006586313,
                        "threat": 9.132776904152706e-05,
                        "insult": 0.00019859391613863409,
                        "identity_attack": 0.0001300593576161191
                    }
                }
            ]
        },
        "149": {
            "html_url": "https://github.com/psf/requests/issues/5498",
            "id": 639579432,
            "number": 5498,
            "title": "Avoid unnecessary data collection conversion by making use of urllib3's HTTPHeaderDict for request headers",
            "created_at": "2020-06-16T11:11:34Z",
            "updated_at": "2021-02-05T02:38:53Z",
            "closed_at": null,
            "body": "Avoid unnecessary data collection conversion by making use of urllib3's [`HTTPHeaderDict`](https://github.com/urllib3/urllib3/blob/master/src/urllib3/_collections.py#L106) for request headers & response headers. Currently request http headers are placed in a [`CaseInsensitiveDict`](https://github.com/psf/requests/blob/master/requests/structures.py#L15) but before a request is made the headers are converted to urllib3's [`HTTPHeaderDict`](https://github.com/urllib3/urllib3/blob/master/src/urllib3/_collections.py#L106) & similar seems to occur for responses (in reverse). ",
            "author_association": "CONTRIBUTOR",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "dbaxa",
                "id": 1684354,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5498/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/644698796",
                    "id": 644698796,
                    "created_at": "2020-06-16T11:14:10Z",
                    "updated_at": "2020-06-16T11:14:10Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Related: \r\n* https://github.com/psf/requests/issues/4214",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/644698796/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dbaxa",
                        "id": 1684354,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006693409522995353,
                        "severe_toxicity": 0.00011778266343753785,
                        "obscene": 0.0001775594864739105,
                        "threat": 0.00012315971252974123,
                        "insult": 0.00017687410581856966,
                        "identity_attack": 0.00014140892017167062
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/644725786",
                    "id": 644725786,
                    "created_at": "2020-06-16T12:16:30Z",
                    "updated_at": "2020-06-16T12:16:30Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'm 99% certain it's a backwards incompatible change at the moment. Also the 3.0 PR is not active and shouldn't be considered something under active development.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/644725786/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005925918812863529,
                        "severe_toxicity": 0.0001244991726707667,
                        "obscene": 0.00018661023932509124,
                        "threat": 0.00013238943938631564,
                        "insult": 0.0001769299415173009,
                        "identity_attack": 0.00014087167801335454
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/645047212",
                    "id": 645047212,
                    "created_at": "2020-06-16T22:38:46Z",
                    "updated_at": "2020-06-16T22:38:46Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It might be possible to have a kind of container structure that wraps/resolves differences in behaviour.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/645047212/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dbaxa",
                        "id": 1684354,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005427451687864959,
                        "severe_toxicity": 0.00013668855535797775,
                        "obscene": 0.0001866760867414996,
                        "threat": 0.0001410871627740562,
                        "insult": 0.00018391991034150124,
                        "identity_attack": 0.00014799389464315027
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/645058484",
                    "id": 645058484,
                    "created_at": "2020-06-16T23:16:39Z",
                    "updated_at": "2020-06-16T23:16:39Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It probably is, but will it be faster if we have to layer tonnes of extra logic on top of things to support backwards compatibility? Also our current CaseInsensitiveDict's interactions with the outside world probably aren't well tested enough to have any confidence in that migration",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/645058484/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006070937961339951,
                        "severe_toxicity": 0.00012450404756236821,
                        "obscene": 0.00017273734556511045,
                        "threat": 0.00013587325520347804,
                        "insult": 0.00018020575225818902,
                        "identity_attack": 0.0001471649156883359
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/773743012",
                    "id": 773743012,
                    "created_at": "2021-02-05T02:38:53Z",
                    "updated_at": "2021-02-05T02:38:53Z",
                    "author_association": "NONE",
                    "body": "HTTP Handshake requires some information exchange, made by headers....",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/773743012/reactions",
                        "total_count": 2,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 2,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006680806400254369,
                        "severe_toxicity": 0.00011742996866814792,
                        "obscene": 0.000184576419997029,
                        "threat": 0.00012054797844029963,
                        "insult": 0.00017482748080510646,
                        "identity_attack": 0.00013590097660198808
                    }
                }
            ]
        },
        "150": {
            "html_url": "https://github.com/psf/requests/pull/5486",
            "id": 636196928,
            "number": 5486,
            "title": "Allow for autodection of encoding for scalar values",
            "created_at": "2020-06-10T12:15:13Z",
            "updated_at": "2022-01-03T15:26:36Z",
            "closed_at": null,
            "body": "Since JSON RFC 7158 (and also in 7159 and 8259) scalar values are also valid JSON texts. The json decoder from the Python standard libs also accepts such scalar values.\r\n\r\nThe JSON Unicode detection algorithm in \"requests\" assumes that the first two characters are always ASCII. That is not true anymore.\r\nTherefore the current detection fails in at least these two edge cases\r\n\r\n- A single digit in UTF-16 encoding\r\n- A quoted string with the first character having a Unicode value higher than 255 in UTF-16 encoding\r\n\r\nAlso autodetection by chardet returns the wrong encoding.\r\n\r\nThis change detects the encoding in case of those two edge cases.\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "blenq",
                "id": 22727090,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5486/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "151": {
            "html_url": "https://github.com/psf/requests/pull/5464",
            "id": 621354329,
            "number": 5464,
            "title": "Allow semicolon in the href of Link header",
            "created_at": "2020-05-19T23:41:45Z",
            "updated_at": "2022-01-03T15:26:44Z",
            "closed_at": null,
            "body": "Semicolons are valid characters in URIs, splitting them while parsing the `Link` header results in unexpected token and wrong `url` attribute (notice `;oldid=934259284` portion the below example).\r\n\r\n```\r\n<https://en.wikipedia.org/w/index.php?title=COVID-19_pandemic&amp;oldid=934259284>; rel=\"original\", <https://web.archive.org/web/timemap/link/https://en.wikipedia.org/w/index.php?title=COVID-19_pandemic&amp;oldid=934259284>; rel=\"timemap\"; type=\"application/link-format\"\r\n```\r\n\r\nThis PR attempts to fix current parsing issue and also renames a variable to better reflect the purpose of it.\r\n\r\nI would note here that this parser still is far from perfect and can be better implemented using state machine.",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "ibnesayeed",
                "id": 65147,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5464/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/671591388",
                    "id": 671591388,
                    "created_at": "2020-08-10T21:10:09Z",
                    "updated_at": "2020-08-10T21:10:09Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt is there anything we can to do to get it merged?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/671591388/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ibnesayeed",
                        "id": 65147,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.002323238644748926,
                        "severe_toxicity": 8.698469173396006e-05,
                        "obscene": 0.00022798244026489556,
                        "threat": 0.00010289036436006427,
                        "insult": 0.00022094252926763147,
                        "identity_attack": 0.00015583517961204052
                    }
                }
            ]
        },
        "152": {
            "html_url": "https://github.com/psf/requests/issues/5461",
            "id": 619752546,
            "number": 5461,
            "title": "Treat invalid percent encoding consistently",
            "created_at": "2020-05-17T17:02:35Z",
            "updated_at": "2020-05-21T17:01:48Z",
            "closed_at": null,
            "body": "The present form of ``requote_uri`` unnecessarily divides invalid cases.\r\n\r\nWhen alpha-numeric, '%' is quoted to '%25'.\r\nE.g. ``%pp`` to ``%25pp``.\r\n\r\nWhen not alpha-numeric, '%' is kept as is.\r\nE.g. ``%--`` to ``%--``.\r\n(Note these two examples are in the tests,\r\nand the latter is for ``unquote_unreserved``,\r\nbut the result is the same.)\r\nOr ``%<<`` to ``%%3C%3C``.\r\n\r\nbut I think '%' should be quoted in all invalid cases.\r\n(Or to put it differently, isolated '%' must be quoted.)",
            "author_association": "NONE",
            "comments": 10,
            "state": "open",
            "user": {
                "login": "openandclose",
                "id": 30379553,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5461/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631097702",
                    "id": 631097702,
                    "created_at": "2020-05-19T21:39:12Z",
                    "updated_at": "2020-05-19T21:39:12Z",
                    "author_association": "NONE",
                    "body": "I can not find the rational in the code history.\r\n\r\n(0) The original implementation\r\n(1) Added 'isalnum'\r\n(2) Added try clause and error message.\r\n(3) Added more try clause and one of the present test.\r\n(4) Added another of the present test.\r\n\r\n(0)\r\n**URI cleanup of non-path components**\r\nhttps://github.com/psf/requests/commits?author=mgiuca\r\nhttps://github.com/psf/requests/compare/12f9aa36..690426ac\r\n\r\n(1)\r\n**fix for #630 - unquote_unreserved raising ValueError on invalid URI-escape sequences**\r\nhttps://github.com/psf/requests/pull/641\r\nhttps://github.com/psf/requests/commit/cb15310d6aacd1c1e3b3345b6096d24ea2b79d49\r\n\r\n(2)\r\n**Better percent-escape exception**\r\nhttps://github.com/psf/requests/pull/1514\r\n\r\n(3)\r\n**Attempt to quote anyway if unquoting fails**\r\nhttps://github.com/psf/requests/pull/2393\r\n\r\n(4)\r\n**Added unit tests for utils module**\r\nhttps://github.com/psf/requests/pull/3024",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631097702/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "openandclose",
                        "id": 30379553,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011230011004954576,
                        "severe_toxicity": 0.00010294571256963536,
                        "obscene": 0.00021343387197703123,
                        "threat": 0.00010929461859632283,
                        "insult": 0.00018576200818642974,
                        "identity_attack": 0.0001404458307661116
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631108938",
                    "id": 631108938,
                    "created_at": "2020-05-19T22:06:08Z",
                    "updated_at": "2020-05-19T22:12:02Z",
                    "author_association": "NONE",
                    "body": "@mgiuca himself recently changed his mind.\r\nhttps://github.com/whatwg/url/issues/369#issuecomment-359336557\r\n\r\n(the point of that particular comment is to make '%s -> %s' a special case,\r\nand it may be better to take this into consideration here (later),\r\nbut he agrees on the baseline ('%' -> '%25'))",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631108938/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "openandclose",
                        "id": 30379553,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006632578442804515,
                        "severe_toxicity": 0.00011795834143413231,
                        "obscene": 0.0001907060359371826,
                        "threat": 0.0001167452210211195,
                        "insult": 0.00017586223839316517,
                        "identity_attack": 0.00014140784332994372
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631170749",
                    "id": 631170749,
                    "created_at": "2020-05-20T00:59:14Z",
                    "updated_at": "2020-05-20T00:59:14Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hello,\r\n\r\nI haven't dug deeply into the issue (but please note that my previous interaction with this project was in 2012, so it's entirely possible I made a mistake or changed my mind since then!) Also note that the entire URL standard has been rewritten since then, the [URL standard](https://url.spec.whatwg.org/) that I'm commenting on in the above quote didn't exist in 2012.\r\n\r\nBased on your above description, I agree that it doesn't make sense to treat `%xx` differently depending on whether `x` is alphanumeric. The best thing to do is probably say \"if xx are both _hex digits_, keep it as-is, otherwise, expand \"%\" to \"%25\". But as you noted, then you will transform \"%s\" into \"%25s\", which breaks URLs that are designed to have things substituted into them later.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631170749/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mgiuca",
                        "id": 228433,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006835173699073493,
                        "severe_toxicity": 0.00011389604333089665,
                        "obscene": 0.00018593744607642293,
                        "threat": 0.00011686606740113348,
                        "insult": 0.00017244227638002485,
                        "identity_attack": 0.00013391645916271955
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631429033",
                    "id": 631429033,
                    "created_at": "2020-05-20T11:59:06Z",
                    "updated_at": "2020-05-20T11:59:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> But as you noted, then you will transform \"%s\" into \"%25s\", which breaks URLs that are designed to have things substituted into them later.\r\n\r\nExcept that once passed to an HTTP client, nothing will be substituting anything into them later. And if this is being returned as part of a redirect in the Location header then that means that the user will want to handle redirects themselves, otherwise the re-quoting is most likely valid.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631429033/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007895036833360791,
                        "severe_toxicity": 0.0001084239047486335,
                        "obscene": 0.00018775193893816322,
                        "threat": 0.0001102901587728411,
                        "insult": 0.0001772362447809428,
                        "identity_attack": 0.0001338721631327644
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631587305",
                    "id": 631587305,
                    "created_at": "2020-05-20T16:34:18Z",
                    "updated_at": "2020-05-20T16:34:51Z",
                    "author_association": "NONE",
                    "body": "> if this is being returned as part of a redirect in the Location header\r\n\r\nIs it possible at all, in case of registerProtocolHandler's '%s' url?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631587305/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "openandclose",
                        "id": 30379553,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008193150861188769,
                        "severe_toxicity": 0.00010414636926725507,
                        "obscene": 0.00018904911121353507,
                        "threat": 0.00010887157986871898,
                        "insult": 0.00018358718079980463,
                        "identity_attack": 0.00012882985174655914
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631696463",
                    "id": 631696463,
                    "created_at": "2020-05-20T20:04:16Z",
                    "updated_at": "2020-05-20T20:04:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "What are you talking about `registerProtocolHandler`? Are you looking at the right project?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631696463/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007043119985610247,
                        "severe_toxicity": 0.00011348495172569528,
                        "obscene": 0.00016888705431483686,
                        "threat": 0.00011450575402704999,
                        "insult": 0.00018264728714711964,
                        "identity_attack": 0.00014341787027660757
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631727714",
                    "id": 631727714,
                    "created_at": "2020-05-20T21:07:58Z",
                    "updated_at": "2020-05-20T21:07:58Z",
                    "author_association": "NONE",
                    "body": "It is the only case url parser has to specially handle ``'%' + <single character>``.\r\n\r\nThat's why in the above comment link, mgiuca was considering:\r\n\r\n> \"%s\" -> \"%s\" (with validation error)\r\n> \"%6%3D\" -> \"%6%3D\" (with validation error)\r\n\r\nIn any other cases, my proposal in the first comment should be OK.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631727714/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "openandclose",
                        "id": 30379553,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007248464389704168,
                        "severe_toxicity": 0.00011352640285622329,
                        "obscene": 0.0001827842352213338,
                        "threat": 0.00012147596862632781,
                        "insult": 0.00017514634237159044,
                        "identity_attack": 0.0001381346955895424
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631741702",
                    "id": 631741702,
                    "created_at": "2020-05-20T21:39:54Z",
                    "updated_at": "2020-05-20T21:39:54Z",
                    "author_association": "NONE",
                    "body": "And it is the concern for *general* url parsers.\r\nI'm not sure, but A HTTP client may not need wholly embrace this.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631741702/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "openandclose",
                        "id": 30379553,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006161544588394463,
                        "severe_toxicity": 0.0001223193685291335,
                        "obscene": 0.00018224891391582787,
                        "threat": 0.0001236493408214301,
                        "insult": 0.00017615627439226955,
                        "identity_attack": 0.00013919312914367765
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631829284",
                    "id": 631829284,
                    "created_at": "2020-05-21T01:46:15Z",
                    "updated_at": "2020-05-21T01:46:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> And it is the concern for _general_ url parsers.\r\n\r\nQuick note that the strings accepted by `registerProtocolHandler` are _not_ technically URLs (after all, they unambiguously are invalid, since you can't follow a `%` with an `s` in URL syntax). They are template strings that, when substituted, form a URL.\r\n\r\nA generic URL parser does not need to be able to handle `%s` properly. It's a question for the authors of a given URL parser whether it's useful to be able to handle `%s` without double-quoting it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631829284/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mgiuca",
                        "id": 228433,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010184786515310407,
                        "severe_toxicity": 0.00010086489783134311,
                        "obscene": 0.0001914727472467348,
                        "threat": 0.00010890138219110668,
                        "insult": 0.00018513975373934954,
                        "identity_attack": 0.00013626430882140994
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631853061",
                    "id": 631853061,
                    "created_at": "2020-05-21T03:12:11Z",
                    "updated_at": "2020-05-21T03:12:11Z",
                    "author_association": "NONE",
                    "body": "@mgiuca thank you!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631853061/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "openandclose",
                        "id": 30379553,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001011512940749526,
                        "severe_toxicity": 0.00010536815534578636,
                        "obscene": 0.00019417409203015268,
                        "threat": 0.00011340899800416082,
                        "insult": 0.00017029519949574023,
                        "identity_attack": 0.00014670156815554947
                    }
                }
            ]
        },
        "153": {
            "html_url": "https://github.com/psf/requests/issues/5449",
            "id": 614907671,
            "number": 5449,
            "title": "How to propagate cookie policies through posts?",
            "created_at": "2020-05-08T18:29:00Z",
            "updated_at": "2020-05-11T14:25:09Z",
            "closed_at": null,
            "body": "Hi,\r\n\r\nI am using Python 3.8 and the latest pip updates of everything mentioned below.\r\n\r\nI am trying to consume a very old, but active SOAP resource.  I am using Zeep for the SOAP part.  The SOAP service is so old that I need to set a special cookie policy to handle the fact that the old SOAP service returns obsolete `set-cookie2` headers.  I am new to this so there could be better ways but the first few executable lines of my code sample (at the bottom) create a dummy cookie to establish a cookie policy that *should* pull in the obsolete cookies.\r\n\r\nTHe dummy cookie is attached to the session and the SOAP \"login\" method is called.  I have stepped through the execution path (most recent on top).  Everything above the \"transports\" lines is in the your domain I think.\r\n\r\n```\r\n\t\tmerge_cookies, cookies.py:549\r\n\t\tprepare_request, sessions.py:441\r\n\t\trequest, sessions.py:516\r\n\t\tpost, sessions.py:578\r\n\t\tpost, transports.py:61\r\n\t\tpost_xml, transports.py:107\r\n\t\tsend, soap.py:122\r\n\t\t__call__, proxy.py:40\r\n\t\t<module>, zeep_test.py:31\r\n```\r\n\r\nI have modified Zeep's code to send the session cookies to your \"post\" method in the \"kwargs\".\r\n\r\n```\r\n        response = self.session.post(\r\n            address, data=message, headers=headers,\r\n            timeout=self.operation_timeout, \r\n\t\t\tcookies=self.session.cookies\r\n        )\r\n```\r\n\r\n\"post\" calls \"request\" calls \"prepare_request\" calls \"merge_cookies\".  That code is:\r\n\r\n```\r\n        # Merge with session cookies\r\n        merged_cookies = merge_cookies(\r\n            merge_cookies(RequestsCookieJar(), self.cookies), cookies)\r\n```\r\n\t\t\t\r\nIn my case the passed in cookie is a \"cookielib.CookieJar\".  The line:\r\n\r\n```\r\n        try:\r\n            cookiejar.update(cookies)\r\n```\r\n\r\nis executed but the \"cookielib.CookieJar\" policies are NOT copied over.  I don't know what to do about that.  Is there a better way to set a global cookie policy?\r\n\r\nA relevant portion of my code is:\r\n\r\n```\r\n\t\timport requests\r\n\t\tfrom requests import Session, cookies\r\n\t\tfrom zeep import Client, Settings\r\n\t\tfrom zeep.cache import SqliteCache\r\n\t\tfrom zeep.transports import Transport\r\n\t\tfrom http.cookiejar import CookieJar, DefaultCookiePolicy\r\n\r\n\t\tpolicy = DefaultCookiePolicy(rfc2965=True)\r\n\t\tcj = CookieJar(policy)\r\n\t\tcj.set_cookie(requests.cookies.create_cookie(name=\"dummy\", value=\"dummy\"))\r\n\r\n\t\tmy_session = Session()\r\n\t\tmy_session.cookies = cj\r\n\r\n\t\tmy_settings = Settings(strict=False)\r\n\t\tmy_cache = SqliteCache()\r\n\t\tmy_url = 'https://lists.mycompany.com/lists/wsdl'\r\n\r\n\t\tclient = Client(\r\n\t\t\tmy_url,\r\n\t\t\ttransport=Transport(\r\n\t\t\t\tsession=my_session,\r\n\t\t\t\tcache=my_cache\r\n\t\t\t),\r\n\t\t\tsettings=my_settings\r\n\t\t)\r\n\t\t\r\n\t\tresponse = client.service.login(email=\"Me\",\r\n\t\t\t\t\t\t\t\t\t\tpassword=\"mememe\")\r\n```",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "karres-illinois",
                "id": 51006466,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5449/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/626113295",
                    "id": 626113295,
                    "created_at": "2020-05-09T06:12:07Z",
                    "updated_at": "2020-05-09T06:12:07Z",
                    "author_association": "MEMBER",
                    "body": "Hi @karres-illinois,\r\n\r\nThanks for bringing this up! We've known about this issue for a good while now and there's been a lot of debate about whether people actually use the Python cookie policies in their code. There's a PR from some time ago #3463 that was intended to address this that never got merged.\r\n\r\nGiven we've seen a few comments around this over the last 6 months, it may be time to revisit. I'll try to spin back up that old patch rebased onto current Requests and see if it's still an option.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/626113295/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005434761405922472,
                        "severe_toxicity": 0.0001280771684832871,
                        "obscene": 0.00018831779016181827,
                        "threat": 0.00013024960935581475,
                        "insult": 0.00017292422126047313,
                        "identity_attack": 0.00014101776469033211
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/626168364",
                    "id": 626168364,
                    "created_at": "2020-05-09T12:26:05Z",
                    "updated_at": "2020-05-09T12:26:05Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@nateprewitt it's basically a nightmare to do correctly without breaking a bunch of nonsense in the midst of it. I'm happy to pair on it at some point if you'd like.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/626168364/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.010858328081667423,
                        "severe_toxicity": 9.920626325765625e-05,
                        "obscene": 0.0005208644433878362,
                        "threat": 0.000167170655913651,
                        "insult": 0.0005459685926325619,
                        "identity_attack": 0.00021662891958840191
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/626719974",
                    "id": 626719974,
                    "created_at": "2020-05-11T14:01:01Z",
                    "updated_at": "2020-05-11T14:01:01Z",
                    "author_association": "NONE",
                    "body": "I dig that there is debate about this and that I may have a corner case.  Is there any workaround you can suggest?  ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/626719974/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "karres-illinois",
                        "id": 51006466,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000555505626834929,
                        "severe_toxicity": 0.00013298752310220152,
                        "obscene": 0.00018192459538113326,
                        "threat": 0.00014101130363997072,
                        "insult": 0.0001813411363400519,
                        "identity_attack": 0.000149917570524849
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/626725935",
                    "id": 626725935,
                    "created_at": "2020-05-11T14:11:22Z",
                    "updated_at": "2020-05-11T14:11:22Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> I dig that there is debate about this and that I may have a corner case. Is there any workaround you can suggest?\r\n\r\nTo be clear @karres-illinois, there's no debate that you're correct about this being a thing the library should do. It's more about wiring it into the library which already does some bizarre things to act like an art project. There's a fair amount of monkey-patching that you'd have to do. It also requires the Cookie Jar class that is in this library be _completely_ rewritten if I remember correctly.\r\n\r\nAll of that is to say \"I don't recall if there's a good way to achieve what you want\"",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/626725935/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006036452250555158,
                        "severe_toxicity": 0.00012215932656545192,
                        "obscene": 0.00017639898578636348,
                        "threat": 0.00013127116835676134,
                        "insult": 0.00017304725770372897,
                        "identity_attack": 0.00014236001879908144
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/626733952",
                    "id": 626733952,
                    "created_at": "2020-05-11T14:25:09Z",
                    "updated_at": "2020-05-11T14:25:09Z",
                    "author_association": "NONE",
                    "body": "Ah, thanks. I'll keep an interested eye on this over time. good luck.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/626733952/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "karres-illinois",
                        "id": 51006466,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005625093472190201,
                        "severe_toxicity": 0.0001471599971409887,
                        "obscene": 0.00022064379299990833,
                        "threat": 0.00015391994384117424,
                        "insult": 0.0001892366708489135,
                        "identity_attack": 0.00015393798821605742
                    }
                }
            ]
        },
        "154": {
            "html_url": "https://github.com/psf/requests/pull/5441",
            "id": 607860646,
            "number": 5441,
            "title": "Strip double-quotes on proxy environment variables and add test (issue #4613)",
            "created_at": "2020-04-27T21:19:20Z",
            "updated_at": "2022-01-03T15:27:10Z",
            "closed_at": null,
            "body": "Issue #4613 details two problems :\r\n* proxy may contain white-space accidentally\r\n* proxy may be contain extra double-quotes on Windows\r\n\r\nA fix already exists for the white-space problem, this addresses the second problem.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "bluebird75",
                "id": 216653,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5441/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "155": {
            "html_url": "https://github.com/psf/requests/issues/5436",
            "id": 606483070,
            "number": 5436,
            "title": "Add response.future_requests_uri, deprecate response.is_permanent_redirect",
            "created_at": "2020-04-24T17:50:35Z",
            "updated_at": "2020-06-17T20:23:42Z",
            "closed_at": null,
            "body": "`response.is_permanent_redirect` is unreliable/useless/dangerous for chains of redirects, just give the user the correct URI instead.\r\n\r\nexample use-case: `foo` redirects temporarily to `bar`, which in turn redirects permanently to `baz`. future requests should still be made to `foo`, but using `is_permanent_redirect` would lead to them being made to `baz` instead.",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "SoniEx2",
                "id": 1779619,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5436/reactions",
                "total_count": 1,
                "+1": 0,
                "-1": 1,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/619159247",
                    "id": 619159247,
                    "created_at": "2020-04-24T17:52:07Z",
                    "updated_at": "2020-04-24T17:52:07Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "That method was not introduced for users to use and was part of internal machinery that was ripped out",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/619159247/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009433688246645033,
                        "severe_toxicity": 0.00010276407556375489,
                        "obscene": 0.00017768835823517293,
                        "threat": 0.00011733124847523868,
                        "insult": 0.00018593673303257674,
                        "identity_attack": 0.00013720436254516244
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/619159675",
                    "id": 619159675,
                    "created_at": "2020-04-24T17:53:03Z",
                    "updated_at": "2020-04-24T17:53:03Z",
                    "author_association": "NONE",
                    "body": "https://requests.readthedocs.io/en/master/api/#requests.Response.is_permanent_redirect ?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/619159675/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SoniEx2",
                        "id": 1779619,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006888600764796138,
                        "severe_toxicity": 0.00011261886538704857,
                        "obscene": 0.00017853583267424256,
                        "threat": 0.00011316745076328516,
                        "insult": 0.00017606609617359936,
                        "identity_attack": 0.00013531779404729605
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/619179509",
                    "id": 619179509,
                    "created_at": "2020-04-24T18:38:15Z",
                    "updated_at": "2020-04-24T18:38:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I think an alternative check for the first history item being a permanent redirect would be a more accurate way to calculate this?  The actual permanent redirect url would be gotten from the last permanent redirect among the contiguous group of initial permanent redirects.  Maybe?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/619179509/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "altendky",
                        "id": 543719,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005837804637849331,
                        "severe_toxicity": 0.0001230263733305037,
                        "obscene": 0.00017814165039453655,
                        "threat": 0.00012829522893298417,
                        "insult": 0.0001813084672903642,
                        "identity_attack": 0.00014032375474926084
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/619268269",
                    "id": 619268269,
                    "created_at": "2020-04-24T22:41:38Z",
                    "updated_at": "2020-04-24T22:41:38Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@SoniEx2 I believe `autoclass` will auto-document a public method. That doesn't mean it's encouraged for you to use",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/619268269/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006554654682986438,
                        "severe_toxicity": 0.00011734131840057671,
                        "obscene": 0.00017045083222910762,
                        "threat": 0.00012878968846052885,
                        "insult": 0.00017404044046998024,
                        "identity_attack": 0.00013984287215862423
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/619285200",
                    "id": 619285200,
                    "created_at": "2020-04-24T23:58:33Z",
                    "updated_at": "2020-04-24T23:58:33Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Could we get it removed from the docs?  It's hard to expect developers to consider a documented non-leading-`_` attribute private...  Or implement it more sensibly (based on my minute or two of thought, maybe I'm missing something).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/619285200/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "altendky",
                        "id": 543719,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005910835461691022,
                        "severe_toxicity": 0.00012493098620325327,
                        "obscene": 0.00018223849474452436,
                        "threat": 0.00012822674761991948,
                        "insult": 0.00017758690228220075,
                        "identity_attack": 0.00014099745021667331
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/619285679",
                    "id": 619285679,
                    "created_at": "2020-04-25T00:01:04Z",
                    "updated_at": "2020-04-25T00:01:04Z",
                    "author_association": "NONE",
                    "body": "it does add value fwiw - if you're doing things yourself.\r\n\r\nbut don't rely on it as representative of the whole response chain.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/619285679/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SoniEx2",
                        "id": 1779619,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000856617814861238,
                        "severe_toxicity": 0.00010586033022264019,
                        "obscene": 0.00018450303468853235,
                        "threat": 0.0001138733423431404,
                        "insult": 0.00017890440358314663,
                        "identity_attack": 0.00013496111205313355
                    }
                }
            ]
        },
        "156": {
            "html_url": "https://github.com/psf/requests/issues/5430",
            "id": 602744441,
            "number": 5430,
            "title": "A `ConnectionError` (\"Read timed out.\") is raised instead of `ReadTimeout`, when using `timeout` keyword argument of `Session.get()`",
            "created_at": "2020-04-19T15:29:31Z",
            "updated_at": "2024-08-29T10:13:59Z",
            "closed_at": null,
            "body": "Consider the code below (**main.py**). When a temporary network disconnect occurs without the `timeout` keyword argument to `Session.get()`, the client may hang indefinitely and no exception is raised.\r\n\r\nHowever, if I use the `timeout` keyword argument, the application will raise a `ConnectionError` from **models.py** corresponding to the `urllib3.exceptions.ReadTimeoutError`:\r\n\r\n`requests.exceptions.ConnectionError: HTTPSConnectionPool(host='confluence.example.net', port=443): Read timed out.`\r\n\r\nGiven that the exception is only raised, when using the `timeout` keyword argument, why isn't Requests raising `ReadTimeout` exception instead? In particular, the `ConnectionError`'s exception message \"Read timed out.\" suggests that it should be a `ReadTimeout` exception?\r\n\r\nTo mitigate the issue I'm currently performing a regular expression match on the exception message, which is a bad practice:\r\n\r\n```\r\nexcept ConnectionError as e:\r\n     if re.search('Read timed out', str(e), re.IGNORECASE):\r\n```\r\n**main.py**:\r\n\r\n```\r\n try:\r\n     with requests.Session() as rs:\r\n         rs.mount('https://', HTTPAdapter(max_retries=Retry(total=10, connect=10, read=10, backoff_factor=1)))\r\n         with rs.get(url, params={}, headers={}, auth=self.auth, verify=self.ssl_verify, timeout=(30, 30)) as r:\r\n             r.raise_for_status()\r\n             page_set = r.json()\r\n except ReadTimeout as e:\r\n     logging.exception('Request for page set timed out: {}'.format(url))\r\n     continue\r\n except ConnectionError as e:\r\n     if re.search('Read timed out', str(e), re.IGNORECASE):\r\n         logging.exception('Request for page set timed out (network problem): {}'.format(url))\r\n         continue\r\n     else:\r\n         raise\r\n```\r\n\r\n**models.py**:\r\nhttps://github.com/psf/requests/blob/master/requests/models.py\r\n\r\n```\r\ndef generate():\r\n            # Special case for urllib3.\r\n            if hasattr(self.raw, 'stream'):\r\n                try:\r\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\r\n                        yield chunk\r\n                except ProtocolError as e:\r\n                    raise ChunkedEncodingError(e)\r\n                except DecodeError as e:\r\n                    raise ContentDecodingError(e)\r\n                except ReadTimeoutError as e:\r\n                    raise ConnectionError(e)\r\n```\r\n\r\n**Exception**:\r\n\r\n```\r\nERROR -- 04/19/2020 04:51:32 PM -- root -- ThreadPoolExecutor-0_0  -- Request for page set timed out (network problem): https://confluence.example.net/rest/api/content/search?expand=version,history,space,body.storage,children.attachment.version,children.attachment.history,children.attachment.space&limit=50&start=1900&cql=(type=page)\r\nTraceback (most recent call last):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 425, in _error_catcher\r\n    yield\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 755, in read_chunked\r\n    chunk = self._handle_chunk(amt)\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 708, in _handle_chunk\r\n    returned_chunk = self._fp._safe_read(self.chunk_left)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/client.py\", line 620, in _safe_read\r\n    chunk = self.fp.read(min(amt, MAXAMOUNT))\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py\", line 589, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\", line 1071, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\", line 929, in read\r\n    return self._sslobj.read(len, buffer)\r\nsocket.timeout: The read operation timed out\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/models.py\", line 751, in generate\r\n    for chunk in self.raw.stream(chunk_size, decode_content=True):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 560, in stream\r\n    for line in self.read_chunked(amt, decode_content=decode_content):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 781, in read_chunked\r\n    self._original_response.close()\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 130, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 430, in _error_catcher\r\n    raise ReadTimeoutError(self._pool, None, \"Read timed out.\")\r\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='confluence.example.net', port=443): Read timed out.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/confluence/confluence.py\", line 112, in __producer\r\n    with rs.get(url, params={}, headers={}, auth=self.auth, verify=self.ssl_verify, timeout=(30, 30)) as r:\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/sessions.py\", line 543, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/sessions.py\", line 530, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/sessions.py\", line 683, in send\r\n    r.content\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/models.py\", line 829, in content\r\n    self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/models.py\", line 758, in generate\r\n    raise ConnectionError(e)\r\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='confluence.example.net', port=443): Read timed out.\r\n```\r\n\r\n## Expected Result\r\n\r\nI would expect a `requests.exceptions.ReadTimeout` to be raised. \r\n\r\n## Actual Result\r\n\r\nA `requests.exceptions.ConnectError` was raised instead, with the error message: `Read timed out.`\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\nnlykkei:~$ python3 -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"19.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.23.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 11,
            "state": "open",
            "user": {
                "login": "nlykkei",
                "id": 14088508,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5430/reactions",
                "total_count": 12,
                "+1": 10,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 2
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/642658453",
                    "id": 642658453,
                    "created_at": "2020-06-11T13:45:00Z",
                    "updated_at": "2020-06-11T13:45:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This is behaving exactly as it unfortunately must until a breaking API change can be introduced. The behaviour was likely (I don't remember this specifically) introduced to raise the same exception as it used to raise before urllib3 introduced finer-grained exceptions. Is that great? No. Is it what will happen until a _real_ requests 3.0 can happen? Almost certainly due to backwards compatibility concerns and API stability.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/642658453/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006440464057959616,
                        "severe_toxicity": 0.00011939165415242314,
                        "obscene": 0.00017768445832189173,
                        "threat": 0.00012813287321478128,
                        "insult": 0.0001779630547389388,
                        "identity_attack": 0.00014013976033311337
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/666444265",
                    "id": 666444265,
                    "created_at": "2020-07-30T15:15:00Z",
                    "updated_at": "2020-07-30T15:15:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@simonvanderveldt So you're complaining about exception wrapping which is a user feature to allow them to not have to think about handling exceptions from N libraries being used inside of Requests? That's tangential to this issue. Please let's not muddy the water with this conversation",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/666444265/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009220720967277884,
                        "severe_toxicity": 0.00010201598342973739,
                        "obscene": 0.000178351896465756,
                        "threat": 0.00010994153853971511,
                        "insult": 0.0001790487876860425,
                        "identity_attack": 0.00013842609769199044
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/666455061",
                    "id": 666455061,
                    "created_at": "2020-07-30T15:26:49Z",
                    "updated_at": "2020-07-30T15:58:08Z",
                    "author_association": "NONE",
                    "body": "I am following this issue as I also get mixed results when a timeout is raised. \r\n\r\nMy timeout is set to `(1,10)` connect/read and when it times out, I can see any of these 2:\r\n\r\n> HTTPSConnectionPool(host='cloud-collector.newrelic.com', port=443): Read timed out. (read timeout=10)\r\n\r\n> HTTPSConnectionPool(host='cloud-collector.newrelic.com', port=443): Read timed out. (read timeout=1)\r\n\r\n<img width=\"1320\" alt=\"Screenshot 2020-07-30 at 16 36 08\" src=\"https://user-images.githubusercontent.com/1932338/88945113-7d20b400-d285-11ea-8189-ea68dfc7e9ff.png\">\r\n\r\n\r\nI imagine the second one should mention `connect` instead of `read`, possibly making one believe that the timeouts are not being applied correctly.\r\n\r\nI am still trying to narrow down the problem before creating a new github issue, but it seems something isn't too clear in the way exceptions are handled.\r\n\r\nEdit: I'm not entirely sure this is the same issue so I created https://github.com/psf/requests/issues/5544",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/666455061/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "stephanebruckert",
                        "id": 1932338,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006591247511096299,
                        "severe_toxicity": 0.00012106498616049066,
                        "obscene": 0.00019566481932997704,
                        "threat": 0.00012252283340785652,
                        "insult": 0.00017386878607794642,
                        "identity_attack": 0.000138806106406264
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/773738453",
                    "id": 773738453,
                    "created_at": "2021-02-05T02:26:47Z",
                    "updated_at": "2021-02-05T02:26:47Z",
                    "author_association": "NONE",
                    "body": "try to enable the OS TCP/IP stack tcp  keep alive, it is disable by default , ie. for Linux I use this inorder to keep the connection  up...\r\n\r\n\r\n    import socket\r\n    from urllib3.connection import HTTPConnection\r\n    HTTPConnection.default_socket_options = HTTPConnection.default_socket_options + [\r\n        (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPIDLE, 45)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPINTVL, 10)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPCNT, 6)\r\n         ]\r\n\r\n    from requests import session\r\n    self.session = session()\r\n\r\nIf the socket gets dropped because the server didnt get any tcp keep alive msg while processing your request, you will get a ConectionTimeout or ConnectionReset eror, because, it is from a lower layer than the data tranfer...so if the socket is close...no data will be tranfer...",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/773738453/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0017407035920768976,
                        "severe_toxicity": 9.86675513559021e-05,
                        "obscene": 0.00025324762100353837,
                        "threat": 0.00011928536696359515,
                        "insult": 0.0001942227827385068,
                        "identity_attack": 0.00014278486196417361
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/794871688",
                    "id": 794871688,
                    "created_at": "2021-03-10T04:46:33Z",
                    "updated_at": "2021-03-10T04:46:51Z",
                    "author_association": "NONE",
                    "body": "Hello @nlykkei By your doubt I assume you're trying to handle that exception raised by _urllib3_, if it is, then this is what I have done to handle it.\r\nInstead of using `except ReadTimeout as e:`\r\nI used `except requests.ReadTimeout as e:` and it handled just perfectly.\r\nPlease let me know if you had the same problem or not and whether you have managed to solve your problem.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/794871688/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "YashasviBhatt",
                        "id": 51393376,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007461042841896415,
                        "severe_toxicity": 0.00010931077122222632,
                        "obscene": 0.00017246710194740444,
                        "threat": 0.00011635168630164117,
                        "insult": 0.00017895338532980531,
                        "identity_attack": 0.00013601778482552618
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/795423366",
                    "id": 795423366,
                    "created_at": "2021-03-10T13:36:56Z",
                    "updated_at": "2021-03-10T13:36:56Z",
                    "author_association": "NONE",
                    "body": "> Hello @nlykkei By your doubt I assume you're trying to handle that exception raised by _urllib3_, if it is, then this is what I have done to handle it.\r\n> Instead of using `except ReadTimeout as e:`\r\n> I used `except requests.ReadTimeout as e:` and it handled just perfectly.\r\n> Please let me know if you had the same problem or not and whether you have managed to solve your problem.\r\n\r\nWell,your are correct about the Exception handle...but, the real issue, is that the OS libraries, no  matter is your request forces to use persistenr connections by enabling theConnection : Keep-Alive header on HTTP/HTTPS Request....it depends on 2  possible scenarios, 1st, the easy one... the server responds back with a connection close or a the enconding is set too chunk-response.... to resolve this just iterate the response till you get Len 0 onthe responseheader...\r\n\r\nBut At least on my findings, the major issue deepnds on the lower layers, since the content providers dont want to spend resources on \"probably\" dead connection, they close them before the IETFs RFC standrard,that defines the TCP keep alive behaivor.....and set it to start sendind L4 TCP KA, after 2 hours....so it is insane, and obvously will spend resourses...so what I have done is set the SO_KEEPALIVE flag on, and ser the timers lower....so youcan release the connection to the connection pool, and release resourses on your device, when idle.\r\n\r\nI dont like catch exceptions and do retries, when they are not neccesary.... \r\n\r\nbut you can retry on your code, dont set the retry param, because you willgetthe same behaivor, sincethe Lower ayer will retry the High Level Request on the same dead connection....\r\n\r\nCheers from Mexico",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/795423366/reactions",
                        "total_count": 3,
                        "+1": 3,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.006090844515711069,
                        "severe_toxicity": 0.00011386824189685285,
                        "obscene": 0.0006439831922762096,
                        "threat": 0.0001722007291391492,
                        "insult": 0.0004004343063570559,
                        "identity_attack": 0.0001919339265441522
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/862076378",
                    "id": 862076378,
                    "created_at": "2021-06-16T06:15:12Z",
                    "updated_at": "2021-06-16T06:16:09Z",
                    "author_association": "NONE",
                    "body": "I faced the same issue, by removing the headers worked for me.\r\n<snap>\r\n20:21\r\nTraceback (most recent call last):\r\n File \u201c<stdin>\u201c, line 1, in <module>\r\n File \u201c/opt/domainvalidation/requests/api.py\u201d, line 76, in get\r\n  return request(\u2018get\u2019, url, params=params, **kwargs)\r\n File \u201c/opt/domainvalidation/requests/api.py\u201d, line 61, in request\r\n  return session.request(method=method, url=url, **kwargs)\r\n File \u201c/opt/domainvalidation/requests/sessions.py\u201d, line 530, in request\r\n  resp = self.send(prep, **send_kwargs)\r\n File \u201c/opt/domainvalidation/requests/sessions.py\u201d, line 643, in send\r\n  r = adapter.send(request, **kwargs)\r\n File \u201c/opt/domainvalidation/requests/adapters.py\u201d, line 529, in send\r\n  raise ReadTimeout(e, request=request)\r\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host=\u2018www.123xyz.com\u2019, port=443): Read timed out. (read timeout=15)\r\n>>> response = requests.get(\u2018https://www.123xyz.com\u2019, timeout=15, allow_redirects=True)\r\n>>> response\r\n<Response [200]>\r\n\r\nNot sure the behavior is specific to the server\r\nNote: 123xyz is just for example.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/862076378/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vikasnavgire",
                        "id": 30363829,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010227974271401763,
                        "severe_toxicity": 0.0001076215849025175,
                        "obscene": 0.0002166363556170836,
                        "threat": 0.000110342436528299,
                        "insult": 0.00018312230531591922,
                        "identity_attack": 0.00013985461555421352
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/981357817",
                    "id": 981357817,
                    "created_at": "2021-11-29T07:31:36Z",
                    "updated_at": "2021-11-29T07:31:36Z",
                    "author_association": "NONE",
                    "body": "Same issue in using a custom adapter as well where the underlying urllib3 adapter can return a `urllib3.exceptions.ReadTimeoutError` as a reason for `MaxRetryError` but that check is missing so it falls through to a `ConnectionError`\r\nhttps://github.com/psf/requests/blob/2d2447e210cf0b9e8c7484bfc6f158de9b24c171/requests/adapters.py#L501-L517",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/981357817/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "chiragjn",
                        "id": 10295418,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010295547544956207,
                        "severe_toxicity": 0.00010336367995478213,
                        "obscene": 0.000202123454073444,
                        "threat": 0.00011358282063156366,
                        "insult": 0.00018797873053699732,
                        "identity_attack": 0.00013984594261273742
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/981842067",
                    "id": 981842067,
                    "created_at": "2021-11-29T17:15:49Z",
                    "updated_at": "2021-11-29T17:15:49Z",
                    "author_association": "NONE",
                    "body": "Please have a look at https://github.com/psf/requests/issues/4590 as the issue may be in _urllib3_. If not exactly this issue a very similar one. Thanks.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/981842067/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "stefano-xy",
                        "id": 16254162,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005617490387521684,
                        "severe_toxicity": 0.00012667987903114408,
                        "obscene": 0.00018147483933717012,
                        "threat": 0.00012851929932367057,
                        "insult": 0.00017586760804988444,
                        "identity_attack": 0.0001402424240950495
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1937446408",
                    "id": 1937446408,
                    "created_at": "2024-02-11T06:23:35Z",
                    "updated_at": "2024-02-11T11:43:39Z",
                    "author_association": "NONE",
                    "body": "Please I need help. I've been trying to download spacy English package using: python -m spacy download en_core_web_sm\r\n\r\nBut I keep getting this error: requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='raw.githubusercontent.com', port=443): Read timed out. (read timeout=None)\r\n\r\nThe full error message is presented below:\r\nC:\\Users\\user>python -m spacy download en_core_web_sm\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 467, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 1096, in _validate_conn\r\n    conn.connect()\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connection.py\", line 642, in connect\r\n    sock_and_verified = _ssl_wrap_socket_and_match_hostname(\r\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connection.py\", line 782, in _ssl_wrap_socket_and_match_hostname\r\n    ssl_sock = ssl_wrap_socket(\r\n               ^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\util\\ssl_.py\", line 470, in ssl_wrap_socket\r\n    ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\util\\ssl_.py\", line 514, in _ssl_wrap_socket_impl\r\n    return ssl_context.wrap_socket(sock, server_hostname=server_hostname)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\ssl.py\", line 517, in wrap_socket\r\n    return self.sslsocket_class._create(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\ssl.py\", line 1075, in _create\r\n    self.do_handshake()\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\ssl.py\", line 1346, in do_handshake\r\n    self._sslobj.do_handshake()\r\nTimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\adapters.py\", line 486, in send    resp = conn.urlopen(\r\n           ^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 844, in urlopen\r\n    retries = retries.increment(\r\n              ^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\util\\retry.py\", line 470, in increment\r\n    raise reraise(type(error), error, _stacktrace)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\util\\util.py\", line 39, in reraise\r\n    raise value\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 790, in urlopen\r\n    response = self._make_request(\r\n               ^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 491, in _make_request\r\n    raise new_e\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 469, in _make_request\r\n    self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 370, in _raise_timeout\r\n    raise ReadTimeoutError(\r\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='raw.githubusercontent.com', port=443): Read timed out. (read timeout=None)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\spacy\\__main__.py\", line 4, in <module>\r\n    setup_cli()\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\spacy\\cli\\_util.py\", line 87, in setup_cli\r\n    command(prog_name=COMMAND)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\click\\core.py\", line 1157, in __call__\r\n    return self.main(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\typer\\core.py\", line 778, in main\r\n    return _main(\r\n           ^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\typer\\core.py\", line 216, in _main\r\n    rv = self.invoke(ctx)\r\n         ^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\click\\core.py\", line 1688, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\click\\core.py\", line 1434, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\click\\core.py\", line 783, in invoke\r\n    return __callback(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\typer\\main.py\", line 683, in wrapper\r\n    return callback(**use_params)  # type: ignore\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\spacy\\cli\\download.py\", line 36, in download_cli\r\n    download(model, direct, sdist, *ctx.args)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\spacy\\cli\\download.py\", line 70, in download\r\n    compatibility = get_compatibility()\r\n                    ^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\spacy\\cli\\download.py\", line 94, in get_compatibility\r\n    r = requests.get(about.__compatibility__)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\api.py\", line 73, in get\r\n    return request(\"get\", url, params=params, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\api.py\", line 59, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\sessions.py\", line 589, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\sessions.py\", line 703, in send    r = adapter.send(request, **kwargs)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\requests\\adapters.py\", line 532, in send    raise ReadTimeout(e, request=request)\r\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host='raw.githubusercontent.com', port=443): Read timed out. (read timeout=None)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1937446408/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dxbee",
                        "id": 158156629,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011901978868991137,
                        "severe_toxicity": 0.00010121097147930413,
                        "obscene": 0.00021314751938916743,
                        "threat": 0.00011006112617906183,
                        "insult": 0.00018382523558102548,
                        "identity_attack": 0.00013989115541335195
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2316921493",
                    "id": 2316921493,
                    "created_at": "2024-08-29T07:40:11Z",
                    "updated_at": "2024-08-29T10:13:59Z",
                    "author_association": "NONE",
                    "body": "\r\n===================================================================================================\r\n2024-08-29 13:08:08.653267\r\n---------------------------------------------------------------------------------------------------\r\nsys.args->['/usr/local/bin/hypercorn', '-b', '0.0.0.0:8080', 'app:asgi_app']\r\n---------------------------------------------------------------------------------------------------\r\nvariables->{'data': <FileStorage: 'RJ003LE001586N01-OSV-Documents-02.pdf' ('application/pdf')>}\r\n---------------------------------------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 536, in _make_request\r\n    response = conn.getresponse()\r\n  File \"/usr/local/lib/python3.10/site-packages/urllib3/connection.py\", line 464, in getresponse\r\n    httplib_response = super().getresponse()\r\n  File \"/usr/local/lib/python3.10/http/client.py\", line 1375, in getresponse\r\n    response.begin()\r\n  File \"/usr/local/lib/python3.10/http/client.py\", line 318, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/local/lib/python3.10/http/client.py\", line 279, in _read_status\r\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\r\n  File \"/usr/local/lib/python3.10/socket.py\", line 705, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"/usr/local/lib/python3.10/ssl.py\", line 1307, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"/usr/local/lib/python3.10/ssl.py\", line 1163, in read\r\n    return self._sslobj.read(len, buffer)\r\nTimeoutError: The read operation timed out\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.10/site-packages/requests/adapters.py\", line 667, in send\r\n    resp = conn.urlopen(\r\n  File \"/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 843, in urlopen\r\n    retries = retries.increment(\r\n  File \"/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py\", line 474, in increment\r\n    raise reraise(type(error), error, _stacktrace)\r\n  File \"/usr/local/lib/python3.10/site-packages/urllib3/util/util.py\", line 39, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 789, in urlopen\r\n    response = self._make_request(\r\n  File \"/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 538, in _make_request\r\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\r\n  File \"/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 369, in _raise_timeout\r\n    raise ReadTimeoutError(\r\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='storage.googleapis.com', port=443): Read timed out. (read timeout=60)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/app/app.py\", line 1011, in gcs_upload\r\n    response  = gcp_client.upload(local_path,destination_path)\r\n  File \"/app/app.py\", line 270, in upload\r\n    blob.upload_from_filename(source_file_name)\r\n  File \"/usr/local/lib/python3.10/site-packages/google/cloud/storage/blob.py\", line 2947, in upload_from_filename\r\n    self._handle_filename_and_upload(\r\n  File \"/usr/local/lib/python3.10/site-packages/google/cloud/storage/blob.py\", line 2826, in _handle_filename_and_upload\r\n    self._prep_and_do_upload(\r\n  File \"/usr/local/lib/python3.10/site-packages/google/cloud/storage/blob.py\", line 2643, in _prep_and_do_upload\r\n    created_json = self._do_upload(\r\n  File \"/usr/local/lib/python3.10/site-packages/google/cloud/storage/blob.py\", line 2466, in _do_upload\r\n    response = self._do_resumable_upload(\r\n  File \"/usr/local/lib/python3.10/site-packages/google/cloud/storage/blob.py\", line 2302, in _do_resumable_upload\r\n    response = upload.transmit_next_chunk(transport, timeout=timeout)\r\n  File \"/usr/local/lib/python3.10/site-packages/google/resumable_media/requests/upload.py\", line 515, in transmit_next_chunk\r\n    return _request_helpers.wait_and_retry(\r\n  File \"/usr/local/lib/python3.10/site-packages/google/resumable_media/requests/_request_helpers.py\", line 178, in wait_and_retry\r\n    raise error\r\n  File \"/usr/local/lib/python3.10/site-packages/google/resumable_media/requests/_request_helpers.py\", line 155, in wait_and_retry\r\n    response = func()\r\n  File \"/usr/local/lib/python3.10/site-packages/google/resumable_media/requests/upload.py\", line 507, in retriable_request\r\n    result = transport.request(\r\n  File \"/usr/local/lib/python3.10/site-packages/google/auth/transport/requests.py\", line 538, in request\r\n    response = super(AuthorizedSession, self).request(\r\n  File \"/usr/local/lib/python3.10/site-packages/requests/sessions.py\", line 589, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/local/lib/python3.10/site-packages/requests/sessions.py\", line 703, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/lib/python3.10/site-packages/requests/adapters.py\", line 713, in send\r\n    raise ReadTimeout(e, request=request)\r\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host='storage.googleapis.com', port=443): Read timed out. (read timeout=60)\r\n\r\n\r\nHow to solve this error\r\n\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2316921493/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Pratikwat",
                        "id": 170626967,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0029120342805981636,
                        "severe_toxicity": 0.000101618112239521,
                        "obscene": 0.0003504342457745224,
                        "threat": 0.00013100355863571167,
                        "insult": 0.00024323239631485194,
                        "identity_attack": 0.0001539181830594316
                    }
                }
            ]
        },
        "157": {
            "html_url": "https://github.com/psf/requests/issues/5411",
            "id": 592523068,
            "number": 5411,
            "title": "Incorrect cookie handling: third level domain incorrectly uses second level domain cookies",
            "created_at": "2020-04-02T10:27:12Z",
            "updated_at": "2020-05-14T08:44:28Z",
            "closed_at": null,
            "body": "When visiting (logging in to) zh.wikisource.org, cookies for the following domain are set:\r\n- .wikisource.org\r\n\r\nIf one visits wikisource.org afterwards, cookies for the following domain are set:\r\n- wikisource.org\r\n\r\nAfter i.e. logout from zh.wikisource.org, zh.wikisource.org sends cookie invalidation request for .wikisource.org. Requests invalidates them correctly, leaves wikisource.org cookies untouched correctly.\r\nBut for further communication with zh.wikisource.org, requests incorrectly use remaining wikisource.org cookie. Which is rejected by zh.wikisource.org and followed by cookie invalidation request for .wikisource.org.\r\n\r\n## Expected Result\r\nIt looks like the cookie handling library used by requests is doing something wrong (at least according to the RFCs), as it should not send the host-only cookie for wikisource.org to zh.wikisource.org. If it's using RFC 2109, \"zh.wikisource.org\" does not domain-match the cookie for \"wikisource.org\" because \"wikisource.org\" doesn't begin with a dot. If it's using RFC 6265, the domainless cookie for \"wikisource.org\" should have had the host-only-flag set meaning it should not be sent to \"zh.wikisource.org\". OTOH, it's possible it's being bug-compatible with browsers (RFC 6265 even notes that such a bug exists/existed in some agents in \u00a7 4.1.2.3).\r\n\r\n## Actual Result\r\nAs written above, requests use wikisource.org cookie for zh.wikisource.org. Which is rejected by zh.wikisource.org and followed by cookie invalidation request for .wikisource.org\". That is fulfilled (no cookies for .wikisource.org are set), but requests still tries to push cookies for wikisource.org to zh.wikisource.org. So the actual result is endless loop (https://travis-ci.org/github/wikimedia/pywikibot/jobs/669558038#L13763).\r\n\r\n## Reproduction Steps\r\nSimple:\r\n```python\r\nimport pywikibot\r\ns=pywikibot.Site('zh', 'wikisource')\r\nprint(s.hostname())  # zh.wikisource.org\r\ns.login()\r\n\r\ns2=pywikibot.Site('mul', 'wikisource')\r\nprint(s2.hostname())  # wikisource.org\r\ns2.login()\r\n\r\ns.logout()\r\ns.login()\r\n# endless loop here\r\n```\r\nElaborate:\r\n```python\r\nimport requests\r\ns=requests.Session()\r\n\r\ndef login(url):\r\n  while True:\r\n    # login token\r\n    r1=s.post(url=url, data={'action':'query','meta':'tokens','type':'login','format':'json'})\r\n    logintoken = r1.json()['query']['tokens']['logintoken']\r\n    # login (test account)\r\n    r2=s.post(url=url, data={'action':'clientlogin','loginreturnurl':'https://example.com','logintoken':logintoken,'username':'Test20200402','password':'popokatepetl','format':'json'})\r\n    print(r2.json())\r\n    if r2.json().get('error') and r2.json()['error'].get('code') == 'badtoken':\r\n      continue\r\n    else:\r\n      break\r\n  #print(s.cookies)\r\n\r\ndef logout(url):\r\n  # logout token\r\n  r1=s.post(url=url, data={'action':'query','meta':'tokens','type':'csrf','format':'json'})\r\n  logouttoken = r1.json()['query']['tokens']['csrftoken']\r\n  # logout\r\n  r2=s.post(url=url, data={'action':'logout','token':logouttoken,'format':'json'})\r\n  print(r2.json())\r\n  #print(s.cookies)\r\n\r\nurl1 = 'https://zh.wikisource.org/w/api.php'\r\nurl2='https://wikisource.org/w/api.php'\r\n\r\nlogin(url1)\r\n\r\nlogin(url2)\r\n\r\nlogout(url1)\r\n\r\nlogin(url1)\r\n# endless loop here\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\nReproduced on many PCs with many configurations and also on Travis-CI. Here is one:\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.18\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.23.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010104f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n\r\nLinks:\r\nReported and described in more detail in: https://phabricator.wikimedia.org/T224712\r\nReproducible immediately in: https://repl.it/repls/HarmfulBiodegradableExperiments\r\nPastebin (just in case): https://pastebin.com/7d7Dn9p1",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "dvorapa",
                "id": 5113916,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5411/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/628488827",
                    "id": 628488827,
                    "created_at": "2020-05-14T08:44:27Z",
                    "updated_at": "2020-05-14T08:44:27Z",
                    "author_association": "NONE",
                    "body": "Is this a Python issue?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/628488827/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dvorapa",
                        "id": 5113916,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007594114867970347,
                        "severe_toxicity": 0.0001098376014851965,
                        "obscene": 0.00018670402641873807,
                        "threat": 0.00010977613419527188,
                        "insult": 0.00017354314331896603,
                        "identity_attack": 0.00013313813542481512
                    }
                }
            ]
        },
        "158": {
            "html_url": "https://github.com/psf/requests/issues/5388",
            "id": 580653057,
            "number": 5388,
            "title": "RequestsCookieJar appends \".local\" to cookie from localhost",
            "created_at": "2020-03-13T14:54:34Z",
            "updated_at": "2020-04-09T20:45:32Z",
            "closed_at": null,
            "body": "When I make a request to localhost (on my development machine), Requests changes the domain from \"localhost\" to \"localhost.local\" when saving the cookie. Thus, I am unable to access the cookie if I specify the domain parameter in the get method.\r\n\r\nMy app requires me to get and set cookies on the session object as a persistence mechanism; I need to persist this cookie over more than one session in the python app.\r\n\r\n## Expected Result\r\n\r\nI would expect the domain in `RequestCookieJar` to always match the domain I used to make the request.\r\n\r\n## Actual Result\r\n\r\nIf I make a request to localhost, instead I get the cookie saved to the domain \"localhost.local\". (Note that I cannot actually make requests to \"localhost.local\", they fail.) This puts me in a position where I must make requests to \"localhost\" but use \"localhost.local\" to get or set the cookie.\r\n\r\n## Reproduction Steps\r\n\r\n```\r\n>>> import requests\r\n>>> ses = requests.Session()\r\n>>> ses.get('http://localhost/')\r\n<Response [200]>\r\n>>> ses.cookies\r\n<RequestsCookieJar[Cookie(version=0, name='PHPSESSID', value='ui1hr334bmcr1r85jlu8k3rq65', port=None, port_specified=False, domain='localhost.local', domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)]>\r\n>>> ses.cookies.get('PHPSESSID')\r\n'ui1hr334bmcr1r85jlu8k3rq65'\r\n>>> ses.cookies.get('PHPSESSID', domain='localhost')\r\n>>> ses.cookies.get('PHPSESSID', domain='localhost.local')\r\n'ui1hr334bmcr1r85jlu8k3rq65'\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101000af\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "dominickj-tdi",
                "id": 49956725,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5388/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/600516891",
                    "id": 600516891,
                    "created_at": "2020-03-18T09:34:12Z",
                    "updated_at": "2020-03-18T09:34:12Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hi,\r\n\r\nRequests uses `cookielib.make_cookies` to fill its `RequestsCookieJar`.\r\nIn turn, `cookielib.make_cookies` uses `cookielib.eff_request_host` to extract the `erhn`.\r\n`cookielib` conforms to [rfc2965](https://www.ietf.org/rfc/rfc2965.txt) which states:\r\n> The term effective host name is related to host name.  If a host name\r\n   contains no dots, the effective host name is that name with the\r\n   string .local appended to it\r\n\r\nTherefore, unless `cookielib` adds support and defaults its policy to [rfc6265](https://www.ietf.org/rfc/rfc6265.txt), I think this is unavoidable :(\r\n\r\nDo you have any ideas?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/600516891/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hodbn",
                        "id": 2493157,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007064466481097043,
                        "severe_toxicity": 0.00011396970512578264,
                        "obscene": 0.00018476588593330234,
                        "threat": 0.00011870893649756908,
                        "insult": 0.00017041929822880775,
                        "identity_attack": 0.00013558968203142285
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/601770170",
                    "id": 601770170,
                    "created_at": "2020-03-20T15:49:17Z",
                    "updated_at": "2020-03-20T15:49:17Z",
                    "author_association": "NONE",
                    "body": "What if we just added a line like this to `RequestsCookieJar.get()` and `RequestCookieJar.set()` then?\r\n\r\n```python\r\nif '.' not in domain:\r\n    domain += '.local'\r\n```\r\n\r\nThat would be a pretty minor change that I don't imagine would cause issues for existing scripts, but would allow scripts to use host names without dots.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/601770170/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dominickj-tdi",
                        "id": 49956725,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006458997377194464,
                        "severe_toxicity": 0.00012013876403216273,
                        "obscene": 0.0001855301234172657,
                        "threat": 0.00012312694161664695,
                        "insult": 0.00017481933173257858,
                        "identity_attack": 0.00013966936967335641
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/611744127",
                    "id": 611744127,
                    "created_at": "2020-04-09T20:45:31Z",
                    "updated_at": "2020-04-09T20:45:31Z",
                    "author_association": "NONE",
                    "body": "Just as a note, I am using the above two lines in my own code where I call `session.cookies.set()` and `session.cookies.get()`. Everything works as expected with that workaround. But I still think it would be good to include in the main library. I'd be happy to submit a pull request if the team would be willing to merge it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/611744127/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dominickj-tdi",
                        "id": 49956725,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005407628486864269,
                        "severe_toxicity": 0.00013120633957441896,
                        "obscene": 0.00019062696082983166,
                        "threat": 0.00013448399840854108,
                        "insult": 0.00017480782116763294,
                        "identity_attack": 0.00014236057177186012
                    }
                }
            ]
        },
        "159": {
            "html_url": "https://github.com/psf/requests/issues/5348",
            "id": 566817921,
            "number": 5348,
            "title": "Cookie with empty value crashes when wrapping jar into dict",
            "created_at": "2020-02-18T11:08:08Z",
            "updated_at": "2020-02-18T11:08:08Z",
            "closed_at": null,
            "body": "KeyError is raised instead of returning the single cookie, if the cookie value is empty. \r\n\r\nFrom the source code it is obvious that it will fail like that. Specifically, line https://github.com/psf/requests/blob/master/requests/cookies.py#L397 says:\r\n```python\r\n        if toReturn:\r\n            return toReturn\r\n```\r\n\r\nWhich mean empty value will be considered as invalid (RFC allows empty cookie value).\r\n\r\nThe fix is simple - make the check `if toReturn is not None`.\r\n\r\n\r\n## Expected Result\r\n\r\nExpected to get dict printed.\r\n\r\n## Actual Result\r\n\r\n`KeyError: \"name='authCke', domain=None, path=None\"` raised\r\n\r\n## Reproduction Steps\r\nBear with bootstrapping, I made it to avoid actual network code that needs to authenticate first. \r\n\r\n```python\r\nfrom http.client import HTTPMessage\r\n\r\nfrom requests import PreparedRequest\r\nfrom requests.cookies import RequestsCookieJar, MockResponse, MockRequest\r\n\r\nraw = 'authCke=; domain=.opentable.com; expires=Mon, 18-May-2020 08:38:10 GMT; path=/;SameSite=None'\r\nheaders = HTTPMessage()\r\nheaders.add_header('set-cookie', raw)\r\njar = RequestsCookieJar()\r\nresp = MockResponse(headers)\r\nreq = PreparedRequest()\r\nreq.headers = {}\r\nreq.url = 'https://opentable.com/'\r\nreq = MockRequest(req)\r\njar.extract_cookies(resp, req)\r\nprint(dict(jar))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.1.4\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-76-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010100f\",\r\n    \"version\": \"18.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.7\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "undera",
                "id": 2026469,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5348/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "160": {
            "html_url": "https://github.com/psf/requests/issues/5316",
            "id": 550522326,
            "number": 5316,
            "title": "HTTPAdapter with SSLContext specified does not use SSLContext's ca_certs on Windows",
            "created_at": "2020-01-16T01:34:19Z",
            "updated_at": "2024-10-28T23:08:28Z",
            "closed_at": null,
            "body": "My objective was to get `requests` to use the Windows certificate store rather than the `certifi` bundle. **Maybe this just isn't supported.**\r\n\r\nI know there is some complexity and has been some debate about how supplying an `SSLContext` was supposed to work in `requests` (see #2118). But according to that issue, TransportAdapters (i.e. `HTTPAdapter`) is the recommended way to provide an `SSLContext`.\r\n\r\n## Expected Result\r\n\r\nThe SSL Context provided would pass its `ca_certs` along to requests and authentication with a remote endpoint would work.\r\n\r\n## Actual Result\r\n\r\nIt didn't work, instead there is a failure looking up the certificate bundle (which I've neglected to deploy alongside my application, so it's not there).\r\n\r\nThe callstack ends up here:\r\n```\r\nFile \"venv\\lib\\site-packages\\requests\\adapters.py\", line 228, in cert_verify\r\n    \"invalid path: {}\".format(cert_loc))\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport requests.adapters\r\n\r\n# adapted from https://stackoverflow.com/questions/42981429/ssl-failure-on-windows-using-python-requests/50215614\r\nclass SSLContextAdapter(requests.adapters.HTTPAdapter):\r\n    def init_poolmanager(self, *args, **kwargs):\r\n        context = ssl.create_default_context()\r\n\r\n        kwargs['ssl_context'] = context\r\n        return super(SSLContextAdapter, self).init_poolmanager(*args, **kwargs)\r\n\r\ns = requests.Session()\r\ns.mount('https://www.google.com', SSLContextAdapter())\r\nresult = s.get('https://www.google.com')\r\n```\r\n\r\nAdditionally (as a hack to emulate my enviornment), go rename `venv\\Lib\\site-packages\\certifi\\cacert.pem`\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010103f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.7\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "matthchr",
                "id": 8798850,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5316/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/604518757",
                    "id": 604518757,
                    "created_at": "2020-03-26T16:06:52Z",
                    "updated_at": "2020-03-26T16:06:52Z",
                    "author_association": "NONE",
                    "body": "I agree that this should be much more straightforward than it is. There should be a simple way to tell it to use Windows cert store on Windows, or to hook this behaviour in via an adapter.\r\n\r\nI spent quite a while figuring out how to do this, and eventually came up with a solution/workaround.\r\n\r\n```\r\nclass WindowsCertStoreAdapter(requests.adapters.HTTPAdapter):\r\n    def cert_verify(self, conn, url, verify, cert):\r\n        super(WindowsCertStoreAdapter, self).cert_verify(conn, url, verify, cert)\r\n        # By default Python requests uses the ca_certs from the certifi module\r\n        # But we want to use the certificate store instead.\r\n        # By clearing the ca_certs variable we force it to fall back on that behaviour \r\n        conn.ca_certs = None\r\n```\r\n\r\nhooked in in the same way as the description above.\r\n\r\nThe problem with your code is that it happily loads all the certs from the cert store, but as long as ca_certs is set to point at the certificate bundle, it will load everything from that afterwards, overwriting them. By making sure it's None you keep the windows cert store ones until they're needed. Hope that helps, anyway.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/604518757/reactions",
                        "total_count": 3,
                        "+1": 3,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gjb1002",
                        "id": 1245568,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006757224327884614,
                        "severe_toxicity": 0.0001175595898530446,
                        "obscene": 0.00018856089445762336,
                        "threat": 0.00012453622184693813,
                        "insult": 0.00017510827456135303,
                        "identity_attack": 0.00013848049275111407
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/612596304",
                    "id": 612596304,
                    "created_at": "2020-04-12T10:50:52Z",
                    "updated_at": "2020-04-12T10:50:52Z",
                    "author_association": "NONE",
                    "body": "[pip-system-certs](https://pypi.org/project/pip-system-certs/) might be of interest for you.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/612596304/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fedorbirjukov",
                        "id": 1055607,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000549016403965652,
                        "severe_toxicity": 0.00013018975732848048,
                        "obscene": 0.00018504921172279865,
                        "threat": 0.000132843415485695,
                        "insult": 0.00017763517098501325,
                        "identity_attack": 0.00014232432295102626
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/612641601",
                    "id": 612641601,
                    "created_at": "2020-04-12T16:28:19Z",
                    "updated_at": "2020-04-12T16:28:19Z",
                    "author_association": "NONE",
                    "body": "@gjb1002, I think the problem with the above code is much simpler.\r\n@matthchr just does not load the certificates from the store after creating the context as mentioned on StackOverflow:\r\n```\r\ncontext.load_default_certs() # this loads the OS defaults on Windows\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/612641601/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fedorbirjukov",
                        "id": 1055607,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008679342572577298,
                        "severe_toxicity": 0.0001036742323776707,
                        "obscene": 0.0001838744938140735,
                        "threat": 0.00010869989637285471,
                        "insult": 0.0001784667110769078,
                        "identity_attack": 0.00013384279736783355
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/612649330",
                    "id": 612649330,
                    "created_at": "2020-04-12T17:27:13Z",
                    "updated_at": "2020-04-12T17:27:13Z",
                    "author_association": "NONE",
                    "body": "@fedorbirjukov - `create_default_context` does that automatically, see: https://github.com/python/cpython/blob/477b1b25768945621d466a8b3f0739297a842439/Lib/ssl.py\r\n\r\nMoreover the issue is less with the `ssl_context` and more with the fact that if the `certifi` bundle is not found `requests` raises. \r\n\r\nI think that @gjb1002's answer will solve this problem, although in my case I just gave in and rewrote our http stack using `aiohttp` (which does the right thing here and supports cleaner async/await to boot).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/612649330/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "matthchr",
                        "id": 8798850,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007890291162766516,
                        "severe_toxicity": 0.00011065242142649367,
                        "obscene": 0.00019399015582166612,
                        "threat": 0.00011458341032266617,
                        "insult": 0.0001753614196786657,
                        "identity_attack": 0.00013748960918746889
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/612661870",
                    "id": 612661870,
                    "created_at": "2020-04-12T19:06:15Z",
                    "updated_at": "2020-04-12T19:06:15Z",
                    "author_association": "NONE",
                    "body": "Now I see. If using this hack, then you should also clear `conn.ca_cert_dir = None`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/612661870/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fedorbirjukov",
                        "id": 1055607,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007115421467460692,
                        "severe_toxicity": 0.00011233796976739541,
                        "obscene": 0.0001870279520517215,
                        "threat": 0.00011155060929013416,
                        "insult": 0.0001790390524547547,
                        "identity_attack": 0.00013414675777312368
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2442840277",
                    "id": 2442840277,
                    "created_at": "2024-10-28T23:08:27Z",
                    "updated_at": "2024-10-28T23:08:27Z",
                    "author_association": "NONE",
                    "body": "I have successfully used the solution above before. But it is not available if you use another package that internally uses `requests` for its HTTP requests. These often have no documented way to access the internal session instance.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2442840277/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "roelandschoukens",
                        "id": 7564011,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005444558337330818,
                        "severe_toxicity": 0.00013043118815403432,
                        "obscene": 0.0001857644965639338,
                        "threat": 0.00013009073154535145,
                        "insult": 0.0001747248461470008,
                        "identity_attack": 0.0001421797351213172
                    }
                }
            ]
        },
        "161": {
            "html_url": "https://github.com/psf/requests/issues/5263",
            "id": 522980865,
            "number": 5263,
            "title": "`connect` timeout is *not* a TCP connect timeout, but a TCP connect + send the whole HTTP request timeout",
            "created_at": "2019-11-14T16:49:25Z",
            "updated_at": "2021-03-11T10:22:43Z",
            "closed_at": null,
            "body": "`connect` timeout is *not* a TCP connect timeout, but a TCP connect + send the whole HTTP request timeout.\r\n\r\n## Expected Result\r\n\r\nI expect that the documentation is correct about `connect` timeout:\r\nThe [advanced documentation](https://requests.readthedocs.io/en/master/user/advanced/#timeouts) says:\r\n> The connect timeout is the number of seconds Requests will wait for your client to establish a connection to a remote machine (corresponding to the connect()) call on the socket. It\u2019s a good practice to set connect timeouts to slightly larger than a multiple of 3, which is the default TCP packet retransmission window.\r\n\r\n## Actual Result\r\n\r\nThe `connect` timeout seems to be the TCP connect timeout + sending the whole HTTP request.\r\n\r\n\r\n## Reproduction Steps\r\n```bash\r\ndd if=/dev/zero of=zero.100MB bs=100M count=1\r\n```\r\n```python\r\nimport requests\r\n\r\nfiles = {'file': open('zero.100MB', 'rb')}\r\nrequests.post('somehost', timeout=(1, 1000), files=files)\r\n```\r\n\r\n(It needs a host accepting the large POST, I couldn't find any public right now...)\r\n\r\nResult:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 387, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 1106, in request\r\n    self._send_request(method, url, body, headers)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 1151, in _send_request\r\n    self.endheaders(body)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 1102, in endheaders\r\n    self._send_output(message_body)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 936, in _send_output\r\n    self.send(message_body)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 908, in send\r\n    self.sock.sendall(data)\r\n  File \"/usr/lib/python3.5/ssl.py\", line 891, in sendall\r\n    v = self.send(data[count:])\r\n  File \"/usr/lib/python3.5/ssl.py\", line 861, in send\r\n    return self._sslobj.write(data)\r\n  File \"/usr/lib/python3.5/ssl.py\", line 586, in write\r\n    return self._sslobj.write(data)\r\nsocket.timeout: The write operation timed out\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.8\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-64-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.7\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n## Analysis\r\n\r\nDigging into urllib3:\r\nhttps://github.com/urllib3/urllib3/blob/37ba61a8b8120cbd866d057eaa3936f4b140dee0/src/urllib3/connectionpool.py#L370-L390\r\n\r\nIt sets the connect timeout on the connection, then validate https, then sends the full request, and only then sets the read timeout on the connection socket.\r\n\r\nThat being said I could *not* find any urllib3 doc explicitly defining the `connect` timeout as requests does...\r\n\r\nFinally:\r\nhttps://docs.python.org/3.8/library/socket.html#socket.socket.sendall\r\n> Changed in version 3.5: The socket timeout is no more reset each time data is sent successfully. The socket timeout is now the maximum total duration to send all data.\r\n\r\nSo maybe it did work as a TCP connect timeout + write idle timeout before python 3.5 (which is still not just TCP connect timeout, but closer to it), but now it is clearly not.\r\n",
            "author_association": "NONE",
            "comments": 14,
            "state": "open",
            "user": {
                "login": "thomas-riccardi",
                "id": 1730297,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5263/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/753512871",
                    "id": 753512871,
                    "created_at": "2021-01-02T18:31:22Z",
                    "updated_at": "2021-01-02T18:31:22Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Have you raised this on urllib3 side? That sounds like an odd behavioural change ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/753512871/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nanonyme",
                        "id": 348449,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000880732957739383,
                        "severe_toxicity": 0.00010164301056647673,
                        "obscene": 0.00018171864212490618,
                        "threat": 0.00011113164509879425,
                        "insult": 0.0001841596094891429,
                        "identity_attack": 0.00013364067126531154
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/753615816",
                    "id": 753615816,
                    "created_at": "2021-01-03T13:18:19Z",
                    "updated_at": "2021-01-03T13:18:19Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I think this is a fair criticism of the documentation @nanonyme given the changes in the standard library in 3.5",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/753615816/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006025361362844706,
                        "severe_toxicity": 0.00012252178566996008,
                        "obscene": 0.00017783735529519618,
                        "threat": 0.0001345763448625803,
                        "insult": 0.00017543650756124407,
                        "identity_attack": 0.0001430184202035889
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/753620169",
                    "id": 753620169,
                    "created_at": "2021-01-03T13:50:51Z",
                    "updated_at": "2021-01-03T13:50:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "FWIW https://github.com/python/cpython/commit/8912d1418e6b336c21bbe21c0dd123332bbe5ab5 is the commit where functionality changed",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/753620169/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nanonyme",
                        "id": 348449,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001461062696762383,
                        "severe_toxicity": 9.5943825726863e-05,
                        "obscene": 0.0002357700141146779,
                        "threat": 0.00010922492219833657,
                        "insult": 0.00019866741786245257,
                        "identity_attack": 0.0001390338147757575
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/753620501",
                    "id": 753620501,
                    "created_at": "2021-01-03T13:53:12Z",
                    "updated_at": "2021-01-03T13:53:25Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The bug reference in commit is completely wrong, original issue is here https://bugs.python.org/issue23853",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/753620501/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nanonyme",
                        "id": 348449,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006977853481657803,
                        "severe_toxicity": 0.00011338737385813147,
                        "obscene": 0.00017908379959408194,
                        "threat": 0.00011911214824067429,
                        "insult": 0.00017614215903449804,
                        "identity_attack": 0.0001368680241284892
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/753620664",
                    "id": 753620664,
                    "created_at": "2021-01-03T13:54:15Z",
                    "updated_at": "2021-01-03T13:54:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "https://mail.python.org/pipermail/python-dev/2015-April/139001.html",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/753620664/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nanonyme",
                        "id": 348449,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007237849058583379,
                        "severe_toxicity": 0.00011178838030900806,
                        "obscene": 0.00017779800691641867,
                        "threat": 0.00011636521958280355,
                        "insult": 0.0001749717484926805,
                        "identity_attack": 0.00013965352263767272
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/753621010",
                    "id": 753621010,
                    "created_at": "2021-01-03T13:56:36Z",
                    "updated_at": "2021-01-03T13:57:33Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It seems all in all urllib3 must be refactored not to use sendall if the original behaviour is preferred. Current situation is really bad that urllib3 timeout handling differs depending on Python version. Actually it must be refactored in either case since that is the *only* way to get same behaviour in all target Python implementations.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/753621010/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nanonyme",
                        "id": 348449,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006865832256153226,
                        "severe_toxicity": 0.0001155341014964506,
                        "obscene": 0.00017871141608338803,
                        "threat": 0.00012743991101160645,
                        "insult": 0.00017708555969875306,
                        "identity_attack": 0.00013832042168360204
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/753650309",
                    "id": 753650309,
                    "created_at": "2021-01-03T17:32:13Z",
                    "updated_at": "2021-01-03T17:32:13Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "urllib3 2.0 is what is active in master and has dropped support for < 3.5 iirc so this isn't an issue as far as current development is concerned. A fix to the 1.26 branch is probably worthwhile, but wouldn't guarantee fixing this for everyone using requests who may be using a different urllib3 version",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/753650309/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006793930660933256,
                        "severe_toxicity": 0.0001161917025456205,
                        "obscene": 0.00018451412324793637,
                        "threat": 0.00012668472481891513,
                        "insult": 0.00017408758867532015,
                        "identity_attack": 0.0001380329194944352
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/755324406",
                    "id": 755324406,
                    "created_at": "2021-01-06T14:18:18Z",
                    "updated_at": "2021-01-06T14:18:18Z",
                    "author_association": "NONE",
                    "body": "@nanonyme I have not traced this issue down in `requests` dependencies. I stopped at the first issue: `requests` documentation inconsistent with current behavior, as we initially wrote code based on that part of the documentation, and it didn't work as expected.\r\n\r\nIt's good to know it's due to a breaking change in python 3.5.\r\n\r\nPython 3.5 reached end-of-life in September 2020, python 3.4 before that: I think the \"different behavior depending on python version\" is not really an issue anymore.\r\n\r\nWe worked around this behavior change by stopping everywhere to use a tuple for timeout, effectively having only a total send request timeout, but the previous/documented behavior seemed better to us: more fine-grained control: we want to support low bandwidth cases where the request sending can be slow but legitimate, and still promptly fail if the TCP is really slow to connect (cannot rely on kernel timeouts which are usually pretty large). For now we gave up for the later, with large global timeouts.\r\n\r\nIf you \"fix\" this issue by going back to the previous/documented behavior, it would give us more control back.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/755324406/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "thomas-riccardi",
                        "id": 1730297,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006094088894315064,
                        "severe_toxicity": 0.00012369616888463497,
                        "obscene": 0.00019142784003634006,
                        "threat": 0.00012169206456746906,
                        "insult": 0.00017142583965323865,
                        "identity_attack": 0.00014134138473309577
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/755569234",
                    "id": 755569234,
                    "created_at": "2021-01-06T19:34:20Z",
                    "updated_at": "2021-01-06T19:34:42Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'm not really promising to fix anything. I'm just saying that if urllib3 used socket.send instead of socket.sendall (and implemented sendall-like functionality themselves), then they would not be subject to this weird interpretation of timeouts that is in modern socket module implementation. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/755569234/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nanonyme",
                        "id": 348449,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007615184877067804,
                        "severe_toxicity": 0.00010988306166836992,
                        "obscene": 0.0001811057882150635,
                        "threat": 0.00011647157225525007,
                        "insult": 0.00017949476023204625,
                        "identity_attack": 0.00013669610780198127
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/773726925",
                    "id": 773726925,
                    "created_at": "2021-02-05T01:56:23Z",
                    "updated_at": "2021-02-05T01:56:23Z",
                    "author_association": "NONE",
                    "body": "Remember that Requests are a library for getting HTTP/HTTPS Requests, so the connect time out...is a timeout for your method call...then the read timeout occours...if you are having timeouts on tcp beccause the server response is too slow you ned to keep the VC up so....have you tried to enable  TCP Keep-Alive on your host? Is is disabled by default and the  trigger timmer is set to high...so it is unreachable... I did some thing like this in order to enable it from the  GUI, and  the results were great. it have to be done before creating the session...and this is for Linux.... if you have another OS you will need another socker options.\r\n\r\n    import socket\r\n    from urllib3.connection import HTTPConnection\r\n    HTTPConnection.default_socket_options = HTTPConnection.default_socket_options + [\r\n        (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPIDLE, 45)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPINTVL, 10)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPCNT, 6)\r\n         ]**\r\n\r\n    from requests import session\r\n    self.session = session()\r\n\r\n\r\nCheers!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/773726925/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.002219480462372303,
                        "severe_toxicity": 9.416223474545404e-05,
                        "obscene": 0.0002665990905370563,
                        "threat": 0.0001158282975666225,
                        "insult": 0.00021825537260156125,
                        "identity_attack": 0.00015086964413058013
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/774048706",
                    "id": 774048706,
                    "created_at": "2021-02-05T13:58:36Z",
                    "updated_at": "2021-02-05T13:58:36Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "If you go that route, I'd advise the adapter in the requests-toolbelt made to make setting those options easier",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/774048706/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005374394822865725,
                        "severe_toxicity": 0.0001323904434684664,
                        "obscene": 0.00018403251306153834,
                        "threat": 0.00013711163774132729,
                        "insult": 0.00017688337538857013,
                        "identity_attack": 0.00014387138071469963
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/795588430",
                    "id": 795588430,
                    "created_at": "2021-03-10T15:16:52Z",
                    "updated_at": "2021-03-10T15:16:52Z",
                    "author_association": "NONE",
                    "body": "> requests-toolbelt\r\n\r\nYup,but...since it is not updated, will not appy to Windows Clients...caus Windows depreceated the winsck32 library and in order to set the KEEP_ALIVE timers ioctl usage is required.... unless you have a fork for it or an updated lib....\r\n\r\nalso...there is sys.platform response issue when ussing python 2.x ...\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/795588430/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008144179009832442,
                        "severe_toxicity": 0.0001066674230969511,
                        "obscene": 0.00018863029254134744,
                        "threat": 0.00011415808694437146,
                        "insult": 0.0001762621250236407,
                        "identity_attack": 0.00013341187150217593
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/796365167",
                    "id": 796365167,
                    "created_at": "2021-03-11T01:51:41Z",
                    "updated_at": "2021-03-11T01:51:41Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Or you could send a PR to the library to fix those issue and help the maintainers get those patches out to windows users",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/796365167/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008092295029200613,
                        "severe_toxicity": 0.00010874976578634232,
                        "obscene": 0.00017325776570942253,
                        "threat": 0.00013097995542921126,
                        "insult": 0.0001873667206382379,
                        "identity_attack": 0.0001363712945021689
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/796631235",
                    "id": 796631235,
                    "created_at": "2021-03-11T10:22:42Z",
                    "updated_at": "2021-03-11T10:22:42Z",
                    "author_association": "NONE",
                    "body": "ok. I will... I am just a TS,  but I can do that,,,",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/796631235/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007437368622049689,
                        "severe_toxicity": 0.00011377946066204458,
                        "obscene": 0.00018018324044533074,
                        "threat": 0.00012727220018859953,
                        "insult": 0.00017625758482608944,
                        "identity_attack": 0.00013526219117920846
                    }
                }
            ]
        },
        "162": {
            "html_url": "https://github.com/psf/requests/issues/5258",
            "id": 520055151,
            "number": 5258,
            "title": "Issue with Latin Characters in URL",
            "created_at": "2019-11-08T14:48:07Z",
            "updated_at": "2020-08-06T12:18:08Z",
            "closed_at": null,
            "body": "Getting UTF-8 when attempting to get a URL with Latin characters in the URL.\r\n\r\n## Expected Result\r\n\r\n<Response [200]>\r\n\r\n## Actual Result\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/api.py\", line 60, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 668, in send\r\n    history = [resp for resp in gen] if allow_redirects else []\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 668, in <listcomp>\r\n    history = [resp for resp in gen] if allow_redirects else []\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 247, in resolve_redirects\r\n    **adapter_kwargs\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 681, in send\r\n    r._next = next(self.resolve_redirects(r, request, yield_requests=True, **kwargs))\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 149, in resolve_redirects\r\n    url = self.get_redirect_target(resp)\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 115, in get_redirect_target\r\n    return to_native_string(location, 'utf8')\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/_internal_utils.py\", line 25, in to_native_string\r\n    out = string.decode(encoding)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 64: invalid continuation byte\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nrequests.get(\"http://www.janes.com/article/92450/south-korea-launches-philippine-navy-s-second-jos\u00e9-rizal-class-frigate?from_rss=1\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"19.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "daltonch",
                "id": 7874711,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5258/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/552816674",
                    "id": 552816674,
                    "created_at": "2019-11-12T09:47:07Z",
                    "updated_at": "2019-11-12T09:47:07Z",
                    "author_association": "NONE",
                    "body": "**NB: Encoding of `\u00e9`: in utf-8, it is `\\xC3\\xA9`, in latin1, it is `\\xE9`**\r\n\r\nHere's what I found:\r\n\r\n## Opening with Firefox\r\nWhen I open with firefox, \r\n1. `http://www.janes.com/article/92450/south-korea-launches-philippine-navy-s-second-jos%C3%A9-rizal-class-frigate?from_rss=1` got 302 redirected to https url `http://www.janes.com/article/92450/south-korea-launches-philippine-navy-s-second-jos%C3%A9-rizal-class-frigate?from_rss=1`.\r\n\r\n2. UTF-8 encoding of diacritics `\u00e9` `https://www.janes.com/article/92450/south-korea-launches-philippine-navy-s-second-jos%C3%A9-rizal-class-frigate?from_rss=1` got 301 redirected with the following response headers:\r\n```\r\nHTTP/1.1 301 Moved Permanently\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html;charset=UTF-8\r\nLocation: /article/92450/south-korea-launches-philippine-navy-s-second-jos\u00e9-rizal-class-frigate?from_rss=1\r\nServer: Microsoft-IIS/7.5\r\nX-Powered-By: ASP.NET\r\nGsWebServer2: V-VWC2PPTSWB03\r\nDate: Tue, 12 Nov 2019 08:28:03 GMT\r\nContent-Length: 0\r\n```\r\n I don't know what encoding is being used in the firefox showing the HTTP headers. But:\r\n\r\n3. Firefox retries with `https://www.janes.com/article/92450/south-korea-launches-philippine-navy-s-second-jos%E9-rizal-class-frigate?from_rss=1`` and get a 200.\r\n\r\n## The source of the error (encoding mismatch)\r\nIn `requests`, we [encode the redirect url to `latin1`](https://github.com/psf/requests/commit/722b1dae96b0523dde5e01351dd743f102090f53) but later [decode it as `utf8`](https://github.com/psf/requests/commit/722b1dae96b0523dde5e01351dd743f102090f53). (i.e., `b'jos\\xe9a'.decode('utf-8')` will raise error in python.\r\n\r\n## Attempt to solve\r\nLooking at the `get_redirect_target` code\r\n``` python\r\n    def get_redirect_target(self, resp):\r\n        \"\"\"Receives a Response. Returns a redirect URI or ``None``\"\"\"\r\n        # Due to the nature of how requests processes redirects this method will\r\n        # ......\r\n        if resp.is_redirect:\r\n            location = resp.headers['location']\r\n            # Currently the underlying http module on py3 decode headers\r\n            # in latin1, but empirical evidence suggests that latin1 is very\r\n            # rarely used with non-ASCII characters in HTTP headers.\r\n            # It is more likely to get UTF8 header rather than latin1.\r\n            # This causes incorrect handling of UTF8 encoded location headers.\r\n            # To solve this, we re-encode the location in latin1.\r\n            if is_py3:\r\n                location = location.encode('latin1')\r\n            return to_native_string(location, 'utf8')\r\n        return None\r\n```\r\nLooks like I can fix it by changing it to \r\n``` python\r\n    def get_redirect_target(self, resp):\r\n        if resp.is_redirect:\r\n            location = resp.headers['location']\r\n            if is_py3:\r\n                location = location.encode('latin1')\r\n                return to_native_string(location, 'latin1')\r\n            return to_native_string(location, 'utf8')\r\n        return None\r\n```\r\nAnd yes, the previous error is gone, but I will get `requests.exceptions.TooManyRedirects: Exceeded 30 redirects`, since it misses the step 3 of the firefox smartly send the latin1 encoded url to get the 200. It might be solved if I can somehow passed the encoded location instead of passing the native string, but turns out that the rest of the function (`resolve_redirects`) depends on the fact that the url is native string.\r\n\r\n## Conclusion\r\nI don't know whether the problem is with the behavior of the website (not complying to RFC, but firefox nevertheless works on it). My speculation is that probably firefox will just reattempt with different encoding (first will try utf8, then try with latin1). And thus probably this website is one of the \"rarely\" website that use latin1 instead of utf-8.\r\n``` python\r\n            # Currently the underlying http module on py3 decode headers\r\n            # in latin1, but empirical evidence suggests that latin1 is very\r\n            # rarely used with non-ASCII characters in HTTP headers.\r\n            # It is more likely to get UTF8 header rather than latin1.\r\n            # This causes incorrect handling of UTF8 encoded location headers.\r\n            # To solve this, we re-encode the location in latin1.\r\n            if is_py3:\r\n                location = location.encode('latin1')\r\n```\r\n\r\nLet me know for any thoughts or suggestion for solution, I will be more than happy to try working on it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/552816674/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kwinata",
                        "id": 32704121,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009526559733785689,
                        "severe_toxicity": 0.00010614882921800017,
                        "obscene": 0.00020112803031224757,
                        "threat": 0.00011126970639452338,
                        "insult": 0.0001780801685526967,
                        "identity_attack": 0.00013894872972741723
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/669892384",
                    "id": 669892384,
                    "created_at": "2020-08-06T12:18:08Z",
                    "updated_at": "2020-08-06T12:18:08Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This looks like a duplicate of #4372 and #4926 with an open (but old) PR #4933 ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/669892384/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ddormer",
                        "id": 839885,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008287414093501866,
                        "severe_toxicity": 0.00010514583846088499,
                        "obscene": 0.00017926044529303908,
                        "threat": 0.00011023989645764232,
                        "insult": 0.00018663033552002162,
                        "identity_attack": 0.0001325245830230415
                    }
                }
            ]
        },
        "163": {
            "html_url": "https://github.com/psf/requests/pull/5257",
            "id": 519861422,
            "number": 5257,
            "title": "Safely handle, when uri contains IPv6 link local with %zone index ",
            "created_at": "2019-11-08T07:40:46Z",
            "updated_at": "2022-01-03T15:27:48Z",
            "closed_at": null,
            "body": "## Issue:\r\nWhen URI contains IPv6 link local with zone index (Ex: fe80::726f:8a26:222a:2bf3%eth0), requote_uri encodes all % to %25. Because of it, requests.get was requesting different resource.\r\n\r\nScreenshot: \r\n![image](https://user-images.githubusercontent.com/1691611/68458332-8b76fd80-0228-11ea-9c6f-8e439f257180.png)\r\n\r\nI'm proposing to ignore domain part in utils.unquote_unreserved.\r\n\r\n## Actual Result\r\n<pre>\r\n>>> requests.utils.requote_uri('http://[fe80::726f:8a26:222a:2bf3%eth0]:8080/a%20b/index.html')\r\n'http://[fe80::726f:8a26:222a:2bf3%25eth0]:8080/a%2520b/index.html'\r\n</pre>\r\n\r\n## Expected Result\r\n<pre>\r\n>>> requests.utils.requote_uri('http://[fe80::726f:8a26:222a:2bf3%eth0]:8080/a%20b/index.html')\r\n'http://[fe80::726f:8a26:222a:2bf3%eth0]:8080/a%20b/index.html'\r\n</pre>\r\n\r\n## System Information\r\n<pre>\r\n# python3 -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.5.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.71-UNRELEASED-v4-00050-g76f27ecf9a52\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1000207f\",\r\n    \"version\": \"18.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n</pre>",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "jjlogu",
                "id": 1691611,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5257/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "164": {
            "html_url": "https://github.com/psf/requests/issues/5255",
            "id": 517568621,
            "number": 5255,
            "title": "Allow authentication methods to set client certficates",
            "created_at": "2019-11-05T06:16:50Z",
            "updated_at": "2019-11-05T06:16:50Z",
            "closed_at": null,
            "body": "Currently authentication methods can configure all the request options except for the `cert` option (the `verify` option also cannot be specified, but I don't a need for that). Would a PR to allow the setting of `cert` on the request object to be propagated up to send be acceptable?\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "aragilar",
                "id": 1281144,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5255/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "165": {
            "html_url": "https://github.com/psf/requests/issues/5245",
            "id": 511283605,
            "number": 5245,
            "title": "Incorrect json() docstring",
            "created_at": "2019-10-23T12:16:53Z",
            "updated_at": "2024-10-31T11:31:39Z",
            "closed_at": null,
            "body": "What `json()` actually does - it deserializes JSON into a Python object.\r\n\r\nSo the docstring below must be wrong:\r\nhttps://github.com/psf/requests/blob/fab1fd10d0b115e635b9ef1364f8444089725000/requests/models.py#L894-L918",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "alekna",
                "id": 10272121,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5245/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/548451888",
                    "id": 548451888,
                    "created_at": "2019-10-31T16:13:28Z",
                    "updated_at": "2019-10-31T16:13:28Z",
                    "author_association": "NONE",
                    "body": "Do you mind if I take this task as an intro issue to the project? I'm looking to be a new contributor",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/548451888/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 1
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "albendz",
                        "id": 12453997,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008618584834039211,
                        "severe_toxicity": 0.00010829164966708049,
                        "obscene": 0.0001718749408610165,
                        "threat": 0.0001332486281171441,
                        "insult": 0.00017782938084565103,
                        "identity_attack": 0.0001416571030858904
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/847941129",
                    "id": 847941129,
                    "created_at": "2021-05-25T14:57:18Z",
                    "updated_at": "2021-05-25T14:57:18Z",
                    "author_association": "NONE",
                    "body": "This has tripped me up as well. I'm new to Python. I expected response.json() to return JSON, but it doesn't. I don't know if I'm expected to do something further to turn it into actual JSON (and if so, what), or if this is an oversight in the requests code.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/847941129/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lousyd",
                        "id": 10715714,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006219844799488783,
                        "severe_toxicity": 0.00012220488861203194,
                        "obscene": 0.0001881115895230323,
                        "threat": 0.00012402438733261079,
                        "insult": 0.00017673232650849968,
                        "identity_attack": 0.00013859568571206182
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/968819727",
                    "id": 968819727,
                    "created_at": "2021-11-15T11:33:19Z",
                    "updated_at": "2021-11-15T11:33:19Z",
                    "author_association": "NONE",
                    "body": "I also ran into issues with this - besides the fact that it indeed returns a decoded Python representation of the content, I'm confused by the \"if any\" clause - there is nothing that checks the existence of content, nor if the response actually has Content-Type application/json set, it simply dumps `self.text` into a json loader.\r\n\r\nSo a better way to phrase this might be along the lines of:\r\n\"Tries to return a decoded representation of the response's content as if it were JSON\"",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/968819727/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "toothstone",
                        "id": 4670824,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006346605950966477,
                        "severe_toxicity": 0.00011993000225629658,
                        "obscene": 0.000185396071174182,
                        "threat": 0.00012062479072483256,
                        "insult": 0.0001742955355439335,
                        "identity_attack": 0.00013718918489757925
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2449634116",
                    "id": 2449634116,
                    "created_at": "2024-10-31T11:31:38Z",
                    "updated_at": "2024-10-31T11:31:38Z",
                    "author_association": "NONE",
                    "body": "Plus one.\r\nWhy not fix it after passed so many years?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2449634116/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kougazhang",
                        "id": 53000287,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006830556667409837,
                        "severe_toxicity": 0.00011559096310520545,
                        "obscene": 0.00017903785919770598,
                        "threat": 0.00011029562301700935,
                        "insult": 0.00018166650261264294,
                        "identity_attack": 0.00013945830869488418
                    }
                }
            ]
        },
        "166": {
            "html_url": "https://github.com/psf/requests/pull/5232",
            "id": 508622251,
            "number": 5232,
            "title": "Add timeout as a default attribute for Session objects",
            "created_at": "2019-10-17T17:37:10Z",
            "updated_at": "2022-01-03T15:28:12Z",
            "closed_at": null,
            "body": "We encountered a bug today wherein we mistakenly assumed it was already supported as an attribute like all the other kwargs, https://github.com/DataDog/integrations-core/pull/4811",
            "author_association": "CONTRIBUTOR",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "ofek",
                "id": 9677399,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5232/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/543305321",
                    "id": 543305321,
                    "created_at": "2019-10-17T18:33:02Z",
                    "updated_at": "2019-10-17T18:33:02Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@Lukasa @kennethreitz @nateprewitt Hello there! After opening this I came across https://github.com/psf/requests/issues/3341\r\n\r\nDoes that decision (from way back then) still remain true today? As it is, the behavior is not very user-friendly and is entirely unexpected, hence the reason so many people keep opening the same PR \ud83d\ude04 ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/543305321/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ofek",
                        "id": 9677399,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007251594215631485,
                        "severe_toxicity": 0.0001117322244681418,
                        "obscene": 0.00017599492275621742,
                        "threat": 0.00011502656707307324,
                        "insult": 0.00017291119729634374,
                        "identity_attack": 0.00013530025898944587
                    }
                }
            ]
        },
        "167": {
            "html_url": "https://github.com/psf/requests/issues/5224",
            "id": 504608266,
            "number": 5224,
            "title": "utf-8 chars in name of file in post requests",
            "created_at": "2019-10-09T12:07:41Z",
            "updated_at": "2019-10-09T12:08:22Z",
            "closed_at": null,
            "body": "I have some code like this:\r\n``` python\r\nfiles = {\"file\": (\"some utf-8 chars like '\u2116'\", open(\"file.jpg\", \"rb\"), \"image/jpeg\")}\r\nr = requests.post(\"localhost\", files=files)\r\n```\r\n\r\nand I receive broken jpg file (actually, 2x size of original)\r\n\r\n\r\n## Expected Result\r\n\r\nI expect to receive file.jpg\r\n\r\n## Actual Result\r\n\r\nBut requests send to me broken file.\r\n\r\n## System Information\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010103f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000211f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.2\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "FrostNecro",
                "id": 15328872,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5224/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "168": {
            "html_url": "https://github.com/psf/requests/pull/5221",
            "id": 501663168,
            "number": 5221,
            "title": "Change raise_for_status message to hide password in URL",
            "created_at": "2019-10-02T18:49:19Z",
            "updated_at": "2022-09-28T16:03:27Z",
            "closed_at": null,
            "body": "This PR fixes #5021 by replacing a password in the URL with asterisks.\r\n\r\nExample:\r\n\r\n```python\r\nimport requests\r\n\r\nr = requests.get(\"http://foo:secret@httpbin.org/status/401\")\r\nr.raise_for_status()\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"5021.py\", line 4, in <module>\r\n    r.raise_for_status()\r\n  File \"***/python-requests/requests/requests/models.py\", line 968, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 401 Client Error: UNAUTHORIZED for url: http://foo:***@httpbin.org/status/401\r\n```",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "Overv",
                "id": 285063,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5221/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/545161612",
                    "id": 545161612,
                    "created_at": "2019-10-22T21:22:54Z",
                    "updated_at": "2019-10-22T21:22:54Z",
                    "author_association": "NONE",
                    "body": "@jackyzha0 @barroca I'll have time to get back to this next weekend.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/545161612/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Overv",
                        "id": 285063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0026401381473988295,
                        "severe_toxicity": 9.284938278142363e-05,
                        "obscene": 0.0002451274776831269,
                        "threat": 0.00011151561193400994,
                        "insult": 0.00022716030071023852,
                        "identity_attack": 0.00017567453323863447
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/545530962",
                    "id": 545530962,
                    "created_at": "2019-10-23T16:37:57Z",
                    "updated_at": "2019-10-23T16:37:57Z",
                    "author_association": "NONE",
                    "body": "@Overv I opened a similar PR for this that might help you to write a test #5244 let me know if you need help.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/545530962/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "barroca",
                        "id": 355251,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000570345320738852,
                        "severe_toxicity": 0.00012748378503601998,
                        "obscene": 0.0001785783824743703,
                        "threat": 0.0001357445289613679,
                        "insult": 0.0001759897277224809,
                        "identity_attack": 0.00014130864292383194
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/547138871",
                    "id": 547138871,
                    "created_at": "2019-10-28T20:47:23Z",
                    "updated_at": "2019-10-28T20:47:23Z",
                    "author_association": "NONE",
                    "body": "I've added a unit test.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/547138871/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Overv",
                        "id": 285063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005964564043097198,
                        "severe_toxicity": 0.00012372848868835717,
                        "obscene": 0.0001869191910373047,
                        "threat": 0.00011515562800923362,
                        "insult": 0.00018129947420675308,
                        "identity_attack": 0.0001393774728057906
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1261113001",
                    "id": 1261113001,
                    "created_at": "2022-09-28T15:51:38Z",
                    "updated_at": "2022-09-28T15:51:38Z",
                    "author_association": "NONE",
                    "body": "Running into this same issue for requests with `client_id` and `client_secret` parameters in the url.   Those values would get exposed despite the proposed fix here.  Seems like a more general solution is needed.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1261113001/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mpolena",
                        "id": 3845622,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005985989118926227,
                        "severe_toxicity": 0.0001241068384842947,
                        "obscene": 0.00018881456344388425,
                        "threat": 0.00012427974434103817,
                        "insult": 0.00017462806135881692,
                        "identity_attack": 0.00014067582378629595
                    }
                }
            ]
        },
        "169": {
            "html_url": "https://github.com/psf/requests/pull/5220",
            "id": 501644975,
            "number": 5220,
            "title": "Fix connection pool managers not taking varying TLS parameters into account",
            "created_at": "2019-10-02T18:12:03Z",
            "updated_at": "2022-01-03T15:28:37Z",
            "closed_at": null,
            "body": "This PR fixes #5140 and #4325 by returning different connection and proxy pools based on the connection parameters for the current request.\r\n\r\nI tested it with the following code:\r\n\r\n```python\r\nimport requests\r\n\r\nsession = requests.Session()\r\n\r\nprint(session.get('https://client.badssl.com/'))\r\nprint(session.get('https://client.badssl.com/', cert=('client.crt', 'client.key')))\r\nprint(session.get('https://client.badssl.com/', cert=('client.crt', 'client.key')))\r\nprint(session.get('https://client.badssl.com/'))\r\nprint(session.get('https://client.badssl.com/'))\r\n```\r\n\r\nWhich correctly outputs:\r\n\r\n```\r\n<Response [400]>\r\n<Response [200]>\r\n<Response [200]>\r\n<Response [400]>\r\n<Response [400]>\r\n```\r\n\r\nInstead of the previous output:\r\n\r\n```\r\n<Response [400]>\r\n<Response [400]>\r\n<Response [400]>\r\n<Response [400]>\r\n<Response [400]>\r\n```",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Overv",
                "id": 285063,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5220/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "170": {
            "html_url": "https://github.com/psf/requests/issues/5217",
            "id": 501092513,
            "number": 5217,
            "title": "Requests does not preserve supplied CookiePolicy or CookieJar",
            "created_at": "2019-10-01T19:14:46Z",
            "updated_at": "2019-10-01T19:14:46Z",
            "closed_at": null,
            "body": "Recently, I have run into some niche issues with cookies where servers are sending cookies that they themselves do not accept. An example is in https://github.com/psf/requests/issues/4592 or where a `'Set-Cookie'` header has a value that contains ASCII control codes -- `r'[\\x01-\\x1F\\x7F]'`. I fully accept that it is not within the scope of `requests` to validate cookies (nor should it be), which is why I have come to a solution of creating a new `CookiePolicy` which will refuse to set cookies that are similar to the previous `'Set-Cookie'` example.\r\n\r\nUnfortunately, in using the new policy with the default `Session` class it appears that the policy is not preserved while making requests. In investigating further, it looks like `requests` just overrides whatever `CookieJar` or `CookiePolicy` is set by the user to be `RequestsCookieJar` instead of preserving the supplied `CookieJar`.\r\n\r\nSince this is heavily reliant on what the server sends, I tried to supply as complete and self-contained of an example as possible below (which requires a quickly spun-up server), but let me know if the issue needs further explanation.\r\n\r\nAdditionally, I would be more than happy to submit a PR that supplies a fix and adequate tests if needed (though after validation that this is not intended behavior, of course).\r\n\r\n## Expected Result\r\n\r\nI expect for the cookie policy to be preserved while making requests within a session or requests at all. That is, there should be no `AssertionError`s or printed statements in the below example.\r\n\r\n## Actual Result\r\n\r\n```\r\nFailed to preserve cookie policy with set_policy\r\nFailed to preserve cookie policy with RequestsCookieJar\r\nFailed to preserve cookie policy with NewCookieJar\r\n```\r\n\r\n## Reproduction Steps\r\n\r\nSpin up a local server that sends a weird cookie\r\n```python\r\n\r\nfrom flask import Flask, redirect, make_response, request, url_for\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/plain_req')\r\ndef plain_req():\r\n    resp = make_response('Single response')\r\n    resp.headers['Set-Cookie'] = \"bad_cookie=\\x01; path=/; HttpOnly\"\r\n    return resp\r\n\r\n@app.route('/redirect_1')\r\ndef redirect_1():\r\n    return redirect(url_for('redirect_2'), code=302)\r\n\r\n@app.route('/redirect_2')\r\ndef redirect_2():\r\n    resp = make_response(redirect(url_for('redirect_3'), code=302))\r\n    resp.headers['Set-Cookie'] = \"bad_cookie=\\x01; path=/; HttpOnly\"\r\n    return resp\r\n\r\n@app.route('/redirect_3')\r\ndef redirect_3():\r\n    if '\\x01' in request.cookies.get('bad_cookie'):\r\n        resp = make_response('Client Error: Bad cookies recieved', 401)\r\n    else:\r\n        resp = make_response('It all worked, yay!', 200)\r\n    return resp\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(host='0.0.0.0', port=8000)\r\n```\r\n\r\nTest for the cookie (will raise AssertionError in either the context manager or\r\n```python\r\nimport requests\r\nfrom requests.cookies import RequestsCookieJar\r\nfrom http.cookiejar import DefaultCookiePolicy, CookieJar\r\n\r\nclass NewCookiePolicy(DefaultCookiePolicy):\r\n\r\n    def set_ok(self, cookie, request):\r\n        valid = super(NewCookiePolicy, self).set_ok(cookie, request)\r\n        if '\\x01' in cookie.value:\r\n            return False\r\n        return valid\r\n\r\ndef test_session(session):\r\n    # A plain request does not work\r\n    req = session.get('http://127.0.0.1:8000/plain_req')\r\n    assert '\\x01' not in req.cookies.items()[0][1]  # cookie still around\r\n    assert isinstance(req.cookies._policy, NewCookiePolicy)  # Policy not preserved\r\n\r\n    # Requests with multiple redirects do not\r\n    req = session.get('http://127.0.0.1:8000/redirect_1')\r\n    assert '\\x01' not in req.history[1].cookies.items()[0][1]  # cookie still around\r\n    assert isinstance(req.history[1].cookies._policy, NewCookiePolicy)  # Policy not preserved\r\n\r\n    # Comment out the above assertion to try the context manager\r\n    with requests.Session() as s:\r\n        s.cookies.set_policy(NewCookiePolicy())\r\n        context_req = s.get('http://127.0.0.1:8000/redirect_1')\r\n        assert '\\x01' not in req.history[1].cookies.items()[0][1]  # cookie still around\r\n        assert isinstance(context_req.history[0].cookies._policy, NewCookiePolicy)  # Policy not preserved\r\n\r\npolicy_session = requests.Session()\r\npolicy_session.cookies.set_policy(NewCookiePolicy())\r\ntry:\r\n    test_session(policy_session)\r\nexcept AssertionError:\r\n    print(\"Failed to preserve cookie policy with set_policy\")\r\n\r\nreq_jar_session = requests.Session()\r\nreq_jar_session.cookies = RequestsCookieJar(policy=NewCookiePolicy())\r\ntry:\r\n    test_session(req_jar_session)\r\nexcept AssertionError:\r\n    print(\"Failed to preserve cookie policy with RequestsCookieJar\")\r\n\r\nNewCookieJar = CookieJar(policy=NewCookiePolicy())\r\n\r\nnew_jar_session = requests.Session()\r\nnew_jar_session.cookies = NewCookieJar\r\ntry:\r\n    test_session(new_jar_session)\r\nexcept AssertionError:\r\n    print(\"Failed to preserve cookie policy with NewCookieJar\")\r\n```\r\n\r\n## System Information\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000213f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.4\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "jandersen-plaid",
                "id": 52045989,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5217/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "171": {
            "html_url": "https://github.com/psf/requests/issues/5202",
            "id": 495858434,
            "number": 5202,
            "title": "Multipart post of image does not get the same result in requests as in Insomnia/Postman",
            "created_at": "2019-09-19T15:02:49Z",
            "updated_at": "2020-04-07T23:23:16Z",
            "closed_at": null,
            "body": "I am trying to upload a .jpg file to a server using HTTP POST with the requests library in Python 3.7.\r\n\r\nTarget URL has some PHP code that handles the upload, taking 'fileToUpload' as the multipart variable.\r\n\r\nI tried putting the request into a **with-statemen**t for opening the file, changing the **data=files to files=files** (as recommended by some example code), or setting the **headers** to multipart/form-data specifically. \r\n\r\n```python\r\nimport requests\r\n\r\nurl = 'http://someurl.com/upload/dir/post.php'\r\nfiles = {'fileToUpload' : open('image.jpg', 'rb')}\r\nr = requests.post(url, data=files)\r\n```\r\nIf I run the script I raise every single error message in the post.php file, while if I take the thing to Insomnia or Postman the upload works just fine, so the server-side seems to be working.\r\n\r\nAfter all it seems that the problem is with opening the file, but I tried to stick to the [documentation ](https://2.python-requests.org/en/master/user/quickstart/#post-a-multipart-encoded-file)and still can't figure out what is wrong here. \r\n",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "ClerkCunt",
                "id": 28776681,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5202/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/534553647",
                    "id": 534553647,
                    "created_at": "2019-09-24T13:17:38Z",
                    "updated_at": "2019-09-24T13:17:38Z",
                    "author_association": "NONE",
                    "body": "Just a thought on how to debug the issue: create a preparedRequest() and then .send() that. If the same behavior arises, then just investigate what's in the prepared request and see if the binary data matches what you wish to send, etc.\r\nThis way you might be able to find a cut off point for where the code is either breaking or behaving in a manner you find unexpected.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/534553647/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "AndTheDaysGoBy",
                        "id": 11529426,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006189154228195548,
                        "severe_toxicity": 0.0001223086437676102,
                        "obscene": 0.00018368208839092404,
                        "threat": 0.00012287301069591194,
                        "insult": 0.00018007743346970528,
                        "identity_attack": 0.0001430707925464958
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/610627283",
                    "id": 610627283,
                    "created_at": "2020-04-07T21:22:14Z",
                    "updated_at": "2020-04-07T21:22:14Z",
                    "author_association": "NONE",
                    "body": "Use `files`, not `data`:\r\n\r\n```\r\nr = requests.post(url, data=files)\r\n```\r\n\r\nvs\r\n\r\n```\r\nr = requests.post(url, files=files)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/610627283/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "samrussell",
                        "id": 1481279,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009271450689993799,
                        "severe_toxicity": 0.00010750404180726036,
                        "obscene": 0.0002000283420784399,
                        "threat": 0.00011366277612978593,
                        "insult": 0.0001793705450836569,
                        "identity_attack": 0.0001326761848758906
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/610667794",
                    "id": 610667794,
                    "created_at": "2020-04-07T23:23:15Z",
                    "updated_at": "2020-04-07T23:23:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@samrussell is correct",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/610667794/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000737912894692272,
                        "severe_toxicity": 0.00010980848310282454,
                        "obscene": 0.0001714176614768803,
                        "threat": 0.00011071035987697542,
                        "insult": 0.00017912170733325183,
                        "identity_attack": 0.00013862489140592515
                    }
                }
            ]
        },
        "172": {
            "html_url": "https://github.com/psf/requests/issues/5196",
            "id": 494624604,
            "number": 5196,
            "title": "Host header is propagated on allow_redirects",
            "created_at": "2019-09-17T13:28:37Z",
            "updated_at": "2019-10-01T19:37:13Z",
            "closed_at": null,
            "body": "## Summary: \r\n\r\nWe use a combination of explicit IP addresses and Host header to contact a website explicitly via IPv4 and IPv6. The Host header is propagated in every redirect, which causes problems, as the Host header and the address will not match the visited address anymore. This might cause an infinite redirect loop if a server tries to correct the host with a redirect.\r\n\r\n## Example:\r\n```python\r\nrequests.get('http://40.101.81.152:80', allow_redirects=True, headers={'Host': 'autodiscover.drimmelen.nl', 'random_header': \"test\"})\r\n```\r\nIf you debug this request, you'll see that both the random_header and Host are sent with every request. See code below...\r\n\r\n## Expected Result\r\nFrom the support request i've seen that requests does not explicitly allows navigation between IPv6 or IPv4. This is too bad, but that is not the problem here.\r\n\r\nIn this case the problem is that the Host header is not overwritten after a redirect. We'd expect the IP(v4 or v6) address be used in the redirect, with the Host url received. If that's not possible, we'd expect the Host be overwritten with the location we're at now, completely ignoring the concept of IPv4 or IPv6 (and just going the default route of underlying network settings).\r\n\r\n## Actual Result\r\nAfter 30 redirect, the Host was still set to the value specified. This creates a mismatch between the requested address (translated from the url) and the actual url.\r\n\r\nThe following headers where observed:\r\n...ccept: */*\\r\\nConnection: keep-alive\\r\\nHost: autodiscover.drimmelen.nl\\r\\nrandom_header: test\\r\\nCookie: ClientId=3127...\r\n\r\nWhich means the random_header was progragated correctly... and also the Host header. Propagating the Host header after a redirect is obviously wrong and can cause all kinds of misunderstanding.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nrequests.get('http://40.101.81.152:80', allow_redirects=True, headers={'Host': 'autodiscover.drimmelen.nl', 'random_header': \"test\"})\r\n```\r\n\r\nThe code responsible seems to be here:\r\nhttps://github.com/psf/requests/blob/3e7d0a873f838e0001f7ac69b1987147128a7b5f/requests/sessions.py#L149\r\n\r\nThis code blindly copies all kwargs, except a few chosen ones such as content-length (of course). We think Host should be one of the things changed as well to prevent the address and url mismatch on redirects.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.6.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010102f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020ff\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "stitch",
                "id": 333846,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5196/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/537195083",
                    "id": 537195083,
                    "created_at": "2019-10-01T19:37:13Z",
                    "updated_at": "2019-10-01T19:37:13Z",
                    "author_association": "NONE",
                    "body": "There has been some discussion about this before in #4002.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/537195083/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Overv",
                        "id": 285063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005810487200506032,
                        "severe_toxicity": 0.00013193210179451853,
                        "obscene": 0.00020015884365420789,
                        "threat": 0.0001283216552110389,
                        "insult": 0.0001788667286746204,
                        "identity_attack": 0.00014389868010766804
                    }
                }
            ]
        },
        "173": {
            "html_url": "https://github.com/psf/requests/issues/5194",
            "id": 493850293,
            "number": 5194,
            "title": "json.dumps() fails for CookieJar deserialization after serialization",
            "created_at": "2019-09-16T05:14:12Z",
            "updated_at": "2019-10-03T12:59:17Z",
            "closed_at": null,
            "body": "Summary.\r\n\r\n## Expected Result\r\n\r\nSeamless serialization/deserialization to and from dictionary consisting of name:value pairs.\r\n\r\n## Actual Result\r\n\r\nSerialization succeeds but the object it returns is not a serialized dictionary. If one then tries to deserialize this resulting object using `json.loads(serialized_obj)` it would return an exception.\r\nSince, deserialization requires a proper serialized dictionary, it fails there and then.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport json\r\n\r\nserialized_cookie_dict = \"\"\r\nresponse = requests.get('example') \r\nserialized_cookie_dict = json.dumps(response.cookies)\r\nprint(serialized_cookie_dict)     #--- Notice the resulting object is nothing like a dictionary\r\ndeserialized_cookie_dict = requests.cookies.cookiejar_from_dict(json.loads(serialized_cookie_dict))     #--- Error!\r\n\r\n```\r\n\r\n## System Information\r\nThis is irrelevant for the concerned bug.\r\nTested on Python version 3.6\r\n\r\n## Possible Solution/Workaround\r\n\r\n```python\r\nimport requests\r\nimport json\r\n\r\nserialized_cookie_dict = \"\"\r\nresponse = requests.get('example') \r\nserialized_cookie_dict = json.dumps(dict(response.cookies))\r\nprint(serialized_cookie_dict)     #--- Correctly serialized CookieJar\r\ndeserialized_cookie_dict = requests.cookies.cookiejar_from_dict(json.loads(serialized_cookie_dict))     #--- Successful!\r\n\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "ghost",
                "id": 10137,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5194/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/537197804",
                    "id": 537197804,
                    "created_at": "2019-10-01T19:44:41Z",
                    "updated_at": "2019-10-01T19:44:41Z",
                    "author_association": "NONE",
                    "body": "I cannot reproduce this. In your first example I get an error during serialization (`Object of type RequestsCookieJar is not JSON serializable`).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/537197804/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Overv",
                        "id": 285063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006897577550262213,
                        "severe_toxicity": 0.0001144639536505565,
                        "obscene": 0.0001804516214178875,
                        "threat": 0.00011986253230134025,
                        "insult": 0.0001787383371265605,
                        "identity_attack": 0.00013599690282717347
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/537934272",
                    "id": 537934272,
                    "created_at": "2019-10-03T12:59:16Z",
                    "updated_at": "2019-10-03T12:59:16Z",
                    "author_association": "NONE",
                    "body": "@Overv Forgive me for the late reply. Since I've moved on to other projects, I don't have time to look into this again.\r\n\r\nIf you do not see this being a problem then I welcome you to close this bug. In future projects if I face something like this again, I'll surely raise the issue in more detail and will try my best to follow up!\r\n\r\nThank you.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/537934272/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ghost",
                        "id": 10137,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006498065777122974,
                        "severe_toxicity": 0.0001215837401105091,
                        "obscene": 0.00017886332352645695,
                        "threat": 0.00014065502909943461,
                        "insult": 0.00017406218103133142,
                        "identity_attack": 0.00014038290828466415
                    }
                }
            ]
        },
        "174": {
            "html_url": "https://github.com/psf/requests/issues/5185",
            "id": 488930661,
            "number": 5185,
            "title": "confusing error for bad timeout value",
            "created_at": "2019-09-04T04:16:48Z",
            "updated_at": "2019-09-04T04:16:48Z",
            "closed_at": null,
            "body": "Calling `requests.get(...., timeout=X)` with a bad value for `X` causes `urllib3` to throw an exception.\r\n\r\nIf `X` is a tuple, then `requests` raises its own exception too (good!).\r\n\r\nIf not, then `requests` doesn't say that it got a bad timeout value.\r\n\r\n#5017 suggested a fix, but was closed \r\n\r\n## Expected Result\r\n\r\nThese two lines should both raise an exception in `requests`:\r\n```\r\nget(\"https://random.org\", timeout=(True, True))\r\nget(\"https://random.org\", timeout=True) \r\n```\r\n\r\n## Actual Result\r\n\r\nThe first line outputs:\r\n```\r\nTraceback (most recent call last):\r\n  File \"..../requests/adapters.py\", line 425, in send\r\n    timeout = TimeoutSauce(connect=connect, read=read)\r\n  File \"..../urllib3/util/timeout.py\", line 94, in __init__\r\n    self._connect = self._validate_timeout(connect, 'connect')\r\n  File \"..../urllib3/util/timeout.py\", line 121, in _validate_timeout\r\n    raise ValueError(\"Timeout cannot be a boolean value. It must \"\r\nValueError: Timeout cannot be a boolean value. It must be an int, float or None.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 3, in <module>\r\n    get(\"https://random.org\", timeout=(True, True))\r\n  File \"..../requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"..../requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"..../requests/sessions.py\", line 537, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"..../requests/sessions.py\", line 650, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"..../requests/adapters.py\", line 431, in send\r\n    raise ValueError(err)\r\nValueError: Invalid timeout (True, True). Pass a (connect, read) timeout tuple, or a single float to set both timeouts to the same value\r\n```\r\n\r\nThe second outputs:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 3, in <module>\r\n    get(\"https://random.org\", timeout=True)\r\n  File \"..../requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"..../requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"..../requests/sessions.py\", line 537, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"..../requests/sessions.py\", line 650, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"..../requests/adapters.py\", line 435, in send\r\n    timeout = TimeoutSauce(connect=timeout, read=timeout)\r\n  File \"..../urllib3/util/timeout.py\", line 94, in __init__\r\n    self._connect = self._validate_timeout(connect, 'connect')\r\n  File \"..../urllib3/util/timeout.py\", line 121, in _validate_timeout\r\n    raise ValueError(\"Timeout cannot be a boolean value. It must \"\r\nValueError: Timeout cannot be a boolean value. It must be an int, float or None.\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nget(\"https://random.org\", timeout=True) \r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"1.3.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.5.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"15.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1000208f\",\r\n    \"version\": \"16.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "bennn",
                "id": 1731829,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5185/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "175": {
            "html_url": "https://github.com/psf/requests/issues/5184",
            "id": 488819667,
            "number": 5184,
            "title": "different header handling",
            "created_at": "2019-09-03T20:57:53Z",
            "updated_at": "2019-09-03T21:02:24Z",
            "closed_at": null,
            "body": "There is a difference between the `requests.Request.prepare()` call and the `requests.Session().send()` call. I would like to explain a little:\r\nWhen a `requests.Session()` is initialized, different `default_headers` are set ('Accept-Encoding', 'Accept' and 'Connection'). Such a session is also initialized by `requests.get()`. Then the `custom_headers` are merged with the `default_headers`. For the query of my URL it is important that 'Accept' and 'Connection' are set. However, calling `Request.prepare()` does not set these `default_headers` and calling `requests.Session().send()` overwrites any values already set (including the `default_headers`).\r\n\r\n## Expected Result\r\n\r\n`requests.Session()` and `requests.get()` have the same headers\r\n\r\n## Actual Result\r\n\r\nThe default_headers are overwritten by `requests.Session().send()`\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nresource = 'https://www.accuweather.com/en/de/hamburg/20095/biking-weather/178556'\r\nmethod = 'GET'\r\nheaders = {\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\r\n    }\r\nverify_ssl = True\r\ntimeout = 10\r\n\r\n# this works fine\r\nresponse = requests.get(resource, headers=headers, timeout=timeout)\r\n\r\n# that causes an requests.exceptions.ReadTimeout\r\nrequest = requests.Request(method, resource, headers=headers, auth=None, data=None).prepare()\r\nwith requests.Session() as sess:\r\n    response = sess.send(request, timeout=timeout, verify=verify_ssl)\r\n\r\n# now this works fine again\r\nheaders = {\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\r\n    'Accept': '*/*',\r\n    'Connection': 'keep-alive',\r\n    }\r\n\r\nrequest = requests.Request(method, resource, headers=headers, auth=None, data=None).prepare()\r\nwith requests.Session() as sess:\r\n    response = sess.send(request, timeout=timeout, verify=verify_ssl)\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.0.0-27-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010102f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "obelix05",
                "id": 14077066,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5184/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "176": {
            "html_url": "https://github.com/psf/requests/issues/5180",
            "id": 487366546,
            "number": 5180,
            "title": "Warning if run single test case using setup.py test",
            "created_at": "2019-08-30T08:50:48Z",
            "updated_at": "2019-08-30T09:46:10Z",
            "closed_at": null,
            "body": "I want to run single test case by running \r\n`pipenv run python setup.py test -a tests/test_requests.py::TestRequests::test_invalid_url` \r\n\r\n\r\n## Expected Result\r\n\r\nCan see result of single test case  \r\n\r\n## Actual Result\r\nif pytest=5.1:\r\n```\r\nrunning test\r\nrunning egg_info\r\nwriting requests.egg-info/PKG-INFO\r\nwriting dependency_links to requests.egg-info/dependency_links.txt\r\nwriting requirements to requests.egg-info/requires.txt\r\nwriting top-level names to requests.egg-info/top_level.txt\r\nreading manifest file 'requests.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwarning: no files found matching 'NOTICE'\r\nwarning: no files found matching 'requirements.txt'\r\nwriting manifest file 'requests.egg-info/SOURCES.txt'\r\nrunning build_ext\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 111, in <module>\r\n    'Source': 'https://github.com/kennethreitz/requests',\r\n  File \"/Users/magus0219/Documents/PycharmProjects/requests/venv/lib/python3.7/site-packages/setuptools-40.8.0-py3.7.egg/setuptools/__init__.py\", line 145, in setup\r\n  File \"/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/core.py\", line 148, in setup\r\n    dist.run_commands()\r\n  File \"/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/dist.py\", line 966, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/dist.py\", line 985, in run_command\r\n    cmd_obj.run()\r\n  File \"/Users/magus0219/Documents/PycharmProjects/requests/venv/lib/python3.7/site-packages/setuptools-40.8.0-py3.7.egg/setuptools/command/test.py\", line 228, in run\r\n  File \"setup.py\", line 33, in run_tests\r\n    errno = pytest.main(self.pytest_args)\r\n  File \"/Users/magus0219/Documents/PycharmProjects/requests/venv/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 58, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/Users/magus0219/Documents/PycharmProjects/requests/venv/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 192, in _prepareconfig\r\n    raise TypeError(msg.format(args, type(args)))\r\nTypeError: `args` parameter expected to be a list or tuple of strings, got: 'tests/test_requests.py::TestRequests::test_invalid_url' (type: <class 'str'>)\r\n```\r\n\r\nif pytest==3.10 in Pipfile.lock\r\n```\r\n====================================================================================================== warnings summary ======================================================================================================\r\n/Users/magus0219/.local/share/virtualenvs/requests-573Zkhn_/lib/python3.7/site-packages/_pytest/config/__init__.py:194\r\n  /Users/magus0219/.local/share/virtualenvs/requests-573Zkhn_/lib/python3.7/site-packages/_pytest/config/__init__.py:194: RemovedInPytest4Warning: passing a string to pytest.main() is deprecated, pass a list of arguments instead.\r\n    _issue_config_warning(warning, config=config)\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```sh\r\npipenv run python setup.py test -a tests/test_requests.py::TestRequests::test_invalid_url\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000213f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.2\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "magus0219",
                "id": 5009485,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5180/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "177": {
            "html_url": "https://github.com/psf/requests/pull/5179",
            "id": 486283008,
            "number": 5179,
            "title": "HTTPDigestAuth thread fix",
            "created_at": "2019-08-28T10:08:56Z",
            "updated_at": "2022-01-03T15:29:11Z",
            "closed_at": null,
            "body": "Ensure thread-state is initialised on handle_401\r\nRefs #5178",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "epenet",
                "id": 6771947,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5179/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "178": {
            "html_url": "https://github.com/psf/requests/issues/5178",
            "id": 485992682,
            "number": 5178,
            "title": "HTTPDigestAuth fails from secondary thread",
            "created_at": "2019-08-27T19:30:30Z",
            "updated_at": "2019-08-27T19:30:30Z",
            "closed_at": null,
            "body": "Hi,\r\n\r\nI am looking into this [Home Assistant issue 13524](https://github.com/home-assistant/home-assistant/issues/13524) where a request is prepared once at startup (on an initialisation thread), and then updated at regular interval from a thread pool. This is working fine with HTTPBasicAuth, but failing with HTTPDigestAuth.\r\n\r\nIs this a bug? or is this by design? If it is by design, can you help me find a workaround for Home Assistant?\r\n\r\n## Expected Result\r\n```\r\n{\r\n  \"authenticated\": true,\r\n  \"user\": \"user\"\r\n}\r\n```\r\n\r\n## Actual Result\r\n```\r\nTraceback (most recent call last):\r\n  File \".../python3.7/threading.py\", line 926, in _bootstrap_inner\r\n    self.run()\r\n  File \".../python3.7/threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"test.py\", line 8, in do_update\r\n    request\r\n  File \".../python3.7/site-packages/requests/sessions.py\", line 653, in send\r\n    r = dispatch_hook('response', hooks, r, **kwargs)\r\n  File \".../python3.7/site-packages/requests/hooks.py\", line 31, in dispatch_hook\r\n    _hook_data = hook(hook_data, **kwargs)\r\n  File \".../python3.7/site-packages/requests/auth.py\", line 247, in handle_401\r\n    if self._thread_local.pos is not None:\r\nAttributeError: '_thread._local' object has no attribute 'pos'\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport threading\r\n\r\ndef do_update(name, request):\r\n    print(\"do_update %s: starting\", name)\r\n    with requests.Session() as sess:\r\n        response = sess.send(\r\n            request\r\n        )\r\n    print(response.text)\r\n    print(\"do_update %s: finishing\", name)\r\n    \r\nmethod = 'GET'\r\nresource = 'http://httpbin.org/digest-auth/auth/user/passwd'\r\nauth = requests.auth.HTTPDigestAuth('user', 'passwd')\r\nrequest = requests.Request(\r\n    method, resource, auth=auth\r\n).prepare()\r\n\r\n#Works on main thread\r\ndo_update(\"main thread\", request)\r\n\r\n#Doesn't work on secondary thread\r\nx = threading.Thread(target=do_update, args=(\"other thread\",request,))\r\nx.start()\r\nx.join()\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.57+\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101000bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "epenet",
                "id": 6771947,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5178/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "179": {
            "html_url": "https://github.com/psf/requests/issues/5177",
            "id": 485962234,
            "number": 5177,
            "title": "Set \"Content-Disposition\" header in `file` multipart failed",
            "created_at": "2019-08-27T18:23:09Z",
            "updated_at": "2022-12-05T14:42:52Z",
            "closed_at": null,
            "body": "Summary.\r\n\r\n- Source: [requests/models.py](https://github.com/psf/requests/blob/428f7a275914f60a8f1e76a7d69516d617433d30/requests/models.py)\r\n\r\n```\r\n    class RequestEncodingMixin(object):\r\n        ...\r\n        def _encode_files(files, data):\r\n            ...\r\n            rf = RequestField(name=k, data=fdata, filename=fn, headers=fh)\r\n            rf.make_multipart(content_type=ft)\r\n\r\n```\r\nVariable `fh` holdes the 4th tuple item passed from\r\n\r\n```\r\n    files = {'settings': (filename, io.BytesIO(b'some,data,to,send\\nanother,row,to,send\\n'),\r\n             'app/xml', {'Content-Disposition':'attachment'} )}\r\n\r\n```\r\nThe `rf.header dict` get set passing `headers=fh` with `'Content-Disposition':....`\r\nCalling `rf.make_multipart(content_type=ft)`, at the next line, only passing the 3trd tuple item.\r\n\r\nThe method [`make_multipart` - urllib3/fields.py](https://github.com/urllib3/urllib3/blob/ae7f8bbb57e74ffdb327c5e510963a886fa4ed8b/src/urllib3/fields.py) is defined as\r\n\r\n```\r\n    def make_multipart(\r\n        self, content_disposition=None, content_type=None, content_location=None\r\n    ):\r\n        self.headers[\"Content-Disposition\"] = content_disposition or u\"form-data\"\r\n        ...\r\n\r\n```\r\nwhich replaces, as `content_disposition` is `None`, the allready set `self.headers[\"Content-Disposition\"]` with the default `u\"form-data\"`.\r\n\r\n## Expected Result\r\n```\r\n--e96a4935b8d5b2355f1da3070faa4b28\r\nContent-Disposition: attachment; name=\"settings\"; filename=\"settings.xml\"\r\nContent-Type: app/xml\r\n\r\nsome,data,to,send\r\nanother,row,to,send\r\n\r\n--e96a4935b8d5b2355f1da3070faa4b28--\r\n\r\n```\r\n\r\n## Actual Result\r\n```\r\n--e96a4935b8d5b2355f1da3070faa4b28\r\nContent-Disposition: form-data; name=\"settings\"; filename=\"settings.xml\"\r\nContent-Type: app/xml\r\n\r\nsome,data,to,send\r\nanother,row,to,send\r\n\r\n--e96a4935b8d5b2355f1da3070faa4b28--\r\n\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nurl = 'http://127.0.0.1:8080'\r\nfilename = \"settings.xml\"\r\n\r\nfiles = {'settings': (filename, io.BytesIO(b'some,data,to,send\\nanother,row,to,send\\n'),\r\n         'app/xml', {'Content-Disposition':'attachment'} )}\r\n\r\nr = requests.post(url, files=files)\r\n\r\n```\r\n\r\n## System Information\r\n\r\nTested with Python: 3.5 - urllib3: 1.23 - requests: 2.19.1\r\n\r\n## Possible Solution\r\n\r\nPass **all** three parameter explicit to `.make_multipart(...`, e.g.\r\n\r\n      rf.make_multipart(content_disposition=fh.get('Content-Disposition'), \r\n                        content_type=ft, \r\n                        content_location=fh.get('Content-Location')\r\n\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "WK-GiHu",
                "id": 22146250,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5177/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1337500828",
                    "id": 1337500828,
                    "created_at": "2022-12-05T14:42:51Z",
                    "updated_at": "2022-12-05T14:42:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This isn't documented as intended to work. This it's effectively a feature request and the project is under feature freeze ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1337500828/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000681248726323247,
                        "severe_toxicity": 0.00011548112524906173,
                        "obscene": 0.00017795355233829468,
                        "threat": 0.00012332023470662534,
                        "insult": 0.00017768904217518866,
                        "identity_attack": 0.0001388756063533947
                    }
                }
            ]
        },
        "180": {
            "html_url": "https://github.com/psf/requests/pull/5172",
            "id": 483683996,
            "number": 5172,
            "title": "Fix Issue of Ignoring Session-level Settings",
            "created_at": "2019-08-21T22:36:53Z",
            "updated_at": "2022-01-03T15:29:17Z",
            "closed_at": null,
            "body": "A re-write of https://github.com/psf/requests/pull/4935\r\nAddresses: https://github.com/psf/requests/issues/4938\r\nand perhaps others.\r\n\r\nIn short, there are three types of values: the instance values (e.g. those passed in via the `get(...)`, `request(...)`, etc.), the session values (e.g. those set for the session such as `s.verify = \"/some/cert\"`), and system or environment level values (e.g. the environment variable for the CA_BUNDLE that, at times, becomes the value for the verify flag).\r\n\r\nWorking with @sorech02, we determined that the best course of action was to just move the session level merging before the environment merging. I.e., the current flow is as follows: one of the simple request calls is made, e.g. `request`, `get`, `delete`, etc., then, the `merge_environment_settings` method is called wherein environment values are merged in (e.g. the CA_BUNDLE value) and then the session level settings are merged in via the `merge_settings` calls in `merge_environment_settings`.\r\n\r\nThis is too late because, by default, trust_env is set to True, which will result in the `verify` value passed into the session merging to not be none. One solution is to make sure you set trust_env to False before using the verify flag with a custom certificate, but we deemed this to only be a work around.\r\n\r\nThe true fix, as described above, is to ensure that the settings which are constructed give the proper precedence to the values given. I.e. passed > session > environment.\r\nWe were forced to leave the `setdefaults` (which effectively reapply the session values if there are no values set) in the `def send` alone because, at times, one might use `send` itself when constructing prepared requests (i.e. not via `request`, `get`, etc.). In which  case, the function must still ensure to use the session level settings.",
            "author_association": "NONE",
            "comments": 11,
            "state": "open",
            "user": {
                "login": "AndTheDaysGoBy",
                "id": 11529426,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5172/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/524473590",
                    "id": 524473590,
                    "created_at": "2019-08-23T21:51:10Z",
                    "updated_at": "2019-08-24T00:25:20Z",
                    "author_association": "NONE",
                    "body": "Sadly, running on my machine, the unit tests pass. I would hope someone else could attempt to run the tests of this branch and hopefully replicate the results Travis has.\r\n\r\nEdit: managed to recreate on a different machine. Although, oddly enough, that has 2 failing instead of one.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/524473590/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "AndTheDaysGoBy",
                        "id": 11529426,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006438454147428274,
                        "severe_toxicity": 0.00011916326911887154,
                        "obscene": 0.00017191543884109706,
                        "threat": 0.0001265651808353141,
                        "insult": 0.0001814170682337135,
                        "identity_attack": 0.0001402100606355816
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/524504070",
                    "id": 524504070,
                    "created_at": "2019-08-24T01:12:37Z",
                    "updated_at": "2019-08-24T01:12:37Z",
                    "author_association": "NONE",
                    "body": "The Travis CI passes for everything but Python 2.7 (due to Python 3.X exclusive super() shorthand). Consequently, coverage isn't started. However, all other builds pass.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/524504070/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "AndTheDaysGoBy",
                        "id": 11529426,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000662288919556886,
                        "severe_toxicity": 0.00011857465142384171,
                        "obscene": 0.0001865899539552629,
                        "threat": 0.00012147040251875296,
                        "insult": 0.00017557623505126685,
                        "identity_attack": 0.00013768022472504526
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/534756321",
                    "id": 534756321,
                    "created_at": "2019-09-24T21:28:58Z",
                    "updated_at": "2019-09-24T21:28:58Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt Pardon my asking, but when you get a chance, could you review this change? It impacts things like home-assistant, docker-py, etc. I would consider this fixing a regression considering it worked 7 years ago, before the existence of merge_environment_settings.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/534756321/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "AndTheDaysGoBy",
                        "id": 11529426,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006594996084459126,
                        "severe_toxicity": 0.0001154500714619644,
                        "obscene": 0.00018036511028185487,
                        "threat": 0.00011557971447473392,
                        "insult": 0.0001782692561391741,
                        "identity_attack": 0.00013604023843072355
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/552020342",
                    "id": 552020342,
                    "created_at": "2019-11-08T22:48:21Z",
                    "updated_at": "2019-11-08T22:48:21Z",
                    "author_association": "NONE",
                    "body": "Anyone willing to review? Considering the nature of the issue, I'd consider it something that affects anything with custom certificates.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/552020342/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "AndTheDaysGoBy",
                        "id": 11529426,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005194023833610117,
                        "severe_toxicity": 0.00013868650421500206,
                        "obscene": 0.00019303621957078576,
                        "threat": 0.0001382670016027987,
                        "insult": 0.00017996346286963671,
                        "identity_attack": 0.00014877377543598413
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/681155299",
                    "id": 681155299,
                    "created_at": "2020-08-26T22:25:37Z",
                    "updated_at": "2020-08-26T22:25:37Z",
                    "author_association": "NONE",
                    "body": "Is there anyone still tracking this issue ?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/681155299/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "s00500",
                        "id": 1556271,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007085141260176897,
                        "severe_toxicity": 0.0001134057529270649,
                        "obscene": 0.00018117330910172313,
                        "threat": 0.00011651677777990699,
                        "insult": 0.00017727966769598424,
                        "identity_attack": 0.00013644907448906451
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/681960150",
                    "id": 681960150,
                    "created_at": "2020-08-27T13:48:19Z",
                    "updated_at": "2020-08-27T13:48:19Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I believe this was explicitly scoped for the next major release and so no one is tracking this because that's not remotely on the horizon",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/681960150/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005994264502078295,
                        "severe_toxicity": 0.0001231932983500883,
                        "obscene": 0.00018661130161490291,
                        "threat": 0.0001315975096076727,
                        "insult": 0.00017237354768440127,
                        "identity_attack": 0.00013902652426622808
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/682155368",
                    "id": 682155368,
                    "created_at": "2020-08-27T19:47:31Z",
                    "updated_at": "2020-08-27T19:47:31Z",
                    "author_association": "NONE",
                    "body": "tl;dr it's never happening. Before my issue was made, there had been another issue for the same thing. I forget if there was a PR though. After my issue, a duplicate issue was made of this one. In short, this issue has been reported several times and never fixed since it's a \"major\" change. The \"major\" change would have to occur in the next major release, i.e. 3.0.0, which is not happening any time in the foreseeable future.\r\n\r\nYou'd have better luck seeing if httpx or some requests derivative would be willing to fix this, if they haven't already.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/682155368/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "AndTheDaysGoBy",
                        "id": 11529426,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005767233087681234,
                        "severe_toxicity": 0.00012853351654484868,
                        "obscene": 0.000198258479940705,
                        "threat": 0.00012574884749483317,
                        "insult": 0.00017561877029947937,
                        "identity_attack": 0.00014069057942833751
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/682160644",
                    "id": 682160644,
                    "created_at": "2020-08-27T19:58:56Z",
                    "updated_at": "2020-08-27T19:58:56Z",
                    "author_association": "MEMBER",
                    "body": "@AndTheDaysGoBy Yeah, this was already merged into the 3.0 proposal branch in #2839 in 2016. The project has diverged pretty significantly from that branch at this point, and we no longer have resources working to release a Requests 3.0.\r\n\r\nI think we're unfortunately at deadlock on getting a fix released. We can't merge #2839 into 2.x releases since it's breaking.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/682160644/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006657112389802933,
                        "severe_toxicity": 0.00011578798876143992,
                        "obscene": 0.00019155783229507506,
                        "threat": 0.0001192147537949495,
                        "insult": 0.0001717219565762207,
                        "identity_attack": 0.00013355838018469512
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/682160906",
                    "id": 682160906,
                    "created_at": "2020-08-27T19:59:34Z",
                    "updated_at": "2020-08-27T19:59:34Z",
                    "author_association": "MEMBER",
                    "body": "Didn't mean to resolve, but I don't know if this PR is actionable at this point.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/682160906/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00061561178881675,
                        "severe_toxicity": 0.0001257123949471861,
                        "obscene": 0.00020084095012862235,
                        "threat": 0.0001233224757015705,
                        "insult": 0.00017814504099078476,
                        "identity_attack": 0.00014028535224497318
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/682168619",
                    "id": 682168619,
                    "created_at": "2020-08-27T20:15:59Z",
                    "updated_at": "2020-08-27T20:15:59Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The sarcasm dripping from quoting the word \"major\" is ridiculously condescending. Is this a bug that's not fun and hits a fair number of people? Absolutely. Does that mean we should just break anyone unknowingly relying on that behaviour? No. Can I keep asking myself easy questions? Absolutely, but I'll stop.\r\n\r\nDrive-by fixes and complaints do nothing but detract time and energy from the already ridiculously small amount of time anyone has to work on this project.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/682168619/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.01814299076795578,
                        "severe_toxicity": 0.00015030661597847939,
                        "obscene": 0.0016365437768399715,
                        "threat": 0.00018825459119398147,
                        "insult": 0.000774396350607276,
                        "identity_attack": 0.0002546247560530901
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/682198722",
                    "id": 682198722,
                    "created_at": "2020-08-27T21:24:08Z",
                    "updated_at": "2020-08-27T21:24:08Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 that's mere projection. I meant major in quotes so as to distinguish from minor since \"minor\" changes could be merged into the existing requests due to backwards compatibility. My post was to state: the issue has persisted for a while (I believe 2014 to present), is a \"major\" change (not minor, thus it has to be in the 3.0.0 version), the 3.0.0 version seems to witness repeated delay in release, and recommending an example library, that is itself a derivative for requests, for getting a package with this fix out on PyPi.\r\n\r\nI would've used italics had I wished to use a condescending tone.\r\n\r\n@nateprewitt thank you for the clarification. Based off of your statements, you're agreeing with me. It would be nice to have somewhere though a reference to a library that does have this fix (I gave httpx as an example of a requests derivative, not as one that has this fix).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/682198722/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "AndTheDaysGoBy",
                        "id": 11529426,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005896332440897822,
                        "severe_toxicity": 0.00012454572424758226,
                        "obscene": 0.0001855584268923849,
                        "threat": 0.0001258944976143539,
                        "insult": 0.00017520847904961556,
                        "identity_attack": 0.0001414839061908424
                    }
                }
            ]
        },
        "181": {
            "html_url": "https://github.com/psf/requests/issues/5162",
            "id": 480694119,
            "number": 5162,
            "title": "requests.ConnectionError inherits only from OSError",
            "created_at": "2019-08-14T13:56:16Z",
            "updated_at": "2019-08-14T13:56:16Z",
            "closed_at": null,
            "body": "`requests.ConnectionError` doesn't inherit from ConnectionError from std, which is confusing.\r\n\r\n## Expected Result\r\n\r\n```\r\n(Pdb++) inspect.getmro(ConnectionError)\r\n(<class 'requests.exceptions.ConnectionError'>, <class 'requests.exceptions.RequestException'>, <class 'ConnectionError'>, <class 'OSError'>, <class 'Exception'>, <class 'BaseException'>, <class 'object'>)\r\n```\r\n\r\n## Actual Result\r\n\r\n```\r\n(Pdb++) inspect.getmro(ConnectionError)\r\n(<class 'requests.exceptions.ConnectionError'>, <class 'requests.exceptions.RequestException'>, <class 'OSError'>, <class 'Exception'>, <class 'BaseException'>, <class 'object'>)\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\ninspect.getmro(requests.ConnectionError)\r\nissubclass(requests.ConnectionError, ConnectionError)\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.2.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Q-back",
                "id": 25378062,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5162/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "182": {
            "html_url": "https://github.com/psf/requests/issues/5153",
            "id": 476422332,
            "number": 5153,
            "title": "Add headers to connect when using proxies?",
            "created_at": "2019-08-03T06:40:09Z",
            "updated_at": "2019-08-22T14:06:21Z",
            "closed_at": null,
            "body": "Its possible with requests to add headers to connect? I need to add 2 headers\r\nHost and proxy connection. But default connection when using proxy is witouth 2 those so i need to know if its in some way possible to add them. \r\n\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "qwerty32123",
                "id": 45830421,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5153/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/523915633",
                    "id": 523915633,
                    "created_at": "2019-08-22T13:51:37Z",
                    "updated_at": "2019-08-22T13:51:37Z",
                    "author_association": "NONE",
                    "body": "This is causing us some heartburn, too.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/523915633/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jpriebe",
                        "id": 2745032,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.02739671617746353,
                        "severe_toxicity": 0.00014499090320896357,
                        "obscene": 0.0007063174271024764,
                        "threat": 0.00022703796275891364,
                        "insult": 0.0008288117242045701,
                        "identity_attack": 0.00040433232788927853
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/523921630",
                    "id": 523921630,
                    "created_at": "2019-08-22T14:06:20Z",
                    "updated_at": "2019-08-22T14:06:20Z",
                    "author_association": "NONE",
                    "body": "This isn't a great solution, but it could be helpful for diagnostics:\r\n\r\nhttps://github.com/psf/requests/issues/2708\r\n\r\nBeing relatively new to python, this critical library seems very inconsistent.  Requests work one way if you call them directly, another way if you call them via sessions, another way if they're made via a PoolManager, and another way if using a ProxyManager.  I don't know how I would take the technique in 2708 and turn it into an easily repeatable solution.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/523921630/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jpriebe",
                        "id": 2745032,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006099379970692098,
                        "severe_toxicity": 0.00012253942259121686,
                        "obscene": 0.00018191002891398966,
                        "threat": 0.00012598384637385607,
                        "insult": 0.000176963847479783,
                        "identity_attack": 0.0001404227950843051
                    }
                }
            ]
        },
        "183": {
            "html_url": "https://github.com/psf/requests/issues/5140",
            "id": 469878823,
            "number": 5140,
            "title": "Client Side Certs with session",
            "created_at": "2019-07-18T16:51:09Z",
            "updated_at": "2019-10-01T20:23:47Z",
            "closed_at": null,
            "body": "Summary.\r\n\r\nTrying to get client side certificates to work with session but I'm seeing a difference between the results when making the call with a session and the helper get method.\r\n\r\n## Expected Result\r\nCalling get with a Session returns the same result as calling `requests.get`.\r\n\r\n## Actual Result\r\nRequest fails as if the certificate was not passed.\r\n\r\n## Reproduction Steps\r\n\r\n![Screen Shot 2019-07-18 at 11 42 00 AM](https://user-images.githubusercontent.com/3720126/61476222-271af000-a952-11e9-9cd6-aaad69a45b94.png)\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n(panopta_env) \u279c  ~ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"2.7.16\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.6.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "CMLL",
                "id": 3720126,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5140/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/537213433",
                    "id": 537213433,
                    "created_at": "2019-10-01T20:23:47Z",
                    "updated_at": "2019-10-01T20:23:47Z",
                    "author_association": "NONE",
                    "body": "Looks like this is related to #4325.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/537213433/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Overv",
                        "id": 285063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006198123446665704,
                        "severe_toxicity": 0.0001206751840072684,
                        "obscene": 0.00018712195742409676,
                        "threat": 0.00011449779412942007,
                        "insult": 0.00017553572251927108,
                        "identity_attack": 0.00013698854309041053
                    }
                }
            ]
        },
        "184": {
            "html_url": "https://github.com/psf/requests/issues/5136",
            "id": 466210052,
            "number": 5136,
            "title": "Blocking POST request during nested exceptions raising",
            "created_at": "2019-07-10T09:45:30Z",
            "updated_at": "2019-07-23T12:59:41Z",
            "closed_at": null,
            "body": "My script seems (infinitely, more than 12 hours) blocked in a POST request. When I kill it, I get all the nested exceptions below and my feeling it that there is something wrong inside Python requests, do you confirm the problem?\r\nNote that I think I can use GET instead POST but I don't know if it will block too (I'm not sure if POST or GET is more logical for my case).\r\n\r\nThanks in advance!\r\n\r\n## Expected Result\r\n\r\nRequests should raise an exception instead of infinitely block.\r\n\r\n## Actual Result\r\nThe POST infinitely block and I get these exceptions after killing the script:\r\n```\r\n2019-07-09 19:05:03,546 [ERROR] Unexpected error when searching new products\r\n\r\nTraceback (most recent call last):\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connection.py\", line 159, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/util/connection.py\", line 80, in create_connection\r\n    raise err\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/util/connection.py\", line 70, in create_connection\r\n    sock.connect(sa)\r\nOSError: [Errno 101] Network is unreachable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 600, in urlopen\r\n    chunked=chunked)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 343, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 839, in _validate_conn\r\n    conn.connect()\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connection.py\", line 301, in connect\r\n    conn = self._new_conn()\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connection.py\", line 168, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e)\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f34e5df2cc0>: Failed to establish a new connection: [Errno 101] Network is unreachable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/adapters.py\", line 449, in send\r\n    timeout=timeout\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 638, in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/util/retry.py\", line 398, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='oceandata.sci.gsfc.nasa.gov', port=443): Max retries exceeded with url: /api/file_search (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f34e5df2cc0>: Failed to establish a new connection: [Errno 101] Network is unreachable'))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_download.py\", line 38, in download_products\r\n    checksums_file)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_download.py\", line 104, in search_new_products\r\n    cur_df = nasa_oc_file_search.search(post_data, split_by_month=True)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_file_search.py\", line 28, in search\r\n    return split_search(post_data)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_file_search.py\", line 77, in split_search\r\n    cur_df = simple_search(post_data)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_file_search.py\", line 35, in simple_search\r\n    data=post_data)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/throttle.py\", line 26, in wrapper\r\n    return fn(*args, **kwargs)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_file_search.py\", line 49, in nasa_oc_url_request\r\n    response = requests.request(method, url, data=data)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/api.py\", line 60, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/adapters.py\", line 516, in send\r\n    raise ConnectionError(e, request=request)\r\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='oceandata.sci.gsfc.nasa.gov', port=443): Max retries exceeded with url: /api/file_search (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f34e5df2cc0>: Failed to establish a new connection: [Errno 101] Network is unreachable'))\r\n```\r\n\r\n## Reproduction Steps\r\nNot easily reproducible because this happens when the target URL does not respond, but the code is like that (I can give an exemple of <post_data> if needed):\r\n```python\r\nimport requests\r\n\r\ntry:\r\n    response = requests.request('POST', 'https://oceandata.sci.gsfc.nasa.gov/api/file_search', data=<post_data>)\r\n    response.raise_for_status()\r\nexcept:\r\n    logging.exception('Unexpected error when searching new products')\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.6.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"3.16.0-30-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010102f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010102f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "jdemaria",
                "id": 10978115,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5136/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/510627971",
                    "id": 510627971,
                    "created_at": "2019-07-11T19:47:07Z",
                    "updated_at": "2019-07-11T19:47:07Z",
                    "author_association": "NONE",
                    "body": "I don't think this problem is with requests, but a problem with the endpoint. I've tried to make GET and POST requests, neither succeeds. Looking through Google searches, there was a forum post about whether or not it still exists. It might be worth to send an email to NASA to find out if that endpoint still exists.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/510627971/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "HJones82493",
                        "id": 31266487,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005930145271122456,
                        "severe_toxicity": 0.0001264381717192009,
                        "obscene": 0.00018399041437078267,
                        "threat": 0.0001284745812881738,
                        "insult": 0.00017538733663968742,
                        "identity_attack": 0.0001432609569747001
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/510803183",
                    "id": 510803183,
                    "created_at": "2019-07-12T08:38:56Z",
                    "updated_at": "2019-07-12T08:38:56Z",
                    "author_association": "NONE",
                    "body": "Thanks for the answer.\r\nOn my side the code below works, please can you try too?\r\nBut sometimes it infinitely blocks as described in the issue. Do you see something suspect in the nested exceptions listed in the issue?\r\n\r\n```python\r\nimport requests                                                                                                                                                                                             \r\nr = requests.request('POST', 'https://oceandata.sci.gsfc.nasa.gov/api/file_search', data={'sensor': 'aqua', 'sdate': '2019-03-14', 'psdate': '2019-03-14', 'dtype': 'L2', 'search': 'A*.L2_LAC_OC.nc', 'std_only': 1, 'cksum': 1, 'results_as_file': '1', 'format': 'txt', 'edate': '2019-03-31'})\r\nr.text.split()[:10]                                                                                                                                                                                         \r\n==> \r\n['477930ff6d542be0c43b305dc8465638eb896f0b',\r\n 'A2019073000000.L2_LAC_OC.nc',\r\n '75335f52be250047d74d705d1e414f554be08154',\r\n 'A2019073000500.L2_LAC_OC.nc',\r\n '1f101a3908579d6671686f4fd92b765868020991',\r\n 'A2019073001000.L2_LAC_OC.nc',\r\n '9ae74c38cadb9d0bb35655a1397290f88aeaf500',\r\n 'A2019073001500.L2_LAC_OC.nc',\r\n '2721797fa1d23c2c8ba10d3e7461a4e0a6a69d3b',\r\n 'A2019073002000.L2_LAC_OC.nc']\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/510803183/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jdemaria",
                        "id": 10978115,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0032218564301729202,
                        "severe_toxicity": 0.00011357761832186952,
                        "obscene": 0.0004152838955633342,
                        "threat": 0.00013929868873674423,
                        "insult": 0.0002520328853279352,
                        "identity_attack": 0.00016523661906830966
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/513619667",
                    "id": 513619667,
                    "created_at": "2019-07-22T02:43:45Z",
                    "updated_at": "2019-07-22T02:43:45Z",
                    "author_association": "NONE",
                    "body": "Sorry for the late response. Sometimes it works fine for me, sometimes it fails. I think it still might be an endpoint problem, not a problem with requests.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/513619667/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "HJones82493",
                        "id": 31266487,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006174139562062919,
                        "severe_toxicity": 0.00012151187547715381,
                        "obscene": 0.00018058967543765903,
                        "threat": 0.0001225101004820317,
                        "insult": 0.00017666190979070961,
                        "identity_attack": 0.00013852420670446008
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/513679168",
                    "id": 513679168,
                    "created_at": "2019-07-22T07:44:10Z",
                    "updated_at": "2019-07-22T07:44:10Z",
                    "author_association": "NONE",
                    "body": "Hi, I don't know if I was clear enough: the problem is not that sometimes the endpoint fail, in this case I should get an exception from requests and it's handled in my code, but sometimes requests seems infinitely blocked on these nested exceptions and I don't get any exception. At this point the only solution I see is implement a timeout around the requests call to kill the call if blocked... I hoped that you could found something suspect in the nested exceptions chain but it seems not the case? Thanks",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/513679168/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jdemaria",
                        "id": 10978115,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006317755323834717,
                        "severe_toxicity": 0.00011678718874463812,
                        "obscene": 0.00018039348651655018,
                        "threat": 0.00012080275337211788,
                        "insult": 0.00017020883387885988,
                        "identity_attack": 0.00013504104572348297
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/514198977",
                    "id": 514198977,
                    "created_at": "2019-07-23T12:59:41Z",
                    "updated_at": "2019-07-23T12:59:41Z",
                    "author_association": "NONE",
                    "body": "Hi, I just read in the requests documentation the section about timeouts:\r\n`You can tell Requests to stop waiting for a response after a given number of seconds with the timeout parameter. Nearly all production code should use this parameter in nearly all requests. Failure to do so can cause your program to hang indefinitely.`\r\nSo maybe my case is not a bug, sorry but I thought it was not possible that requests wait for answer indefinitely.\r\nI think the timeout arg will solve my problem!\r\nThanks",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/514198977/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jdemaria",
                        "id": 10978115,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006429645582102239,
                        "severe_toxicity": 0.00011645890481304377,
                        "obscene": 0.00017536057566758245,
                        "threat": 0.0001242252328665927,
                        "insult": 0.00017385170212946832,
                        "identity_attack": 0.0001362751063425094
                    }
                }
            ]
        },
        "185": {
            "html_url": "https://github.com/psf/requests/issues/5131",
            "id": 463974765,
            "number": 5131,
            "title": "requests.utils function accepts invalid ip/cidr input",
            "created_at": "2019-07-03T22:11:14Z",
            "updated_at": "2024-03-28T01:43:03Z",
            "closed_at": null,
            "body": "TLDR: On some libc implementations (e.g. glibc) the `socket.inet_aton` function parses IP strings trailed with whitespace and garbage, and this function is used by requests utility functions which if used externally, may cause bugs or/and security vulnerabilities.\r\n\r\nAn example of the issue can be seen below:\r\n![image](https://user-images.githubusercontent.com/10009354/60627678-1f563a00-9def-11e9-88d3-3d37397164e5.png)\r\n\r\nI have written a more detailed description of the `socket.inet_aton`'s underlying problem on [Python's bugtracker issue 37495](https://bugs.python.org/issue37495). It is yet to be decided if this is going to be fixed in Python.\r\n\r\n## Expected Result\r\n\r\nThe `requests.utils` functions `address_in_network`, `is_ipv4_address` and `is_valid_cidr` should fail with invalid input.\r\n\r\n## Actual Result\r\n\r\nIncorrect IP strings do not return an error and instead return as if the trailing garbage did not exist in the IP string.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nprint(requests.utils.address_in_network('1.1.1.1 wtf', '1.1.1.1/24'))\r\nprint(requests.utils.is_ipv4_address('1.1.1.1 disconnect3d was here...'))\r\nprint(requests.utils.is_valid_cidr('1.1.1.1 obviously not but yes/24'))\r\n```\r\n\r\n## System Information\r\n\r\nThe issue is related to libc implementation and has been tested on glibc 2.27 and 2.29.\r\n\r\nIt also occurs on MacOS which I am not sure if it is based on glibc.",
            "author_association": "NONE",
            "comments": 9,
            "state": "open",
            "user": {
                "login": "disconnect3d",
                "id": 10009354,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5131/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/509896791",
                    "id": 509896791,
                    "created_at": "2019-07-10T03:52:49Z",
                    "updated_at": "2019-07-10T03:52:49Z",
                    "author_association": "NONE",
                    "body": "PR #5135 \r\nI feel as though the call to the socket library is actually unnecessary here.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/509896791/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "HJones82493",
                        "id": 31266487,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007065257523208857,
                        "severe_toxicity": 0.0001124200425692834,
                        "obscene": 0.0001714444806566462,
                        "threat": 0.0001176839869003743,
                        "insult": 0.0001769427617546171,
                        "identity_attack": 0.00013889759429730475
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1831984446",
                    "id": 1831984446,
                    "created_at": "2023-11-29T14:19:04Z",
                    "updated_at": "2023-11-29T14:19:04Z",
                    "author_association": "NONE",
                    "body": "Ping @kennethreitz @Lukasa @sigmavirus24 @nateprewitt @slingamn can we finally get some love here and get this fixed?\r\n\r\nThis could probably also be marked as a security issue since if someone uses this in a security relevant context, they can get in trouble. (Although I doubt and hope that nobody does use those functions in such a way).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1831984446/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "disconnect3d",
                        "id": 10009354,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010326156625524163,
                        "severe_toxicity": 0.00010201452823821455,
                        "obscene": 0.00017188723722938448,
                        "threat": 0.0001140023086918518,
                        "insult": 0.00017946977459359914,
                        "identity_attack": 0.00014725278015248477
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1832042764",
                    "id": 1832042764,
                    "created_at": "2023-11-29T14:50:28Z",
                    "updated_at": "2023-11-29T14:50:28Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "These are not intended for use by others. The fact the language has no way of making things as private or internal means that we can't stop people from giving a function not intended for public use garbage or getting garbage out",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1832042764/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0983055830001831,
                        "severe_toxicity": 0.00016345940821338445,
                        "obscene": 0.0018954499391838908,
                        "threat": 0.00035654479870572686,
                        "insult": 0.002416308270767331,
                        "identity_attack": 0.0005470682517625391
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1832043722",
                    "id": 1832043722,
                    "created_at": "2023-11-29T14:50:59Z",
                    "updated_at": "2023-11-29T14:50:59Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Also, @disconnect3d rather than demand free labor of others, you're welcome to submit a fix for this",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1832043722/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006433200906030834,
                        "severe_toxicity": 0.00011691566760418937,
                        "obscene": 0.00017639159341342747,
                        "threat": 0.00012961625179741532,
                        "insult": 0.0001780986785888672,
                        "identity_attack": 0.00013637116353493184
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1832362371",
                    "id": 1832362371,
                    "created_at": "2023-11-29T17:13:47Z",
                    "updated_at": "2023-11-29T17:13:47Z",
                    "author_association": "NONE",
                    "body": "> These are not intended for use by others. The fact the language has no way of making things as private or internal means that we can't stop people from giving a function not intended for public use garbage or getting garbage out\r\n\r\nThe typical way to mark this is to prefix the name with underscore or two ;).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1832362371/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "disconnect3d",
                        "id": 10009354,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.016218895092606544,
                        "severe_toxicity": 0.00010301671863999218,
                        "obscene": 0.000850499200168997,
                        "threat": 0.0001623540447326377,
                        "insult": 0.000718132418114692,
                        "identity_attack": 0.0002122723963111639
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1833028184",
                    "id": 1833028184,
                    "created_at": "2023-11-30T02:56:16Z",
                    "updated_at": "2023-11-30T02:56:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Yeah and people still use it from this library so we stopped bothering. I've been maintaining this library for almost a decade now. Writing python for longer. I know what the convention is and I know people don't care",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1833028184/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001925117801874876,
                        "severe_toxicity": 9.29640227695927e-05,
                        "obscene": 0.00022266672749537975,
                        "threat": 0.00010265359742334113,
                        "insult": 0.0002048755850410089,
                        "identity_attack": 0.0001549244625493884
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1833123896",
                    "id": 1833123896,
                    "created_at": "2023-11-30T05:18:09Z",
                    "updated_at": "2023-11-30T05:18:09Z",
                    "author_association": "NONE",
                    "body": "Is there an argument against using `socket.inet_pton` instead of `socket.inet_aton`? It seems like `socket.inet_pton` has had its implementation fixed to not accept the extra strings and could solve this whole problem? If there's historical reason to not use it in these contexts, that's fine, but it seems like a simple fix (I'd be more than willing to submit something for review for it) if not.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1833123896/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "HJones82493",
                        "id": 31266487,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007386892684735358,
                        "severe_toxicity": 0.0001111256133299321,
                        "obscene": 0.00018486140470486134,
                        "threat": 0.0001150917451013811,
                        "insult": 0.00017501896945759654,
                        "identity_attack": 0.00013587920693680644
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2024242564",
                    "id": 2024242564,
                    "created_at": "2024-03-28T01:33:22Z",
                    "updated_at": "2024-03-28T01:33:22Z",
                    "author_association": "NONE",
                    "body": "PR #6675 \r\n@disconnect3d , the `socket` implementation was replaced by `ipaddress`, fixing the bugs",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2024242564/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vcapparelli",
                        "id": 125774763,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007210331386886537,
                        "severe_toxicity": 0.00011260780593147501,
                        "obscene": 0.0001803105988074094,
                        "threat": 0.00011521944543346763,
                        "insult": 0.00018144751084037125,
                        "identity_attack": 0.0001374447747366503
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2024249176",
                    "id": 2024249176,
                    "created_at": "2024-03-28T01:43:02Z",
                    "updated_at": "2024-03-28T01:43:02Z",
                    "author_association": "NONE",
                    "body": "Thanks! :)\r\n\r\nOn Thu, 28 Mar 2024 at 02:33, V\u00edtor Capparelli ***@***.***>\r\nwrote:\r\n\r\n> PR #6675 <https://github.com/psf/requests/pull/6675>\r\n> @disconnect3d <https://github.com/disconnect3d> , the socket\r\n> implementation was replaced by ipaddress, fixing the bugs\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/psf/requests/issues/5131#issuecomment-2024242564>, or\r\n> unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/ACMLWCTYXD6D26KQNEHTDGDY2NXPTAVCNFSM4H5MK2VKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TEMBSGQZDIMRVGY2A>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2024249176/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "disconnect3d",
                        "id": 10009354,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0024402623530477285,
                        "severe_toxicity": 0.00010359556472394615,
                        "obscene": 0.00033912231447175145,
                        "threat": 0.00013278782716952264,
                        "insult": 0.00023542475537396967,
                        "identity_attack": 0.0001499816426075995
                    }
                }
            ]
        },
        "186": {
            "html_url": "https://github.com/psf/requests/issues/5130",
            "id": 463771555,
            "number": 5130,
            "title": "proxies argument option: handles bytes literals in dict differently from other argument options",
            "created_at": "2019-07-03T14:02:34Z",
            "updated_at": "2020-06-29T15:46:27Z",
            "closed_at": null,
            "body": "```python\r\nhttps_proxy = b'http://localhost:8080'\r\nhttp_proxy = b'http://localhost:8080'\r\nproxy_dict = {b'https' : https_proxy, b'http' : http_proxy}\r\n\r\nr = requests.request(url, proxies=proxy_dict, verify=False)\r\n```\r\n## Expected Result\r\n\r\nThe *proxies argument option* accepts bytes literals as arguments, and proxies are being used.\r\n\r\n## Actual Result\r\n\r\nThe *proxies argument option* accepts bytes literals as arguments, but seems to disregard them internally: Proxies have no effect. However, no exception is raised either.\r\n\r\n## Problem\r\n\r\nThe *proxies argument option* handles bytes literals differently compared to the other argument options, e.g.. *parameters* or *data*. The *proxies argument option* only works with ```str```:\r\n```python\r\nhttps_proxy = 'http://localhost:8080'\r\nhttp_proxy = 'http://localhost:8080'\r\nproxy_dict = {'https' : https_proxy, 'http' : http_proxy}\r\n```\r\nExceptions are ignored. Using bytes literals does not raise an exception.\r\n\r\n\r\n",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "Sekin",
                "id": 8715697,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5130/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/651176628",
                    "id": 651176628,
                    "created_at": "2020-06-29T14:58:45Z",
                    "updated_at": "2020-06-29T14:58:45Z",
                    "author_association": "NONE",
                    "body": "Going to check this out",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/651176628/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "DougCal",
                        "id": 19600731,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000704810197930783,
                        "severe_toxicity": 0.00011688021913869306,
                        "obscene": 0.00018537946743890643,
                        "threat": 0.00011869784066220745,
                        "insult": 0.00017276057042181492,
                        "identity_attack": 0.00013773787941318005
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/651204219",
                    "id": 651204219,
                    "created_at": "2020-06-29T15:46:27Z",
                    "updated_at": "2020-06-29T15:46:27Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I think we need to establish why byte literals should be accepted. I don't believe you can pass a bytes literal as a URL to requests.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/651204219/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007284435559995472,
                        "severe_toxicity": 0.00010966470290441066,
                        "obscene": 0.000169702572748065,
                        "threat": 0.00011567399633349851,
                        "insult": 0.00017283768102061003,
                        "identity_attack": 0.00013942440273240209
                    }
                }
            ]
        },
        "187": {
            "html_url": "https://github.com/psf/requests/issues/5116",
            "id": 453975653,
            "number": 5116,
            "title": "cookies.get behavior",
            "created_at": "2019-06-10T02:45:09Z",
            "updated_at": "2022-10-11T17:05:37Z",
            "closed_at": null,
            "body": "Pardon me... I'm not proficient in python...  This library appears to be the de-facto reference for http clients in other programming languages as well..  \r\nit seems like many http get clients return raw cookie values. and require raw cookie names... because...   that's what this library does\r\n\r\nThe subtitle for this project is \"http for humans\"....   \r\nThis human isn't interested in the transport-layer encoding..  I want the human value\r\n\r\nWith all that said...  why :\r\n\r\n----\r\n\r\n## Expected Result\r\nI would expect `response.cookies.get()` to \r\na) expect a decoded name as a parameter and \r\nb) return a decoded (human) value\r\n\r\n## Actual Result\r\nEncoded value returned\r\nif name was encoded for http transport...   I must pass encoded name to get value\r\n\r\nresponse headers:\r\n```\r\nSet-Cookie: dingus=foo%3Bbar; path=/\r\nSet-Cookie: a%3Bb=foo%3Bbar; path=/\r\n```\r\n\r\n```python\r\n[nav] In [1]: import requests                                                                                                     \r\n\r\n[ins] In [2]: r = requests.get('http://localhost/cookietest')                                                                          \r\n\r\n[ins] In [3]: r.cookies.get('dingus')                                                                                             \r\nOut[3]: 'foo%3Bbar'\r\n\r\n[ins] In [4]: r.cookies.get('a;b')                                                                                                \r\n\r\n[ins] In [5]: r.cookies.get('a%3Bb')                                                                                              \r\nOut[5]: 'foo%3Bbar'\r\n```\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "bkdotcom",
                "id": 2137404,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5116/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "188": {
            "html_url": "https://github.com/psf/requests/issues/5103",
            "id": 449473763,
            "number": 5103,
            "title": "Client certificates AND self-signed",
            "created_at": "2019-05-28T20:56:51Z",
            "updated_at": "2019-05-28T20:56:51Z",
            "closed_at": null,
            "body": "I have read many posts about the issues separately, and the only ones that work are the ones setting the verification as \"False\".\r\n\r\nIs it possible to use both verify and cert?\r\n\r\nThis raises error\r\n\r\n    session.verify = 'server.pem'\r\n    session.cert = ('public.pem', 'private.pem')\r\nCaused by SSLError(SSLError(\"bad handshake: Error([('SSL routines', 'ssl3_read_bytes', 'sslv3 alert certificate unknown')])\")))\r\n\r\nWhereas this works:\r\n\r\n    session.verify = False\r\n    session.cert = ('public.pem', 'private.pem')\r\nAnd this works:\r\n\r\n    session.verify = 'server.pem'\r\n    #session.cert = ('public.pem', 'private.pem')\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Rourke101",
                "id": 20154036,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5103/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "189": {
            "html_url": "https://github.com/psf/requests/issues/5095",
            "id": 445060555,
            "number": 5095,
            "title": "windows proxy settings taken only partly",
            "created_at": "2019-05-16T16:52:46Z",
            "updated_at": "2019-05-16T16:52:46Z",
            "closed_at": null,
            "body": " do run python 2.7/3.7 on a windows 7 host.\r\nThis host is AD managed. As part of the group policy the internet settings are set to automatically proxy configuration with an wpad.dat file at the AD server.\r\nThe configuration works. cos IE and Chrome can reach external and internal hosts. Some of the internal are excluded from proxy via no proxy rules inside the dat file.\r\n\r\nBut on python with requests im not able to reach the internal addresses which are excluded via the proxy file rules. Python always tries to get the data from the proxy.\r\n\r\nThe only solution was an extra environmental variable NO_PROXY with the ips not to be reached via the proxy.\r\n\r\nThese excluded IPs are common IPs and not private ! (90.0.0.0/8) is part of the wpad.dat exclusion\r\n\r\n## Expected Result\r\neither no proxy or all proxy settings should taken into account.\r\n\r\n## Actual Result\r\nevery requests traffic is placed on the proxy\r\nurllib3 works as expected\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport urllib3\r\nhttp1 = urllib3.PoolManager()\r\nr1 = http.request('GET', 'http://90.0.11.253:43001/')\r\nr1.status \r\n\r\nr2 = requests.get('http://90.0.11.253:43001/')\r\nr2.status_code\r\n\r\nr1==r2 must be true but isnt\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\nC:\\Users\\iwetzel\\AppData\\Local\\Programs\\Python\\Python37-32>python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"7\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010009f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "elschman",
                "id": 32643724,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5095/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "190": {
            "html_url": "https://github.com/psf/requests/issues/5084",
            "id": 442846687,
            "number": 5084,
            "title": "replace `get_encoding_from_headers` default with `None`",
            "created_at": "2019-05-10T18:39:29Z",
            "updated_at": "2024-07-01T09:28:08Z",
            "closed_at": null,
            "body": "This issue a suggestion for handling partial elements of issues #1737 and #2086 (#1774 and others too).  I'm bringing this up in a separate ticket because it is a specific fix for multiple tickets and I am willing to write a PR for it in requests3 and requests2.  (i would have just gone and generated a PR, but I can't figure out what the actual master for requests3 actually is)\r\n\r\nmy proposal is to do the following (some of which have already been discussed as possibilities):\r\n\r\nalter `get_encoding_from_headers()`\r\n---\r\nreplace the default value of `get_encoding_from_headers` with `None` when \"text\" is in the content_type header.  currently this is \"ISO-8859-1\"\r\n\r\nhttps://github.com/kennethreitz/requests/blob/c501ec986daa4961cd9dee370b5d45ff2e524b37/requests/utils.py#L492-L493\r\n\r\nadd `Response.detected_encoding` attribute\r\n---\r\nextend `build_response` and `Response` to additionally stash the header decoding in `response.detected_encoding`.  this will allow the detected value to remain on the response object if `response.encoding` is changed by the consumer.\r\n\r\nadd `Response.text_encoding` property\r\n---\r\nadd a `text_encoding` property to `Response` , which offloads some of the logic now in `text`, and will return \"ISO-8859-1\" \r\n\r\nhttps://github.com/kennethreitz/requests/blob/c501ec986daa4961cd9dee370b5d45ff2e524b37/requests/models.py#L835-L858\r\n\r\n\r\nalter `Response.text` to use the new `.text_encoding` attribute\r\n---\r\nupdate the `text` property to use the new `.text_encoding` attribute. this just ties together all the above.\r\n\r\nGoals\r\n---\r\n\r\nThe goal of these changes is to positively identify situations where no response encoding was declared by the server.  The backwards incompatibility is that `None` will now be returned when inspecting `response.encoding` when there is no encoding for the response - however the effective encoding used to generate `.text` will be available in `response.text_encoding` .   \r\n\r\nThis still maintains compliance with RFC 2616, because `.text` will still interpret the lack of a declared encoding as having the required default charset of `ISO-8859-1`.  This simply allows developers to know when `ISO-8859-1` is being used in a default or explicit manner.\r\n\r\nThis approach doesn't address all aspects of those issues or close those tickets, but it offers a solution to many of the needs and concerns with some minor changes.",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "jvanasco",
                "id": 204779,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5084/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "191": {
            "html_url": "https://github.com/psf/requests/issues/5058",
            "id": 434029127,
            "number": 5058,
            "title": "Nested dict data get silently ignored in POST request",
            "created_at": "2019-04-16T23:35:42Z",
            "updated_at": "2020-12-26T19:21:04Z",
            "closed_at": null,
            "body": "I just spent the last several hours trying to figure out why I was able to successfully send an API POST request through `curl` but not through requests.\r\n\r\nAfter much searching on SO, I finally figured out the solution, but I'm still confused why this should be a problem at all. Furthermore, it's very strange that requests does such a good job of simplifying HTTP requests but then reveals intricacies that an end user likely won't know how to deal with.\r\n\r\nIt turns out that `requests.post()` already has a `json` argument which handles non-trivial data dictionaries, but I don't understand why a user should need to know when to use `json` instead of `data`. To a simple user like me (and others: #2885), `data` simply takes a dictionary and parses it into a request. Using `json` in some cases but not others adds confusion and is not obvious at all. I also don't understand why I wouldn't want to *always* use `json` instead of `data`.\r\n\r\nAt the very least, if there's a strong reason why it makes sense to have both `data` and `json` arguments, a warning should be raised in these cases telling the user that they might not be sending what they think they're sending.\r\n\r\n## Expected Result\r\n\r\nHere's an example request of what I was sending through `curl`:\r\n\r\n```bash\r\n$ curl -X POST 'https://httpbin.org/post' -H 'Content-Type: application/json' -d '{\"first\": [{\"second\": {\"third\": \"data\"}}]}'\r\n\r\n{\r\n  \"args\": {}, \r\n  \"data\": \"{\\\"first\\\": [{\\\"second\\\": {\\\"third\\\": \\\"data\\\"}}]}\", \r\n  \"files\": {}, \r\n  \"form\": {}, \r\n  \"headers\": {\r\n    \"Accept\": \"*/*\", \r\n    \"Content-Length\": \"42\", \r\n    \"Content-Type\": \"application/json\", \r\n    \"Host\": \"httpbin.org\", \r\n    \"User-Agent\": \"curl/7.54.0\"\r\n  }, \r\n  \"json\": {\r\n    \"first\": [\r\n      {\r\n        \"second\": {\r\n          \"third\": \"data\"\r\n        }\r\n      }\r\n    ]\r\n  }, \r\n  \"origin\": \"123.56.7.890, 123.56.7.890\", \r\n  \"url\": \"https://httpbin.org/post\"\r\n}\r\n```\r\n\r\nSending (what I thought was) an equivalent request through requests always returned an invalid json error:\r\n\r\n```python\r\nimport requests\r\n\r\nheaders = {\"Content-Type\": \"application/json\"}\r\n\r\ndata = {\r\n    \"first\": [\r\n        {\r\n            \"second\": {\r\n                \"third\": \"data\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nr = requests.post(\"https://httpbin.org/post\", headers=headers, data=data)\r\n\r\nprint(r.json())\r\n```\r\n\r\nI expected the entire `data` dictionary to be sent in the request. However, when looking at the response from httpbin, it becomes clear that all the data from the second level is missing.\r\n\r\n## Actual Result\r\n\r\nThis is the response from httpbin, with almost all of the sent data missing:\r\n\r\n```bash\r\n{'args': {},\r\n 'data': 'first=second',\r\n 'files': {},\r\n 'form': {},\r\n 'headers': {'Accept': '*/*',\r\n             'Accept-Encoding': 'gzip, deflate',\r\n             'Content-Length': '12',\r\n             'Content-Type': 'application/json',\r\n             'Host': 'httpbin.org',\r\n             'User-Agent': 'python-requests/2.19.1'},\r\n 'json': None,\r\n 'origin': '123.56.7.890, 123.56.7.890',\r\n 'url': 'https://httpbin.org/post'}\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nheaders = {\"Content-Type\": \"application/json\"}\r\n\r\ndata = {\r\n    \"first\": [\r\n        {\r\n            \"second\": {\r\n                \"third\": \"data\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nr = requests.post(\"https://httpbin.org/post\", headers=headers, data=data)\r\n\r\nprint(r.json())\r\n```\r\n\r\nChanging the request fixes the issue, but the solution is (to me) non-obvious:\r\n```python\r\nr = requests.post(\"https://httpbin.org/post\", headers=headers, json=data)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.5.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```",
            "author_association": "NONE",
            "comments": 11,
            "state": "open",
            "user": {
                "login": "martimlobao",
                "id": 6430786,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5058/reactions",
                "total_count": 3,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 3,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/570709522",
                    "id": 570709522,
                    "created_at": "2020-01-03T21:54:34Z",
                    "updated_at": "2020-01-03T21:54:42Z",
                    "author_association": "NONE",
                    "body": "Is there a recommendation for working around this?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/570709522/reactions",
                        "total_count": 3,
                        "+1": 3,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "arheinjohnson",
                        "id": 35582206,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00060527358436957,
                        "severe_toxicity": 0.00012213567970320582,
                        "obscene": 0.00017985745216719806,
                        "threat": 0.00012620074267033488,
                        "insult": 0.0001758168073138222,
                        "identity_attack": 0.00014079955872148275
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/607484600",
                    "id": 607484600,
                    "created_at": "2020-04-01T20:54:20Z",
                    "updated_at": "2020-04-01T20:56:46Z",
                    "author_association": "NONE",
                    "body": "I ran into the same (or closely related) problem today.  My nested json got turned into a list, using the keys as entries in the list and dropping the actual values.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/607484600/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "twigleg2",
                        "id": 35317008,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007098307250998914,
                        "severe_toxicity": 0.00011636543786153197,
                        "obscene": 0.0001878491893876344,
                        "threat": 0.00011042843107134104,
                        "insult": 0.00018354009080212563,
                        "identity_attack": 0.00013845103967469186
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/624491392",
                    "id": 624491392,
                    "created_at": "2020-05-06T07:38:23Z",
                    "updated_at": "2020-05-06T07:38:23Z",
                    "author_association": "NONE",
                    "body": "I had some issues doing it like this:\r\nr = requests.post(endpoint, data=params, headers=headers)\r\n\r\n@martimlobao  had the answer, just change data to json\r\nr = requests.post(endpoint, json=params, headers=headers)\r\n\r\nThanks @martimlobao ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/624491392/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rodvan",
                        "id": 5649648,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006733399932272732,
                        "severe_toxicity": 0.00011587050539674237,
                        "obscene": 0.000186124409083277,
                        "threat": 0.00012215385504532605,
                        "insult": 0.00017709500389173627,
                        "identity_attack": 0.00013447129458654672
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/631328786",
                    "id": 631328786,
                    "created_at": "2020-05-20T08:37:18Z",
                    "updated_at": "2020-05-20T08:43:10Z",
                    "author_association": "NONE",
                    "body": "It does seem ridiculous that using the standard `data` parameter as described in the docs should choose to silently discard data, just because some nesting was involved! So users are left having to browse Github to find issues like this one to learn about a workaround. At the very least, the limitation should be highlighted in the docs.\r\n\r\nI realise that similar issues have been closed in the past with the suggestion that users use [Requests Toolbelt](https://toolbelt.readthedocs.io/en/latest/formdata.html), but as nested form data is such a common part of web applications and APIs it really does feel like Requests should support this type of encoding directly.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/631328786/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "coatesap",
                        "id": 1926626,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0013364810729399323,
                        "severe_toxicity": 9.674734610598534e-05,
                        "obscene": 0.00019510069978423417,
                        "threat": 0.0001096819614758715,
                        "insult": 0.00019651777984108776,
                        "identity_attack": 0.0001475847966503352
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/703901708",
                    "id": 703901708,
                    "created_at": "2020-10-05T21:34:28Z",
                    "updated_at": "2020-10-05T21:34:28Z",
                    "author_association": "NONE",
                    "body": "are there any other workaround then to change the req from **data** to **json**?\r\n\r\nI can'r change the request type and need some way to handle it and send the response back. I have tried most of the solutions but Nested dict data still gets ignored. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/703901708/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sahilnyati9",
                        "id": 58526926,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007440463523380458,
                        "severe_toxicity": 0.00010994258627761155,
                        "obscene": 0.000179542344994843,
                        "threat": 0.00011657334835035726,
                        "insult": 0.00017729353567119688,
                        "identity_attack": 0.00013337458949536085
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/706464142",
                    "id": 706464142,
                    "created_at": "2020-10-10T01:34:34Z",
                    "updated_at": "2020-10-10T01:34:34Z",
                    "author_association": "NONE",
                    "body": "@sahilnyati9 Another workaround is to use `json.dumps`. So, e.g. this should work as intended:\r\n\r\n```python\r\nr = requests.post(\"https://httpbin.org/post\", headers=headers, data=json.dumps(data))\r\n```\r\n\r\nOne thing to note is that using `json` instead of `data` has the side-effect of automatically setting `'Content-Type'` to `'application/json'` in the headers; using `data` you have to set the content type manually.\r\n\r\nI think the issue here is not so much that you have to use one or the other in a given situation, but that an exception (or at least a warning) should be raised when misusing the `data` argument.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/706464142/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "martimlobao",
                        "id": 6430786,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008160395664162934,
                        "severe_toxicity": 0.0001089733632397838,
                        "obscene": 0.00019113492453470826,
                        "threat": 0.00011439061927376315,
                        "insult": 0.00017648024368099868,
                        "identity_attack": 0.00013712680083699524
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/706465269",
                    "id": 706465269,
                    "created_at": "2020-10-10T01:42:18Z",
                    "updated_at": "2020-10-10T01:42:18Z",
                    "author_association": "NONE",
                    "body": "@martimlobao Thanks for the suggestion. The issue here I don't have control over the request that I receive. \r\nThe request that I receive is in this format - **auth.session.post(self.__path + self._url, data=data)**\r\n\r\nIn that case, all I could do is something on the receiving end to handle the request data in a way that I could formulate it correctly and send the response back. But, I have been unsuccessful as whatever I do to read it, it still skips the nested values.\r\n\r\nI have tried things like below to read it properly but no success so far:\r\n#print(request.__dict__)\r\n#print(request.headers)\r\n#data = request.get_data()\r\n#data = request['data']\r\n#print(data)\r\n#print(request.data)\r\n#print(\"BODY\", request.body)\r\n#json.dumps(parse_qs(request.get_data()))\r\n#payload_dict = parse_qs(request.get_data())\r\n#print(payload_dict, type(payload_dict))\r\n#payload_dict_value_arr = payload_dict[b'creditTransferTransactionInformation']\r\n#print(payload_dict_value_arr, type(payload_dict_value_arr))\r\n# Get data from the index[0] of the array payload_dict_value_arr\r\n#data = payload_dict_value_arr[0]\r\n#print(data, type(data))\r\n#payload = request.form\r\n#print(payload['paymentTypeInformation'], type(payload['paymentTypeInformation']))\r\n#print(payload['serviceLevelCode'], type(payload['serviceLevelCode']))",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/706465269/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sahilnyati9",
                        "id": 58526926,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007766910712234676,
                        "severe_toxicity": 0.00011149955389555544,
                        "obscene": 0.00020163531007710844,
                        "threat": 0.0001082265007426031,
                        "insult": 0.00017402916273567826,
                        "identity_attack": 0.0001353624538751319
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/706469471",
                    "id": 706469471,
                    "created_at": "2020-10-10T02:13:58Z",
                    "updated_at": "2020-10-10T02:13:58Z",
                    "author_association": "NONE",
                    "body": "@sahilnyati9 I don't understand what you mean. If you want to send a nested dict `payload` in a request, you either have to use `json=payload` or `data=json.dumps(payload)`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/706469471/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "martimlobao",
                        "id": 6430786,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008253998239524662,
                        "severe_toxicity": 0.00010503079829504713,
                        "obscene": 0.00018030974024441093,
                        "threat": 0.0001084625837393105,
                        "insult": 0.0001781260216375813,
                        "identity_attack": 0.00013278592086862773
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/706569536",
                    "id": 706569536,
                    "created_at": "2020-10-10T15:52:38Z",
                    "updated_at": "2020-10-10T15:52:38Z",
                    "author_association": "NONE",
                    "body": "@martimlobao So basically, this is a request that I don't send. I receive it. We get this request from our banking partner and we send response body back to it based on the request body. Since, I was not able to send the correct response back because of missing data, I asked them how they are sending me the request and was told by the support team that they send it as data=data. \r\nI hope I could explain better but the issue here is I don't have any control over the request sending format and based on your comment it seems like, they need to send it properly. There is nothing that could be done on response side to handle it better.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/706569536/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sahilnyati9",
                        "id": 58526926,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005892546032555401,
                        "severe_toxicity": 0.00012423211592249572,
                        "obscene": 0.00018649923731572926,
                        "threat": 0.0001264305756194517,
                        "insult": 0.00016982463421300054,
                        "identity_attack": 0.00013847547234036028
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/707272499",
                    "id": 707272499,
                    "created_at": "2020-10-12T18:13:46Z",
                    "updated_at": "2020-10-12T18:13:46Z",
                    "author_association": "NONE",
                    "body": "@sahilnyati9 Ah, I see. With the way it is now, then there's no way for you to get the data since they're not actually sending it when doing `data=data`. You'll have to tell them to use `json=data` or `data=json.dumps(data)`, otherwise there's literally nothing you can do.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/707272499/reactions",
                        "total_count": 2,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "martimlobao",
                        "id": 6430786,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0013427543453872204,
                        "severe_toxicity": 9.567229426465929e-05,
                        "obscene": 0.00019988001440651715,
                        "threat": 0.00010608143202261999,
                        "insult": 0.0001959837245522067,
                        "identity_attack": 0.0001397858140990138
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/751387577",
                    "id": 751387577,
                    "created_at": "2020-12-26T19:21:04Z",
                    "updated_at": "2020-12-26T19:21:04Z",
                    "author_association": "NONE",
                    "body": "I think the user should be at least warned when the original dictionary gets modified.\r\nIdeally, this should raise an exception, but such a change will break a lot of existing projects.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/751387577/reactions",
                        "total_count": 5,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rushter",
                        "id": 3187951,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005699456669390202,
                        "severe_toxicity": 0.00012892189261037856,
                        "obscene": 0.00017722135817166418,
                        "threat": 0.0001364240888506174,
                        "insult": 0.0001762853207765147,
                        "identity_attack": 0.00014620332513004541
                    }
                }
            ]
        },
        "192": {
            "html_url": "https://github.com/psf/requests/issues/5037",
            "id": 426347341,
            "number": 5037,
            "title": "Add request event hook",
            "created_at": "2019-03-28T07:53:56Z",
            "updated_at": "2021-08-28T11:50:35Z",
            "closed_at": null,
            "body": "There was a scenario where I need to intercept the request and was searching for if there is some way can that be done, then I found the event hook but only `response` event hook is supported.\r\nI hope adding `request` hook can be useful, if yes I would like to implement that.\r\n\r\n\r\nAny pointers or suggestion appreciated.\r\n\r\nThanks\r\n",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "navyad",
                "id": 1172317,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5037/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/480421673",
                    "id": 480421673,
                    "created_at": "2019-04-05T21:04:27Z",
                    "updated_at": "2019-04-05T21:04:27Z",
                    "author_association": "NONE",
                    "body": "Can you tell what exactly you mean by request hook ? What does intercepting a request mean ? It sounds like you want to do something after request has been made - for which you can use response hook",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/480421673/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "abranjith",
                        "id": 25289062,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007779963198117912,
                        "severe_toxicity": 0.00010934998135780916,
                        "obscene": 0.00017323200881946832,
                        "threat": 0.00011715125583577901,
                        "insult": 0.00017553103680256754,
                        "identity_attack": 0.00013576549827121198
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/480503593",
                    "id": 480503593,
                    "created_at": "2019-04-06T13:19:36Z",
                    "updated_at": "2019-04-06T13:20:52Z",
                    "author_association": "NONE",
                    "body": "I need the same thing. A hook that retrieves the `Request` or `PreparedRequest` object in the moment when it is sent (without waiting for the response).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/480503593/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Holzhaus",
                        "id": 1834516,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005755805177614093,
                        "severe_toxicity": 0.00012855412205681205,
                        "obscene": 0.0001896877511171624,
                        "threat": 0.00012446902110241354,
                        "insult": 0.0001754572440404445,
                        "identity_attack": 0.00014186676708050072
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/480506374",
                    "id": 480506374,
                    "created_at": "2019-04-06T13:59:59Z",
                    "updated_at": "2019-04-06T13:59:59Z",
                    "author_association": "NONE",
                    "body": "I implemented the hook in PR #5044.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/480506374/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Holzhaus",
                        "id": 1834516,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006333514465950429,
                        "severe_toxicity": 0.00011834759789053351,
                        "obscene": 0.00018996739527210593,
                        "threat": 0.00011027859000023454,
                        "insult": 0.00017393344023730606,
                        "identity_attack": 0.00013632149784825742
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/533694688",
                    "id": 533694688,
                    "created_at": "2019-09-20T20:15:59Z",
                    "updated_at": "2019-09-20T20:15:59Z",
                    "author_association": "NONE",
                    "body": "What a bummer that PR #5044 was closed..   I'd love to have the request hook as well.\r\nMy scenario is that for some tests I need to manipulate the headers right before the request (after business logic is done in the REST client).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/533694688/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "joaonc",
                        "id": 11450769,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.05787842348217964,
                        "severe_toxicity": 0.00020743046479765326,
                        "obscene": 0.004175988957285881,
                        "threat": 0.00020431728626135737,
                        "insult": 0.003936972003430128,
                        "identity_attack": 0.0003897727292496711
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/533695185",
                    "id": 533695185,
                    "created_at": "2019-09-20T20:17:49Z",
                    "updated_at": "2019-09-20T20:17:49Z",
                    "author_association": "MEMBER",
                    "body": "@joaonc is there a reason you can\u2019t use the PreparedRequests workflow for this use case?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/533695185/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006920834421180189,
                        "severe_toxicity": 0.00011201266897842288,
                        "obscene": 0.00017388501146342605,
                        "threat": 0.00011521516717039049,
                        "insult": 0.00017445713456254452,
                        "identity_attack": 0.00013601052341982722
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/533705757",
                    "id": 533705757,
                    "created_at": "2019-09-20T20:54:41Z",
                    "updated_at": "2019-09-20T20:55:10Z",
                    "author_association": "NONE",
                    "body": "I guess there are several ways to skin this cat.  I have a business layer where the REST clients to our web services are defined (ex `AccountService` has a `get_account(account_id)` method) and those clients handle urls for different environments, logging, headers (we have some headers that require business logic), etc.\r\n\r\nIn some of my tests, I wanted to alter these headers.\r\nOne easy way to do it would be to add `request` to the list of hooks.\r\nAnother is to have these REST clients accept `headers` as a parameter.\r\n\r\nI have a base REST client from which all others derive and ended up adding a check for `hooks.get('request')` and go from there, basically adding the functionality myself.  If it gets added to the `requests` library later, should be easy to switch.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/533705757/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "joaonc",
                        "id": 11450769,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000800509937107563,
                        "severe_toxicity": 0.00011320500925648957,
                        "obscene": 0.00018853176152333617,
                        "threat": 0.00012045169569319114,
                        "insult": 0.00017763907089829445,
                        "identity_attack": 0.00014610073412768543
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/907615593",
                    "id": 907615593,
                    "created_at": "2021-08-28T11:50:35Z",
                    "updated_at": "2021-08-28T11:50:35Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So there seem to be a couple use-cases here that I wanted to summarize and directly address:\r\n\r\n1. A REST client library that needs to conditionally perform some logic\r\n2. Someone wanting to handle redirects in a bespoke and unexplained way\r\n\r\nAs someone who has written multiple REST client libraries, there are many ways to skin this cat and it all depends on how well designed the client library is. For anything that's going to be remotely complex or long-lived, I personally like a layered approach. By which I mean:\r\n\r\n- The bottom layer is a class that wraps/extends a `requests.Session` (ideally, it doesn't subclass so that you could swap it out for something similar in the future if you wanted and the rest of your library wouldn't have to know)\r\n- The next layer is what understands URL building and other business logic that might need to happen. This could be used by power users who want to just see response data directly\r\n- The final layer parses the prior layer into friendly objects.\r\n\r\nThis layering is not different from how you might think about a database library (bottom layer is roughly equivalent to a database specific driver, then the abstraction that parses and returns tuples from the driver, then the ORM). It's quite nice for testing purposes and it allows you to split up business logic into appropriate places. At the bottom layer, you can use the prepared request workflow that Nate mentioned above to prepare a request with your session and then apply your overrides.\r\n\r\nFor handling redirects in a bespoke way, there's already a hook for that. In fact, this very library itself uses [that hook for that purpose](https://github.com/psf/requests/blob/aae78010e987a414c176bddbf474cd554505219c/requests/auth.py#L278-L296). Unfortunately, the hooks in that code are relying on undocumented features that aren't something I want others to do. As an alternative to that, we have much of the redirect logic in a separate class that gets mixed into the Session. Following the APIs in that class, one could sub-class and extend that mixin and then create their own redirect-handling session: `class Session(requests.Session, MyRedirectMixin)`. It's not ideal, but it works and the APIs there are possible to understand.\r\n\r\nI'd like to get a breaking release out that gives more flexibility around the latter case specifically, but I think I'd also like a different way for hooks to work - namely I feel like hooks should have a way to return a new `PreparedRequest` that is used as a next request. I don't want hooks to be making additional requests that then hide themselves from the user (the way HTTPDigestAuth works currently) but that's a big breaking change ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/907615593/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007097180932760239,
                        "severe_toxicity": 0.00011399643699405715,
                        "obscene": 0.00018547104264143854,
                        "threat": 0.00011976120731560513,
                        "insult": 0.00017284690693486482,
                        "identity_attack": 0.00013591122115030885
                    }
                }
            ]
        },
        "193": {
            "html_url": "https://github.com/psf/requests/issues/5031",
            "id": 425199662,
            "number": 5031,
            "title": "rfc6266 for parsing content-disposition header",
            "created_at": "2019-03-26T02:40:09Z",
            "updated_at": "2019-03-26T02:40:09Z",
            "closed_at": null,
            "body": "There is a package `rfc6266` on PyPi that does this, but it breaks on PY37 because it and its dependency `lepl` are apparently unmaintained.  If I figure out how to re-implement it, would a PR be welcomed?",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "jbrockmendel",
                "id": 8078968,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5031/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "194": {
            "html_url": "https://github.com/psf/requests/issues/5024",
            "id": 422092368,
            "number": 5024,
            "title": "The reason that uploading file larger than 2GB will be truncated.",
            "created_at": "2019-03-18T08:31:24Z",
            "updated_at": "2019-03-18T08:44:11Z",
            "closed_at": null,
            "body": "When I upload multipart-encoded file larger than 2GB in python2 environment, the body will be truncated. Server side can not read data completely. But the content-length value in header is expected. At client side, it do not send all data.\r\n\r\nAfter tracing of function calls, it is caused by python2 socket library bug. Requests will use socket.sendall() to send body, but it use int type to keep bytes need be sent and has sent: [python2-socket-lib](https://github.com/python/cpython/blob/2.7/Modules/socketmodule.c#L2850). I also create a [issue](https://bugs.python.org/issue36337) to report this bug to python team.\r\n\r\nRather than waiting python team fix it, I thought Requests can fix quickly. After search it has also been reported many times.\r\nRequests lib can split encoded string body into many segments each one smaller than 2GB, and send segments one by one. Or wrapping string body as as file-like object is also works, like this:\r\n```python\r\nfrom cStringIO import StringIO\r\nbody=StringIO(request.body)\r\n```\r\n\r\n\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "kmiku7",
                "id": 3275006,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5024/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "195": {
            "html_url": "https://github.com/psf/requests/issues/5021",
            "id": 420973695,
            "number": 5021,
            "title": "raise_for_status leaks HTTP basic auth",
            "created_at": "2019-03-14T11:46:50Z",
            "updated_at": "2019-03-15T11:01:03Z",
            "closed_at": null,
            "body": "Calling `raise_for_status()` output (leaks) the HTTP basic auth password when raising an exception.\r\n\r\n## Expected Result\r\n\r\n```\r\n>>> import requests\r\n>>> r = requests.get(\"http://user:somepassw@httpbin.org/status/401\")\r\n>>> r.raise_for_status()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.7/site-packages/requests/models.py\", line 940, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 401 Client Error: UNAUTHORIZED for url: http://user:<redacted>@httpbin.org/status/401\r\n```\r\n## Actual Result\r\n\r\nHere we can see the HTTP password in the resulting exception (`somepassw` in our case)\r\n\r\n```\r\n>>> import requests\r\n>>> r = requests.get(\"http://user:somepassw@httpbin.org/status/401\")\r\n>>> r.raise_for_status()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.7/site-packages/requests/models.py\", line 940, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 401 Client Error: UNAUTHORIZED for url: http://user:somepassw@httpbin.org/status/401\r\n```\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.20.8-arch1-1-ARCH\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010101f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "calve",
                "id": 4311079,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5021/reactions",
                "total_count": 4,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 4
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/473244443",
                    "id": 473244443,
                    "created_at": "2019-03-15T11:01:02Z",
                    "updated_at": "2019-03-15T11:01:02Z",
                    "author_association": "NONE",
                    "body": "For future reader, one way to fix this behaviour is to pass the basic auth by kwargs;\r\n\r\n```\r\n>>> import requests\r\n>>> r = requests.get(\"http://httpbin.org/status/401\", auth=(\"user\", \"passwd\"))\r\n>>> r.raise_for_status()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.7/site-packages/requests/models.py\", line 940, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 401 Client Error: UNAUTHORIZED for url: http://httpbin.org/status/401\r\n```\r\n\r\n----\r\n\r\nStill, seeing that python-requests send a `Authorization` header, it looks like we could do something for the original leak, as requests knows which parts of the URL is the authentification\r\n\r\n```\r\n>>> r = requests.get(\"http://user:password@httpbin.org/status/401\")\r\n>>> r.raise_for_status()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.7/site-packages/requests/models.py\", line 940, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 401 Client Error: UNAUTHORIZED for url: http://user:password@httpbin.org/status/401\r\n>>> r.request.headers\r\n{'User-Agent': 'python-requests/2.21.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic dXNlcjpwYXNzd29yZA=='}\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/473244443/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "calve",
                        "id": 4311079,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008372814045287669,
                        "severe_toxicity": 0.00011215086851734668,
                        "obscene": 0.0002011341421166435,
                        "threat": 0.00011295075091766194,
                        "insult": 0.00017672020476311445,
                        "identity_attack": 0.00013946654507890344
                    }
                }
            ]
        },
        "196": {
            "html_url": "https://github.com/psf/requests/issues/5011",
            "id": 417421164,
            "number": 5011,
            "title": "Host header not being set for CONNECT method of HTTPS proxy",
            "created_at": "2019-03-05T17:47:02Z",
            "updated_at": "2020-09-24T00:12:24Z",
            "closed_at": null,
            "body": "Since `http.client` only supports [HTTP 1.0](https://github.com/python/cpython/blob/3.7/Lib/http/client.py#L895) for the CONNECT method it's not required to send the `Host` header. Unfortunately, HTTPS proxies often expect a `Host` header to be present, and fail to connect in its absence. I thought this might be of some interest here since `requests` + proxies is not particularly uncommon.\r\n\r\nIs this something that could be supported in `requests`?\r\n\r\n## Expected Result\r\n\r\nThe expectation is that `requests` will include the `Host` header as part of the CONNECTion process.\r\n\r\n## Actual Result\r\n\r\nThe `Host` header is not included.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\n>>> requests.get('https://google.ca', timeout=5, verify=False, proxies={'https': 'localhost:8081'})                                                                                                                 \r\nTraceback (most recent call last):                                                                                                                                                                                  \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 594, in urlopen                                                                                                  \r\n    self._prepare_proxy(conn)                                                                                                                                                                                       \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 805, in _prepare_proxy                                                                                           \r\n    conn.connect()                                                                                                                                                                                                  \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/connection.py\", line 344, in connect                                                                                                      \r\n    ssl_context=context)                                                                                                                                                                                            \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/util/ssl_.py\", line 344, in ssl_wrap_socket                                                                                               \r\n    return context.wrap_socket(sock, server_hostname=server_hostname)                                                                                                                                               \r\n  File \"/usr/lib/python3.6/ssl.py\", line 407, in wrap_socket                                                                                                                                                        \r\n    _context=self, _session=session)                                                                                                                                                                                \r\n  File \"/usr/lib/python3.6/ssl.py\", line 817, in __init__                                                                                                                                                           \r\n    self.do_handshake()                                                                                                                                                                                             \r\n  File \"/usr/lib/python3.6/ssl.py\", line 1077, in do_handshake                                                                                                                                                      \r\n    self._sslobj.do_handshake()                                                                                                                                                                                     \r\n  File \"/usr/lib/python3.6/ssl.py\", line 689, in do_handshake                                                                                                                                                       \r\n    self._sslobj.do_handshake()                                                                                                                                                                                     \r\nsocket.timeout: _ssl.c:830: The handshake operation timed out                                                                                                                                                       \r\n                                                                                                                                                                                                                    \r\nDuring handling of the above exception, another exception occurred:                                                                                                                                                 \r\n                                                                                                                                                                                                                    \r\nTraceback (most recent call last):                                                                                                                                                                                  \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/adapters.py\", line 449, in send                                                                                                          \r\n    timeout=timeout                                                                                                                                                                                                 \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 638, in urlopen                                                                                                  \r\n    _stacktrace=sys.exc_info()[2])                                                                                                                                                                                  \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/util/retry.py\", line 398, in increment                                                                                                    \r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))                                                                                                                                                  \r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='google.ca', port=443): Max retries exceeded with url: / (Caused by ProxyError('Cannot connect to proxy.', timeout('_ssl.c:830: The handshake operation t\r\nimed out',)))                                                                                                                                                                                                       \r\n                                                                                                                                                                                                                    \r\nDuring handling of the above exception, another exception occurred:                                                                                                                                                 \r\n                                                                                                                                                                                                                    \r\nTraceback (most recent call last):                                                                                                                                                                                  \r\n  File \"<stdin>\", line 1, in <module>                                                                                                                                                                               \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/api.py\", line 75, in get                                                                                                                 \r\n    return request('get', url, params=params, **kwargs)                                                                                                                                                             \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/api.py\", line 60, in request                                                                                                             \r\n    return session.request(method=method, url=url, **kwargs)                                                                                                                                                        \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/sessions.py\", line 533, in request                                                                                                       \r\n    resp = self.send(prep, **send_kwargs)                                                                                                                                                                           \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/sessions.py\", line 646, in send                                                                                                          \r\n    r = adapter.send(request, **kwargs)                                                                                                                                                                             \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/adapters.py\", line 510, in send                                                                                                          \r\n    raise ProxyError(e, request=request)                                                                                                                                                                            \r\nrequests.exceptions.ProxyError: HTTPSConnectionPool(host='google.ca', port=443): Max retries exceeded with url: / (Caused by ProxyError('Cannot connect to proxy.', timeout('_ssl.c:830: The handshake operation tim\r\ned out',)))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-43-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "mctwynne",
                "id": 22352286,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5011/reactions",
                "total_count": 6,
                "+1": 6,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/471101889",
                    "id": 471101889,
                    "created_at": "2019-03-08T22:43:43Z",
                    "updated_at": "2019-03-08T22:43:43Z",
                    "author_association": "NONE",
                    "body": "@kenneth-reitz Do you happen to have a rough idea of how much effort would be involved in supporting this feature?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/471101889/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mctwynne",
                        "id": 22352286,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006217322661541402,
                        "severe_toxicity": 0.00012028091441607103,
                        "obscene": 0.00017676115385256708,
                        "threat": 0.000125664213555865,
                        "insult": 0.0001775262935552746,
                        "identity_attack": 0.00013943755766376853
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/697054917",
                    "id": 697054917,
                    "created_at": "2020-09-23T00:41:09Z",
                    "updated_at": "2020-09-23T01:33:46Z",
                    "author_association": "NONE",
                    "body": "I am also having huge problem with this as well.\r\n\r\nAll of our proxies require at least HTTP/1.1 \ud83d\udc4e \r\n\r\nRequests tries to connect using HTTP/1.0 and fails with:\r\n\r\nRemoteDisconnected('Remote end closed connection without response')\r\n\r\nI tried patch client _tunnel function to send 1.1 header and Host, the same way CURL sends, but I am getting Invalid response afterwards on:\r\n\r\nresponse = self.response_class(self.sock, method=self._method)\r\n\r\nprobably lot more changes are needed on tunneling https requests...\r\n\r\nBy the way http requests work normally.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/697054917/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mirkokg",
                        "id": 1269927,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007613570196554065,
                        "severe_toxicity": 0.00011291295231785625,
                        "obscene": 0.0001836801675381139,
                        "threat": 0.00012019744463032112,
                        "insult": 0.00017324239888694137,
                        "identity_attack": 0.00013915583258494735
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/697319171",
                    "id": 697319171,
                    "created_at": "2020-09-23T12:04:34Z",
                    "updated_at": "2020-09-23T12:04:34Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I don't believe this is a bug or feature in requests. Rather, we rely on underlying libraries to generate the appropriate Host header and HTTP version. I know urllib3 just added support for TLS-in-TLS (using TLS to connect to a TLS proxy and sending a TLS request over that). Perhaps things have become better and this is maybe fixed (or at least partially better). ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/697319171/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000632010109256953,
                        "severe_toxicity": 0.00012088098446838558,
                        "obscene": 0.0001818030432332307,
                        "threat": 0.000125705570098944,
                        "insult": 0.0001725972251733765,
                        "identity_attack": 0.00014044503041077405
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/697408660",
                    "id": 697408660,
                    "created_at": "2020-09-23T14:04:55Z",
                    "updated_at": "2020-09-23T14:04:55Z",
                    "author_association": "NONE",
                    "body": "Yeah, this is part of client.py: https://raw.githubusercontent.com/python/cpython/master/Lib/http/client.py\r\nI tried latest master branch, and tunneling https over https connect proxy is unfortunately not working.\r\nI also tried this pull request:\r\n\r\nhttps://github.com/python/cpython/pull/8305\r\n\r\nbut unfortunately that didn't solve the issue.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/697408660/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mirkokg",
                        "id": 1269927,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011555749224498868,
                        "severe_toxicity": 0.00010382164327893406,
                        "obscene": 0.00023743575729895383,
                        "threat": 0.00010106149420607835,
                        "insult": 0.0001805194333428517,
                        "identity_attack": 0.00013299830607138574
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/697560955",
                    "id": 697560955,
                    "created_at": "2020-09-23T15:39:05Z",
                    "updated_at": "2020-09-23T15:39:05Z",
                    "author_association": "MEMBER",
                    "body": "(Btw urllib3 TLS+TLS support hasn't been merged or released yet, still in development)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/697560955/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006580332992598414,
                        "severe_toxicity": 0.00011605936015257612,
                        "obscene": 0.00018804252613335848,
                        "threat": 0.00011852818715851754,
                        "insult": 0.00017482864495832473,
                        "identity_attack": 0.00013592353207059205
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/698036627",
                    "id": 698036627,
                    "created_at": "2020-09-24T00:12:23Z",
                    "updated_at": "2020-09-24T00:12:23Z",
                    "author_association": "NONE",
                    "body": "Thanks sethmlarson, I just tested urllib3 branch, and TLS+TLS works perfectly! Thanks for the tip!\r\n\r\nhttps://github.com/jalopezsilva/urllib3/tree/tls_in_tls_integration",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/698036627/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mirkokg",
                        "id": 1269927,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006777533562853932,
                        "severe_toxicity": 0.00011559326958376914,
                        "obscene": 0.0001776605931809172,
                        "threat": 0.00011698558955686167,
                        "insult": 0.00017476448556408286,
                        "identity_attack": 0.0001380808389512822
                    }
                }
            ]
        },
        "197": {
            "html_url": "https://github.com/psf/requests/issues/5002",
            "id": 414095090,
            "number": 5002,
            "title": "Socket leakage - CLOSE_WAIT - multithreading",
            "created_at": "2019-02-25T13:05:23Z",
            "updated_at": "2021-02-05T02:21:48Z",
            "closed_at": null,
            "body": "Any thoughts please as I ran out of ideas what could be wrong. The problem is very possibly in the way I use requests and unfortunately I can't provide detailed configuration or the code itself but here we go.\r\n\r\nDesign: \r\n\r\nNote: All system parts are currently running on the same server so the requests.sessions are to localhost.\r\n\r\nThe application has multiple virtual encryption classes (VCS), each can use one of upstream encryption services (ES). One of ESes has a RESTful API -> the virtual encryption class uses requests.get() for queries.\r\n\r\nWhen the application starts, it creates an instance of VCS and this in turn creates its instance of a  configuration class for an ES.\r\n\r\nthere is a main static method, which listens on downstream connections. On each such connection, it will create a WorkingThread which is given the VCS instance as a parameter. The WorkingThread:\r\n1. asks ES to create a requests.session (static method)\r\n2. runs a bunch of get() requests\r\n3. closes the requests.session\r\n\r\nThe downstream client serializes connections so at the moment there's only one WorkingThread running at any one time. All upstream connections are to the same URL, what changes are HTTP GET parameters.\r\n\r\nWhat happens is that when there are, e.g., 10 connections created back-to-back, the application leaves 9 sockets in the CLOSE_WAIT state. If there is just 1 downstream connection, the socket is correctly closed.\r\n\r\n## Expected Result\r\n\r\nCorrectly closed sockets.\r\n\r\n## Actual Result\r\n\r\nWhen a new requests.Session() is created immediately after the previous has been closed, it leaks a socket (indefinite CLOSE_WAIT).\r\n\r\n## Reproduction Steps\r\n\r\nNot available at the moment - I tried run get() calls within \"with\", with \"Connection: close\" header, explicitly closing responses as well as the session, disabling selinux to no avail.\r\n\r\nThe dataflow summary: TCP server accepts a connection, creates a workingthread, which is given an global persistent object instance with an upstream config. the workingThread opens a requests.session, runs several get() requests, closes the session and sends a TCP response back.\r\n\r\n## System Information\r\n\r\nI can't access the server at the moment, but as of 20th Feb, 2019\r\n\r\nCentos7.6,  Python 2.7.5 requests and other packages are up to date, installed with pip\r\n",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "dancvrcek",
                "id": 13306063,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5002/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/468361268",
                    "id": 468361268,
                    "created_at": "2019-02-28T17:25:59Z",
                    "updated_at": "2019-02-28T17:25:59Z",
                    "author_association": "NONE",
                    "body": "## System Information\r\n\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  }, \r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  }, \r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  }, \r\n  \"implementation\": {\r\n    \"name\": \"CPython\", \r\n    \"version\": \"2.7.5\"\r\n  }, \r\n  \"platform\": {\r\n    \"release\": \"3.10.0-693.17.1.el7.x86_64\", \r\n    \"system\": \"Linux\"\r\n  }, \r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\", \r\n    \"version\": null\r\n  }, \r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  }, \r\n  \"system_ssl\": {\r\n    \"version\": \"1000105f\"\r\n  }, \r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  }, \r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/468361268/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dancvrcek",
                        "id": 13306063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009753950871527195,
                        "severe_toxicity": 0.00011190975783392787,
                        "obscene": 0.0002290090051246807,
                        "threat": 0.00010609640594338998,
                        "insult": 0.0001842623605625704,
                        "identity_attack": 0.00014004331023897976
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/468740733",
                    "id": 468740733,
                    "created_at": "2019-03-01T17:17:24Z",
                    "updated_at": "2019-03-01T17:17:24Z",
                    "author_association": "NONE",
                    "body": "I'm still trying to replicate with a small python script. So far, I have managed to do that once (several consecutive runs but I lost it after changing the code slightly). It seemed like the thread doing get() requests was terminated while the session was still in the ESTABLISHED state. It would then go directly into infinite CLOSE_WAIT.\r\n\r\nAs I mentioned, if there are 10 tasks (each = 1 thread and multiple get() requests), only the last one leaves its socket in CLOSE_WAIT state. These threads have to be running spawned immediately after each other (first responds downstream -> a new thread is spawn, so 2 threads can overlap). If there is a gap between following threads, all sockets close correctly.\r\n\r\nIf I don't close the session, I get CLOSE_WAIT for all tasks I execute.\r\n\r\nThe most recent version uses simply requests.get(....) calls -> session should be torn down immediately after the response is received (stream=False ... i.e., default value).\r\n\r\n\r\n\r\nBTW, the server to which the Python script connects to is a Java Spring app.\r\nall requests are to localhost\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/468740733/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dancvrcek",
                        "id": 13306063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000662422098685056,
                        "severe_toxicity": 0.00011826964328065515,
                        "obscene": 0.00018554762937128544,
                        "threat": 0.00012313023034948856,
                        "insult": 0.00017244259652215987,
                        "identity_attack": 0.00014014617772772908
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/468802193",
                    "id": 468802193,
                    "created_at": "2019-03-01T20:32:49Z",
                    "updated_at": "2019-03-01T20:32:49Z",
                    "author_association": "NONE",
                    "body": "ok, so the problem remains even when I use urllib/urllib2.\r\n\r\n If anyone has any thoughts, I'd really appreciate to hear any ideas.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/468802193/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dancvrcek",
                        "id": 13306063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005728905089199543,
                        "severe_toxicity": 0.00013134590699337423,
                        "obscene": 0.0001929543213918805,
                        "threat": 0.00013680747360922396,
                        "insult": 0.00017678069707471877,
                        "identity_attack": 0.00014313247811514884
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/468904352",
                    "id": 468904352,
                    "created_at": "2019-03-02T09:35:22Z",
                    "updated_at": "2019-03-02T09:35:22Z",
                    "author_association": "NONE",
                    "body": "... I should have mentioned that I'm opening a few hundred connections within a couple of seconds.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/468904352/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dancvrcek",
                        "id": 13306063,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006257440545596182,
                        "severe_toxicity": 0.00012367128510959446,
                        "obscene": 0.00018516463751439005,
                        "threat": 0.00013171327009331435,
                        "insult": 0.00017212456441484392,
                        "identity_attack": 0.0001395232102368027
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/714234259",
                    "id": 714234259,
                    "created_at": "2020-10-22T05:18:16Z",
                    "updated_at": "2020-10-22T05:18:16Z",
                    "author_association": "NONE",
                    "body": "Looks like I ran into the similar (or same problem). Many threads, one session..",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/714234259/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "alxchk",
                        "id": 329535,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006441501900553703,
                        "severe_toxicity": 0.00012131482799304649,
                        "obscene": 0.00019409506057854742,
                        "threat": 0.00011302176426397637,
                        "insult": 0.00017991542699746788,
                        "identity_attack": 0.00013858471356797963
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/773736642",
                    "id": 773736642,
                    "created_at": "2021-02-05T02:21:48Z",
                    "updated_at": "2021-02-05T02:21:48Z",
                    "author_association": "NONE",
                    "body": "have you tried using the Connection:close header....HTTP 1.1 by default uses Connection:keep-alive, so if a  socket ends its job, and the server did nor response back with a connection:close or when chucked responses you the client dont  read the last chunked bite...the tcp socket will still open until the handler closes it...you can simple read the data using the response.content property, you can copy the response object or is you are using session,  try a request ina context.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/773736642/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008419564692303538,
                        "severe_toxicity": 0.00010740639118012041,
                        "obscene": 0.00018678646301850677,
                        "threat": 0.00011354643356753513,
                        "insult": 0.00017531393677927554,
                        "identity_attack": 0.00013438682071864605
                    }
                }
            ]
        },
        "198": {
            "html_url": "https://github.com/psf/requests/issues/5000",
            "id": 413885095,
            "number": 5000,
            "title": "`no_proxy` setting ignores the `proxies` dictionary",
            "created_at": "2019-02-24T23:51:01Z",
            "updated_at": "2020-07-02T15:08:11Z",
            "closed_at": null,
            "body": "These work:\r\n\r\n```\r\n$ python -c \"import os,requests;os.environ['HTTPS_PROXY']='https://b.r.o.k.e.n.com';requests.get('https://google.com', proxies={'no_proxy': 'google.com'})\"\r\n$ python -c \"import os,requests;os.environ['HTTPS_PROXY']='https://b.r.o.k.e.n.com';os.environ['NO_PROXY']='google.com';requests.get('https://google.com')\"\r\n```\r\n\r\nThese do not work:\r\n\r\n```\r\n$ python -c \"import requests;requests.get('https://google.com', proxies={'https': 'https://b.r.o.k.e.n.com', 'no_proxy': 'google.com'})\"\r\n$ python -c \"import os,requests;os.environ['NO_PROXY']='google.com';requests.get('https://google.com', proxies={'https': 'https://b.r.o.k.e.n.com'})\"\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\ncc @Lukasa @sigmavirus24 ",
            "author_association": "CONTRIBUTOR",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "ofek",
                "id": 9677399,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/5000/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/467320050",
                    "id": 467320050,
                    "created_at": "2019-02-26T06:59:46Z",
                    "updated_at": "2019-02-26T06:59:46Z",
                    "author_association": "NONE",
                    "body": "Many issue (#4871, #879, #4600 ) is relative to `no_proxy`, and this is definitely a bug, even someone provide some patched code, why it's still unresolved?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/467320050/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cocobear",
                        "id": 181942,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006229968857951462,
                        "severe_toxicity": 0.00012012547813355923,
                        "obscene": 0.0001848665124271065,
                        "threat": 0.00011837378406198695,
                        "insult": 0.00017539535474497825,
                        "identity_attack": 0.00013796251732856035
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/484533644",
                    "id": 484533644,
                    "created_at": "2019-04-18T14:26:49Z",
                    "updated_at": "2019-04-18T14:26:49Z",
                    "author_association": "NONE",
                    "body": "Please fix the issue as it causes a slightly bigger issue - the session.send() method is ignoring the os.environ proxy settings so there is not way to specify proxy settings other than passing proxies explicitly, which doesn't bypass and ignores no_proxy.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/484533644/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "AvitalL",
                        "id": 35483886,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006925271591171622,
                        "severe_toxicity": 0.00011467446893220767,
                        "obscene": 0.0001799389283405617,
                        "threat": 0.00012289387814234942,
                        "insult": 0.00017593805387150496,
                        "identity_attack": 0.00013676755770575255
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/653062839",
                    "id": 653062839,
                    "created_at": "2020-07-02T15:07:38Z",
                    "updated_at": "2020-07-02T15:08:11Z",
                    "author_association": "NONE",
                    "body": "A possible hint looking at the logic for \"should we bypass proxies\" in Requests, is that this logic is only checked on redirects\u2026\r\n\r\nhttps://github.com/psf/requests/blob/1b417634721ec377abb7f17bc1f215e07202c2f7/requests/sessions.py#L292\r\n\r\nWhen I would expect it to _also_ be called on each request to decide \"should we use proxies for this URL\". Eg in `.get_adapter()`, or whichever place is responsible for saying \"use the connection pool, or a proxy\":\r\n\r\nhttps://github.com/psf/requests/blob/1b417634721ec377abb7f17bc1f215e07202c2f7/requests/sessions.py#L718-L730\r\n\r\nBut I'm not 100% sure at which layer the proxies vs connection pool decision occur, eg if it's in the default `HTTPAdapter` or elsewhere (haven't dug that far into the code).\r\n\r\nFor what it's worth, the 2nd failing test case works as expected with [HTTPX](https://python-httpx.org):\r\n\r\n```python\r\n>>> import os, httpx\r\n>>> os.environ['no_proxy'] = 'google.com'\r\n>>> proxies = {'https': 'https://no.where.com'}\r\n>>> c = httpx.Client(proxies=proxies)\r\n>>> c.get('https://google.com')\r\n<Response [200 OK]>\r\n```\r\n\r\nThe 1st failing test case doesn't though, because `no_proxy` keys aren't taken into account yet by HTTPX (see https://github.com/encode/httpx/issues/1043).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/653062839/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "florimondmanca",
                        "id": 15911462,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007584383711218834,
                        "severe_toxicity": 0.00011530792835401371,
                        "obscene": 0.00020279138698242605,
                        "threat": 0.00011858109064633027,
                        "insult": 0.00017260052845813334,
                        "identity_attack": 0.00013807004143018275
                    }
                }
            ]
        },
        "199": {
            "html_url": "https://github.com/psf/requests/issues/4998",
            "id": 413494208,
            "number": 4998,
            "title": "utils.get_encodings_from_content regexps incorrect matches",
            "created_at": "2019-02-22T17:03:38Z",
            "updated_at": "2021-11-28T03:31:38Z",
            "closed_at": null,
            "body": "`get_encodings_from_contents` uses regexps:\r\n\r\n```\r\n    charset_re = re.compile(r'<meta.*?charset=[\"\\']*(.+?)[\"\\'>]', flags=re.I)\r\n    pragma_re = re.compile(r'<meta.*?content=[\"\\']*;?charset=(.+?)[\"\\'>]', flags=re.I)\r\n    xml_re = re.compile(r'^<\\?xml.*?encoding=[\"\\']*(.+?)[\"\\'>]')\r\n```\r\n\r\nI'm finding cases where this is matching \"<meta foo=\"bar\">random junk charset=something_weird\".  A real-life example is at https://www.walmart.com/ip/108356879 where I get 7 matches.  The first one gives the desired \"utf-8\".  The next five are all \"UTF-8\\\\\".  The last one matches on a 24711 character match and produces a 1730 character gibberish result.\r\n\r\nLocally I've fixed this by changing the regexp patterns, replacing the first \".*?\" with \"[^>\\\\]*?\"\r\n\r\nWould a PR implementing this in requests (and/or requests-toolbelt) be welcome?\r\n\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "jbrockmendel",
                "id": 8078968,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4998/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/980830898",
                    "id": 980830898,
                    "created_at": "2021-11-28T03:31:38Z",
                    "updated_at": "2021-11-28T03:31:38Z",
                    "author_association": "MEMBER",
                    "body": "A PR fixing this behavior would be welcome!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/980830898/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008542238501831889,
                        "severe_toxicity": 0.00011099957919213921,
                        "obscene": 0.0001859471813077107,
                        "threat": 0.00011025198182323948,
                        "insult": 0.00017912888142745942,
                        "identity_attack": 0.00014086025475990027
                    }
                }
            ]
        },
        "200": {
            "html_url": "https://github.com/psf/requests/issues/4997",
            "id": 413363129,
            "number": 4997,
            "title": "should_bypass_proxies not thread-safe",
            "created_at": "2019-02-22T11:29:47Z",
            "updated_at": "2019-02-22T11:29:47Z",
            "closed_at": null,
            "body": "`requests.utils.should_bypass_proxies` temporary modifies the environment, calls into httplib and then restores the environment. However, it takes no locks while doing so, so two threads both using requests could lead to a permanent change to the environment. Even with a lock, any other thread that depends on the environment may observe the change (e.g. it may launch curl in a subprocess, and curl will then pick up this `no_proxy` setting).\r\n\r\n## Expected Result\r\n\r\nThe environment is not modified by requests.\r\n\r\n## Actual Result\r\n\r\nI haven't observed this bug in practice - it's a theoretical race condition I can see in the code. In the reproduction code below, I believe the following sequence could occur:\r\n\r\n1. Thread 1 enters the set_environ context manager, sets `old_value = None`, `os.environ['no_proxy'] = 'xyz'`.\r\n2. Thread 2 enters set_environ, sets `old_value = 'xyz'`, `os.environ['no_proxy'] = 'xyz'.\r\n3. Thread 1 exits, deletes `os.environ['no_proxy']`.\r\n4. Thread 1 exits, sets `os.environ['no_proxy'] = 'xyz'`.\r\n\r\nNow after all the requests have been finished, the environment has been modified.\r\n\r\n## Reproduction Steps\r\n\r\nI think this code can in theory trigger the race condition, although I haven't observed it. It needs an HTTP server on localhost:8080 (or just edit the URL)\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport threading\r\nimport os\r\n\r\nimport requests\r\n\r\ndef my_thread():\r\n    session = requests.Session()\r\n    for i in range(100):\r\n        with session.get('http://localhost:8080/', proxies={'no_proxy': 'xyz'}) as resp:\r\n            pass\r\n\r\nthreads = [threading.Thread(target=my_thread) for _ in range(16)]\r\nfor thread in threads:\r\n    thread.start()\r\nfor thread in threads:\r\n    thread.join()\r\nprint('no_proxy:', os.environ.get('no_proxy', 'not set'))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-45-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010007f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "bmerry",
                "id": 1963944,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4997/reactions",
                "total_count": 1,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 1
            },
            "assignees": [],
            "comments_details": []
        },
        "201": {
            "html_url": "https://github.com/psf/requests/issues/4965",
            "id": 407445365,
            "number": 4965,
            "title": "Accessing response.content twice removes forgets read error",
            "created_at": "2019-02-06T21:46:17Z",
            "updated_at": "2020-02-18T22:37:17Z",
            "closed_at": null,
            "body": "I had a hard debugging time today because an error in the response stream is only reported when accessing `response.content` for the first time.\r\n\r\nThis is especially irritating when running code in a debugger.\r\n\r\n## Expected Result\r\n\r\nIf accessing `response.content` the first time raises an exception I would expect that accessing `response.content` again would also raise an exception (ideally the same). \r\n\r\n## Actual Result\r\n\r\nInstead after raising on the first get, getting `response.content` again returns an empty string.\r\n\r\n## Reproduction Steps\r\n\r\nHere is a patch with a new test case for this: [error_replay_test.diff.gz](https://github.com/requests/requests/files/2838360/error_replay_test.diff.gz).\r\n\r\nBasically, it boils down to this:\r\n\r\n```python\r\nimport requests\r\n\r\nresponse = requests.post(\"http://connreset.biz/get/incomplete/chunked\", stream=True)\r\ntry:\r\n    response.content\r\nexcept Exception:\r\n    # Error handling code, may try something else or fall through\r\n    pass\r\n\r\ncontent = response.content  # empty string\r\n```\r\n\r\nOutput of my test case:\r\n\r\n```\r\n$ pipenv run py.test tests/test_lowlevel.py -q --tb=short -k retain\r\nF                                                            [100%]\r\n============================= FAILURES =============================\r\n_______________ test_response_content_retains_error ________________\r\ntests/test_lowlevel.py:343: in test_response_content_retains_error\r\n    assert False, \"error response has content: {0!r}\".format(content)\r\nE   AssertionError: error response has content: ''\r\nE   assert False\r\n1 failed, 15 deselected in 0.60 seconds\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n*Edit*: Oops, I used `pipenv run python -m requests.help` which actually called into system python 2.7. Here comes the real data:\r\n\r\n```\r\n$ pipenv run python3 -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.8+\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-43-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThanks for looking into this!\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "tlandschoff-scale",
                "id": 17047541,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4965/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/587939384",
                    "id": 587939384,
                    "created_at": "2020-02-18T22:37:17Z",
                    "updated_at": "2020-02-18T22:37:17Z",
                    "author_association": "MEMBER",
                    "body": "It looks like we never closed the issue after the PR was merged. I'm reverting #5087 because it doesn't cover all of our read APIs (`content`, `iter_content`, `iter_lines`, `text`, `__iter__`) uniformly.\r\n\r\nI took a quick pass but the edge cases the tests are missing aren't something I can get resolved today. We can reopen a new PR and revisit options later if anyone wants.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/587939384/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005732608260586858,
                        "severe_toxicity": 0.00012877568951807916,
                        "obscene": 0.00019218865782022476,
                        "threat": 0.0001266284380108118,
                        "insult": 0.00017968569591175765,
                        "identity_attack": 0.00014324251969810575
                    }
                }
            ]
        },
        "202": {
            "html_url": "https://github.com/psf/requests/issues/4951",
            "id": 404226225,
            "number": 4951,
            "title": "Allow redirects not configurable in sessions",
            "created_at": "2019-01-29T10:39:05Z",
            "updated_at": "2019-01-29T10:39:05Z",
            "closed_at": null,
            "body": "I have an application I need to reach behind a firewall, I've set up a tunnel to this application via SSH running on my machine which forwards all connections from `127.0.0.1:1234` to `192.168.1.10:80`. Whenever I make a request to my application, it redirects me to a login page first.\r\n\r\nThe issue with this is that all redirect URL's have the `192.168.1.10` hostname, which requests tries to follow and inevitably crashes (as this host does not exist on *my* network). \r\n\r\nI tried to set `allow_redirects` to `False` on my session by overriding the `request` method, but the session source hard-codes the `allow_redirects` option to `True` if it isn't explicitly set when calling `get`, `head` and `options` ([source](https://github.com/requests/requests/blob/master/requests/sessions.py#L545))\r\n\r\n## Expected Result\r\nI expected no redirect to be followed, but rather that that the request ends after the first response. I expected the `allow_redirects` option to be configurable in sessions like the `verify` flag is ([source](https://github.com/requests/requests/blob/master/requests/sessions.py#L625))\r\n\r\n## Actual Result\r\nThe 302 was resolved, and attempted to redirect me to a nonexistent host, leading to a connection error exception.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\n\r\nclass Example(requests.Session):\r\n    def __init__(self, allow_redirects=False, *args, **kwargs):\r\n        super(Example, self).__init__(*args, **kwargs)\r\n        self.allow_redirects = allow_redirects\r\n\r\n    def request(self, *args, **kwargs):\r\n        kwargs.setdefault('allow_redirects', self.allow_redirects)\r\n        return super(Example, self).request(*args, **kwargs)\r\n\r\n\r\nsess = Example()\r\nsess.get('http://127.0.0.1:1234')  # ConnectionError ... 192.168.1.10 connection refused (redirected)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020af\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Paradoxis",
                "id": 6770124,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4951/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "203": {
            "html_url": "https://github.com/psf/requests/issues/4939",
            "id": 399365119,
            "number": 4939,
            "title": "Determining the IP address of server with bad TLS cert.",
            "created_at": "2019-01-15T14:17:58Z",
            "updated_at": "2019-01-15T18:00:44Z",
            "closed_at": null,
            "body": "Preliminary notes:\r\n* Thanks for `requests`!\r\n* I investigated quite a bit and couldn't find an obvious solution to the issue. Where I looked: documentation, stack overflow, general web search.\r\n\r\nScenario:\r\n* HTTPS service available via a DNS name mapped to multiple IP addresses.\r\n* Each such address is handled by a different server.\r\n* Some of those servers configured with a bad/wrong TLS certificate.\r\n\r\nThe issue:\r\n* Requests like `requests.get('https://multiple.example.net/')` will sometimes succeed TLS validation and other times fail. How to determine the IP address of the server with the bad TLS certificate?\r\n\r\nWhy?\r\n* I would like to be able to tell the service provider that their server at IP address \"so and so\" is presenting a wrong certificate.\r\n\r\nThe \"give me an IP address\" solutions I found all assume the HTTP connection has been established and are mostly based in the idea of using streaming mode to get to the underlying socket, calling `getpeername()` from there.\r\n\r\nThose do not work in this scenario given that an `requests.exceptions.SSLError` exception is properly raised and there's no response object to work with from that point on. Unless the exception holds a reference to the socket, but I couldn't find it there.\r\n\r\nQuestions:\r\n* Other than monkey-patching approaches, is there any solution for this challenge I may be missing?\r\n* If not, should/could `requests.exceptions.SSLError` include a reference to the socket that lead to the failure, pretty much like all other requests exceptions include a reference to the request and response objects?\r\n\r\nThanks in advance.",
            "author_association": "NONE",
            "comments": 8,
            "state": "open",
            "user": {
                "login": "tmontes",
                "id": 1912206,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4939/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454413425",
                    "id": 454413425,
                    "created_at": "2019-01-15T14:36:40Z",
                    "updated_at": "2019-01-15T14:36:40Z",
                    "author_association": "NONE",
                    "body": "I wrote a thing to handle this, sort of: https://github.com/lifehackjim/cert_human/\r\n\r\nYou can get a cert from a server (regardless of it's validity), then perform whatever validation, reporting, or what-have you on it. Ex:\r\n\r\n```\r\n>>> import cert_human\r\n>>> store = cert_human.CertStore.from_request(\"https://cyborg\")\r\n>>> print(store.subject)\r\n{'common_name': 'cyborg'}\r\n>>> print(store)\r\nCertStore:\r\n    Issuer: Common Name: cyborg\r\n    Subject: Common Name: cyborg\r\n    Subject Alternate Names: cyborg\r\n    Fingerprint SHA1: 67 FD F1 7A 02 26 C7 AB 77 AD CD CB 63 76 19 AD 83 0C BF B7\r\n    Fingerprint SHA256: FA BF 9D EC CF 6C 3F 8A 08 89 29 04 5E 9E B5 A8 28 A9 F7 A8 E8 38 14 7F 32 CE 78 DC 26 B0 84 EA\r\n    Expired: False, Not Valid Before: 2008-11-15 06:32:10+00:00, Not Valid After: 2028-11-15 02:56:10+00:00\r\n    Self Signed: maybe, Self Issued: True\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454413425/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lifehackjim",
                        "id": 7453963,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001307508791796863,
                        "severe_toxicity": 0.00010281033610226586,
                        "obscene": 0.00024275374016724527,
                        "threat": 0.00010610611934680492,
                        "insult": 0.000192901527043432,
                        "identity_attack": 0.0001379243767587468
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454415925",
                    "id": 454415925,
                    "created_at": "2019-01-15T14:44:04Z",
                    "updated_at": "2019-01-15T14:46:39Z",
                    "author_association": "NONE",
                    "body": "Thanks for your input.\r\n\r\nThat doesn't seem to respond to the question \"what's the IP address of the server that just failed my TLS certificate validation\": the important part here is the **that just failed** (and, thus, resulted in a `requests.exceptions.SSLError` exception).\r\n\r\nIf, facing such failure, the code issues a subsequent request -- be it with `requests` or with your `cert_human` -- there's no guarantee that it will hit the same destination IP address.\r\n\r\nPS: I do not want to validate TLS certificates in my code. I'd rather delegate that to `requests` default behaviour. :)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454415925/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tmontes",
                        "id": 1912206,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006265061092562973,
                        "severe_toxicity": 0.00011987431935267523,
                        "obscene": 0.0001891109423013404,
                        "threat": 0.00011973014625255018,
                        "insult": 0.0001722137094475329,
                        "identity_attack": 0.00013747545017395169
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454419116",
                    "id": 454419116,
                    "created_at": "2019-01-15T14:52:47Z",
                    "updated_at": "2019-01-15T14:52:47Z",
                    "author_association": "NONE",
                    "body": "You can do that, by having cert_human always include the cert attributes in the raw object of each response, but you'd have to make two requests per connection. One with verify=False first (either by using cert_human.get_response(), or by using requests.get(verify=False), then your actual connection. Ex:\r\n\r\n```\r\n>>> import requests\r\n>>> import cert_human\r\n>>> cert_human.enable_urllib3_patch()\r\n>>> url = \"https://cyborg\"\r\n>>>\r\n>>> cert_response = requests.get(url, verify=False)\r\n/Users/jim.olsen/.pyenv/versions/3.7.1/lib/python3.7/site-packages/urllib3/connectionpool.py:847: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\r\n  InsecureRequestWarning)\r\n>>> store = cert_human.CertStore.from_response(cert_response)\r\n>>>\r\n>>> try:\r\n...     r = requests.get(\"https://cyborg\")\r\n... except requests.exceptions.SSLError as exc:\r\n...     m = \"SSL Certificate at url: {url!r} failed, info: {store}\"\r\n...     print(m.format(url=url, store=store))\r\n...\r\nSSL Certificate at url: 'https://cyborg' failed, info: CertStore:\r\n    Issuer: Common Name: cyborg\r\n    Subject: Common Name: cyborg\r\n    Subject Alternate Names: cyborg\r\n    Fingerprint SHA1: 67 FD F1 7A 02 26 C7 AB 77 AD CD CB 63 76 19 AD 83 0C BF B7\r\n    Fingerprint SHA256: FA BF 9D EC CF 6C 3F 8A 08 89 29 04 5E 9E B5 A8 28 A9 F7 A8 E8 38 14 7F 32 CE 78 DC 26 B0 84 EA\r\n    Expired: False, Not Valid Before: 2008-11-15 06:32:10+00:00, Not Valid After: 2028-11-15 02:56:10+00:00\r\n    Self Signed: maybe, Self Issued: True\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454419116/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lifehackjim",
                        "id": 7453963,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011072682682424784,
                        "severe_toxicity": 0.00010507708066143095,
                        "obscene": 0.00022547201660927385,
                        "threat": 0.00011015751078957692,
                        "insult": 0.0001837010058807209,
                        "identity_attack": 0.00013587920693680644
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454429289",
                    "id": 454429289,
                    "created_at": "2019-01-15T15:19:14Z",
                    "updated_at": "2019-01-15T15:19:14Z",
                    "author_association": "NONE",
                    "body": "Thanks again Jim, for your prompt feedback.\r\n\r\nAFAICT, your code does not address the issue at all. Let me try to restate it:\r\n* DNS name maps to multiple IP addresses.\r\n* Would like to know the IP address of HTTP server presenting a non-valid TLS certificate.\r\n* Repeating requests is pointless: no guarantee that same IP / server will be hit.\r\n* Knowing the IP is useful in helping me let the provider know that their server at IP \"so and so\" presented a non-valid TLS certificate.\r\n\r\nMinimal code example with a \"fill in the blanks\" approach:\r\n\r\n```python\r\nimport requests\r\n\r\ntry:\r\n    # TCP connection to one of multiple IPs that DNS resolves `multiple.example.net` to.\r\n    resp = requests.get('https://multiple.example.net')\r\nexcept requests.exceptions.SSLError:\r\n    # TLS certificate validation failed.\r\n    ip_address = ???    # Which IP address gave us a non-valid TLS certificate?\r\n```\r\n\r\nPS: Not sure if the underlying connection pooling and eventual retrying that may be taking place (?) turns this into a more complex problem that what it may appear to be at first sight.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454429289/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tmontes",
                        "id": 1912206,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009551738621667027,
                        "severe_toxicity": 0.00010481649223947898,
                        "obscene": 0.00021396404190454632,
                        "threat": 0.00010733052477007732,
                        "insult": 0.00017545507580507547,
                        "identity_attack": 0.00013406913785729557
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454439852",
                    "id": 454439852,
                    "created_at": "2019-01-15T15:46:17Z",
                    "updated_at": "2019-01-15T15:46:17Z",
                    "author_association": "NONE",
                    "body": "Ah I understand now.. I didn't catch the part that you were making a request to a DNS name with multiple A records. Apologies.\r\n\r\nI don't know that any layer exposes the actual IP address that the socket is connected to (or it's just buried too deep for my quick search). But if you can find that layer, it looks like you'd have to monkey patch and bubble it up (similar to what I do with cert_human).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454439852/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lifehackjim",
                        "id": 7453963,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000994787784293294,
                        "severe_toxicity": 9.986267832573503e-05,
                        "obscene": 0.0001847364765126258,
                        "threat": 0.00010525679681450129,
                        "insult": 0.0001852190325735137,
                        "identity_attack": 0.00013574984041042626
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454460195",
                    "id": 454460195,
                    "created_at": "2019-01-15T16:39:17Z",
                    "updated_at": "2019-01-15T16:39:17Z",
                    "author_association": "MEMBER",
                    "body": "Could you patch [`urllib3.util.connection.create_connection()`](https://github.com/urllib3/urllib3/blob/master/src/urllib3/util/connection.py#L57) to print out / save the DNS records that `socket.getaddrinfo()` receives somewhere you can access? A little hacky but this is where you'd directly get DNS-to-IP information.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454460195/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010283088777214289,
                        "severe_toxicity": 0.0001007047831080854,
                        "obscene": 0.00020302740449551493,
                        "threat": 0.00010329165525035933,
                        "insult": 0.00018227133841719478,
                        "identity_attack": 0.00013244195724837482
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454469171",
                    "id": 454469171,
                    "created_at": "2019-01-15T17:02:24Z",
                    "updated_at": "2019-01-15T17:06:21Z",
                    "author_association": "NONE",
                    "body": "I decided to play around with this, because curiosity always gets the best of me.\r\n\r\n```python\r\nimport requests\r\nimport urllib3\r\nimport ssl\r\n\r\n_ssl_wrap_socket = urllib3.connection.ssl_wrap_socket\r\n\r\n\r\ndef ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\r\n                    ca_certs=None, server_hostname=None,\r\n                    ssl_version=None, ciphers=None, ssl_context=None,\r\n                    ca_cert_dir=None):\r\n    \"\"\"Pass.\"\"\"\r\n    try:\r\n        return _ssl_wrap_socket(\r\n            sock=sock,\r\n            keyfile=keyfile,\r\n            certfile=certfile,\r\n            cert_reqs=cert_reqs,\r\n            ca_certs=ca_certs,\r\n            server_hostname=server_hostname,\r\n            ssl_version=ssl_version,\r\n            ciphers=ciphers,\r\n            ssl_context=ssl_context,\r\n            ca_cert_dir=ca_cert_dir,\r\n        )\r\n    except ssl.SSLError as e:\r\n        e.laddr = sock.getsockname()\r\n        e.raddr = sock.getpeername()\r\n        raise\r\n\r\n\r\nurllib3.connection.ssl_wrap_socket = ssl_wrap_socket\r\n\r\nurl = \"https://cyborg\"\r\n\r\ntry:\r\n    r = requests.get(url)\r\nexcept requests.exceptions.SSLError as exc:\r\n    print(\"Invalid cert at {!r}\".format(url))\r\n    print(\"Local ip {} port {}\".format(*exc.args[0].reason.args[0].laddr))\r\n    print(\"Remote ip {} port {}\".format(*exc.args[0].reason.args[0].raddr))\r\n```\r\n\r\nThis outputs:\r\n```console\r\npython moo.py\r\nInvalid cert at 'https://cyborg'\r\nLocal ip 192.168.1.174 port 53151\r\nRemote ip 192.168.1.32 port 443\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454469171/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lifehackjim",
                        "id": 7453963,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001962545793503523,
                        "severe_toxicity": 0.00010255291999783367,
                        "obscene": 0.00029668572824448347,
                        "threat": 0.00011157368862768635,
                        "insult": 0.00021078654390294105,
                        "identity_attack": 0.00014517032832372934
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454489772",
                    "id": 454489772,
                    "created_at": "2019-01-15T18:00:43Z",
                    "updated_at": "2019-01-15T18:00:43Z",
                    "author_association": "NONE",
                    "body": "Seth, Jim,\r\n\r\nThanks for your ideas. They both follow monkey-patching approaches which I am explicitly trying to avoid: who's to say that, in the future, a given patch will work against a future `requests` / `urllib3` version?\r\n\r\nI myself had created a monkey-patch based solution, patching `socket.socket.connect`:\r\n\r\n```python\r\nimport socket\r\nimport requests\r\n\r\n_socket_connect_method = socket.socket.connect\r\n\r\ndef _socket_connect_tracker(self, address):\r\n    _socket_connect_tracker.address = address\r\n    return _socket_connect_method(self, address)\r\n\r\nsocket.socket.connect = _socket_connect_tracker\r\n\r\ntry:\r\n    resp = requests.get('https://multiple.example.net')\r\nexcept requests.exceptions.SSLError:\r\n    print('TLS validation failed for', _socket_connect_tracker.address)\r\n```\r\n\r\nPros:\r\n* Works.\r\n* Simple enough.\r\n* Patching a very stable API, `socket.connect`, likely to work for the foreseeable future.\r\n\r\nCons:\r\n* Monkey patching.\r\n* Due to fail under multi-threaded and other client side concurrency scenarios.\r\n\r\nWhat I was wondering and asking about in this issue was:\r\n* Is there a solution for this use-case that does not depend on monkey-patching?\r\n* If not, couldn't `requests.exceptions.SSLError` include a reference to the socket that failed TLS validation? (pretty much like all other `requests` exceptions include references to the request and response objects) I see that as valuable and legitimate use case, and a perfectly reasonable API.\r\n* If so, would the `requests` and `urllib3` maintainers accept PRs that would cater for that?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454489772/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tmontes",
                        "id": 1912206,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001177163445390761,
                        "severe_toxicity": 0.00010127546556759626,
                        "obscene": 0.00021923688473179936,
                        "threat": 0.00010515475878491998,
                        "insult": 0.00018342184193897992,
                        "identity_attack": 0.00014181347796693444
                    }
                }
            ]
        },
        "204": {
            "html_url": "https://github.com/psf/requests/issues/4934",
            "id": 398171423,
            "number": 4934,
            "title": "request memory leak with no session ",
            "created_at": "2019-01-11T07:55:51Z",
            "updated_at": "2019-01-11T16:57:32Z",
            "closed_at": null,
            "body": "I  use requests lib to monitor  live room\u3002In the start, i use request.get()  and set  connection headers closed, it occured memory leak,  the memory  would increase 10M per 15~20 minutes and dont down. \r\n\r\nBecause of live room,  it will created 2000w requests per day. i think maybe there exists some requests dont close,  but i set the connection header closed. Why is it still existed  produced?\r\n\r\nIn the last, i use request.Session() and keep-alive connection header to solve the problem.   i want to know why   request.get  is bad but session is normal.   \r\n\r\nThere is my code demo\r\n\r\n``` python\r\nwhile  true:\r\n        headers = {'Connection': 'closed'}\r\n        requests.get(url, headers=headers):\r\n        # when the live room is closed\r\n        if close:\r\n            break\r\n```\r\n\r\n``` python\r\nsession  =requests.Session()\r\nwhile  true:\r\n        headers = {'Connection': 'keep-alive'}\r\n        session.get(url, headers=headers):\r\n        # when the live room is closed\r\n        if close:\r\n           session.close()\r\n            break\r\n```",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "Flyraty",
                "id": 24888835,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4934/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/453567739",
                    "id": 453567739,
                    "created_at": "2019-01-11T16:08:48Z",
                    "updated_at": "2019-01-11T16:08:48Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Please provide us with the output of\r\n\r\n```\r\npython -m requests.help\r\n```\r\n\r\nIf that is unavailable on your version of Requests please provide some basic information about your system (Python version, operating system, etc).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/453567739/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005238523008301854,
                        "severe_toxicity": 0.0001352685212623328,
                        "obscene": 0.00018950462981592864,
                        "threat": 0.00013500718341674656,
                        "insult": 0.00017662433674558997,
                        "identity_attack": 0.0001441369386157021
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/453584416",
                    "id": 453584416,
                    "created_at": "2019-01-11T16:57:32Z",
                    "updated_at": "2019-01-11T16:57:32Z",
                    "author_association": "NONE",
                    "body": "> Please provide us with the output of\r\n> \r\n> ```\r\n> python -m requests.help\r\n> ```\r\n> If that is unavailable on your version of Requests please provide some basic information about your system (Python version, operating system, etc).\r\n\r\nThis is my request info\u3002I  use python3.6.2,  mac os 10.14.2 \r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.2.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010008f\",\r\n    \"version\": \"18.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/453584416/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Flyraty",
                        "id": 24888835,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006328488234430552,
                        "severe_toxicity": 0.00012434601376298815,
                        "obscene": 0.00020042392134200782,
                        "threat": 0.0001177515514427796,
                        "insult": 0.00017523020505905151,
                        "identity_attack": 0.00014133572403807193
                    }
                }
            ]
        },
        "205": {
            "html_url": "https://github.com/psf/requests/issues/4926",
            "id": 395415751,
            "number": 4926,
            "title": "requests can't properly handle redirects if the response body is encoded in something else than 'utf8'",
            "created_at": "2019-01-02T23:37:23Z",
            "updated_at": "2023-03-03T15:21:44Z",
            "closed_at": null,
            "body": "Just like in the topic. The response body is encoded in iso-8859-2 and the location happens to contain non-ascii character so that it results in UnicodeDecodeError being thrown.\r\n\r\n## Expected Result\r\n\r\nFlawless execution of the code.\r\n\r\n## Actual Result\r\n\r\nUnicodeDecodeError\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nrequests.get(\"http://www.biblia.deon.pl/ksiega.php?id=3\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  }, \r\n  \"cryptography\": {\r\n    \"version\": \"2.3\"\r\n  }, \r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  }, \r\n  \"implementation\": {\r\n    \"name\": \"CPython\", \r\n    \"version\": \"2.7.15+\"\r\n  }, \r\n  \"platform\": {\r\n    \"release\": \"4.18.0-13-generic\", \r\n    \"system\": \"Linux\"\r\n  }, \r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010100f\", \r\n    \"version\": \"18.0.0\"\r\n  }, \r\n  \"requests\": {\r\n    \"version\": \"2.19.0\"\r\n  }, \r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  }, \r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  }, \r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 17,
            "state": "open",
            "user": {
                "login": "lukasz-kapica",
                "id": 4257505,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4926/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/451020024",
                    "id": 451020024,
                    "created_at": "2019-01-02T23:44:38Z",
                    "updated_at": "2019-01-02T23:44:38Z",
                    "author_association": "MEMBER",
                    "body": "Hi @loocash, would you mind providing the stacktrace so we can see where exactly this is failing?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/451020024/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.02377927675843239,
                        "severe_toxicity": 0.0001084248287952505,
                        "obscene": 0.0008457521325908601,
                        "threat": 0.0001494554162491113,
                        "insult": 0.001358388108201325,
                        "identity_attack": 0.00037615527980960906
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/451020945",
                    "id": 451020945,
                    "created_at": "2019-01-02T23:50:05Z",
                    "updated_at": "2019-01-02T23:50:05Z",
                    "author_association": "NONE",
                    "body": "```\r\nTraceback\r\n (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3/dist-packages/requests/api.py\", line 72, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/requests/api.py\", line 58, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/requests/sessions.py\", line 520, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/lib/python3/dist-packages/requests/sessions.py\", line 652, in send\r\n    history = [resp for resp in gen] if allow_redirects else []\r\n  File \"/usr/lib/python3/dist-packages/requests/sessions.py\", line 652, in <listcomp>\r\n    history = [resp for resp in gen] if allow_redirects else []\r\n  File \"/usr/lib/python3/dist-packages/requests/sessions.py\", line 141, in resolve_redirects\r\n    url = self.get_redirect_target(resp)\r\n  File \"/usr/lib/python3/dist-packages/requests/sessions.py\", line 116, in get_redirect_target\r\n    return to_native_string(location, 'utf8')\r\n  File \"/usr/lib/python3/dist-packages/requests/_internal_utils.py\", line 25, in to_native_string\r\n    out = string.decode(encoding)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xb3 in position 19: invalid start byte\r\n\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/451020945/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lukasz-kapica",
                        "id": 4257505,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007568554137833416,
                        "severe_toxicity": 0.00011262445332249627,
                        "obscene": 0.0002011452743317932,
                        "threat": 0.00011161358997924253,
                        "insult": 0.00017593234952073544,
                        "identity_attack": 0.00013478659093379974
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/452323368",
                    "id": 452323368,
                    "created_at": "2019-01-08T14:45:45Z",
                    "updated_at": "2019-01-08T14:45:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The encoding of the response body is irrelevant here. The location header should be strictly ascii encoded. (See eg. https://stackoverflow.com/questions/7654207/what-charset-should-be-used-for-a-location-header-in-a-301-response.)\r\n\r\nRequests will (reasonably enough) decode it as utf8, since it is ascii compatible, and ends up being more robust in practice.\r\n\r\nIn short: The `http://www.biblia.deon.pl/ksiega.php?id=3` address is serving an invalid HTTP response.\r\n\r\n```shell\r\n$ curl -v http://www.biblia.deon.pl/ksiega.php?id=3\r\n*   Trying 104.25.144.117...\r\n* TCP_NODELAY set\r\n* Connected to www.biblia.deon.pl (104.25.144.117) port 80 (#0)\r\n> GET /ksiega.php?id=3 HTTP/1.1\r\n> Host: www.biblia.deon.pl\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n> \r\n< HTTP/1.1 301 Moved Permanently\r\n< Date: Tue, 08 Jan 2019 14:25:32 GMT\r\n< Content-Type: text/html\r\n< Transfer-Encoding: chunked\r\n< Connection: keep-alive\r\n< Set-Cookie: __cfduid=d73c8f399ac453a2e4fe967faaa1251c81546957532; expires=Wed, 08-Jan-20 14:25:32 GMT; path=/; domain=.deon.pl; HttpOnly\r\n< Location: otworz.php?skrot=Kp? 1\r\n< J-Cache: HIT\r\n< Server: cloudflare\r\n< CF-RAY: 495f558234763572-LHR\r\n```\r\n\r\n(As an aside it also doesn't include 'iso-8859-2' in the content-type, so there's really no way to determine what the intended content type of the byte sequence might be)\r\n\r\nRequests *could* decode the header with `errors=\"ignore\"` or something like that, in order to be more robust against malformed headers, but it'd just be masking the issue that the response header is malformed.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/452323368/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tomchristie",
                        "id": 647359,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012464082101359963,
                        "severe_toxicity": 0.0001049449056154117,
                        "obscene": 0.00022552361770067364,
                        "threat": 0.00011172347876708955,
                        "insult": 0.0001893825246952474,
                        "identity_attack": 0.00014772771100979298
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/452403366",
                    "id": 452403366,
                    "created_at": "2019-01-08T18:31:02Z",
                    "updated_at": "2019-01-08T18:31:02Z",
                    "author_association": "NONE",
                    "body": "@tomchristie Thank you for answer. Technically speaking it might not be a bug but I will still maintain that this is an expected behaviour from the library which advertises itself as \"HTTP for Humans\".\r\n\r\nFollowing Python3 code works as expected\r\n\r\n```\r\nimport urllib.request\r\ncontents = urllib.request.urlopen(\"http://www.biblia.deon.pl/ksiega.php?id=3\").read()\r\nprint(contents)\r\n```\r\n\r\nFollowing Go code works as expected\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"io/ioutil\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n)\r\n\r\nfunc main() {\r\n\tresp, err := http.Get(\"http://www.biblia.deon.pl/ksiega.php?id=3\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\tbody, err := ioutil.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tfmt.Printf(\"%s\", body)\r\n}\r\n```\r\n\r\nBoth of them use only standard library.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/452403366/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lukasz-kapica",
                        "id": 4257505,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008311285055242479,
                        "severe_toxicity": 0.00010965758701786399,
                        "obscene": 0.00020149849297013134,
                        "threat": 0.00011238199658691883,
                        "insult": 0.00017096746887546033,
                        "identity_attack": 0.00013109028805047274
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/452482516",
                    "id": 452482516,
                    "created_at": "2019-01-08T22:58:30Z",
                    "updated_at": "2019-01-08T22:58:30Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So dig into urllib. How does it interpret that byte sequence (where does it redirect to exactly?).\r\nDoes it just ignore malformed bytes in the location header, or does it do something else?\r\n\r\nOne resolution here could be to add an errors=... keyword argument to the to_native_string function, and use \u201cignore\u201d in the get_redirect_target case. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/452482516/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tomchristie",
                        "id": 647359,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011638503056019545,
                        "severe_toxicity": 9.872534428723156e-05,
                        "obscene": 0.00019815284758806229,
                        "threat": 0.00010476452735019848,
                        "insult": 0.00018476677360013127,
                        "identity_attack": 0.00013928607222624123
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/452484093",
                    "id": 452484093,
                    "created_at": "2019-01-08T23:04:34Z",
                    "updated_at": "2019-01-08T23:04:34Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I\u2019d retitle the issue as \u201cDeal with malformed Location header gracefully\u201d.\r\n\r\nErroring is a perfectly legitimate behaviour here, but ignoring the invalid bits of byte sequences *might* (or might not) be preferable.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/452484093/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tomchristie",
                        "id": 647359,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009720997186377645,
                        "severe_toxicity": 0.00010243240831186995,
                        "obscene": 0.00018066493794322014,
                        "threat": 0.00011537765385583043,
                        "insult": 0.00018771686882246286,
                        "identity_attack": 0.0001405224611517042
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/452655022",
                    "id": 452655022,
                    "created_at": "2019-01-09T10:52:51Z",
                    "updated_at": "2019-01-09T10:52:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Refs #4372",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/452655022/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tomchristie",
                        "id": 647359,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000895430042874068,
                        "severe_toxicity": 0.00010444752842886373,
                        "obscene": 0.00020064361160621047,
                        "threat": 9.911152301356196e-05,
                        "insult": 0.00018056661065202206,
                        "identity_attack": 0.00013391645916271955
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/462797628",
                    "id": 462797628,
                    "created_at": "2019-02-12T15:13:14Z",
                    "updated_at": "2019-02-12T15:32:27Z",
                    "author_association": "NONE",
                    "body": "I am running into the same issue and in my case the charset (latin-1) is returned in the Content-Type header. Yet I still get the same error.\r\n\r\nI tried the fix from #4933 and that worked for me.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/462797628/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "RobReus",
                        "id": 20680059,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006361269042827189,
                        "severe_toxicity": 0.00011866592831211165,
                        "obscene": 0.00018371694022789598,
                        "threat": 0.00011868177534779534,
                        "insult": 0.0001742363820085302,
                        "identity_attack": 0.00013736930850427598
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/464828607",
                    "id": 464828607,
                    "created_at": "2019-02-18T17:57:57Z",
                    "updated_at": "2019-02-18T17:57:57Z",
                    "author_association": "NONE",
                    "body": "Encountered the same issue and can confirm that #4933 worked for me also.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/464828607/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "putsi",
                        "id": 5388424,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005940273986198008,
                        "severe_toxicity": 0.00012496374256443232,
                        "obscene": 0.0001929498976096511,
                        "threat": 0.00012238854833412915,
                        "insult": 0.0001760515006026253,
                        "identity_attack": 0.00013933189620729536
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/526141184",
                    "id": 526141184,
                    "created_at": "2019-08-29T11:17:08Z",
                    "updated_at": "2019-08-29T11:17:08Z",
                    "author_association": "NONE",
                    "body": "So, any chance of getting this merged? I'm dealing with websites with international characters and this \"feature\" is surfacing from time to time interrupting the flow. Browsers deal with malformed location just fine.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/526141184/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "StarLightPL",
                        "id": 4326164,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006432348745875061,
                        "severe_toxicity": 0.00012141689512645826,
                        "obscene": 0.0001719785650493577,
                        "threat": 0.0001326904894085601,
                        "insult": 0.0001808605738915503,
                        "identity_attack": 0.00014300915063358843
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/575960168",
                    "id": 575960168,
                    "created_at": "2020-01-19T02:43:57Z",
                    "updated_at": "2020-01-19T02:43:57Z",
                    "author_association": "NONE",
                    "body": "I have also recently run into this issue and would like to see #4933 merged.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/575960168/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "cryzed",
                        "id": 1429103,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006002496811561286,
                        "severe_toxicity": 0.00012472363596316427,
                        "obscene": 0.0001776768476702273,
                        "threat": 0.00013403961202129722,
                        "insult": 0.00017419335199519992,
                        "identity_attack": 0.00014330291014630347
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/581898230",
                    "id": 581898230,
                    "created_at": "2020-02-04T12:58:59Z",
                    "updated_at": "2020-02-04T13:21:50Z",
                    "author_association": "NONE",
                    "body": "Hi, I also faced the same issue, with website having a redirect location having special characters.\r\nAny plan to merge #4933? This will solve my issue.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/581898230/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "k0urge",
                        "id": 27643232,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006365390145219862,
                        "severe_toxicity": 0.0001187030429719016,
                        "obscene": 0.00017989140178542584,
                        "threat": 0.00011959265248151496,
                        "insult": 0.000179562033736147,
                        "identity_attack": 0.0001390644465573132
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/581904274",
                    "id": 581904274,
                    "created_at": "2020-02-04T13:15:30Z",
                    "updated_at": "2020-02-04T13:15:39Z",
                    "author_association": "NONE",
                    "body": "> Any plan to merge #4999?\r\n\r\nI think you meant #4933 :-)\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/581904274/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "StarLightPL",
                        "id": 4326164,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008001773967407644,
                        "severe_toxicity": 0.00010806708451127633,
                        "obscene": 0.00017641783051658422,
                        "threat": 0.00012251290900167078,
                        "insult": 0.00018057039414998144,
                        "identity_attack": 0.00013660607510246336
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/581907262",
                    "id": 581907262,
                    "created_at": "2020-02-04T13:23:08Z",
                    "updated_at": "2020-02-04T13:23:08Z",
                    "author_association": "NONE",
                    "body": "> > Any plan to merge #4999?\r\n> \r\n> I think you meant #4933 :-)\r\n\r\nThanks @StarLightPL. I just corrected my typo...\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/581907262/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "k0urge",
                        "id": 27643232,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006630714051425457,
                        "severe_toxicity": 0.00011610165529418737,
                        "obscene": 0.00017893256153911352,
                        "threat": 0.0001200646729557775,
                        "insult": 0.0001774635020410642,
                        "identity_attack": 0.00013609368761535734
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/622661214",
                    "id": 622661214,
                    "created_at": "2020-05-02T03:20:22Z",
                    "updated_at": "2020-05-02T03:20:22Z",
                    "author_association": "NONE",
                    "body": "any news on this #4933 ?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/622661214/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Davidriquelme",
                        "id": 12628676,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007406566292047501,
                        "severe_toxicity": 0.00010920742352027446,
                        "obscene": 0.00018217161414213479,
                        "threat": 0.00011017200449714437,
                        "insult": 0.00017718097660690546,
                        "identity_attack": 0.0001346395001746714
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/755077168",
                    "id": 755077168,
                    "created_at": "2021-01-06T04:54:00Z",
                    "updated_at": "2021-01-06T04:54:00Z",
                    "author_association": "NONE",
                    "body": "It is too  dangerous to just re-encode a latin-1 string to utf-8.\r\nWhy a dangerous way to re-encode a string will be \"robust\"?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/755077168/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "blinkspark",
                        "id": 3829294,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007429094985127449,
                        "severe_toxicity": 0.00011187860218342394,
                        "obscene": 0.00016723571752663702,
                        "threat": 0.0001202218554681167,
                        "insult": 0.00018206672393716872,
                        "identity_attack": 0.0001447095419280231
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1453691268",
                    "id": 1453691268,
                    "created_at": "2023-03-03T15:21:43Z",
                    "updated_at": "2023-03-03T15:21:43Z",
                    "author_association": "NONE",
                    "body": "I can confirm that https://github.com/psf/requests/pull/4933 solves the issue in my case. Also bad value on location header for redirect.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1453691268/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "vkruoso",
                        "id": 293572,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006146186497062445,
                        "severe_toxicity": 0.00011951558553846553,
                        "obscene": 0.0001848580432124436,
                        "threat": 0.00011850264854729176,
                        "insult": 0.00017448575817979872,
                        "identity_attack": 0.00013720868446398526
                    }
                }
            ]
        },
        "206": {
            "html_url": "https://github.com/psf/requests/pull/4920",
            "id": 394710773,
            "number": 4920,
            "title": "iter_content() checks for < 1 chunk_size",
            "created_at": "2018-12-28T20:10:50Z",
            "updated_at": "2021-12-29T03:54:39Z",
            "closed_at": null,
            "body": "With requests v2.20.1, supplying a value of 0 for `chunk_size` causes `iter_content()` to hang. This made debugging code that dynamically computes a value for `chunk_size` difficult. These two lines explicitly enforce `chunk_size` being a positive integer.",
            "author_association": "NONE",
            "comments": 8,
            "state": "open",
            "user": {
                "login": "alex-wenzel",
                "id": 32204469,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4920/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/450422468",
                    "id": 450422468,
                    "created_at": "2018-12-28T20:30:32Z",
                    "updated_at": "2018-12-28T20:30:32Z",
                    "author_association": "MEMBER",
                    "body": "Hi @alex-wenzel, thanks for taking a look at this. I believe this is actually a duplicate of #4876. This is a new behaviour introduced with the last release of urllib3 where 0 no longer denotes \"any size\". I believe this is probably a bug since it doesn't make sense to iterate in chunks of 0.\r\n\r\nIn regards to the PR, I don't think we want to handle the issue with an exception. We handle 0 correctly in `iter_slices` and preventing that would further break the API expectations. We'll track next steps in #4876 for now.\r\n\r\n/cc @sethmlarson",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/450422468/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006106499931775033,
                        "severe_toxicity": 0.0001208828398375772,
                        "obscene": 0.0001849899417720735,
                        "threat": 0.00012343988055363297,
                        "insult": 0.0001721925218589604,
                        "identity_attack": 0.00013735922402702272
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/450423210",
                    "id": 450423210,
                    "created_at": "2018-12-28T20:36:36Z",
                    "updated_at": "2018-12-28T20:36:36Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt That makes sense, thanks for the quick review/reply!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/450423210/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "alex-wenzel",
                        "id": 32204469,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006159621989354491,
                        "severe_toxicity": 0.00012042757589370012,
                        "obscene": 0.00018645869567990303,
                        "threat": 0.00011805623944383115,
                        "insult": 0.00017922317783813924,
                        "identity_attack": 0.00013529276475310326
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/450424490",
                    "id": 450424490,
                    "created_at": "2018-12-28T20:46:45Z",
                    "updated_at": "2018-12-28T20:46:45Z",
                    "author_association": "MEMBER",
                    "body": "I'll investigate, thanks for the report. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/450424490/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005284728249534965,
                        "severe_toxicity": 0.00013987382408231497,
                        "obscene": 0.00020575730013661087,
                        "threat": 0.0001342574687441811,
                        "insult": 0.00017978150572162122,
                        "identity_attack": 0.00014495827781502157
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/450433603",
                    "id": 450433603,
                    "created_at": "2018-12-28T21:56:31Z",
                    "updated_at": "2018-12-28T21:59:40Z",
                    "author_association": "MEMBER",
                    "body": "What I'm seeing so far is that urllib3 hasn't (in recent history, tested urllib3 1.18 to 1.24.1) not-blocked indefinitely when using `amt=0` into `HTTPResponse.stream()`. Is this issue different from the one described into #4876 which appears to be about `amt=None`?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/450433603/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007088038837537169,
                        "severe_toxicity": 0.0001125310591305606,
                        "obscene": 0.00018761325918603688,
                        "threat": 0.00011478222586447373,
                        "insult": 0.00017373521404806525,
                        "identity_attack": 0.00013436823792289943
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/450594618",
                    "id": 450594618,
                    "created_at": "2018-12-30T23:41:14Z",
                    "updated_at": "2018-12-30T23:41:14Z",
                    "author_association": "MEMBER",
                    "body": "@sethmlarson after a closer look, it is not. `None` does appear to work correctly with all of the combinations I tried today. It looks like Requests has never supported this actually, at least not since 2.0.\r\n\r\n@alex-wenzel I'm going to reopen this since I agree we can do a better job here. Part of me would be more inclined to treat 0 the same way we treat `None`. That would require special-casing logic for `0`->`None` but the alternative of requiring everyone implement this themselves (`len('')`-> `None`) seems silly. The case of `amt<0` is already handled by the standard library. @sigmavirus24, @sethmlarson, any thoughts on that?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/450594618/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009815136436372995,
                        "severe_toxicity": 0.00010271508654113859,
                        "obscene": 0.0001817902084439993,
                        "threat": 0.00011226578499190509,
                        "insult": 0.0001878223120002076,
                        "identity_attack": 0.000139945448609069
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/450595958",
                    "id": 450595958,
                    "created_at": "2018-12-31T00:07:58Z",
                    "updated_at": "2018-12-31T00:07:58Z",
                    "author_association": "MEMBER",
                    "body": "What do other streaming interfaces typically do with a chunk size of zero? Any examples in the stdlib? I'd be inclined to copy whatever is done there. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/450595958/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sethmlarson",
                        "id": 18519037,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006422866135835648,
                        "severe_toxicity": 0.00011759154585888609,
                        "obscene": 0.00017251793178729713,
                        "threat": 0.00012255753972567618,
                        "insult": 0.0001792136172298342,
                        "identity_attack": 0.00014166331675369292
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/450599387",
                    "id": 450599387,
                    "created_at": "2018-12-31T01:24:26Z",
                    "updated_at": "2018-12-31T01:24:26Z",
                    "author_association": "NONE",
                    "body": "For what it's worth, the code I was debugging includes:\r\n\r\n```python\r\nfile_size = int(r.headers['Content-Length'])\r\nchunk_size = int(file_size / 50)\r\n```\r\n\r\n...so files smaller than 50 bytes would hang forever. I have to imagine this would be one of the most common reasons a user would inadvertently set `chunk_size=0` and in this case I think having it behave like `None` would be reasonable.\r\n\r\nAlso, slightly tangential to this thread, but it looks like my most recent changes failed in AppVeyor with an `ImportError` in Python 3.7 specifically that doesn't look related to my changes.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/450599387/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "alex-wenzel",
                        "id": 32204469,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006188900442793965,
                        "severe_toxicity": 0.00011991443898295984,
                        "obscene": 0.00018318378715775907,
                        "threat": 0.00012185638479422778,
                        "insult": 0.00017170656064990908,
                        "identity_attack": 0.00013786769704893231
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1002384948",
                    "id": 1002384948,
                    "created_at": "2021-12-29T03:54:22Z",
                    "updated_at": "2021-12-29T03:54:22Z",
                    "author_association": "MEMBER",
                    "body": "I took a look at getting this added into 2.27.0 but it has some unfortunate side effects. Non-streamed requests currently succeed at returning data from `iter_content` for non-positive integers. While I agree that's nonsensical, adding this behavior breaks that workflow, which we won't be able to do in a minor release.\r\n\r\nFor the time being, this is an unfortunate behavior which we could definitely document for `iter_content`. We won't be able to merge this PR until it's reworked to maintain current behavior though. Unfortunately, I don't see an immediate way to do that.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1002384948/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005814523319713771,
                        "severe_toxicity": 0.00012721019447781146,
                        "obscene": 0.00019225446158088744,
                        "threat": 0.00012544202036224306,
                        "insult": 0.0001762419706210494,
                        "identity_attack": 0.0001429118128726259
                    }
                }
            ]
        },
        "207": {
            "html_url": "https://github.com/psf/requests/issues/4914",
            "id": 393115557,
            "number": 4914,
            "title": "Proxy error when redirect (Caused by ProxyError('Cannot connect to proxy.', timeout('timed out',)))",
            "created_at": "2018-12-20T16:18:14Z",
            "updated_at": "2018-12-20T16:18:14Z",
            "closed_at": null,
            "body": "Summary.\r\n\r\nWhen accessing a URL using requests, the redirect causes proxy error because the initial web page DOES require the proxy, but the page it redirects to DOES NOT require the proxy. The program succeeds in using the proxy for the first web page, but when redirecting to the next web page it does not recognize the \r\n\r\n## Expected Result\r\n\r\nAfter my program executes 'requests.get(<url>)', the program should reach the initial website through the proxy, and then redirect to the new website without going through the proxy, and then print the HTTP status code. In short, I expect the program to run and print the HTTP status code (ideally 200).\r\n\r\n## Actual Result\r\n\r\nInstead I get a proxy error when the program tries to access the website it redirects to and the HTTP status code line isn't executed.\r\n\r\nI traced this down using python debugger and my findings were as follows...\r\n\r\nThe proxy and no proxy are set in my environment and these are first set in the program as a dictionary in 'merge_environment_settings', which calls 'get_environ_proxies' which gets the proxy settings from the environment (which is needed at this point so is correct).\r\n\r\nNOTE: If the proxy wasn't needed at this point, it would have produced an empty dictionary for 'proxies' as long as the URL domain matched the 'no_proxy' (thanks to the 'should_bypass_proxies' function).\r\n\r\nAll is fine at this point as the first URL requires the proxy, BUT... \r\n\r\nFurther down the line when the redirect occurs, within the 'resolve_redirects' function, 'rebuild_proxies' is called. This functions creates a 'new_proxies' variable which copies the original environment proxy settings. \r\n\r\nFurther along in this function, the 'bypass_proxy' boolean variable is set from the 'should_bypass_proxies' function, this is correctly set to 'True' as the 'no_proxy' matches the new URL (for the redirect website).\r\n\r\nAt this point, I expect the 'new_proxies' variable to be altered as the bypass proxy has been triggered, but it remains unchanged and the 'rebuild_proxies' function just returns the original proxy settings.\r\n\r\nAnother note: within 'rebuild_proxies', the below statement is skipped due to 'not bypass_proxy' but in the 'get_environ_proxies' function mentioned earlier is the only place I discovered to actually return an empty dictionary for 'proxies' when it detects a no proxy. So by skipping the below code, it is skipping the only function I discovered to actually remove the proxy settings.\r\n\r\n```python\r\nbypass_proxy = should_bypass_proxies(url, no_proxy=no_proxy)\r\nif self.trust_env and not bypass_proxy:\r\n    environ_proxies = get_environ_proxies(url, no_proxy=no_proxy)\r\n\r\n    proxy = environ_proxies.get(scheme, environ_proxies.get('all'))\r\n\r\n    if proxy:\r\n        new_proxies.setdefault(scheme, proxy)\r\n```\r\n\r\nI actually added the following bit of code to the end of 'rebuild_proxies' and it seemed to fix my program, but i think there is an underlying issue worth fixing.\r\n\r\n```python\r\nif bypass_proxy:\r\n       new_proxies = OrderedDict()\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom requests import Session\r\n\r\ndef test():\r\n    session = Session()\r\n    session.verify = '<SSL-cert>'\r\n    r = session.get('<url>', timeout=5)\r\n    print(r.status_code)\r\n\r\nif __name__ == \"__main__\":\r\n    test()\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.4.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-29-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101000af\",\r\n    \"version\": \"18.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010007f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n\r\nThanks for reading and hope it can be fixed!",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "gjones95",
                "id": 17624449,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4914/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "208": {
            "html_url": "https://github.com/psf/requests/issues/4894",
            "id": 388355491,
            "number": 4894,
            "title": "Timeout in session chunked requests lead to subsequent request timeout",
            "created_at": "2018-12-06T19:10:09Z",
            "updated_at": "2019-11-14T16:29:29Z",
            "closed_at": null,
            "body": "\r\n## Expected Result\r\n\r\nRequests in same session don't interfere with one another.\r\n\r\n## Actual Result\r\n\r\nA slow response from a chunked request causes the subsequent request to fail with a timeout even if the server responded before the timeout was reached.\r\n\r\n## Reproduction Steps\r\n\r\nRun a test server that accepts GET and POST requests. When responding to POST requests it waits 10 seconds before responding:\r\n\r\n```python\r\nimport time\r\n\r\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\r\n\r\ntime_sleep = 10\r\n\r\nclass HandlerSlowResponse(BaseHTTPRequestHandler):\r\n    def do_POST(self):\r\n        # Hangs\r\n        time.sleep(time_sleep)\r\n        self.send_response(200)\r\n        self.end_headers()\r\n\r\n    def do_GET(self):\r\n        # OK\r\n        self.send_response(200)\r\n        self.end_headers()\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Time sleep %s\" % time_sleep)\r\n    httpd = HTTPServer(('', 8000), HandlerSlowResponse)\r\n    print('Listening on :8000')\r\n    httpd.serve_forever()\r\n\r\n```\r\n\r\nThen, in another REPL, verify non-session requests don't interfere with one another:\r\n\r\n```python\r\nimport requests\r\nimport time\r\n\r\ntimeout = 2\r\n\r\ndef norm(i):\r\n    print(\"GET (quick response) %s\" % i)\r\n    try:\r\n        requests.get('http://localhost:8000', timeout=timeout, data='hello'.encode('utf-8'))\r\n    except Exception as e:\r\n        print(\"-> EXC Norm %s %s\" % (i, e))\r\n\r\n\r\ndef chunked(i):\r\n    print(\"POST chunked (slow response) %s\" % i)\r\n    # Does not fail if exceeds timeout\r\n    def gen():\r\n        yield 'hello'.encode('utf-8')\r\n\r\n    try:\r\n        requests.post('http://localhost:8000', timeout=timeout, data=gen())\r\n    except Exception as e:\r\n        print(\"-> EXC Chunked %s %s\" % (i, e))\r\n\r\ndef cycle():\r\n    # requests don't interfere with one another\r\n    for i in range(1, 10):\r\n        time.sleep(1)\r\n        if i % 2 == 0:\r\n            norm(i)\r\n        else:\r\n            chunked(i)\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Timeout %s\" % timeout)\r\n    cycle()\r\n```\r\n\r\nOutput:\r\n\r\nNote that chunked requests never time out (ticket https://github.com/requests/requests/issues/4402).\r\n\r\n```\r\nTimeout 2\r\nPOST chunked (slow response) 1\r\nGET (quick response) 2\r\nPOST chunked (slow response) 3\r\nGET (quick response) 4\r\nPOST chunked (slow response) 5\r\nGET (quick response) 6\r\nPOST chunked (slow response) 7\r\nGET (quick response) 8\r\nPOST chunked (slow response) 9\r\n```\r\n\r\nNext, do the same thing but now using a `Session`:\r\n\r\n```python\r\nimport requests\r\nimport time\r\n\r\ntimeout = 2\r\nsession = requests.Session()\r\n\r\ndef norm_session(i):\r\n    print(\"GET norm session (quick response) %s\" % i)\r\n    try:\r\n        session.get('http://localhost:8000', timeout=timeout, data='hello'.encode('utf-8'))\r\n    except Exception as e:\r\n        print(\"-> EXC Norm session %s %s\" % (i, e))\r\n\r\n\r\ndef chunked_session(i):\r\n    print(\"POST chunked session (slow response) %s\" % i)\r\n\r\n    def gen():\r\n        yield 'hello'.encode('utf-8')\r\n\r\n    try:\r\n        session.post('http://localhost:8000', timeout=timeout, data=gen())\r\n    except Exception as e:\r\n        print(\"-> EXC Chunked session %s %s\" % (i, e))\r\n\r\n\r\ndef cycle_session():\r\n    # A normal request always times out after a chunked timeout request\r\n    # even if the server responded in time\r\n    for i in range(1, 10):\r\n        time.sleep(1)\r\n        if i % 2 == 0:\r\n            norm_session(i)\r\n        else:\r\n            chunked_session(i)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Timeout %s\" % timeout)\r\n    cycle_session()\r\n\r\n```\r\n\r\nOutput:\r\n\r\nNote that chunked requests do time out but cause the subsequent GET to fail.\r\n\r\n```\r\nTimeout 2\r\nPOST chunked session (slow response) 1\r\nGET norm session (quick response) 2\r\nPOST chunked session (slow response) 3\r\n-> EXC Chunked session 3 timed out\r\nGET norm session (quick response) 4\r\n-> EXC Norm session 4 HTTPConnectionPool(host='localhost', port=8000): Read timed out. (read timeout=2)\r\nPOST chunked session (slow response) 5\r\nGET norm session (quick response) 6\r\nPOST chunked session (slow response) 7\r\n-> EXC Chunked session 7 timed out\r\nGET norm session (quick response) 8\r\n-> EXC Norm session 8 HTTPConnectionPool(host='localhost', port=8000): Read timed out. (read timeout=2)\r\nPOST chunked session (slow response) 9\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"16.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000210f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "meddulla",
                "id": 47389,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4894/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/553967031",
                    "id": 553967031,
                    "created_at": "2019-11-14T16:29:29Z",
                    "updated_at": "2019-11-14T16:29:29Z",
                    "author_association": "NONE",
                    "body": "It could maybe be fixed by  #5128 (see also https://github.com/psf/requests/issues/4402#issuecomment-415748368) ?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/553967031/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "thomas-riccardi",
                        "id": 1730297,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005842861719429493,
                        "severe_toxicity": 0.0001268941123271361,
                        "obscene": 0.00018450937932357192,
                        "threat": 0.0001297715789405629,
                        "insult": 0.00017894484335556626,
                        "identity_attack": 0.00014210790686775
                    }
                }
            ]
        },
        "209": {
            "html_url": "https://github.com/psf/requests/issues/4871",
            "id": 380254230,
            "number": 4871,
            "title": "respect no_proxy environment variable and proxies['no'] parameter",
            "created_at": "2018-11-13T14:33:10Z",
            "updated_at": "2024-02-23T11:46:37Z",
            "closed_at": null,
            "body": "make requests respect no_proxy settings\r\n\r\nbugfix attached\r\n\r\n## Expected Result\r\n\r\nhttp requests to 'white listed urls' should bypass all proxies\r\n\r\nwhite listed urls, as defined in the no_proxy env var\r\n\r\n## Actual Result\r\n\r\nproxies are not bypassed\r\n\r\nthe sample script will raise\r\n\r\nrequests.exceptions.ConnectionError: SOCKSHTTPConnectionPool ....: Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.contrib.socks.SOCKSConnection object at ....>: Failed to establish a new connection: 0x01: General SOCKS server failure',))\r\n\r\n## Reproduction Steps\r\n\r\nuse case: torify python requests, but also allow requests to localhost etc.\r\n\r\n<details>\r\n\r\n<summary>sample script</summary>\r\n\r\n```python\r\n#!/usr/bin/python2\r\n\r\n# license = public domain\r\n\r\nimport os\r\nimport random\r\nimport time\r\nimport requests\r\nimport BaseHTTPServer\r\nimport thread\r\nimport bs4\r\n\r\ntor_host = '127.0.0.1'\r\n#tor_port = 9050 # system-wide tor\r\ntor_port = 9150 # torbrowser tor\r\n\r\n# do not use tor to connect to local or private hosts\r\n# see https://en.wikipedia.org/wiki/Reserved_IP_addresses\r\nno_proxy_list = [\r\n        # hostnames are not resolved locally with socks5h proxy\r\n        'localhost',\r\n        'localhost.localdomain',\r\n        # IPv4\r\n        '127.0.0.0/8', # localhost\r\n        # subnets\r\n        '169.254.0.0/16',\r\n        '255.255.255.255',\r\n        # LAN aka private networks\r\n        '10.0.0.0/8',\r\n        '100.64.0.0/10',\r\n        '172.16.0.0/12',\r\n        '192.0.0.0/24',\r\n        '192.168.0.0/16',\r\n        '198.18.0.0/15',\r\n        # IPv6\r\n        '::1/128', # localhost\r\n        'fc00::/7', # LAN\r\n        'fe80::/10', # link-local\r\n]\r\n\r\n# variant 1\r\nos.environ['no_proxy'] = ','.join(no_proxy_list)\r\n\r\ndef get_tor_session(tor_host='127.0.0.1', tor_port=9050,\r\n        torbrowser_headers=[], no_proxy_list=[]):\r\n\r\n        session = requests.session()\r\n\r\n        # variant 1\r\n        session.trust_env = True\r\n        #session.trust_env = False # ignore environment variables\r\n\r\n        # socks5h scheme = remote DNS = no DNS leaks\r\n        p = 'socks5h://{0}:{1}'.format(tor_host, tor_port)\r\n        session.proxies = {\r\n                'http' : p,\r\n                'https': p,\r\n\r\n                # variant 2\r\n                'no': ','.join(no_proxy_list)\r\n        }\r\n\r\n        if torbrowser_headers == []:\r\n                print('warning. got no torbrowser_headers')\r\n                # at least imitate torbrowser from year 2018\r\n                torbrowser_headers = [\r\n                        ('accept-language', 'en-US,en;q=0.5'),\r\n                        ('accept', 'text/html,application/xhtml+xml,' \\\r\n                                + 'application/xml;q=0.9,*/*;q=0.8'),\r\n                        ('user-agent', 'Mozilla/5.0 (Windows NT 6.1; rv:60.0) ' \\\r\n                                + 'Gecko/20100101 Firefox/60.0'),\r\n                        ('upgrade-insecure-requests', '1'),\r\n                ]\r\n\r\n        for k, v in torbrowser_headers:\r\n                # header 'host' is dynamic\r\n                # header 'connection' = 'keep-alive' is set internally\r\n                if k not in ['host', 'connection']:\r\n                        session.headers[k] = v\r\n\r\n        return session\r\n\r\n\r\n\r\ntor = get_tor_session(tor_host, tor_port, [], no_proxy_list)\r\n\r\n\r\n\r\ntest_host = '127.0.0.1'\r\ntest_port = random.randint(8000, 16000)\r\ntest_url = 'http://{0}:{1}/'.format(test_host, test_port)\r\n\r\ndef test_tor_get(test_url):\r\n        time.sleep(2) # wait for http server to start\r\n        tor.get(test_url)\r\nthread.start_new_thread(test_tor_get, (test_url,))\r\n\r\ntest_headers = [] # global\r\nclass test_handler(BaseHTTPServer.BaseHTTPRequestHandler):\r\n        def do_GET(self): # handle GET request\r\n                global test_headers\r\n                test_headers = self.headers.items()\r\n                self.send_response(204, 'No Content')\r\n                self.end_headers()\r\n\r\nserv = BaseHTTPServer.HTTPServer((test_host, test_port), test_handler)\r\nserv.handle_request() # handle one request\r\ndel serv\r\n\r\nprint('tor.get headers')\r\nfor k, v in test_headers:\r\n        print('header %s: %s' % (k, v))\r\n\r\n#print('tor ip '+tor.get(\"http://httpbin.org/ip\").text)\r\n\r\nprint('tor check ' + \\\r\nbs4.BeautifulSoup(\r\ntor.get(\"https://check.torproject.org/\").text, 'html.parser'\r\n).title.string.strip())\r\n```\r\n\r\n</details>\r\n\r\n## System Information\r\n\r\n* python2\r\n* current git-version of requests\r\n\r\n## ~~Bugfix~~ Quickfix\r\n\r\nthe bug is in sessions.py\r\n\r\nproxies = merge_setting(proxies, self.proxies)\r\n\r\nwhere [request_]proxies was set to {} by utils.get_environ_proxies *\r\nbut proxies is set to session_proxies\r\n\r\n\\* with os.environ['no_proxy'] = '127.0.0.1'\r\n\r\nthis bugfix will respect both \r\n\r\n* no_proxy environment variable aka os.environ['no_proxy']\r\n* proxies['no'] parameter for requests.get and requests.session\r\n\r\n<details>\r\n<summary>patch</summary>\r\n\r\n```diff\r\n--- a/utils.py\r\n+++ b/utils.py\r\n@@ -757,7 +757,7 @@\r\n     :rtype: dict\r\n     \"\"\"\r\n     if should_bypass_proxies(url, no_proxy=no_proxy):\r\n-        return {}\r\n+        return {'__bypass_proxies': True}\r\n     else:\r\n         return getproxies()\r\n\r\n\r\n--- a/sessions.py\r\n+++ b/sessions.py\r\n@@ -698,8 +698,15 @@\r\n                 verify = (os.environ.get('REQUESTS_CA_BUNDLE') or\r\n                           os.environ.get('CURL_CA_BUNDLE'))\r\n\r\n+        if 'no' in self.proxies:\r\n+            if should_bypass_proxies(url, no_proxy=self.proxies['no']):\r\n+                proxies = {'__bypass_proxies': True}\r\n+\r\n         # Merge all the kwargs.\r\n-        proxies = merge_setting(proxies, self.proxies)\r\n+        if '__bypass_proxies' in proxies:\r\n+            proxies = {} # bypass proxies for this request\r\n+        else:\r\n+            proxies = merge_setting(proxies, self.proxies)\r\n         stream = merge_setting(stream, self.stream)\r\n         verify = merge_setting(verify, self.verify)\r\n         cert = merge_setting(cert, self.cert)\r\n```\r\n\r\n</details>\r\n",
            "author_association": "NONE",
            "comments": 13,
            "state": "open",
            "user": {
                "login": "milahu",
                "id": 12958815,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4871/reactions",
                "total_count": 14,
                "+1": 14,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/442091640",
                    "id": 442091640,
                    "created_at": "2018-11-27T15:06:48Z",
                    "updated_at": "2018-11-27T15:06:48Z",
                    "author_association": "NONE",
                    "body": "no interest in fixing this bug?\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/442091640/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "milahu",
                        "id": 12958815,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012053267564624548,
                        "severe_toxicity": 9.55543146119453e-05,
                        "obscene": 0.0001785954082151875,
                        "threat": 0.0001027497710310854,
                        "insult": 0.00019324634922668338,
                        "identity_attack": 0.00014685931091662496
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/454218580",
                    "id": 454218580,
                    "created_at": "2019-01-15T00:29:45Z",
                    "updated_at": "2019-01-15T00:29:45Z",
                    "author_association": "NONE",
                    "body": "heloo?\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/454218580/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "milahu",
                        "id": 12958815,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0034831908997148275,
                        "severe_toxicity": 9.873645467450842e-05,
                        "obscene": 0.00030574394622817636,
                        "threat": 9.278750803787261e-05,
                        "insult": 0.0002507087483536452,
                        "identity_attack": 0.0001664833107497543
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/498177444",
                    "id": 498177444,
                    "created_at": "2019-06-03T09:12:07Z",
                    "updated_at": "2019-06-03T09:12:07Z",
                    "author_association": "NONE",
                    "body": "Any update on this topic?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/498177444/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eruvanos",
                        "id": 9437863,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006590462289750576,
                        "severe_toxicity": 0.00011798713967436925,
                        "obscene": 0.00018532556714490056,
                        "threat": 0.00011742034257622436,
                        "insult": 0.0001773313997546211,
                        "identity_attack": 0.00013814997510053217
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/561829105",
                    "id": 561829105,
                    "created_at": "2019-12-04T20:39:26Z",
                    "updated_at": "2019-12-04T20:39:26Z",
                    "author_association": "NONE",
                    "body": "I am unsure how contributing to Python has changed over the years, but there is an issue for this matter documented here from 2017:\r\nhttps://bugs.python.org/issue29142",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/561829105/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Halkcyon",
                        "id": 25436433,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005587043706327677,
                        "severe_toxicity": 0.00012938717554789037,
                        "obscene": 0.00018812844064086676,
                        "threat": 0.00012810905172955245,
                        "insult": 0.00017589628987479955,
                        "identity_attack": 0.0001445380039513111
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/644821166",
                    "id": 644821166,
                    "created_at": "2020-06-16T15:01:00Z",
                    "updated_at": "2020-06-16T15:01:00Z",
                    "author_association": "NONE",
                    "body": "*Note: I've stumbled upon this issue as part of debugging some unrelated problem.*\r\n\r\nLooking into it, I noticed that this issue focuses on adding **IP addresses** to the `no_proxy` setting.\r\nFrom the available documentation I could find, `no_proxy` is supposed to be a comma-separated list of **domain names**; IP address aren't supported:\r\n- Curl: https://curl.haxx.se/docs/manpage.html#NOPROXY\r\n- Wget: https://www.gnu.org/software/wget/manual/html_node/Proxies.html\r\n\r\nWhen running with a domain name, `no_proxy` is properly honoured by `requests`:\r\n\r\n```python\r\n>>> import os, requests\r\n\r\n# Invalid proxy address; exemption for example.com\r\n>>> os.environ['no_proxy'], os.environ['https_proxy']\r\n('example.com', 'http://localhost:1/')\r\n\r\n# Requests to example.com DO bypass the proxy\r\n>>> requests.get('http://example.com')\r\n<Response [200]>\r\n\r\n# Requests to example.org DON'T bypass the proxy, and fail.\r\n>>> requests.get('http://example.org')\r\nTraceback (most recent call last):\r\n[...]\r\nrequests.exceptions.ProxyError: HTTPConnectionPool(host='localhost', port=1): Max retries exceeded with url: http://example.org/ (Caused by ProxyError('Cannot connect to proxy.', NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fec85a53c10>: Failed to establish a new connection: [Errno 111] Connection refused')))\r\n```\r\n\r\nAs far as I can tell, there is no issue in *requests* here: the library's behaviour is consistent with other HTTP clients in its handling of `no_proxy`.\r\n\r\nFor the original use case (bypassing a tor proxy for some IPs), it might be useful to add an additional local proxy that connects directly for those IPs, and chains to Tor for other addresses.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/644821166/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rbarrois",
                        "id": 694541,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008793292217887938,
                        "severe_toxicity": 0.00010935685713775456,
                        "obscene": 0.00020348557154648006,
                        "threat": 0.00010727639892138541,
                        "insult": 0.00017584027955308557,
                        "identity_attack": 0.00013905145169701427
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/645272633",
                    "id": 645272633,
                    "created_at": "2020-06-17T09:47:53Z",
                    "updated_at": "2020-06-17T09:47:53Z",
                    "author_association": "NONE",
                    "body": "> `no_proxy` is supposed to be a comma-separated list of **domain names**; IP address aren't supported\r\n\r\nno, this just makes no sense. \r\nnetwork nodes always have a numeric address, and only sometimes have a hostname.\r\nunder the hood, hostnames are always resolved to numeric ads.\r\n\r\ncurl docs - https://curl.haxx.se/docs/manpage.html#NOPROXY\r\n> NO_PROXY <comma-separated list of hosts/domains> \r\n> ....\r\n> The list of host names **can also be include numerical IP addresses**, and IPv6 versions should then be given without enclosing brackets. \r\n\r\nwget docs - https://www.gnu.org/software/wget/manual/html_node/Proxies.html\r\n> https_proxy\r\n>    If set, the http_proxy and https_proxy variables should contain the **URLs of the proxies** for HTTP and HTTPS connections respectively.\r\n>\r\n> no_proxy\r\n>    This variable should contain a comma-separated list of **domain extensions** proxy should not be used for. For instance, if the value of no_proxy is \u2018.mit.edu\u2019, proxy will not be used to retrieve documents from MIT. \r\n\r\nthis is misleading.\r\nURL hosts can be numeric-address or hostname.\r\n*_proxy values should be consistent, so no_proxy also should accept any valid URL,\r\nwhere subnetworks also are valid resources - blocking of resources should allow for \"fuzzy\" IDs / wildcard IDs\r\n\r\njust wanted to leave this comment here, i have lost interest in fixing the issue",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/645272633/reactions",
                        "total_count": 5,
                        "+1": 4,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "milahu",
                        "id": 12958815,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010733610251918435,
                        "severe_toxicity": 0.0001038636255543679,
                        "obscene": 0.00020688847871497273,
                        "threat": 0.00011089409963460639,
                        "insult": 0.00017896873760037124,
                        "identity_attack": 0.00014049391029402614
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/698031816",
                    "id": 698031816,
                    "created_at": "2020-09-23T23:54:12Z",
                    "updated_at": "2020-09-23T23:58:37Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt can you check if the patch in OP's can be patched into requests? Because as requests is now, it does not honor the `no_proxy`\r\n\r\n`requests.get('http://10.0.0.200:4454/abc.txt', proxies={'http': 'http://broken-ass-proxy.com', 'https': 'https://broken-ass-proxy.com'})`\r\nWill error out with `requests.exceptions.ProxyError`, as expected.\r\n\r\n`requests.get('http://10.0.0.200:4454/abc.txt', proxies={'no_proxy': '10.0.0.200', 'http': 'http://broken-ass-proxy.com', 'https': 'https://broken-ass-proxy.com'})`\r\nWill error out with `requests.exceptions.ProxyError`. This should not happen, as the no_proxy should take effect, before the http and https. The request should have been sent directly.\r\n\r\nBut with the patch that @milahu provided, the no_proxy is honored and works as intended.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/698031816/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Suika",
                        "id": 2320837,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.06886908411979675,
                        "severe_toxicity": 0.0005973638617433608,
                        "obscene": 0.043613187968730927,
                        "threat": 0.0004310737131163478,
                        "insult": 0.0037924679927527905,
                        "identity_attack": 0.00045227963710203767
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/698090230",
                    "id": 698090230,
                    "created_at": "2020-09-24T03:31:39Z",
                    "updated_at": "2020-09-24T04:08:28Z",
                    "author_association": "NONE",
                    "body": "**>>WITH OP's PATCH<<**\r\n\r\n\r\n```python\r\nimport requests\r\ns = requests.Session()\r\ns.proxies = {'no_proxy':'10.0.0.200', 'http': 'http://broken-ass-proxy.com'}\r\ns.get('http://10.0.0.200:4454/abc.txt')\r\n```\r\nWill end up with `requests.exceptions.ProxyError: HTTPConnectionPool(host='broken-ass-proxy.com', port=80): Max retries exceeded with url`\r\nCreating a session and assigning it some porxies, seems to fail in this case.\r\n\r\nSeems that the `s.proxies` is never called in `s.get`, meaning that the call https://github.com/psf/requests/blob/967a05bfffcb68f97296eda197b062221c2ebc0d/requests/sessions.py#L530-L534 will always get an empty proxy var. Which in turn will mess with the following logic and prevent the `no_proxy` from working as intended. Followed by `get_environ_proxies` > `should_bypass_proxies` def, which needs the no_proxy to be extracted, to determine if the proxy should be bypassed or not https://github.com/psf/requests/blob/02eb5a2cd34d36548ebb08528c73ca66c2a398d9/requests/sessions.py#L708-L713",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/698090230/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Suika",
                        "id": 2320837,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.012106668204069138,
                        "severe_toxicity": 0.00018593425920698792,
                        "obscene": 0.0032104908023029566,
                        "threat": 0.0002101720601785928,
                        "insult": 0.0006569276447407901,
                        "identity_attack": 0.0001911702856887132
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/698134383",
                    "id": 698134383,
                    "created_at": "2020-09-24T06:08:00Z",
                    "updated_at": "2020-09-24T06:16:10Z",
                    "author_association": "NONE",
                    "body": "> @nateprewitt can you check if the patch in OP's can be patched into requests?\r\n\r\nnot the original patch, cos it breaks a function interface by adding a hidden property to the return object (quick n dirty), [which makes a test fail](https://github.com/psf/requests/pull/5287)\r\n\r\nif you wanna fix this, you will have to change the function interface (return nested object with proxy-map and optional parameters) and update the test",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/698134383/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "milahu",
                        "id": 12958815,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010334211401641369,
                        "severe_toxicity": 0.00010049402771983296,
                        "obscene": 0.00020146966562606394,
                        "threat": 0.00010105822002515197,
                        "insult": 0.00018287873535882682,
                        "identity_attack": 0.00013569457223638892
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/698257712",
                    "id": 698257712,
                    "created_at": "2020-09-24T10:25:30Z",
                    "updated_at": "2020-09-24T10:25:30Z",
                    "author_association": "NONE",
                    "body": "The longer I look at it, it starts making more sense to call `should_bypass_proxies(url, no_proxy)` inside `merge_environment_settings`  just before https://github.com/psf/requests/blob/967a05bfffcb68f97296eda197b062221c2ebc0d/requests/sessions.py#L722\r\nAnd decide if `proxy` is to be foreced to `{}` or allowed to merge proxies.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/698257712/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Suika",
                        "id": 2320837,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007702671573497355,
                        "severe_toxicity": 0.00011544281005626544,
                        "obscene": 0.00019649171736091375,
                        "threat": 0.00012190483539598063,
                        "insult": 0.000174739005160518,
                        "identity_attack": 0.00013795870472677052
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1545608779",
                    "id": 1545608779,
                    "created_at": "2023-05-12T11:39:22Z",
                    "updated_at": "2023-05-12T11:39:22Z",
                    "author_association": "NONE",
                    "body": "Coming across this now, is there any way in python to no_proxy an ip range (like a 10.0.0.0/8)? According to this, no: https://about.gitlab.com/blog/2021/01/27/we-need-to-talk-no-proxy/#no_proxy. Article mentions curl discussion which is interesting to look at too: https://github.com/curl/curl/issues/1208",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1545608779/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bendem",
                        "id": 2681677,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006064851186238229,
                        "severe_toxicity": 0.00012236277689225972,
                        "obscene": 0.0001841069315560162,
                        "threat": 0.00012550123210530728,
                        "insult": 0.00017132943321485072,
                        "identity_attack": 0.00013926587416790426
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1960849027",
                    "id": 1960849027,
                    "created_at": "2024-02-23T07:29:52Z",
                    "updated_at": "2024-02-23T07:30:24Z",
                    "author_association": "NONE",
                    "body": "Code that works as expected:\r\n```\r\nimport os\r\nimport sys\r\nimport requests\r\nimport traceback\r\n\r\nurl = \"https://github.com\"\r\n\r\n# When only environment variables are passed, everything works as expected\r\n# requests module will take them into account and go through the defined proxies\r\n# unless no_proxy matches.\r\nos.environ.update({\r\n    \"http_proxy\": \"http://dummy-proxy.com:443\",\r\n    \"https_proxy\": \"http://dummy-proxy.com:443\",\r\n   # \"no_proxy\": \".whatever.com\"  # Uncomment to fail with env proxies\r\n    \"no_proxy\": \".github.com\"  # Uncomment to pass with env proxies\r\n})\r\n\r\nwith requests.Session() as session:\r\n    req = requests.Request(method=\"GET\", url=url)\r\n    prep = session.prepare_request(req)\r\n    settings = session.merge_environment_settings(prep.url, None, None, None, None)\r\n    try:\r\n        print(session.request(method=\"GET\", url=url, timeout=1))\r\n    except requests.exceptions.ProxyError:\r\n        print(traceback.format_exc().strip().splitlines()[-1], file=sys.stderr)\r\n    finally:\r\n        print(\"\\nProxies:\", settings.get(\"proxies\"))\r\n```\r\n\r\nCode that DOESN'T works as expected:\r\n```\r\nimport os\r\nimport sys\r\nimport requests\r\nimport traceback\r\n\r\nurl = \"https://github.com\"\r\n\r\n# When only environment variables are passed, everything works as expected\r\n# requests module will take them into account and go through the defined proxies\r\n# unless no_proxy matches.\r\nos.environ.update({\r\n    \"http_proxy\": \"http://dummy-proxy.com:443\",\r\n    \"https_proxy\": \"http://dummy-proxy.com:443\",\r\n   # \"no_proxy\": \".whatever.com\"  # Uncomment to fail with env proxies\r\n    \"no_proxy\": \".github.com\"  # Uncomment to pass with env proxies\r\n})\r\n\r\n# Doesn't work even if adding \"no\": \".github.com\" or \"no_proxy\": \".github.com\" inside the proxies kwarg\r\nproxies = {\"http\": \"http://dummy-proxy.com:443\", \"https\": \"http://dummy-proxy.com:443\"}\r\n\r\nwith requests.Session() as session:\r\n    req = requests.Request(method=\"GET\", url=url)\r\n    prep = session.prepare_request(req)\r\n    settings = session.merge_environment_settings(prep.url, proxies, None, None, None)\r\n    try:\r\n        print(session.request(method=\"GET\", proxies=proxies, url=url, timeout=1))\r\n    except requests.exceptions.ProxyError:\r\n        print(traceback.format_exc().strip().splitlines()[-1], file=sys.stderr)\r\n    finally:\r\n        print(\"\\nProxies:\", settings.get(\"proxies\"))\r\n```\r\n\r\nLike @milahu said, the issue comes from [utils.get_environ_proxies](https://github.com/psf/requests/blob/v2.31.0/requests/utils.py#L824) and [sessions.merge_environment_settings](https://github.com/psf/requests/blob/v2.31.0/requests/sessions.py#L751)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1960849027/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "pBogey",
                        "id": 45244374,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001987827243283391,
                        "severe_toxicity": 0.00010471877612872049,
                        "obscene": 0.0003304692218080163,
                        "threat": 0.0001096026026061736,
                        "insult": 0.00020767665409948677,
                        "identity_attack": 0.00014050262689124793
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1961185865",
                    "id": 1961185865,
                    "created_at": "2024-02-23T11:46:36Z",
                    "updated_at": "2024-02-23T11:46:36Z",
                    "author_association": "NONE",
                    "body": "https://github.com/psf/requests/pull/5596#issuecomment-1961184126",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1961185865/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "milahu",
                        "id": 12958815,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008088921895250678,
                        "severe_toxicity": 0.00010716209362726659,
                        "obscene": 0.000179103939444758,
                        "threat": 0.00010998432117048651,
                        "insult": 0.0001799080491764471,
                        "identity_attack": 0.00013852935808245093
                    }
                }
            ]
        },
        "210": {
            "html_url": "https://github.com/psf/requests/issues/4847",
            "id": 373692014,
            "number": 4847,
            "title": "Option for retrieving peer's TLS certificate",
            "created_at": "2018-10-24T21:52:30Z",
            "updated_at": "2020-08-24T15:18:39Z",
            "closed_at": null,
            "body": "It would be good to have an option to retrieve the peer's TLS certificate after a request is performed. For example, this is what libcurl provides with [CURLINFO_CERTINFO](https://curl.haxx.se/libcurl/c/CURLINFO_CERTINFO.html).\r\n\r\nThere's a StackOverflow thread which offers some rather ugly methods to do this: https://stackoverflow.com/questions/16903528/how-to-get-response-ssl-certificate-from-requests-in-python",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "martingalvan",
                "id": 7912657,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4847/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/679191050",
                    "id": 679191050,
                    "created_at": "2020-08-24T15:18:39Z",
                    "updated_at": "2020-08-24T15:18:39Z",
                    "author_association": "NONE",
                    "body": "I actually managed to fix this via an adapter, but would like for this to be natively supported. Also, TLS certificate is fetched prior a connection is fully established, as the certificate is checked for validity and only then \"fully\" connected.\r\n\r\nRequests actually fetches the certificate at some pint, but it does not allow it to be stored saved somewhere, which might further complicate in situations where TLS pinning is needed.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/679191050/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "calexandru2018",
                        "id": 31934100,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006631238502450287,
                        "severe_toxicity": 0.00011757932952605188,
                        "obscene": 0.0001832372508943081,
                        "threat": 0.000122495272080414,
                        "insult": 0.00017587313777767122,
                        "identity_attack": 0.00013907412358094007
                    }
                }
            ]
        },
        "211": {
            "html_url": "https://github.com/psf/requests/issues/4842",
            "id": 372482456,
            "number": 4842,
            "title": "Using a `json.JSONDecoder` fails when simplejson is present",
            "created_at": "2018-10-22T11:27:25Z",
            "updated_at": "2024-08-28T09:00:53Z",
            "closed_at": null,
            "body": "It appears that when `simplejson` is in the environment `requests` preferentially imports it. However, the arguments accepted by `JSONDecoder` are inconsistent between the standard library `json` and `simplejson` leading to errors when using the standard `json.JSONDecoder` when `simplejson` is in the environment.\r\n\r\n[Your documentation for `response.json() `says](http://docs.python-requests.org/en/master/api/?highlight=json#requests.Response.json):\r\n>Parameters: | **kwargs \u2013 Optional arguments that json.loads takes.\r\n\r\nThe [documentation for `json.loads`](https://docs.python.org/3.6/library/json.html#json.loads) says:\r\n>`json.loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)`\r\n\r\nand\r\n\r\n>To use a custom JSONDecoder subclass, specify it with the cls kwarg; otherwise JSONDecoder is used. Additional keyword arguments will be passed to the constructor of the class.\r\n\r\nI expected to be able to use a custom `json.JSONDecoder` without issue and indeed this works on Python 2.7, but in Python 3.7 it fails.\r\n\r\nI can see that the issue of preferentially importing `simplejson` has been raised a few times e.g.\r\nhttps://github.com/requests/requests/pull/2516\r\nhttps://github.com/requests/requests/issues/3052\r\n\r\nand that it is slated for removal in Requests 3, which I guess will resolve this issue.\r\n\r\nIf it is not possible to resolve this issue some\u00a0other way in Requests 2.x then it would be nice if the documentation around `response.json()` was updated to make it clear that the arguments to `json.loads` could be either `simplejson.loads` or the standard lib `json.loads` depending on the environment since the preferential import is effectively undocumented and non-obvious.\r\n\r\n## Expected Result\r\n\r\nA successful JSON load when using `r.json(cls=json.JSONDecoder)`.\r\n\r\n## Actual Result\r\n\r\n```\r\n    print(r.json(cls=json.JSONDecoder))\r\n  File \".../python3.7/site-packages/requests/models.py\", line 897, in json\r\n    return complexjson.loads(self.text, **kwargs)\r\n  File \".../python3.7/site-packages/simplejson/__init__.py\", line 535, in loads\r\n    return cls(encoding=encoding, **kw).decode(s)\r\nTypeError: __init__() got an unexpected keyword argument 'encoding'\r\n```\r\n\r\n## Reproduction Steps\r\n```sh\r\npip install requests\r\npip install simplejson\r\n```\r\n\r\n```python\r\nimport json\r\nimport requests\r\n\r\nr = requests.get('http://localhost:5984')\r\nprint(r.json(cls=json.JSONDecoder))\r\n```\r\n\r\n## System Information\r\n\r\n**Note this issue does not occur in Python 2.7.x.**\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.20.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000210f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 15,
            "state": "open",
            "user": {
                "login": "ricellis",
                "id": 10698320,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4842/reactions",
                "total_count": 9,
                "+1": 9,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/432522688",
                    "id": 432522688,
                    "created_at": "2018-10-24T05:56:22Z",
                    "updated_at": "2018-10-24T05:56:22Z",
                    "author_association": "MEMBER",
                    "body": "Hi @ricellis, thanks for revisiting this. I don't believe we'll be seeing this removed in the near future until 3.0.0 is ready. If you'd like to make a small addendum to the documentation about this, we'd be happy to review it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/432522688/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005398345529101789,
                        "severe_toxicity": 0.00013376893184613436,
                        "obscene": 0.00018975883722305298,
                        "threat": 0.00014275178546085954,
                        "insult": 0.00017640234727878124,
                        "identity_attack": 0.0001447760732844472
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433100907",
                    "id": 433100907,
                    "created_at": "2018-10-25T15:39:32Z",
                    "updated_at": "2018-10-25T15:39:32Z",
                    "author_association": "NONE",
                    "body": "Thanks @nateprewitt I can update the docs, but would you be willing to accept a patch that protects people from the error if they are expecting to be using `json`, but `simplejson` happens to be present in the env (probably unbeknownst to them).\r\n\r\nFor example adding a check to `Response.json()` that uses the built-in json package if `cls` extends the built-in `json.decoder.JSONDecoder`. Something like this https://gist.github.com/ricellis/0690ebfc7f1a56df64df87c7a5251e77\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433100907/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ricellis",
                        "id": 10698320,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007932138396427035,
                        "severe_toxicity": 0.00010903459042310715,
                        "obscene": 0.00019154834444634616,
                        "threat": 0.00011414970504119992,
                        "insult": 0.00017656624549999833,
                        "identity_attack": 0.0001357882865704596
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433265878",
                    "id": 433265878,
                    "created_at": "2018-10-26T02:29:13Z",
                    "updated_at": "2018-10-26T02:29:13Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Your proposed change breaks the deterministic behaviour of that function which is not ideal in the slightest. I don't think we can accept that.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433265878/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007028020918369293,
                        "severe_toxicity": 0.00011547771282494068,
                        "obscene": 0.0001713255187496543,
                        "threat": 0.00012605042138602585,
                        "insult": 0.000175456574652344,
                        "identity_attack": 0.00014402235683519393
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433344195",
                    "id": 433344195,
                    "created_at": "2018-10-26T09:18:39Z",
                    "updated_at": "2018-10-26T09:18:39Z",
                    "author_association": "NONE",
                    "body": ">breaks the deterministic behaviour of that function\r\n\r\nIt's annoying that the `json()` method could end up using a different module to what is used elsewhere, but that seems better than an error to me. It is deterministic though, the outputs are governed by the inputs and I think it only impacts the case that is currently broken:\r\n\r\n| `simplejson` | `cls` | current | proposal |\r\n| --- | --- | --- | --- |\r\nyes | extends `json.JSONDecoder` | **Error** | Decoded by `json` using `cls` |\r\nyes | None | Decoded by `simplejson` | Decoded by `simplejson` |\r\nno | extends `json.JSONDecoder` | Decoded by `json` using `cls` | Decoded by `json` using `cls` |\r\nno | None | Decoded by `json` | Decoded by `json`|\r\n\r\n>not ideal in the slightest\r\n\r\nIt was just a first stab at something that might work and I was trying to contain the change to just the specific area of the problem.\r\n\r\nI agree it is not the cleanest thing to do, but neither is swapping the JSON module with an API incompatible one. That's where this issue is different from the others that have been reported previously around the preferential import - this has identified a place where `simplejson` and `json` are not API compatible yet `requests` exposes that API to the end user through the `Response.json()` kwargs.\r\n\r\nThat in itself might not be a problem when the `requests` caller is also in control of the module environment. As you can see from our linked issue though the problem for us comes when a user of our library includes another module that itself has a dependency on `simplejson`. We are using the `requests` API in good faith, but it is broken by a transitive dependency over which we have no control. I think the discussion around `simplejson` that has preceded this issue didn't have to account for that.\r\n\r\nPerhaps someone can think of a better option than my proposal or maybe an option to disable the `simplejson` preferential import could be revisited in light of this particular scenario?\r\n\r\nOr if you're not interested in fixing 2.x at all then just say so and I'll submit a docs patch and spend my time implementing a workaround in our library instead.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433344195/reactions",
                        "total_count": 5,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ricellis",
                        "id": 10698320,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012750796740874648,
                        "severe_toxicity": 0.00010235214722342789,
                        "obscene": 0.000208497658604756,
                        "threat": 0.00011739547335309908,
                        "insult": 0.00018385713337920606,
                        "identity_attack": 0.00014590889622922987
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/436562077",
                    "id": 436562077,
                    "created_at": "2018-11-07T09:34:20Z",
                    "updated_at": "2018-11-07T09:34:20Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt @sigmavirus24 any thoughts on this ^?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/436562077/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ricellis",
                        "id": 10698320,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000837691652122885,
                        "severe_toxicity": 0.00010533249587751925,
                        "obscene": 0.00017882511019706726,
                        "threat": 0.00011521956184878945,
                        "insult": 0.00018079245637636632,
                        "identity_attack": 0.00013799278531223536
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/606577713",
                    "id": 606577713,
                    "created_at": "2020-03-31T11:47:14Z",
                    "updated_at": "2020-03-31T11:47:14Z",
                    "author_association": "NONE",
                    "body": "Simplejson is slower than stdlib json implementation in python 3, why don't you want to allow to override the default behavior at least?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/606577713/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "SharpEdgeMarshall",
                        "id": 1544496,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009272268507629633,
                        "severe_toxicity": 0.00010194440983468667,
                        "obscene": 0.00017667807696852833,
                        "threat": 0.00011043211270589381,
                        "insult": 0.00018440771964378655,
                        "identity_attack": 0.00013991596642881632
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/665502871",
                    "id": 665502871,
                    "created_at": "2020-07-29T08:00:07Z",
                    "updated_at": "2020-07-29T08:00:07Z",
                    "author_association": "NONE",
                    "body": "I ran into this problem when we added a third-party library that had a transitive dependency on `simplejson`. That consequently broke all of our error handling, because `requests` now started throwing `simplejson.errors.JSONDecodeError` instead of `json.JSONDecodeError` that we had catches for. Judging from the referenced issues above, more users are affected.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/665502871/reactions",
                        "total_count": 11,
                        "+1": 11,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ruuda",
                        "id": 506953,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000745619588997215,
                        "severe_toxicity": 0.00011066117440350354,
                        "obscene": 0.00017697042494546622,
                        "threat": 0.00011628447100520134,
                        "insult": 0.00018075850675813854,
                        "identity_attack": 0.0001365986536256969
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/768174210",
                    "id": 768174210,
                    "created_at": "2021-01-27T10:02:01Z",
                    "updated_at": "2021-01-27T10:02:01Z",
                    "author_association": "NONE",
                    "body": "Having the same issue as the user above. `requests` should just be using one or the another. Using either or conditionally only creates confusion.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/768174210/reactions",
                        "total_count": 4,
                        "+1": 4,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "verata-veritatis",
                        "id": 9677388,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006500527961179614,
                        "severe_toxicity": 0.00011936410737689584,
                        "obscene": 0.00018146654474548995,
                        "threat": 0.00011887431901413947,
                        "insult": 0.0001772637915564701,
                        "identity_attack": 0.00014000192459207028
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/833263353",
                    "id": 833263353,
                    "created_at": "2021-05-06T06:29:02Z",
                    "updated_at": "2021-05-06T06:29:02Z",
                    "author_association": "NONE",
                    "body": "Any update :)? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/833263353/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "BarryThrill",
                        "id": 15836342,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006749967578798532,
                        "severe_toxicity": 0.00011711863771779463,
                        "obscene": 0.00018744445696938783,
                        "threat": 0.00011975834786426276,
                        "insult": 0.00017926898726727813,
                        "identity_attack": 0.00013449836114887148
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/991849230",
                    "id": 991849230,
                    "created_at": "2021-12-12T07:38:39Z",
                    "updated_at": "2021-12-12T07:39:10Z",
                    "author_association": "NONE",
                    "body": "I came here because berserk uses request, and this issue comes up. Can you plz give a sttatus update?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/991849230/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rwst",
                        "id": 1146709,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.01926710642874241,
                        "severe_toxicity": 0.00010591162572382018,
                        "obscene": 0.0008750336128287017,
                        "threat": 0.00019026923109777272,
                        "insult": 0.0007418575114570558,
                        "identity_attack": 0.00027946874615736306
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/991855875",
                    "id": 991855875,
                    "created_at": "2021-12-12T08:38:22Z",
                    "updated_at": "2021-12-12T08:38:22Z",
                    "author_association": "NONE",
                    "body": "See also https://github.com/psf/requests/issues/3052",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/991855875/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rwst",
                        "id": 1146709,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000680859899148345,
                        "severe_toxicity": 0.00011642814934020862,
                        "obscene": 0.00017478516383562237,
                        "threat": 0.0001223300932906568,
                        "insult": 0.00017548502364661545,
                        "identity_attack": 0.0001407972740707919
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1026171954",
                    "id": 1026171954,
                    "created_at": "2022-01-31T20:19:29Z",
                    "updated_at": "2022-01-31T20:19:29Z",
                    "author_association": "NONE",
                    "body": "Our team has run into a similar issue, where we have simplejson installed but we want to use a custom json encoder class in the prepare_body method which now fails",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1026171954/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "krystofernewman",
                        "id": 7748619,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006993771530687809,
                        "severe_toxicity": 0.00011431309394538403,
                        "obscene": 0.00017304858192801476,
                        "threat": 0.000124341735499911,
                        "insult": 0.00018015180830843747,
                        "identity_attack": 0.00014205696061253548
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1026180188",
                    "id": 1026180188,
                    "created_at": "2022-01-31T20:29:12Z",
                    "updated_at": "2022-01-31T20:29:12Z",
                    "author_association": "MEMBER",
                    "body": "Hi @krystofernewman, it doesn't sound like your issue is related to this one directly. We're specifically discussing simplejson's impact on `Response.json()`. There are likely similar issues on the `json` Request argument but that's a topic that would be handled separately.\r\n\r\n`simplejson` support was added in a very different time (almost a decade ago) but has been the default for the majority of the library's life. We agreed some time ago that a documentation update noting this would be accepted but cannot change the behavior until a major version bump.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1026180188/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005851912428624928,
                        "severe_toxicity": 0.00012409381452016532,
                        "obscene": 0.00018467800691723824,
                        "threat": 0.00012566050281748176,
                        "insult": 0.000174549815710634,
                        "identity_attack": 0.00014046109572518617
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1026183704",
                    "id": 1026183704,
                    "created_at": "2022-01-31T20:33:45Z",
                    "updated_at": "2022-01-31T20:36:07Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt gotcha thanks for the response, I can open a separate issue for the impact of simplejson on the encoding of the request's body preparation if that works",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1026183704/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "krystofernewman",
                        "id": 7748619,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007167779258452356,
                        "severe_toxicity": 0.0001104714028770104,
                        "obscene": 0.00018072352395392954,
                        "threat": 0.00012305687414482236,
                        "insult": 0.0001755912962835282,
                        "identity_attack": 0.0001326264755334705
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2313413455",
                    "id": 2313413455,
                    "created_at": "2024-08-27T20:07:57Z",
                    "updated_at": "2024-08-28T09:00:53Z",
                    "author_association": "NONE",
                    "body": "Another incompatible change in simplejson: https://github.com/simplejson/simplejson/issues/324 (eg.: by adding a `allow_nan` parameter and defaulting it to False in the decoder)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2313413455/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "olejorgenb",
                        "id": 72201,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000702454533893615,
                        "severe_toxicity": 0.00011293739953543991,
                        "obscene": 0.00018149854440707713,
                        "threat": 0.00011795698083005846,
                        "insult": 0.00018031575018540025,
                        "identity_attack": 0.00013656244846060872
                    }
                }
            ]
        },
        "212": {
            "html_url": "https://github.com/psf/requests/issues/4833",
            "id": 370965521,
            "number": 4833,
            "title": "Running prepare_headers on PreparedRequest break it",
            "created_at": "2018-10-17T08:53:15Z",
            "updated_at": "2018-10-29T12:38:54Z",
            "closed_at": null,
            "body": "After calling prepare() on a request, PreparedRequest object is returned. If its a PATCH request (GET is working as expected), and prepare_headers is called, it's not possible to send this request.\r\n\r\n## Expected Result\r\n\r\nHeaders should be added to a prepared request and it should be possible to send it later.\r\n\r\n## Actual Result\r\n\r\nAn exception is thrown:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"r.py\", line 7, in <module>\r\n    s.send(r)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 622, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/adapters.py\", line 466, in send\r\n    low_conn.send(hex(len(i))[2:].encode('utf-8'))\r\nTypeError: object of type 'int' has no len()\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nr = requests.Request('PATCH', 'http://domain.com/objects/32', json={'name': 'new name'})\r\nr = r.prepare()\r\n\r\ns = requests.Session()\r\nr.prepare_headers({'Authorization': 'Token 123'})\r\ns.send(r)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.9.87-linuxkit-aufs\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010006f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "mlubimow",
                "id": 2325687,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4833/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433600575",
                    "id": 433600575,
                    "created_at": "2018-10-27T08:02:34Z",
                    "updated_at": "2018-10-27T08:34:03Z",
                    "author_association": "NONE",
                    "body": "The error occurs while `HTTPAdapter::send` method tries to read the length of `request.body`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433600575/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "erayerdin",
                        "id": 2399084,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007642821874469519,
                        "severe_toxicity": 0.00011007056309608743,
                        "obscene": 0.00018232435104437172,
                        "threat": 0.0001133230616687797,
                        "insult": 0.00017814709281083196,
                        "identity_attack": 0.00013284190208651125
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433635840",
                    "id": 433635840,
                    "created_at": "2018-10-27T16:40:26Z",
                    "updated_at": "2018-10-27T16:40:26Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@mlubinmow what do you think should be happening here? I'm not convinced this is a bug in Requests but rather in using undocumented methods.\r\n\r\nSpecifically http://docs.python-requests.org/en/master/user/advanced/?highlight=PreparedRequest#prepared-requests tells you how you're expected to interact with PreparedRequests and makes no guarantees about the `prepare_*` methods on the object.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433635840/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007350703817792237,
                        "severe_toxicity": 0.0001110754965338856,
                        "obscene": 0.00017393261077813804,
                        "threat": 0.00011792751320172101,
                        "insult": 0.0001731391967041418,
                        "identity_attack": 0.00013795173435937613
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433825104",
                    "id": 433825104,
                    "created_at": "2018-10-29T08:26:38Z",
                    "updated_at": "2018-10-29T08:26:55Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 I disagree, function is listed in Devs interface and is inconsistent, as it works for GET request. I would expect it to.. just work ;) As mentioned in an issue.\r\n\r\nhttp://docs.python-requests.org/en/master/api/#lower-lower-level-classes",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433825104/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mlubimow",
                        "id": 2325687,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005738377803936601,
                        "severe_toxicity": 0.00012756380601786077,
                        "obscene": 0.00018843667930923402,
                        "threat": 0.00012694737233687192,
                        "insult": 0.00017716610454954207,
                        "identity_attack": 0.000142818913445808
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433894282",
                    "id": 433894282,
                    "created_at": "2018-10-29T12:38:04Z",
                    "updated_at": "2018-10-29T12:38:04Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@mlubimow just because something is included in auto-generated documentation doesn't mean it just magically works as you expect it to.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433894282/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006864834576845169,
                        "severe_toxicity": 0.00011422036914154887,
                        "obscene": 0.0001803081831894815,
                        "threat": 0.0001138285078923218,
                        "insult": 0.00017568592738825828,
                        "identity_attack": 0.00013949022104498
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433894509",
                    "id": 433894509,
                    "created_at": "2018-10-29T12:38:54Z",
                    "updated_at": "2018-10-29T12:38:54Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "To be clearer, the documentation I linked to explains how to actually work with the prepared request flow. If something happens to work in one case when you do something the system wasn't designed for, it doesn't mean it must work in a different case.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433894509/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005182019667699933,
                        "severe_toxicity": 0.00013635738287121058,
                        "obscene": 0.00019801477901637554,
                        "threat": 0.0001323879259871319,
                        "insult": 0.00017787890101317316,
                        "identity_attack": 0.00014408280549105257
                    }
                }
            ]
        },
        "213": {
            "html_url": "https://github.com/psf/requests/pull/4812",
            "id": 365528185,
            "number": 4812,
            "title": "Fix no_proxy being too greedy.",
            "created_at": "2018-10-01T15:55:19Z",
            "updated_at": "2022-01-03T15:29:43Z",
            "closed_at": null,
            "body": "**Summary:** Setting `no_proxy` on `requests.com` used to enable it on `somerequests.com` also, which was unexpected and potentially dangerous. (see #4795)\r\n\r\nNote that this delegates to urllib more often, as stated [here](https://github.com/requests/requests/issues/4795#issuecomment-425886286). I don't have the history behind `should_bypass_proxies` implementation, therefore my change is the tiniest possible (minimum thing to fix the greedy behavior). I don't know exactly why requests tries some things first and then delegates to urllib though.\r\n\r\nFixes #4795 ",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "gilbsgilbs",
                "id": 3407667,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4812/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/425975458",
                    "id": 425975458,
                    "created_at": "2018-10-01T16:36:47Z",
                    "updated_at": "2018-10-01T16:36:47Z",
                    "author_association": "NONE",
                    "body": "Apparently [CPython 3.4 `no_proxy` implementation was as naive as requests'](https://github.com/python/cpython/blob/cd1d5c554c40b5b348de2e77d65986aa154e4477/Lib/urllib/request.py#L2349), hence the failing build. Not sure giving the final word to `proxy_bypass` is a great idea. Can't we just use the same implementation as in [CPython 3.7](https://github.com/python/cpython/blob/655608a1112e592cd6a9155ebe774dd285f561f3/Lib/urllib/request.py#L2487)?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/425975458/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gilbsgilbs",
                        "id": 3407667,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009602151694707572,
                        "severe_toxicity": 0.00010541408119024709,
                        "obscene": 0.0002018859813688323,
                        "threat": 0.00011155018000863492,
                        "insult": 0.00018281073425896466,
                        "identity_attack": 0.0001375344581902027
                    }
                }
            ]
        },
        "214": {
            "html_url": "https://github.com/psf/requests/issues/4795",
            "id": 361042061,
            "number": 4795,
            "title": "`no_proxy` implementation is too greedy",
            "created_at": "2018-09-17T20:59:31Z",
            "updated_at": "2018-10-01T12:17:49Z",
            "closed_at": null,
            "body": "The implementation of `no_proxy` environment just checks that the hostname ends with some host present in the `no_proxy` variable. Although there is no clear specification for `no_proxy`, this behavior is very unexpected and even dangerous.\r\n\r\n- It prevents you from bypassing only one domain and not its subdomains.\r\n- If `no_proxy` is set for `requests.com`, `attacker-requests.com` is also whitelisted. Not sure it's really really bad, but huh, it's definitely not good.\r\n\r\n## Expected Result\r\n\r\n- `no_proxy=gle.com` should bypass ONLY the domain `gle.com` (optionally its subdomains, but I don't think it's desirable)\r\n- `no_proxy=www.gle.com` should bypass ONLY the domain `www.gle.com` (optionally its subdomains, but I don't think it's desirable)\r\n- `no_proxy=.google.com` should bypass ONLY subdomains of `google.com` (and optionally `google.com`, but I don't think it's desirable)\r\n\r\n## Actual Result\r\n\r\n`no_proxy=gle.com` bypasses any domain that ends with `gle.com`, including:\r\n- `google.com`\r\n- `www.google.com`\r\n- `foo.gle.com`\r\n- `foo.bar.gle.com`\r\n\r\n## Reproduction Steps\r\n\r\n```\r\n$ http_proxy=http://no-proxy-here/ no_proxy=gle.com python -c \"import requests; print(requests.get('http://www.google.com'))\"     \r\n<Response [200]>\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.18.7-arch1-1-ARCH\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nI can prepare a PR if needed.",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "gilbsgilbs",
                "id": 3407667,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4795/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/425779368",
                    "id": 425779368,
                    "created_at": "2018-10-01T03:17:20Z",
                    "updated_at": "2018-10-01T03:17:20Z",
                    "author_association": "MEMBER",
                    "body": "Hi @gilbsgilbs, thanks for bringing this to our attention. NO_PROXY is a variable that unfortunately doesn't have a clear spec and has be reimplemented slightly differently in many different clients. This is a case where we've tried to follow curl for most of our implementation details. For reference, this thread was one of the more recent discussions on the curl issue tracker which has a lot of useful information (https://github.com/curl/curl/issues/1208).\r\n\r\nI agree we're being too greedy here, and want to make sure we're scoping domains correctly for the bypass. It looks like curl's [current documentation](https://curl.haxx.se/docs/manual.html) specifies this as the definition of the NO_PROXY variable (emphasis mine):\r\n> If the host name matches one of these strings, or the host is within the\r\n  domain of one of these strings, transactions with that node will not be\r\n  proxied. **When a domain is used, it needs to start with a period.** A user can\r\n  specify that both www.example.com and foo.example.com should not uses a\r\n  proxy by setting NO_PROXY to \".example.com\". By including the full name you\r\n  can exclude specific host names, so to make www.example.com not use a proxy\r\n  but still have foo.example.com do it, set NO_PROXY to \"www.example.com\"\r\n\r\nI think our best bet for solving this is to append the leading dot in our proxy_bypass handling if the user doesn't pass it. That means `gle.com` would be treated as `.gle.com` preventing the domain hijacking issue. We'd probably use this same method when comparing user requested domains without a leading subdomain (e.g. http://google.com).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/425779368/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006855775718577206,
                        "severe_toxicity": 0.00011521691340021789,
                        "obscene": 0.0001834585564211011,
                        "threat": 0.00011845428525703028,
                        "insult": 0.0001714647514745593,
                        "identity_attack": 0.00013892872084397823
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/425886286",
                    "id": 425886286,
                    "created_at": "2018-10-01T12:17:06Z",
                    "updated_at": "2018-10-01T12:17:49Z",
                    "author_association": "NONE",
                    "body": "Hi @nateprewitt, thanks for replying.\r\n\r\n> NO_PROXY is a variable that unfortunately doesn't have a clear spec and has be reimplemented slightly differently in many different clients.\r\n\r\nUnfortunately\u2026\r\n\r\n> I think our best bet for solving this is to append the leading dot in our proxy_bypass handling if the user doesn't pass it. That means gle.com would be treated as .gle.com preventing the domain hijacking issue. We'd probably use this same method when comparing user requested domains without a leading subdomain (e.g. http://google.com).\r\n\r\nThis happens to work thanks to the [`proxy_bypass` function from urllib](https://github.com/python/cpython/blob/9df100286b35f1f9fa85976d573981f558805b3f/Lib/urllib/request.py#L2487) which is [delegated by requests](https://github.com/requests/requests/blob/a6cd380c640087218695bc7c62311a4843777e43/requests/utils.py#L748). I don't know the exact story behind the current implementation (why some things are inferred by requests itself and some others are delegated to urllib), but if prepending `.` to the host (if not already present) sounds like a good fix to you, I could submit a PR sometimes.\r\n\r\nThanks.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/425886286/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gilbsgilbs",
                        "id": 3407667,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007608663290739059,
                        "severe_toxicity": 0.00011077805538661778,
                        "obscene": 0.00019256725499872118,
                        "threat": 0.00011407429701648653,
                        "insult": 0.00017212523380294442,
                        "identity_attack": 0.00013463398499879986
                    }
                }
            ]
        },
        "215": {
            "html_url": "https://github.com/psf/requests/issues/4747",
            "id": 343920747,
            "number": 4747,
            "title": "urllib3 Retry and Response Hooks (Duplicates #4514)",
            "created_at": "2018-07-24T07:41:46Z",
            "updated_at": "2021-04-04T21:11:00Z",
            "closed_at": null,
            "body": "Given you have a session, and have successfully attached the auth class and the response hooks accordingly; although you'd like to add the Retry class into the picture from urllib3.\r\n\r\n## Expected Result\r\n\r\nI'd expect the response hooks to be honoured - at the very least on the first response (not retry).\r\n\r\n## Actual Result\r\n\r\nThe response hooks are ignored completely.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\nfrom requests.packages.urllib3.util.retry import Retry\r\n\r\nretry = Retry(total=1, read=1, connect=1, backoff_factor=0.5,\r\n                      status_forcelist=(401, 500))\r\n\r\nadapter = HTTPAdapter(max_retries=retry)\r\n\r\nsession = requests.Session()\r\nsession.hooks = {'response': response_hook}\r\n\r\nsession.mount('http://', adapter)\r\nsession.mount('https://', adapter)\r\n\r\ndef response_hook(response, *args, **kwargs):\r\n    \"\"\"\r\n    Response hook\r\n\r\n    :param response:\r\n    :return:\r\n    \"\"\"\r\n    if response.status_code == requests.codes.unauthorized:\r\n       print('Your logic here')\r\n```\r\n\r\n## System Information\r\n\r\n```\r\nPython version: 3.5\r\nRequests version: 2.11.0\r\nOS: Ubuntu 16.04\r\n```",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "belthaZornv",
                "id": 9652736,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4747/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/407313071",
                    "id": 407313071,
                    "created_at": "2018-07-24T07:44:32Z",
                    "updated_at": "2018-07-24T08:38:19Z",
                    "author_association": "NONE",
                    "body": "Can anyone suggest a work around for this? (except for the standard flagging and re-doing what Retry does)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/407313071/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "belthaZornv",
                        "id": 9652736,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006902838940732181,
                        "severe_toxicity": 0.00011257226287852973,
                        "obscene": 0.00017641983868088573,
                        "threat": 0.00011759378685383126,
                        "insult": 0.00018275879847351462,
                        "identity_attack": 0.00013507182302419096
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/407793607",
                    "id": 407793607,
                    "created_at": "2018-07-25T15:23:40Z",
                    "updated_at": "2018-07-25T15:23:40Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@belthaZornv can you share what part of our documentation misled you here?\r\n\r\n`Retry` logic from urllib3 operates at a much lower level than the response hook(s). You have specified `401` as a status code to retry which means that Requests will never see it. It will be retried by urllib3 before we can execute the hook. I thought our documentation was clear that the Retry logic operated at a very low level and caused other parts of Requests to behave differently. If I'm mistaken, please point out where you saw differently.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/407793607/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007592978654429317,
                        "severe_toxicity": 0.0001083004244719632,
                        "obscene": 0.00017922352708410472,
                        "threat": 0.00011518132669152692,
                        "insult": 0.00017341792408842593,
                        "identity_attack": 0.0001344773336313665
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/407817065",
                    "id": 407817065,
                    "created_at": "2018-07-25T16:33:41Z",
                    "updated_at": "2018-07-25T16:33:41Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 I'm not saying you or the documentation misled me or someone else, but otherwise I'm more interested in discussing what you'd expect, would you expect the response hook to execute? (Taking into consideration that not everyone knows requests inside out) I did, I expected the hook to execute at least once; but I might have been wrong in thinking so, so my question is, what is the ideal solution when someone wants to Retry but also wants a response hook to execute? More over I believe that unless urllib3 honours the hooks than there isn't much to add. \r\n\r\nAlthough for someone new to requests, one would expect hooks and auth classes to run as by default even in Retry, after knowing the structure beneath it all, yes, I fully agree it shouldn't or even can't.. but people are and will get lost over this.. and would be nice to find the ideal solution if any exist.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/407817065/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "belthaZornv",
                        "id": 9652736,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006136297597549856,
                        "severe_toxicity": 0.00012101281026843935,
                        "obscene": 0.00017807695257943124,
                        "threat": 0.00012597038585226983,
                        "insult": 0.00017188691708724946,
                        "identity_attack": 0.0001399594621034339
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/771671691",
                    "id": 771671691,
                    "created_at": "2021-02-02T14:27:23Z",
                    "updated_at": "2021-02-02T14:27:23Z",
                    "author_association": "NONE",
                    "body": "Just got bitten by the same thing myself too. I was assuming hooks would work, until I dug deeper.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/771671691/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zupo",
                        "id": 311580,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005921219126321375,
                        "severe_toxicity": 0.00013192216283641756,
                        "obscene": 0.00019754841923713684,
                        "threat": 0.00012852813233621418,
                        "insult": 0.00018175468721892685,
                        "identity_attack": 0.00014463809202425182
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/813099815",
                    "id": 813099815,
                    "created_at": "2021-04-04T21:11:00Z",
                    "updated_at": "2021-04-04T21:11:00Z",
                    "author_association": "NONE",
                    "body": "For anyone here getting stuck on this, reread the reply from sigmavirus24. If your use case was like mine ( a reauth hook ) if the status code 401 or 403 is in your status_forcelist urllib3 will gobble the response that you may be trying to hook on. You may only want to retry on < 403\r\n\r\n...Seems so obvious now.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/813099815/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "stroypet",
                        "id": 6641202,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006799284019507468,
                        "severe_toxicity": 0.00011381059448467568,
                        "obscene": 0.00017769327678252012,
                        "threat": 0.0001203893480123952,
                        "insult": 0.00017677783034741879,
                        "identity_attack": 0.00013491838763002306
                    }
                }
            ]
        },
        "216": {
            "html_url": "https://github.com/psf/requests/issues/4730",
            "id": 339479519,
            "number": 4730,
            "title": "Requests toolbelt HostHeaderSSL Adapter has issues with non-standard ports. ",
            "created_at": "2018-07-09T14:43:35Z",
            "updated_at": "2020-03-26T05:06:12Z",
            "closed_at": null,
            "body": "Summary.\r\nI've posted this in the requests.toolbelt issues as well as urlib3 issues.  My challenge is following what is happening from from requests.toolbelt all the way to urllib3 is beyond my capabilities right now and I am looking for help. \r\n\r\nThe original issue on requests toolbelt is here:\r\n\r\nhttps://github.com/requests/toolbelt/issues/189\r\n\r\nThe problem is shown in completeness here:\r\n\r\nhttps://github.com/JohnOmernik/jupyter_drill/blob/master/issue.md\r\n\r\nI also opened up an issue in URLLIB3:\r\n\r\nhttps://github.com/urllib3/urllib3/issues/1411\r\n\r\nHowever, here I was requested to show just with urllib3 the issue with assert_hostname (what the HostHeaderSSLAdapter is using) and here, urlib3 returned as expected.  However, requests is using a pool manager, and I am unclear how to utilize that at the urllib3 level (with understanding of what is happening enough to recreate the problem... my testing with urllib3 was just using the test scripts included with urllib3 that references assert_hostname.)\r\n\r\n\r\n## Expected Result\r\n\r\nI expect that using the HostHeaderSSL Adapter, I should be able to connect to an IP address, but pass the hostname to the SSL verification allowing a sticky connection to specific IP while validating the SSL certificate.  \r\n## Actual Result\r\nWhen I assert a new hostname, the non-standard port is rewritten to be the https default of 443. While the certificate host is correct, the connection fails because of instead of port 20004 it connects on port 443 when using assert_hostname\r\n\r\n## Reproduction Steps\r\n\r\nPlease see above posted URLs and issues, the best way to describe this is here:\r\n\r\nhttps://github.com/JohnOmernik/jupyter_drill/blob/master/issue.md\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.3\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"1.8.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.0-127-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"100020bf\",\r\n    \"version\": \"17.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020ff\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "JohnOmernik",
                "id": 1930065,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4730/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/403956171",
                    "id": 403956171,
                    "created_at": "2018-07-10T20:32:06Z",
                    "updated_at": "2018-07-10T20:32:06Z",
                    "author_association": "NONE",
                    "body": "As I posed in urllib3 (I am not sure who owns this issue) \r\n\r\nhttps://github.com/urllib3/urllib3/issues/1411\r\n\r\nBasically the issue is by setting the hostheader to a name, if the webserver provides a 303 redirect, it will use that host, and sessions follows redirects by default.  Thus, allow_redirects causes the odd port 443 behaivior. Not sure which project this can be fixed in, will also post in reqests_toolbelt. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/403956171/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "JohnOmernik",
                        "id": 1930065,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007263601291924715,
                        "severe_toxicity": 0.00011274092685198411,
                        "obscene": 0.00019145778787788004,
                        "threat": 0.00011442073446232826,
                        "insult": 0.00017728880629874766,
                        "identity_attack": 0.00013383386249188334
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/403957335",
                    "id": 403957335,
                    "created_at": "2018-07-10T20:36:21Z",
                    "updated_at": "2018-07-10T20:36:21Z",
                    "author_association": "MEMBER",
                    "body": "Hi @JohnOmernik, we implement our own redirect logic, so it\u2019s likely this is related to Requests. I haven\u2019t had a chance to look yet, so I haven\u2019t been able to confirm that.\r\n\r\nThis *looks* like it is something that needs to be tracked in the tool belt repository, but we can wait until a maintainer has a chance to verify that. I\u2019ll hopefully be able to get to this towards the end of the week.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/403957335/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000532447244040668,
                        "severe_toxicity": 0.00013523356756195426,
                        "obscene": 0.00019977998454123735,
                        "threat": 0.00013461164780892432,
                        "insult": 0.00018002903379965574,
                        "identity_attack": 0.0001442997599951923
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/404136579",
                    "id": 404136579,
                    "created_at": "2018-07-11T11:28:47Z",
                    "updated_at": "2018-07-11T11:28:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@nateprewitt this is being tracked there but the problem is that Requests seems to decide to override ports. The HostHeader adapter is doing all the right things. Something is going wrong elsewhere.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/404136579/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008726044325158,
                        "severe_toxicity": 0.00010503720841370523,
                        "obscene": 0.0001871992280939594,
                        "threat": 0.00010835765715455636,
                        "insult": 0.00018029563943855464,
                        "identity_attack": 0.00013718422269448638
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/604231747",
                    "id": 604231747,
                    "created_at": "2020-03-26T05:06:12Z",
                    "updated_at": "2020-03-26T05:06:12Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Any update?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/604231747/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ofek",
                        "id": 9677399,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006914294790476561,
                        "severe_toxicity": 0.00011563109001144767,
                        "obscene": 0.0001875129237305373,
                        "threat": 0.0001093390237656422,
                        "insult": 0.00017920472600962967,
                        "identity_attack": 0.0001366927317576483
                    }
                }
            ]
        },
        "217": {
            "html_url": "https://github.com/psf/requests/issues/4687",
            "id": 332556014,
            "number": 4687,
            "title": "Response.content is wasteful in time and memory for large inputs",
            "created_at": "2018-06-14T20:39:24Z",
            "updated_at": "2018-06-16T17:01:14Z",
            "closed_at": null,
            "body": "https://github.com/requests/requests/blob/883caaf145fbe93bd0d208a6b864de9146087312/requests/models.py#L827\r\n\r\niter chunk is 10K, let's say we have binary content that is about 10MB, the .join first converts the iter_content to a list of 1000 items of 10K each (if it's not chunked), then it creates a new large 10MB string, copies all of them to it, then returns it.\r\n\r\nThis both creates pressure on the allocator and at the peak takes * 2 the memory of the input.\r\n\r\nWithout resorting to C, and if we know the input size (i.e. not chunked), we can create a bytearray and fill it with one iteration at a time. On my computer it is about *2-3 faster, takes half the memory and causes 1/2 of page reclaims.\r\n\r\nThe problem is that is of course that it returns a bytearray and not a bytes type, maybe this should be a helper method for large inputs if people care about this stuff ?\r\n\r\n```python\r\narr = bytearray(totalsize)\r\ni = 0\r\nfor item in self.iter_content(CONTENT_CHUNK_SIZE):\r\n  l = len(item)\r\n  arr[i:i + l] = item\r\n  i += l\r\nreturn arr\r\n```",
            "author_association": "NONE",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "tzickel",
                "id": 7489847,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4687/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/397517683",
                    "id": 397517683,
                    "created_at": "2018-06-15T05:29:08Z",
                    "updated_at": "2018-06-15T05:29:08Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for taking the time start this discussion, @tzickel! My initial thoughts here are mostly about usability and expectations around Requests' API. We deal predominantly in byte strings and strings when handling data. Implementing the suggested change would break that, and converting the `bytesarray` back to `bytes` nullifies the memory savings.\r\n\r\nThe general idea here is correct though, this is what we recommended for large body content. Using `iter_content` on streamed responses is much faster/more efficient. This approach also allows the user to choose whatever data structure or allocation best fits their needs. We could look at adding a helper function to the [Requests toolbelt](https://github.com/requests/toolbelt), but since this is a 5-line function that can be optimized for different use cases, it may be easier to leave this to users to implement.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/397517683/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006161122000776231,
                        "severe_toxicity": 0.00012209435226395726,
                        "obscene": 0.0001779783342499286,
                        "threat": 0.00012910297664348036,
                        "insult": 0.00017167725309263915,
                        "identity_attack": 0.0001409815886290744
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/397550277",
                    "id": 397550277,
                    "created_at": "2018-06-15T08:24:03Z",
                    "updated_at": "2018-06-16T17:01:14Z",
                    "author_association": "NONE",
                    "body": "My main issue is that I'm passing a large input (between a few MB to a few GB) to request toolbelt MultipartDecoder (because if it's not multipart I don't use .content, but stream it anyhow) and I'm looking for ways to optimize that workflow (considering I don't need the real input and that I need all the data in-memory). MultipartDecoder uses the request.content\r\n\r\nhttps://github.com/requests/toolbelt/blob/6d74296f0f267d9e06ba7828585dac61276d4e2b/requests_toolbelt/multipart/decoder.py#L156\r\n\r\nSo I'm looking for ways to optimize it (without maintaining code outside).\r\n\r\nI guess I should be using something like this:\r\nhttps://github.com/requests/toolbelt/pull/222\r\nAnd when I know the size of a part, I can directly stream into a preallocated bytearray (almost)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/397550277/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tzickel",
                        "id": 7489847,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008754051523283124,
                        "severe_toxicity": 0.00010951610602205619,
                        "obscene": 0.000199610716663301,
                        "threat": 0.00011881833052029833,
                        "insult": 0.0001779667945811525,
                        "identity_attack": 0.0001380389730911702
                    }
                }
            ]
        },
        "218": {
            "html_url": "https://github.com/psf/requests/issues/4664",
            "id": 327141477,
            "number": 4664,
            "title": "requests.Session doesn't properly handle closed keep-alive sessions",
            "created_at": "2018-05-29T01:10:35Z",
            "updated_at": "2024-02-22T15:49:48Z",
            "closed_at": null,
            "body": "Hello,\r\nthis was reported for requests 2.18.4 on Debian BTS[\u00b9] by Jonathan Lynch, since it's not Debian specific I'm forwarding here:\r\n\r\n>When a server reaps a keep-alive session it sends a FIN packet to the\r\nclient. Normally, requests handles this fine and rebuilds the session on\r\nthe next request. However, there is an edge case involving network latency\r\nthat is not properly handled:\r\n\r\n>If python sends a request at roughly the same time as the server closes the\r\nsession, then the server will send a RST (as the session is closed). Python\r\nreceives this RST on what it thought was a valid session and throws an\r\nerror:\r\n\r\n```\r\nrequests.exceptions.ConnectionError: ('Connection aborted.',\r\nRemoteDisconnected('Remote end closed connection without response',))\r\n```\r\n>The reason I consider this a bug is because python received the FIN packet\r\nbefore it received the RST. As a result, it shouldn't be surprised when the\r\nconnection is subsequently aborted. It is an edge case, but the client has\r\nenough information available to it that it could have handled it correctly.\r\n\r\n>The workaround is to set max_retries on the Session via an HTTPAdaptor, but\r\nI believe the correct behavior when the FIN is received is to rebuild the\r\nsession and re-send any requests that were in-flight (rather than throwing\r\nan error). Requests correctly handles the FIN packet if there are no\r\nin-flight requests, but if there are in-flight requests it ignores it and\r\ninstead throws an error.\r\n\r\nI will ask Jonathan to continue the discussion here. Thanks!\r\n\r\n[\u00b9]  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=899406",
            "author_association": "CONTRIBUTOR",
            "comments": 17,
            "state": "open",
            "user": {
                "login": "eriol",
                "id": 212279,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4664/reactions",
                "total_count": 13,
                "+1": 13,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/392751706",
                    "id": 392751706,
                    "created_at": "2018-05-29T12:03:22Z",
                    "updated_at": "2018-05-29T12:03:22Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hi there @eriol, Thanks for passing this on. Can you share links to any custom patches Debian has written and is applying to Requests at this time?\r\n\r\nJonathan, can you share your system information (as requested from all bug reporters) as well as the full traceback of what you're trying to do.\r\n\r\nThe short answer may be that we can't help in this particular case since we're so far removed from the networking stack, unfortunately.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/392751706/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005796401528641582,
                        "severe_toxicity": 0.00012400226842146367,
                        "obscene": 0.00017923394625540823,
                        "threat": 0.0001292394590564072,
                        "insult": 0.000175081382622011,
                        "identity_attack": 0.00014084440772421658
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/392859143",
                    "id": 392859143,
                    "created_at": "2018-05-29T17:11:17Z",
                    "updated_at": "2018-05-29T17:11:17Z",
                    "author_association": "NONE",
                    "body": "Hi @sigmavirus24 , I was able to reproduce this on multiple systems. It first surfaced in our dockerized automated test environment (not sure what OS the containers are based on), and I was able to reproduce it running the same code locally on my Mac. I was able to eventually simply the repro down to:\r\n\r\n```\r\nimport requests\r\nfrom time import sleep\r\n\r\nimport logging\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\ns = requests.Session()\r\ns.verify = False  # self-signed cert\r\n\r\nwhile True:\r\n    s.get('https://the-server:8443')\r\n    sleep(5)\r\n```\r\n\r\nThe (nodejs) server being hit by the code prunes keepalives older than 5 seconds, so having python hit it at 5 second intervals with only ~30ms of network latency was able to consistently reproduce the issue in only a few loops.\r\n\r\nSetting the sleep to either 4 seconds or 6 seconds removed the issue: at 4 seconds, the session was always refreshed before the server's prune interval, and at 6 seconds the server always pruned the session before the next request, causing python to (correctly) rebuild it. It was when the server pruned the session at the \"same time\" (as defined by network latency) as python reused it that trouble arose.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/392859143/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jimethn",
                        "id": 89885,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006945337518118322,
                        "severe_toxicity": 0.0001181643528980203,
                        "obscene": 0.00019629960297606885,
                        "threat": 0.00011827934213215485,
                        "insult": 0.00017738297174219042,
                        "identity_attack": 0.0001381968759233132
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/393134866",
                    "id": 393134866,
                    "created_at": "2018-05-30T12:00:10Z",
                    "updated_at": "2018-05-30T12:00:10Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Right, so that makes me suspect this is an issue in urllib3 more specifically than in Requests. It would still be helpful to have the traceback from that exception if you can share it @jimethn ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/393134866/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006591829005628824,
                        "severe_toxicity": 0.00011488427844597027,
                        "obscene": 0.00018040294526144862,
                        "threat": 0.00012184929073555395,
                        "insult": 0.00017316891171503812,
                        "identity_attack": 0.00013522259541787207
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/393238618",
                    "id": 393238618,
                    "created_at": "2018-05-30T17:04:19Z",
                    "updated_at": "2018-05-30T17:04:19Z",
                    "author_association": "NONE",
                    "body": "Sorry @sigmavirus24 , I think you are right in that the underlying urllib3 is responsible. Here is the stack trace, as requested:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 601, in urlopen\r\n    chunked=chunked)\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 387, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 2, in raise_from\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 383, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 1331, in getresponse\r\n    response.begin()\r\n  File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 297, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 266, in _read_status\r\n    raise RemoteDisconnected(\"Remote end closed connection without\"\r\nhttp.client.RemoteDisconnected: Remote end closed connection without response\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/adapters.py\", line 440, in send\r\n    timeout=timeout\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 639, in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/util/retry.py\", line 357, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/packages/six.py\", line 685, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 601, in urlopen\r\n    chunked=chunked)\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 387, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 2, in raise_from\r\n  File \"/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 383, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 1331, in getresponse\r\n    response.begin()\r\n  File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 297, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/http/client.py\", line 266, in _read_status\r\n    raise RemoteDisconnected(\"Remote end closed connection without\"\r\nurllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response',))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 2, in <module>\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 521, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 508, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 618, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/adapters.py\", line 490, in send\r\n    raise ConnectionError(err, request=request)\r\nrequests.exceptions.ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response',))\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/393238618/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jimethn",
                        "id": 89885,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007265903404913843,
                        "severe_toxicity": 0.00011426067067077383,
                        "obscene": 0.00018700851069297642,
                        "threat": 0.00011966497550019994,
                        "insult": 0.0001719801948638633,
                        "identity_attack": 0.00013723524170927703
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/393268198",
                    "id": 393268198,
                    "created_at": "2018-05-30T18:27:04Z",
                    "updated_at": "2018-05-30T18:27:04Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hello @sigmavirus24, many thanks for the fast reply and sorry if I did not manage to reply earlier. Since version 2.18.1-1 I dropped all the patches for requests, but I still have some patches on urllib3:\r\n\r\nhttps://sources.debian.org/patches/python-urllib3/1.22-1/\r\n\r\nthe biggest one is to not use the vendored six module. \r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/393268198/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eriol",
                        "id": 212279,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005502519779838622,
                        "severe_toxicity": 0.00012922233145218343,
                        "obscene": 0.00018273317255079746,
                        "threat": 0.00013146820128895342,
                        "insult": 0.00017521683184895664,
                        "identity_attack": 0.0001433064608136192
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/410533121",
                    "id": 410533121,
                    "created_at": "2018-08-05T16:57:58Z",
                    "updated_at": "2018-08-05T16:57:58Z",
                    "author_association": "NONE",
                    "body": "@eriol is that patch the solution to this issue? If not, what did you do to get the code to work?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/410533121/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bluworld",
                        "id": 38594335,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009877232369035482,
                        "severe_toxicity": 9.933897672453895e-05,
                        "obscene": 0.00017425781697966158,
                        "threat": 0.00010424215724924579,
                        "insult": 0.00019080389756709337,
                        "identity_attack": 0.00014058759552426636
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/411207599",
                    "id": 411207599,
                    "created_at": "2018-08-07T21:24:21Z",
                    "updated_at": "2018-08-07T21:24:21Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@bluworld unfortunately no, the mentioned patches are unrelated to this issue.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/411207599/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eriol",
                        "id": 212279,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006558782188221812,
                        "severe_toxicity": 0.00011626738705672324,
                        "obscene": 0.00018267796258442104,
                        "threat": 0.00011591712973313406,
                        "insult": 0.00017827605188358575,
                        "identity_attack": 0.0001354117557639256
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/426917652",
                    "id": 426917652,
                    "created_at": "2018-10-04T07:43:42Z",
                    "updated_at": "2018-10-04T07:43:42Z",
                    "author_association": "NONE",
                    "body": "Maybe this is not the best place to ask but do you know if anybody submitted the issue to urllib3? I personally couldn't find anything. I'm being hit by this issue quite a lot with apache2 web server where the default keep-alive timeout is 5 seconds.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/426917652/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "reederz",
                        "id": 3193560,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006305609713308513,
                        "severe_toxicity": 0.00011989660561084747,
                        "obscene": 0.00017940305406227708,
                        "threat": 0.00012917180720251054,
                        "insult": 0.00017304297944065183,
                        "identity_attack": 0.0001378882152494043
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/595495602",
                    "id": 595495602,
                    "created_at": "2020-03-05T23:23:22Z",
                    "updated_at": "2020-03-05T23:23:22Z",
                    "author_association": "NONE",
                    "body": "For what it's worth, I don't think there's any workaround to this besides catching the `ConnectionError` explicitly - `urllib3.Retry` has never retried on a `ConnectionError` (as far I can tell) cf https://github.com/urllib3/urllib3/blob/master/src/urllib3/util/retry.py#L9 cc @eriol ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/595495602/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kharmabum",
                        "id": 783557,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007714703679084778,
                        "severe_toxicity": 0.00011106088641099632,
                        "obscene": 0.0001927029952639714,
                        "threat": 0.00011053515481762588,
                        "insult": 0.00017818802734836936,
                        "identity_attack": 0.00013327963824849576
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/663556039",
                    "id": 663556039,
                    "created_at": "2020-07-24T14:06:29Z",
                    "updated_at": "2020-07-24T14:06:29Z",
                    "author_association": "NONE",
                    "body": "Hi,\r\n\r\nI think i found a solution and created pull requests for urllib3 -> urllib3/urllib3#1911\r\nAfter it will be merged ( I hope ) , requests should raise MaxRetries error as it should , because they are setting max_retries = 0 to retry object of urllib3 by default - > this should be discussed if better not to leave default urllib3 value which is 3 , or pass 1.\r\n\r\nMore info -> https://bugs.python.org/issue3566 , https://hg.python.org/cpython/rev/eba80326ba53 , https://bugs.python.org/issue41345",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/663556039/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "keuko",
                        "id": 24723985,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007159144151955843,
                        "severe_toxicity": 0.000113366411824245,
                        "obscene": 0.0001818281743908301,
                        "threat": 0.00011739078036043793,
                        "insult": 0.0001748256472637877,
                        "identity_attack": 0.00013892646529711783
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/773739357",
                    "id": 773739357,
                    "created_at": "2021-02-05T02:29:07Z",
                    "updated_at": "2021-02-05T02:29:07Z",
                    "author_association": "NONE",
                    "body": "It is because the OS doent have the tcp keep alive enabled, causing that the server drop the connection\r\n\r\nI did this in Linux\r\n\r\n\r\n    **import socket\r\n    from urllib3.connection import HTTPConnection\r\n    HTTPConnection.default_socket_options = HTTPConnection.default_socket_options + [\r\n        (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPIDLE, 45)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPINTVL, 10)\r\n        ,(socket.SOL_TCP, socket.TCP_KEEPCNT, 6)\r\n         ]**\r\n\r\n    from requests import session\r\n    self.session = session()\r\n\r\nAnd no more ConnectionReset, ConnectionTimeOut or Even ConnectionReadTimeOut",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/773739357/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012524710036814213,
                        "severe_toxicity": 9.938815492205322e-05,
                        "obscene": 0.0002262442430946976,
                        "threat": 0.00011297164746792987,
                        "insult": 0.00018546626961324364,
                        "identity_attack": 0.0001323320175288245
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/774199169",
                    "id": 774199169,
                    "created_at": "2021-02-05T18:13:05Z",
                    "updated_at": "2021-02-05T18:13:05Z",
                    "author_association": "NONE",
                    "body": "@jakermx yes \u2013 but your TCP Keep-Alive settings can only reduce the issue, not completely do away with it (there is always a window, however small, where the connection might be closed).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/774199169/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "malthe",
                        "id": 26405,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006481462041847408,
                        "severe_toxicity": 0.0001196622324641794,
                        "obscene": 0.0001788885419955477,
                        "threat": 0.00012401504500303417,
                        "insult": 0.0001760840677889064,
                        "identity_attack": 0.00014024536358192563
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/774202366",
                    "id": 774202366,
                    "created_at": "2021-02-05T18:19:14Z",
                    "updated_at": "2021-02-05T18:19:14Z",
                    "author_association": "NONE",
                    "body": "@malthe  Well, so, is this issue \"somehow\" resolveable ? In openstack where tons of requests are send to API, from time to time there is an issue related to this ..\r\n\r\nI'm not saying it's regular bug, but how can be this fixed , is it possible ? \r\n\r\nEven if this issue (for example) in openstack is in small amount, from time to time something just fail ..",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/774202366/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "keuko",
                        "id": 24723985,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014005476841703057,
                        "severe_toxicity": 9.56201329245232e-05,
                        "obscene": 0.0002101850841427222,
                        "threat": 0.00010336140258004889,
                        "insult": 0.00019601699023041874,
                        "identity_attack": 0.00014088483294472098
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/774206403",
                    "id": 774206403,
                    "created_at": "2021-02-05T18:25:43Z",
                    "updated_at": "2021-02-05T18:25:43Z",
                    "author_association": "NONE",
                    "body": "@keuko short of writing a custom `HTTPAdapter` (overriding the `send` method) \u2013 I don't know.\r\n\r\nI use code such as the following and attach the adapter using `Session.mount` (see https://requests.readthedocs.io/en/master/user/advanced/#transport-adapters).\r\n\r\n```python\r\nclass CustomHTTPAdapter(HTTPAdapter):\r\n    def send(self, *args, **kwargs):\r\n        for attempt in range(ATTEMPTS):\r\n            if attempt > 0:\r\n                LOGGER.info(\"Retrying after connection error\")\r\n            try:\r\n                return super().send(*args, **kwargs)\r\n            except ConnectionError as exc:\r\n                LOGGER.info(\"Connection error: %s\", exc)\r\n                saved = exc\r\n                continue\r\n\r\n        raise saved\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/774206403/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "malthe",
                        "id": 26405,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010914078447967768,
                        "severe_toxicity": 0.00010174590715905651,
                        "obscene": 0.00021806484437547624,
                        "threat": 0.00010525830293772742,
                        "insult": 0.00018673909653443843,
                        "identity_attack": 0.0001327669306192547
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/774242015",
                    "id": 774242015,
                    "created_at": "2021-02-05T19:30:27Z",
                    "updated_at": "2021-02-05T19:30:27Z",
                    "author_association": "NONE",
                    "body": "I agree when you said  that the Session is not handling as should the connections, and I think that the reasson of the adapters...the RFC for \"Persistent\" Connections is very  weird...it defines that the client should start sending tcp keep alive packets after 2 hours of no data received.. for a Service Oriented Server....it is not costable having idle sessions. I.E. A video Streming server...chaturbate for say something.... or netflix, users navigate throu the options and then picjk a video or room, but  too many times , we a, as userrs let the  video playing and fall asleep..so...we are consuming resourses that at the end we are causining our provider to spend more so they will increaase thier prices and so on....\r\n\r\nSo in the case, you software raise an exception instead of handling as should the connection...it is because the server side, maybe no the server software it, the load balancers, sanboxes or any other box in tyhe middle.\r\n\r\nThats Why I SUGGESTED to enable a lower layer connection guard that wull ensure that the session...well the last request, keep open until the server says....WTF and clloses thw connection properly instead of just dropping it.\r\n\r\nso...it is work of no just Requests team...it really depens on 7 teams...one per OSI layer, actually  4, heheh.\r\n\r\nSoI am just tryiong to let you know that we can be creatives and find solutinos, and try to understnad that  is the Module is called Request , they handle requests...and suport itself on other specific modules.... \r\n\r\nXD",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/774242015/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jakermx",
                        "id": 45062549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.005737018305808306,
                        "severe_toxicity": 0.00012543507909867913,
                        "obscene": 0.0008851025486364961,
                        "threat": 0.00016483110084664077,
                        "insult": 0.000393401162000373,
                        "identity_attack": 0.0001813174458220601
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1634315040",
                    "id": 1634315040,
                    "created_at": "2023-07-13T14:09:16Z",
                    "updated_at": "2023-07-13T14:10:11Z",
                    "author_association": "NONE",
                    "body": "> @keuko short of writing a custom `HTTPAdapter` (overriding the `send` method) \u2013 I don't know.\r\n> \r\n> I use code such as the following and attach the adapter using `Session.mount` (see https://requests.readthedocs.io/en/master/user/advanced/#transport-adapters).\r\n> \r\n> ```python\r\n> class CustomHTTPAdapter(HTTPAdapter):\r\n>     def send(self, *args, **kwargs):\r\n>         for attempt in range(ATTEMPTS):\r\n>             if attempt > 0:\r\n>                 LOGGER.info(\"Retrying after connection error\")\r\n>             try:\r\n>                 return super().send(*args, **kwargs)\r\n>             except ConnectionError as exc:\r\n>                 LOGGER.info(\"Connection error: %s\", exc)\r\n>                 saved = exc\r\n>                 continue\r\n> \r\n>         raise saved\r\n> ```\r\n\r\nBe careful with this workaround. Because ConnectionError is [just a wrapped](https://github.com/psf/requests/blob/3.0/requests/adapters.py#L545) for MaxRetryError and MaxRetryError can contain connection timeout error and read timeout error and others.  If you want to set different retries for connection and read errors or other errors this workaround cannot help you.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1634315040/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sirkonst",
                        "id": 69752,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0019518871558830142,
                        "severe_toxicity": 9.823813888942823e-05,
                        "obscene": 0.00028695911169052124,
                        "threat": 0.0001076043481589295,
                        "insult": 0.00021839317923877388,
                        "identity_attack": 0.00014030995953362435
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1959668681",
                    "id": 1959668681,
                    "created_at": "2024-02-22T15:17:57Z",
                    "updated_at": "2024-02-22T15:49:48Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 \r\ncan anyone help me with the below error\r\nError occurred ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\r\nI am using requests==2.28.2 version and while logging into tableau server using rest api the error is coming.\r\nAs I am first creating the session and then doing the post request.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1959668681/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rishav667",
                        "id": 112388257,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005940146511420608,
                        "severe_toxicity": 0.000123738864203915,
                        "obscene": 0.00018485875625628978,
                        "threat": 0.0001249344350071624,
                        "insult": 0.00017511278565507382,
                        "identity_attack": 0.00013878625759389251
                    }
                }
            ]
        },
        "219": {
            "html_url": "https://github.com/psf/requests/issues/4601",
            "id": 316075823,
            "number": 4601,
            "title": "Requests memory leak",
            "created_at": "2018-04-19T23:33:06Z",
            "updated_at": "2023-09-30T20:53:51Z",
            "closed_at": null,
            "body": "Summary.\r\n\r\n## Expected Result\r\n\r\nProgram running normally\r\n\r\n## Actual Result\r\n\r\nProgram consuming all ram till stops working\r\n\r\n## Reproduction Steps\r\nPseudocode:\r\n```python\r\ndef function():\r\n    proxies = {\r\n        'https': proxy\r\n    }\r\n    session = requests.Session()\r\n    session.headers.update({'User-Agent': 'user - agent'})\r\n    try:                                           #\r\n        login = session.get(url, proxies=proxies)  # HERE IS WHERE MEMORY LEAKS\r\n    except:                                        #\r\n        return -1                                  #\r\n    return 0\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
            "author_association": "NONE",
            "comments": 25,
            "state": "open",
            "user": {
                "login": "Munroc",
                "id": 38544207,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4601/reactions",
                "total_count": 10,
                "+1": 10,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/382949617",
                    "id": 382949617,
                    "created_at": "2018-04-20T02:34:03Z",
                    "updated_at": "2018-04-20T02:34:03Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Please provide us with the output of\r\n\r\n```\r\npython -m requests.help\r\n```\r\n\r\nIf that is unavailable on your version of Requests please provide some basic information about your system (Python version, operating system, etc).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/382949617/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005238523008301854,
                        "severe_toxicity": 0.0001352685212623328,
                        "obscene": 0.00018950462981592864,
                        "threat": 0.00013500718341674656,
                        "insult": 0.00017662433674558997,
                        "identity_attack": 0.0001441369386157021
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/383178546",
                    "id": 383178546,
                    "created_at": "2018-04-20T18:10:44Z",
                    "updated_at": "2018-04-20T18:10:44Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 Done",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/383178546/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Munroc",
                        "id": 38544207,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008872387697920203,
                        "severe_toxicity": 0.00010316231055185199,
                        "obscene": 0.0001865412195911631,
                        "threat": 0.00010177763761021197,
                        "insult": 0.00017857667990028858,
                        "identity_attack": 0.0001365923963021487
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/383181118",
                    "id": 383181118,
                    "created_at": "2018-04-20T18:20:20Z",
                    "updated_at": "2018-04-20T18:20:20Z",
                    "author_association": "MEMBER",
                    "body": "Hey @munroc, a couple quick questions about your threading implementation since it\u2019s not included in the pseudo code.\r\n\r\n* Are you creating a new session for every thread and what size is the threadpool you're using?\r\n\r\n* What tool are you using to determine where the leak is coming from? Would you mind sharing the results?\r\n\r\n\r\nWe\u2019ve had hints of memory leaks around sessions for a while now, but I\u2019m not sure we\u2019ve found a smoking gun or truly confirmed impact.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/383181118/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010650662006810308,
                        "severe_toxicity": 9.92863206192851e-05,
                        "obscene": 0.00018694913887884468,
                        "threat": 0.00010884428047575057,
                        "insult": 0.00018347798322793096,
                        "identity_attack": 0.0001410646946169436
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/383198567",
                    "id": 383198567,
                    "created_at": "2018-04-20T19:30:29Z",
                    "updated_at": "2018-04-20T19:30:29Z",
                    "author_association": "NONE",
                    "body": "@nateprewitt Hello, yes im creating a new session for every thread. The thread pool is 30. I have tryied with 2 - 200 threads and memory leaks anyway. Im not using a tool, i just did this changes to the function:\r\nput return 0 before login = session.get and no memory leak. if i put return 0 after login = session.get memory starts leaking. If you want i can send you my source code is not too large.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/383198567/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Munroc",
                        "id": 38544207,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008692836854606867,
                        "severe_toxicity": 0.00010527647100389004,
                        "obscene": 0.0001858427858678624,
                        "threat": 0.00011538546823430806,
                        "insult": 0.00017728981038089842,
                        "identity_attack": 0.0001337556604994461
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/390530169",
                    "id": 390530169,
                    "created_at": "2018-05-21T01:31:32Z",
                    "updated_at": "2018-05-22T00:37:20Z",
                    "author_association": "NONE",
                    "body": "@Munroc if we have the full code, then I think it would be easier to isolate the actual cause. But based on the code gist that was provided, I think it is very hard to conclude that there is a memory leak.\r\n\r\nAs you have mentioned, if you `return` immediately before calling `session.get`, then only `proxies` and `session` objects will exist in the memory (oversimplified.. but I hope you get the idea :smile:). However, once you call `session.get(url, proxies=proxies)`, the HTML of the `url` will be retrieved and locally saved to the `login` variable. Which means, each `session.get` call will \"look like\" they are leaking memory, but they are actually behaving normally by (memory) linearly increasing by the size of `url` result.\r\n\r\nHowever, let's say that you were using threads and `.join()` them immediately afterwards. In that case, I think we need to look at how your threads were managed - and whether they were closed/cleaned properly.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/390530169/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "initbar",
                        "id": 12630151,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006298336666077375,
                        "severe_toxicity": 0.0001204775326186791,
                        "obscene": 0.00018668320262804627,
                        "threat": 0.00012197425530757755,
                        "insult": 0.0001725376641843468,
                        "identity_attack": 0.00013804963964503258
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/429666709",
                    "id": 429666709,
                    "created_at": "2018-10-14T21:56:51Z",
                    "updated_at": "2018-10-14T21:58:48Z",
                    "author_association": "NONE",
                    "body": "@LeoSZN I think in your specific example, you're closing only the last `Process` object after generating multiple `Process` per `urls` elements.\r\n\r\nCould you try daemonizing them using `p.daemon = True` and run them (so that once the main thread terminates, all the spawned child processes dies also)? Otherwise, store the spawned processes in a separate array and make sure to close all of them using a loop.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/429666709/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "initbar",
                        "id": 12630151,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007725316099822521,
                        "severe_toxicity": 0.00010969115828629583,
                        "obscene": 0.00017478449444752187,
                        "threat": 0.00012065102782798931,
                        "insult": 0.00017967027088161558,
                        "identity_attack": 0.00013595010386779904
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/429693403",
                    "id": 429693403,
                    "created_at": "2018-10-15T02:55:14Z",
                    "updated_at": "2018-10-15T02:55:22Z",
                    "author_association": "NONE",
                    "body": "@initbar \r\n\r\nDo I need to run `p.daemon = True` in the loop or outside the loop before `p.join()` ? By the way do I still need `p.join()` after applying `p.daemon = True` ?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/429693403/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "leoszn",
                        "id": 30168748,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009193430305458605,
                        "severe_toxicity": 0.0001019784394884482,
                        "obscene": 0.00018190412083640695,
                        "threat": 0.00011420380906201899,
                        "insult": 0.00018134010315407068,
                        "identity_attack": 0.00013366017083171755
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/430302016",
                    "id": 430302016,
                    "created_at": "2018-10-16T16:19:48Z",
                    "updated_at": "2018-10-16T16:20:19Z",
                    "author_association": "NONE",
                    "body": "_Ook, I was kicked from the new topic to this one, so let me join yours.\r\nMay be this issue provide more information and will step up the issue solving..._\r\n\r\nI'm running Telegram bot and noticed the free memory degradation when running bot for a long time. Firstly, I suspect my code; then I suspect bot and finally I came to requests. :)\r\nI used **len(gc.get_objects())** to identify that problem exists. I located the communication routines, then cleared all bot code and comes to the example that raises the count of gc objects on every iteration.\r\n\r\n## Expected Result\r\n\r\n**len(gc.get_objects())** should give the **same** result on every loop iteration\r\n\r\n## Actual Result\r\n\r\nThe value of **len(gc.get_objects())** increases on every loop iteration.\r\n```\r\nTest N2\r\nGetObjects len: 27959\r\nTest N3\r\nGetObjects len: 27960\r\nTest N4\r\nGetObjects len: 27961\r\nTest N5\r\nGetObjects len: 27962\r\nTest N6\r\nGetObjects len: 27963\r\nTest N7\r\nGetObjects len: 27964\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```\r\ntoken = \"XXX:XXX\"\r\nchat_id = '111'\r\nproxy = {'https':'socks5h://ZZZ'} #You may need proxy to run this in Russia\r\n\r\nfrom time import sleep\r\nimport gc, requests\r\n\r\ndef garbage_info():\r\n    res = \"\"\r\n    res += \"\\nGetObjects len: \" + str(len(gc.get_objects()))\r\n    return res\r\n\r\ndef tester():\r\n    count = 0\r\n    while(True):\r\n        sleep(1)\r\n        count += 1\r\n        msg = \"\\nTest N{0}\".format(count) + garbage_info()\r\n        print(msg)\r\n\r\n        method_url = r'sendMessage'\r\n        payload = {'chat_id': str(chat_id), 'text': msg}\r\n\r\n        request_url = \"https://api.telegram.org/bot{0}/{1}\".format(token, method_url)\r\n        method_name = 'get'\r\n\r\n        session = requests.session()\r\n        req = requests.Request(\r\n            method=method_name.upper(),\r\n            url=request_url,\r\n            params=payload\r\n        )\r\n        prep = session.prepare_request(req)\r\n\r\n        settings = session.merge_environment_settings(\r\n            prep.url, None, None, None, None)\r\n#            prep.url, proxy, None, None, None)  #Change the line to enable proxy\r\n        send_kwargs = {\r\n            'timeout': None,\r\n            'allow_redirects': None,\r\n        }\r\n        send_kwargs.update(settings)\r\n        resp = session.send(prep, **send_kwargs)\r\n\r\n        # For more clean output\r\n        gc.collect()\r\n\r\ntester()\r\n```\r\n\r\n## System Information\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.3.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-36-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010009f\",\r\n    \"version\": \"17.5.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010007f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n_The same behaviour I had on Python 3.5.3 on Windows10._",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/430302016/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Badiboy",
                        "id": 5613421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.007380092050880194,
                        "severe_toxicity": 0.00011247805377934128,
                        "obscene": 0.000737286638468504,
                        "threat": 0.0001531415618956089,
                        "insult": 0.00046153392759151757,
                        "identity_attack": 0.0001920840295497328
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/430656739",
                    "id": 430656739,
                    "created_at": "2018-10-17T14:42:42Z",
                    "updated_at": "2018-10-17T14:42:42Z",
                    "author_association": "NONE",
                    "body": "@LeoSZN \r\n\r\n> @initbar\r\n> \r\n> Do I need to run `p.daemon = True` in the loop or outside the loop before `p.join()` ? By the way do I still need `p.join()` after applying `p.daemon = True` ?\r\n\r\n```python\r\n# ..\r\n     for i in urls:\r\n        p = Process(target=main, args=(i,))\r\n        p.daemon = True  # before `.start`\r\n        p.start()\r\n# ..\r\n```\r\n\r\nAs a minor note, you *can* still `.join` daemon processes -- but they are near-guaranteed to be killed when their parent process terminates (unless they somehow become unintentionally orphaned; in which case, please let me know! I've love to learn more about it).\r\n\r\nOtherwise, you can store the `Process` objects separately as an array and join in the end:\r\n\r\n```python\r\n# ..\r\nprocesses = [ \r\n  Process(target=main, args=(i,))\r\n  for i in urls\r\n]\r\n# start the process activity.\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/430656739/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "initbar",
                        "id": 12630151,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009397200192324817,
                        "severe_toxicity": 0.00010533711611060426,
                        "obscene": 0.00018889036437030882,
                        "threat": 0.00011816852929769084,
                        "insult": 0.0001760914601618424,
                        "identity_attack": 0.0001365185744361952
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/433301488",
                    "id": 433301488,
                    "created_at": "2018-10-26T06:31:15Z",
                    "updated_at": "2018-10-26T06:31:15Z",
                    "author_association": "NONE",
                    "body": "> ## Expected Result\r\n> **len(gc.get_objects())** should give the **same** result on every loop iteration\r\n\r\nThe reason of this behaviour was found in \"requests\" cache mechanism.\r\n\r\nIt works incorrect (suspected): it adds a cache record to every call to Telegram API URL (instead of caching it once). But it does not lead to the memory leak, because cache size is limited to 20 and cache is resetting after reaching this limit and the growing number of objects will be decreased back to initial value.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/433301488/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Badiboy",
                        "id": 5613421,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008010833407752216,
                        "severe_toxicity": 0.00010934653255390003,
                        "obscene": 0.00018980156164616346,
                        "threat": 0.0001131626995629631,
                        "insult": 0.00017713301349431276,
                        "identity_attack": 0.0001339113514404744
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/447814537",
                    "id": 447814537,
                    "created_at": "2018-12-17T11:33:41Z",
                    "updated_at": "2018-12-17T11:33:41Z",
                    "author_association": "NONE",
                    "body": "Similar issue. Requests eats memory when running in thread. Code to reproduce here:\r\n\r\n```python\r\nimport gc\r\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\r\nimport requests\r\nfrom memory_profiler import profile\r\n\r\ndef run_thread_request(sess, run):\r\n    response = sess.get('https://www.google.com')\r\n    return\r\n\r\n@profile\r\ndef main():\r\n    sess = requests.session()\r\n    with ThreadPoolExecutor(max_workers=1) as executor:\r\n        print('Starting!')\r\n        tasks = {executor.submit(run_thread_request, sess, run):\r\n                    run for run in range(50)}\r\n        for _ in as_completed(tasks):\r\n            pass\r\n    print('Done!')\r\n    return\r\n\r\n@profile\r\ndef calling():\r\n    main()\r\n    gc.collect()\r\n    return\r\n\r\nif __name__ == '__main__':\r\n    calling()\r\n```\r\n\r\nIn the code given above I pass a session object around, but if I replace it with just running `requests.get` nothing changes.\r\n\r\nOutput is:\r\n```\r\n\u279c  thread-test pipenv run python run.py\r\nStarting!\r\nDone!\r\nFilename: run.py\r\n\r\nLine #    Mem usage    Increment   Line Contents\r\n================================================\r\n    10     23.2 MiB     23.2 MiB   @profile\r\n    11                             def main():\r\n    12     23.2 MiB      0.0 MiB       sess = requests.session()\r\n    13     23.2 MiB      0.0 MiB       with ThreadPoolExecutor(max_workers=1) as executor:\r\n    14     23.2 MiB      0.0 MiB           print('Starting!')\r\n    15     23.4 MiB      0.0 MiB           tasks = {executor.submit(run_thread_request, sess, run):\r\n    16     23.4 MiB      0.0 MiB                       run for run in range(50)}\r\n    17     25.8 MiB      2.4 MiB           for _ in as_completed(tasks):\r\n    18     25.8 MiB      0.0 MiB               pass\r\n    19     25.8 MiB      0.0 MiB       print('Done!')\r\n    20     25.8 MiB      0.0 MiB       return\r\n\r\n\r\nFilename: run.py\r\n\r\nLine #    Mem usage    Increment   Line Contents\r\n================================================\r\n    22     23.2 MiB     23.2 MiB   @profile\r\n    23                             def calling():\r\n    24     25.8 MiB      2.6 MiB       main()\r\n    25     25.8 MiB      0.0 MiB       gc.collect()\r\n    26     25.8 MiB      0.0 MiB       return\r\n```\r\n\r\nAnd Pipfile looks like this:\r\n```\r\n[[source]]\r\nurl = \"https://pypi.python.org/simple\"\r\nverify_ssl = true\r\n\r\n[requires]\r\npython_version = \"3.6\"\r\n\r\n[packages]\r\nrequests = \"==2.21.0\"\r\nmemory-profiler = \"==0.55.0\"\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/447814537/reactions",
                        "total_count": 15,
                        "+1": 15,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jotunskij",
                        "id": 1684523,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0031035023275762796,
                        "severe_toxicity": 0.00010222973651252687,
                        "obscene": 0.00037903047632426023,
                        "threat": 0.0001233188231708482,
                        "insult": 0.00025180497323162854,
                        "identity_attack": 0.00015827766037546098
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/476851770",
                    "id": 476851770,
                    "created_at": "2019-03-26T21:03:51Z",
                    "updated_at": "2019-03-26T21:03:51Z",
                    "author_association": "NONE",
                    "body": "FWIW I am also experiencing a similar memory leak as @jotunskij here is more info\r\n\r\nhttps://github.com/nicolargo/glances/issues/1447",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/476851770/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "pawel-lmcb",
                        "id": 26512216,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008330349810421467,
                        "severe_toxicity": 0.0001076246626325883,
                        "obscene": 0.00019556914048735052,
                        "threat": 0.00010803513578139246,
                        "insult": 0.0001767247449606657,
                        "identity_attack": 0.00013376753486227244
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/489407193",
                    "id": 489407193,
                    "created_at": "2019-05-05T09:15:02Z",
                    "updated_at": "2019-05-05T09:15:02Z",
                    "author_association": "NONE",
                    "body": "I also do have same issue where using requests.get with threading actually eats up the memory by around 0.1 - 0.9 per requests and it is not \"clearing\" itself after the requests but saves it.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/489407193/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "BarryThrill",
                        "id": 15836342,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008726390078663826,
                        "severe_toxicity": 0.00010492208821233362,
                        "obscene": 0.0001876390160759911,
                        "threat": 0.00011058164818678051,
                        "insult": 0.00017461474635638297,
                        "identity_attack": 0.00013333582319319248
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/501564319",
                    "id": 501564319,
                    "created_at": "2019-06-13T06:16:44Z",
                    "updated_at": "2019-06-13T06:16:44Z",
                    "author_association": "NONE",
                    "body": "Same here, any work around?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/501564319/reactions",
                        "total_count": 10,
                        "+1": 10,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "popjxc",
                        "id": 1270907,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007065136451274157,
                        "severe_toxicity": 0.00011269890092080459,
                        "obscene": 0.0001788663794286549,
                        "threat": 0.00011901416291948408,
                        "insult": 0.0001808916131267324,
                        "identity_attack": 0.0001371750549878925
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/536095552",
                    "id": 536095552,
                    "created_at": "2019-09-27T21:02:37Z",
                    "updated_at": "2019-09-27T21:42:40Z",
                    "author_association": "NONE",
                    "body": "**Edit**\r\nMy issue looks to be due to using `verify=False` in requests, I've raised a bug under #5215 \r\n\r\n--------\r\n\r\nHaving the same issue. I have a simple script that spawns a thread, this thread calls a function that runs a while loop, this loop queries an API to check a status value and then sleeps for 10 seconds and then the loop will run again until the script is stopped.\r\n\r\nWhen using the `requests.get` function I can see the memory usage slowly creeping up via task manager by watching the spawned process.\r\n\r\nBut if I remove the `requests.get` call from the loop or use `urllib3` directly to make the get request, there is very little if any creep of the memory usage.\r\n\r\nI've watched this over a two hour period in both cases and when using `requests.get` the memory usage is at 1GB+ after two hours where as when using `urllib3` the memory usage is at approx. 20mb after two hours.\r\n\r\nPython 3.7.4 and requests 2.22.0",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/536095552/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tallona",
                        "id": 9195301,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008462374680675566,
                        "severe_toxicity": 0.00010658008977770805,
                        "obscene": 0.00018996541621163487,
                        "threat": 0.0001141850880230777,
                        "insult": 0.00017463888798374683,
                        "identity_attack": 0.00013481731002684683
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/537159859",
                    "id": 537159859,
                    "created_at": "2019-10-01T18:09:28Z",
                    "updated_at": "2019-10-01T18:09:28Z",
                    "author_association": "NONE",
                    "body": "It seems Requests is still in beta stage having memory leaks like that. Come on, guys, patch this up! \ud83d\ude09\ud83d\udc4d",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/537159859/reactions",
                        "total_count": 6,
                        "+1": 5,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "PedanticHacker",
                        "id": 14254085,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0015292532043531537,
                        "severe_toxicity": 9.111899271374568e-05,
                        "obscene": 0.00019370568043086678,
                        "threat": 0.0001101901798392646,
                        "insult": 0.00020264970953576267,
                        "identity_attack": 0.00014375371392816305
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/537428922",
                    "id": 537428922,
                    "created_at": "2019-10-02T10:14:02Z",
                    "updated_at": "2019-10-02T10:14:02Z",
                    "author_association": "NONE",
                    "body": "Any update on this? Simple POST request with a file upload also creates the similar issue of the memory leak. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/537428922/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "MuhammadAliShahzad",
                        "id": 11818198,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006525481003336608,
                        "severe_toxicity": 0.00011657645518425852,
                        "obscene": 0.0001788210211088881,
                        "threat": 0.00011995950626442209,
                        "insult": 0.00017606174515094608,
                        "identity_attack": 0.0001349539088550955
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/563145526",
                    "id": 563145526,
                    "created_at": "2019-12-09T09:35:10Z",
                    "updated_at": "2019-12-09T09:35:25Z",
                    "author_association": "NONE",
                    "body": "Same for me... leakage while on threadpool execution is on Windows python38 too.\r\nrequests 2.22.0",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/563145526/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 1,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "far-rainbow",
                        "id": 9624391,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009028495405800641,
                        "severe_toxicity": 0.00010360978922108188,
                        "obscene": 0.00019277962564956397,
                        "threat": 0.00011357176845194772,
                        "insult": 0.00017767481040209532,
                        "identity_attack": 0.00013475099694915116
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/573556903",
                    "id": 573556903,
                    "created_at": "2020-01-13T08:33:10Z",
                    "updated_at": "2020-01-13T08:33:10Z",
                    "author_association": "NONE",
                    "body": "Same for me",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/573556903/reactions",
                        "total_count": 1,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 1,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ghost",
                        "id": 10137,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008372906013391912,
                        "severe_toxicity": 0.00010609478340484202,
                        "obscene": 0.00018768338486552238,
                        "threat": 0.00010613282938720658,
                        "insult": 0.00017636518168728799,
                        "identity_attack": 0.00013498363841790706
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/575023191",
                    "id": 575023191,
                    "created_at": "2020-01-16T07:37:14Z",
                    "updated_at": "2020-01-16T07:37:14Z",
                    "author_association": "NONE",
                    "body": "Here is my memory leaking issue, anyone can help ? https://stackoverflow.com/questions/59746125/memory-keep-growing-when-using-mutil-thread-download-file",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/575023191/reactions",
                        "total_count": 3,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 3,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ghost",
                        "id": 10137,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006966152577660978,
                        "severe_toxicity": 0.00011605051258811727,
                        "obscene": 0.00017288299568463117,
                        "threat": 0.00012686580885201693,
                        "insult": 0.00018055696273222566,
                        "identity_attack": 0.000140409407322295
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/603326738",
                    "id": 603326738,
                    "created_at": "2020-03-24T15:57:27Z",
                    "updated_at": "2020-03-24T16:03:47Z",
                    "author_association": "NONE",
                    "body": "Call `Session.close()` and `Response.close()` can avoid the memory leak.\r\nAnd ssl will consume more memory so the memory leak will more remarkable when request https urls.\r\n\r\nFirst I make 4 test cases:\r\n\r\n1. requests + ssl (https://)\r\n2. requests + non-ssl (http://)\r\n3. aiohttp + ssl (https://)\r\n4. aiohttp + non-ssl (http://)\r\n\r\nPseudo code:\r\n\r\n```python\r\ndef run(url):\r\n    session = requests.session()\r\n    response = session.get(url)\r\n\r\nwhile True:\r\n    for url in urls:  # about 5k urls of public websites\r\n        # execute in thread pool, size=10\r\n        thread_pool.submit(run, url)\r\n\r\n# in another thread, record memory usage every seconds\r\n```\r\n\r\nMemory usage graph(y-axis: MB, x-axis: time), requests use lots of memory and memory increase very fast, while aiohttp memory usage is stable:\r\n\r\n<img width=\"1101\" alt=\"requests-non-ssl\" src=\"https://user-images.githubusercontent.com/6367792/77444941-6970c700-6e27-11ea-914a-4bebe4d38464.png\">\r\n<img width=\"1101\" alt=\"requests-ssl\" src=\"https://user-images.githubusercontent.com/6367792/77444944-6aa1f400-6e27-11ea-98fc-ed7be7bb8553.png\">\r\n\r\n<img width=\"1101\" alt=\"aiohttp-non-ssl\" src=\"https://user-images.githubusercontent.com/6367792/77444926-65dd4000-6e27-11ea-9844-a1618d1d2f3b.png\">\r\n<img width=\"1101\" alt=\"aiohttp-ssl\" src=\"https://user-images.githubusercontent.com/6367792/77444937-68d83080-6e27-11ea-8c7d-d8935007a00b.png\">\r\n\r\nThen I add `Session.close()` and test again:\r\n\r\n```python\r\ndef run(url):\r\n    session = requests.session()\r\n    response = session.get(url)\r\n    session.close()  # close session !!\r\n```\r\n\r\nMemory usage significant decreased, but memory usage still increase over time:\r\n\r\n<img width=\"1101\" alt=\"requests-non-ssl-close-session\" src=\"https://user-images.githubusercontent.com/6367792/77445543-2fec8b80-6e28-11ea-8fb9-380311714b2f.png\">\r\n<img width=\"1101\" alt=\"requests-ssl-close-session\" src=\"https://user-images.githubusercontent.com/6367792/77445555-33801280-6e28-11ea-94e3-3d353d0f3106.png\">\r\n\r\nFinally I add `Response.close()` and test again:\r\n\r\n```python\r\ndef run(url):\r\n    session = requests.session()\r\n    response = session.get(url)\r\n    session.close()  # close session !!\r\n    response.close()  # close response !!\r\n```\r\n\r\nMemory usage decreased again, and not increase over time:\r\n\r\n<img width=\"1101\" alt=\"requests-non-ssl-close-all\" src=\"https://user-images.githubusercontent.com/6367792/77446092-e2bce980-6e28-11ea-906e-621def77f06a.png\">\r\n<img width=\"1101\" alt=\"requests-ssl-close-all\" src=\"https://user-images.githubusercontent.com/6367792/77446103-e51f4380-6e28-11ea-9f26-3ab8aa656513.png\">\r\n\r\nCompare aiohttp and requests shows memory leak is not caused by ssl, it's caused by connection resources not closed. \r\n\r\nUseful scripts:\r\n\r\n```python\r\nclass MemoryReporter:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.file = open(f'memoryleak/memory_{name}.txt', 'w')\r\n        self.thread = None\r\n\r\n    def _get_memory(self):\r\n        return psutil.Process().memory_info().rss\r\n\r\n    def main(self):\r\n        while True:\r\n            t = time.time()\r\n            v = self._get_memory()\r\n            self.file.write(f'{t},{v}\\n')\r\n            self.file.flush()\r\n            time.sleep(1)\r\n\r\n    def start(self):\r\n        self.thread = Thread(target=self.main, name=self.name, daemon=True)\r\n        self.thread.start()\r\n\r\n\r\ndef plot_memory(name):\r\n    filepath = 'memoryleak/memory_{}.txt'.format(name)\r\n    df_mem = pd.read_csv(filepath, index_col=0, names=['t', 'v'])\r\n    df_mem.index = pd.to_datetime(df_mem.index, unit='s')\r\n    df_mem.v = df_mem.v / 1024 / 1024\r\n    df_mem.plot(figsize=(16, 8))\r\n```\r\n\r\nSystem Information:\r\n\r\n```\r\n$ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010104f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.6\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/603326738/reactions",
                        "total_count": 46,
                        "+1": 33,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 4,
                        "rocket": 0,
                        "eyes": 9
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "guyskk",
                        "id": 6367792,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0016862537013366818,
                        "severe_toxicity": 0.0001069716818165034,
                        "obscene": 0.00028983046649955213,
                        "threat": 0.0001190894327010028,
                        "insult": 0.00019652901391964406,
                        "identity_attack": 0.00014314816507976502
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/613097974",
                    "id": 613097974,
                    "created_at": "2020-04-13T21:06:00Z",
                    "updated_at": "2020-04-13T21:10:36Z",
                    "author_association": "NONE",
                    "body": "SSL leak problem is packaged OpenSSL <= 3.7.4 on Windows and OSX, its not releasing the memory from the context properly\r\n\r\nhttps://github.com/VeNoMouS/cloudscraper/issues/143#issuecomment-613092377\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/613097974/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "VeNoMouS",
                        "id": 597545,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001211747876368463,
                        "severe_toxicity": 9.810950723476708e-05,
                        "obscene": 0.00020838297496084124,
                        "threat": 0.0001076156331691891,
                        "insult": 0.00018611038103699684,
                        "identity_attack": 0.00013826106442138553
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1375357635",
                    "id": 1375357635,
                    "created_at": "2023-01-09T09:57:30Z",
                    "updated_at": "2023-01-09T09:57:30Z",
                    "author_association": "NONE",
                    "body": "I have the same problem. It appears only when I use `proxies` argument.\r\n\r\n```\r\n{'chardet': {'version': None},\r\n 'charset_normalizer': {'version': '3.0.1'},\r\n 'cryptography': {'version': ''},\r\n 'idna': {'version': '3.4'},\r\n 'implementation': {'name': 'CPython', 'version': '3.10.9'},\r\n 'platform': {'release': '5.4.161-26.3', 'system': 'Linux'},\r\n 'pyOpenSSL': {'openssl_version': '', 'version': None},\r\n 'requests': {'version': '2.28.1'},\r\n 'system_ssl': {'version': '1010113f'},\r\n 'urllib3': {'version': '1.26.13'},\r\n 'using_charset_normalizer': True,\r\n 'using_pyopenssl': False}\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1375357635/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "andre487",
                        "id": 1009104,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014457005308941007,
                        "severe_toxicity": 0.00011049026215914637,
                        "obscene": 0.00025549193378537893,
                        "threat": 0.00011449767771409824,
                        "insult": 0.00020376864995341748,
                        "identity_attack": 0.00015332507609855384
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1378955389",
                    "id": 1378955389,
                    "created_at": "2023-01-11T15:31:04Z",
                    "updated_at": "2023-01-13T14:03:06Z",
                    "author_association": "NONE",
                    "body": "Same happens with requests 2.27.1 and urllib3 1.26.13\r\nif it helps tracemalloc shows increments:\r\nstats top 10 every 500:\r\nrequests/utils.py:353: size=4600 B, count=60, average=77 B\r\ndiffs top 10 every 500:\r\nurllib3/_collections.py:153: size=1344 B (+168 B), count=6 (+1), average=224 B\r\nrequests/utils.py:822: size=840 B (+168 B), count=5 (+1), average=168 B\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1378955389/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "constantind",
                        "id": 4096288,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000716533453669399,
                        "severe_toxicity": 0.00011152007937198505,
                        "obscene": 0.000184549848199822,
                        "threat": 0.00011620177247095853,
                        "insult": 0.00017481148825027049,
                        "identity_attack": 0.00013364908227231354
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1741742596",
                    "id": 1741742596,
                    "created_at": "2023-09-30T11:11:19Z",
                    "updated_at": "2023-09-30T20:53:51Z",
                    "author_association": "NONE",
                    "body": "Ok, so this is, by the looks of it still an issue.\r\nUsing `requests.Session()` to make requests to an `https` url leads to constantly increasing memory usage and ultimately an OOM condition and a crash. The requests are being made using `proxies` to some proxy\r\n\r\nHere's a shot of the monotonously increasing mem usage : \r\n\r\n![image](https://github.com/psf/requests/assets/4791195/96424a2c-df3c-40ad-a053-a81691ed7567)\r\n\r\nThis is from a production system running (in a docker container): \r\n\r\n```bash\r\nroot@docker-host-01:~/uship-price-optimizer# docker exec -it uship-price-optimizer python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.2.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.19.0-46-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000090\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.0.5\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nBut we see the same behavior on Windows:\r\n\r\n```powershell\r\n(venv) PS E:\\src\\uship-price-optimizer\\src> python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.2.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000090\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.16\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n(venv) PS E:\\src\\uship-price-optimizer\\src>\r\n```\r\n\r\nAND in WSL2:\r\n\r\n```bash\r\n(venv_linux) teo@jailbreaker-pc:/mnt/e/src/uship-price-optimizer/src$ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.2.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.15.90.1-microsoft-standard-WSL2\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.0.5\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nI'm observing a memory increase every time a `requests.Session()` is instantiated, never to be reclaimed. A `Session` that is actually wrapped in a [CloudScraper](https://github.com/venomous/cloudscraper) but there's nothing special done to how the requests and sessions are handled there. And due to using cloudscraper, I can't test the code using only `requests.get()` as opposed to using `requests.Session()`, btw.\r\n\r\nHigher up in this thread there's [this](https://github.com/psf/requests/issues/4601#issuecomment-613097974)  comment by @VeNoMouS , but since the issues tracker of his repo was disabled, I can't see what he said there, and neither google nor archive.org has a copy of the comment. But whatever it says, I can see the memory leaking every time a new session is created and later discarded.\r\n\r\nWhile investigating what's going on I stumbled on this [original Python issue](https://bugs.python.org/issue37702), migrated to GitHub [here](https://github.com/python/cpython/issues/81883), and seems to imply that this is a Windows only problem but that does not seem to be the case. Both are closed as resolved, btw.\r\n\r\nThen I went on to [memray](https://github.com/bloomberg/memray) the thing.\r\nHere's the summary view:\r\n\r\n```\r\n(venv_linux) teo@jailbreaker-pc:/mnt/e/src/uship-price-optimizer/src$ python3.11 -m memray tree  memray-main.py.pydantic_2.bin\r\n\r\nAllocation metadata\r\n-------------------\r\nCommand line arguments: '/mnt/e/src/uship-price-optimizer/venv_linux/bin/memray run main.py'\r\nPeak memory size: 132.543MB\r\nNumber of allocations: 43997698\r\n\r\nBiggest 10 allocations:\r\n-----------------------\r\n\ud83d\udcc2 53.567MB (100.00 %) <ROOT>\r\n\u251c\u2500\u2500 [[8 frames hidden in 4 file(s)]]\r\n\u2502   \u2514\u2500\u2500 \ud83d\udcc2 40.721MB (76.02 %) retry  /mnt/e/src/uship-price-optimizer/venv_linux/lib/python3.11/site-packages/backoff/_sync.py:105\r\n\u2502       \u251c\u2500\u2500 [[11 frames hidden in 6 file(s)]]\r\n\u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc4 32.564MB (60.79 %) ssl_wrap_socket  /mnt/e/src/uship-price-optimizer/venv_linux/lib/python3.11/site-packages/urllib3/util/ssl_.py:444\r\n\u2502       \u2514\u2500\u2500 [[8 frames hidden in 5 file(s)]]\r\n\u2502           \u2514\u2500\u2500 \ud83d\udcc4 7.006MB (13.08 %) raw_decode  /usr/lib/python3.11/json/decoder.py:353\r\n\u2514\u2500\u2500 [[3 frames hidden in 2 file(s)]]\r\n    \u2514\u2500\u2500 \ud83d\udcc2 12.846MB (23.98 %) _run_code  <frozen runpy>:88\r\n        \u251c\u2500\u2500 [[33 frames hidden in 7 file(s)]]\r\n        \u2502   \u2514\u2500\u2500 \ud83d\udcc2 5.503MB (10.27 %) _call_with_frames_removed  <frozen importlib._bootstrap>:241\r\n        \u2502       \u251c\u2500\u2500 [[16 frames hidden in 7 file(s)]]\r\n        \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc4 4.012MB (7.49 %) validate_core_schema  /mnt/e/src/uship-price-optimizer/venv_linux/lib/python3.11/site-packages/pydantic/_internal/_core_utils.py:586\r\n        \u2502       \u2514\u2500\u2500 [[3 frames hidden in 2 file(s)]]\r\n        \u2502           \u2514\u2500\u2500 \ud83d\udcc4 1.491MB (2.78 %) create_schema_validator  /mnt/e/src/uship-price-optimizer/venv_linux/lib/python3.11/site-packages/pydantic/plugin/_schema_validator.py:34\r\n        \u251c\u2500\u2500 [[8 frames hidden in 5 file(s)]]\r\n        \u2502   \u2514\u2500\u2500 \ud83d\udcc4 3.000MB (5.60 %) __next__  /usr/lib/python3.11/csv.py:119\r\n        \u251c\u2500\u2500 [[12 frames hidden in 4 file(s)]]\r\n        \u2502   \u2514\u2500\u2500 \ud83d\udcc4 1.846MB (3.45 %) _compile_bytecode  <frozen importlib._bootstrap_external>:729\r\n        \u2514\u2500\u2500 [[5 frames hidden in 3 file(s)]]\r\n            \u2514\u2500\u2500 \ud83d\udcc2 2.496MB (4.66 %) _call_with_frames_removed  <frozen importlib._bootstrap>:241\r\n                \u251c\u2500\u2500 [[30 frames hidden in 7 file(s)]]\r\n                \u2502   \u2514\u2500\u2500 \ud83d\udcc4 1.319MB (2.46 %) _compile_bytecode  <frozen importlib._bootstrap_external>:729\r\n                \u2514\u2500\u2500 [[22 frames hidden in 5 file(s)]]\r\n                    \u2514\u2500\u2500 \ud83d\udcc4 1.177MB (2.20 %) _compile_bytecode  <frozen importlib._bootstrap_external>:729\r\n```\r\nand the memory stack with `util/ssl_.py`\r\n\r\n![image](https://github.com/psf/requests/assets/4791195/0fe118d5-224e-44cc-86af-bdd1e1263ed0)\r\n\r\nLooking around at the solutions to memory leaks in various systems mentioning and linked to this issue, I changed our code to \"force close\" the sessions using:\r\n\r\n```python\r\n    with cloudscraper.create_scraper(...) as session:\r\n        session.proxies = proxyconfig.get_proxy()\r\n        .\r\n        .\r\n        .\r\n\r\n```\r\n\r\n`cloudscraper.create_scraper` instantiates a `requests.Session()` essentially.\r\n\r\nfor making the requests I changed it to \r\n\r\n```python\r\n        with session.get(url='.......',\r\n                         # allow_redirects=True,\r\n                         params={...<params>...},\r\n                         timeout=5, ) as response:\r\n        .\r\n        .\r\n        .\r\n\r\n```\r\n\r\nThis seems to have improved the situation a bit, as at least now it's not monotonously growing but also has some [slight] reductions\r\n\r\n![image](https://github.com/psf/requests/assets/4791195/1444054b-dcbd-4e88-bb75-af9f719885cd)\r\n\r\nBut this is still not what I think it should be looking like.\r\n\r\nCurrently, we are keeping it under control by setting a memory limit on the container it's running on in productions and we are also passing \r\n\r\n`...--max-requests 750 --max-requests-jitter 50...` to `gunicorn`\r\n\r\nSo, what would you suggest the next logical step to be?\r\n\r\nThanks!\r\n\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1741742596/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "teodoryantcheff",
                        "id": 4791195,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001330107799731195,
                        "severe_toxicity": 0.0001062944793375209,
                        "obscene": 0.00024270190624520183,
                        "threat": 0.0001076444677892141,
                        "insult": 0.00019347938359715044,
                        "identity_attack": 0.00014331752026919276
                    }
                }
            ]
        },
        "220": {
            "html_url": "https://github.com/psf/requests/issues/4590",
            "id": 314514389,
            "number": 4590,
            "title": "requests treats urllib3's SSL handshake timeout as ReadTimeout",
            "created_at": "2018-04-16T06:15:33Z",
            "updated_at": "2021-11-29T17:22:25Z",
            "closed_at": null,
            "body": "## Expected Result\r\n\r\nWhen connecting to a remote machine via SSL/TLS, and SSL handshake timeout happens, I expect to have `SSLError` or `ConnectionError` exception.\r\n\r\n## Actual Result\r\n\r\n`requests` raises `ReadTimeout` \r\n\r\n## Reproduction Steps\r\n\r\nI don't know how to reproduce this, but I have a real stacktrace (most recent call first):\r\n\r\n```\r\ntimeout: _ssl.c:704: The handshake operation timed out\r\n  File \"urllib3/connectionpool.py\", line 346, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"urllib3/connectionpool.py\", line 850, in _validate_conn\r\n    conn.connect()\r\n  File \"urllib3/connection.py\", line 326, in connect\r\n    ssl_context=context)\r\n  File \"urllib3/util/ssl_.py\", line 329, in ssl_wrap_socket\r\n    return context.wrap_socket(sock, server_hostname=server_hostname)\r\n  File \"python3.5/ssl.py\", line 385, in wrap_socket\r\n    _context=self)\r\n  File \"python3.5/ssl.py\", line 760, in __init__\r\n    self.do_handshake()\r\n  File \"python3.5/ssl.py\", line 996, in do_handshake\r\n    self._sslobj.do_handshake()\r\n  File \"python3.5/ssl.py\", line 641, in do_handshake\r\n    self._sslobj.do_handshake()\r\nReadTimeoutError: HTTPSConnectionPool(host='somehost.com', port=443): Read timed out. (read timeout=5)\r\n  File \"requests/adapters.py\", line 440, in send\r\n    timeout=timeout\r\n  File \"urllib3/connectionpool.py\", line 639, in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n  File \"urllib3/util/retry.py\", line 357, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"urllib3/packages/six.py\", line 686, in reraise\r\n    raise value\r\n  File \"urllib3/connectionpool.py\", line 601, in urlopen\r\n    chunked=chunked)\r\n  File \"urllib3/connectionpool.py\", line 349, in _make_request\r\n    self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\r\n  File \"urllib3/connectionpool.py\", line 309, in _raise_timeout\r\n    raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\r\nReadTimeout: HTTPSConnectionPool(host='somehost.com', port=443): Read timed out. (read timeout=5)\r\n  File \"wsa/external/soap.py\", line 234, in call\r\n    response = command(**params)\r\n  File \"zeep/client.py\", line 45, in __call__\r\n    self._op_name, args, kwargs)\r\n  File \"zeep/wsdl/bindings/soap.py\", line 113, in send\r\n    options['address'], envelope, http_headers)\r\n  File \"zeep/transports.py\", line 95, in post_xml\r\n    return self.post(address, message, headers)\r\n  File \"wsa/external/soap.py\", line 75, in post\r\n    return super(NonPersistentTransport, self).post(address, message, headers)\r\n  File \"zeep/transports.py\", line 67, in post\r\n    timeout=self.operation_timeout)\r\n  File \"requests/sessions.py\", line 555, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"requests/sessions.py\", line 508, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"raven/breadcrumbs.py\", line 297, in send\r\n    resp = real_send(self, request, *args, **kwargs)\r\n  File \"requests/sessions.py\", line 618, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"requests/adapters.py\", line 521, in send\r\n    raise ReadTimeout(e, request=request)\r\n``` \r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.5.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"3.10.0-693.5.2.el7.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000105f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n    $ openssl version\r\n\r\n```\r\nOpenSSL 1.0.2k-fips  26 Jan 2017\r\n```\r\n\r\n    $ cat /etc/redhat-release\r\n    $ uname -spori\r\n\r\n```\r\nOS: CentOS Linux release 7.4.1708 (Core), Linux 3.10.0-693.5.2.el7.x86_64 x86_64 x86_64 GNU/Linux\r\n```",
            "author_association": "NONE",
            "comments": 15,
            "state": "open",
            "user": {
                "login": "metheoryt",
                "id": 6823542,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4590/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/381634605",
                    "id": 381634605,
                    "created_at": "2018-04-16T15:04:00Z",
                    "updated_at": "2018-04-16T15:04:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Can you share more details about what makes you think there was a handshake error or other TLS issue that happened here?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/381634605/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005871765897609293,
                        "severe_toxicity": 0.00012510348460637033,
                        "obscene": 0.00018602308409754187,
                        "threat": 0.00012142013292759657,
                        "insult": 0.00017831430886872113,
                        "identity_attack": 0.00013991330342832953
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/381690145",
                    "id": 381690145,
                    "created_at": "2018-04-16T17:45:46Z",
                    "updated_at": "2018-04-16T17:45:46Z",
                    "author_association": "NONE",
                    "body": "<img width=\"521\" alt=\"screen shot 2018-04-16 at 10 45 03 am\" src=\"https://user-images.githubusercontent.com/9362301/38825981-467624cc-4163-11e8-92fe-5df890e9328e.png\">\r\n\r\ncurl produces a time out error. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/381690145/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ghost",
                        "id": 10137,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009746713913045824,
                        "severe_toxicity": 0.00010264352022204548,
                        "obscene": 0.0001939864450832829,
                        "threat": 0.00010635348735377192,
                        "insult": 0.0001898511400213465,
                        "identity_attack": 0.00013660515833180398
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/381847493",
                    "id": 381847493,
                    "created_at": "2018-04-17T05:27:00Z",
                    "updated_at": "2018-04-17T05:27:00Z",
                    "author_association": "NONE",
                    "body": "@gahancorpcfo I replaced original host with `somehost.com`, cause original host produces these errors maybe once a month, so there's no reason to try to reproduce the error with it.\r\n@sigmavirus24 I guess first lines of stacktrace show that problem is hiding somewhere in TLS layer. Code, that raises first exception, is contained in `ssl.c` file, and exception message states **The handshake operation timed out**. Another interesting detail is that the timeout value, passed in exception message (`...(read timeout=5)`) presents connection timeout instead of read timeout. In my particular case, timeouts were equal to 5 and 22 seconds for connection and read respectively.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/381847493/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "metheoryt",
                        "id": 6823542,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007132135797291994,
                        "severe_toxicity": 0.00011382220691302791,
                        "obscene": 0.00019127712585031986,
                        "threat": 0.00011468223965493962,
                        "insult": 0.0001760595478117466,
                        "identity_attack": 0.0001349057856714353
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/381861263",
                    "id": 381861263,
                    "created_at": "2018-04-17T06:25:05Z",
                    "updated_at": "2018-04-17T06:25:05Z",
                    "author_association": "MEMBER",
                    "body": "Hey @metheoryt, you're right that this does seem to be a misclassification of this particular timeout. If you look at the stacktrace though, you can see this is being done in urllib3, not Requests.\r\n\r\n>File \"urllib3/connectionpool.py\", line 309, in _raise_timeout\r\n    raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\r\n\r\nWe only know what urllib3 is sending to us, so I don't know if we're easily able to do anything here. I'd recommend raising an issue with the [urllib3](https://github.com/shazow/urllib3) project and seeing if this can get clearer handling there.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/381861263/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000644465209916234,
                        "severe_toxicity": 0.00011734780127881095,
                        "obscene": 0.0001820064935600385,
                        "threat": 0.00011959640687564388,
                        "insult": 0.0001726538612274453,
                        "identity_attack": 0.00013859370665159076
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/382016583",
                    "id": 382016583,
                    "created_at": "2018-04-17T14:38:02Z",
                    "updated_at": "2018-04-17T14:38:02Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@metheoryt so the fact that a we timed out while in an SSL call doesn't inherently mean this is a SSL error that's being hidden. Let's look closely:\r\n\r\n```\r\nReadTimeoutError: HTTPSConnectionPool(host='somehost.com', port=443): Read timed out. (read timeout=5)\r\n```\r\n\r\nWhat this says is that while we were in the process of the handshake, we waited for 5 seconds while waiting for the server to write bytes. We'd already connected to the server (even if we hadn't established a TLS connection). In short, I personally do not see anything wrong here. It may not match what you expect, but it is absolutely correct.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/382016583/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006345583242364228,
                        "severe_toxicity": 0.00011981682473560795,
                        "obscene": 0.0001919520291266963,
                        "threat": 0.00011896843352587894,
                        "insult": 0.0001707485062070191,
                        "identity_attack": 0.00013545954425353557
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/382275310",
                    "id": 382275310,
                    "created_at": "2018-04-18T06:18:56Z",
                    "updated_at": "2018-04-18T06:18:56Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 yes, you're right in some ways, but I think this particular case should be treaten as connect timeout, cause \r\n> Requests that produced this error are [safe to retry](http://docs.python-requests.org/en/master/api/#requests.ConnectTimeout) \r\n\r\nThere's a significant difference between read timeout, when we don't know, does the server begins process of our request or not, and SSL stuff timeout, when we confident in fact that our request hasn't been processed at all. I think there's should be a distinction.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/382275310/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "metheoryt",
                        "id": 6823542,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005491341580636799,
                        "severe_toxicity": 0.00013174516789149493,
                        "obscene": 0.0001962032401934266,
                        "threat": 0.00013064229278825223,
                        "insult": 0.00017687106446828693,
                        "identity_attack": 0.00014324129733722657
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/382385312",
                    "id": 382385312,
                    "created_at": "2018-04-18T13:25:37Z",
                    "updated_at": "2018-04-18T13:25:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@metheoryt I don't believe there's a way for urllib3 or requests to produce that distinction. I could be wrong, but I think that any solution would need to take place in the Python standard library since you can see the last portions of that trace are in\r\n\r\n```\r\n  File \"python3.5/ssl.py\", line 385, in wrap_socket\r\n    _context=self)\r\n  File \"python3.5/ssl.py\", line 760, in __init__\r\n    self.do_handshake()\r\n  File \"python3.5/ssl.py\", line 996, in do_handshake\r\n    self._sslobj.do_handshake()\r\n  File \"python3.5/ssl.py\", line 641, in do_handshake\r\n    self._sslobj.do_handshake()\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/382385312/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007696570246480405,
                        "severe_toxicity": 0.00011073042696807534,
                        "obscene": 0.0001862259377958253,
                        "threat": 0.00011730562982847914,
                        "insult": 0.00017474133346695453,
                        "identity_attack": 0.00013739995483774692
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/382666041",
                    "id": 382666041,
                    "created_at": "2018-04-19T09:11:04Z",
                    "updated_at": "2018-04-19T09:11:04Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 we're using sentry as exception collector with our app, but I cannot share the original issue because our sentry instance is local. But I can explain stacktrace with screenshots below:\r\n\r\n### how the low-level timeout exception is appeared\r\n![how the low-level timeout exception is appeared](https://user-images.githubusercontent.com/6823542/38982174-fab9a6bc-43e2-11e8-8758-4cf78e5c09ee.png)\r\n\r\n### where it is being handled\r\n![where it is being handled](https://user-images.githubusercontent.com/6823542/38982397-8f983712-43e3-11e8-8c09-deb6e76c51b9.png)\r\n\r\n### how it looks and where it turns to ReadTimeoutError\r\n![how it looks and where it turns to ReadTimeoutError](https://user-images.githubusercontent.com/6823542/38982446-b13b1c90-43e3-11e8-84a1-5c8e53ab207a.png)\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/382666041/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "metheoryt",
                        "id": 6823542,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014981847489252687,
                        "severe_toxicity": 9.845016757026315e-05,
                        "obscene": 0.0002265864168293774,
                        "threat": 0.00011687319056363776,
                        "insult": 0.0001982027170015499,
                        "identity_attack": 0.00014235121489036828
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/382673308",
                    "id": 382673308,
                    "created_at": "2018-04-19T09:36:22Z",
                    "updated_at": "2018-04-19T09:36:22Z",
                    "author_association": "NONE",
                    "body": "Now I see clearly, @nateprewitt, you're right, I've posted an issue urllib3/urllib3#1366 with reference to this one",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/382673308/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "metheoryt",
                        "id": 6823542,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008985269232653081,
                        "severe_toxicity": 0.00010224836296401918,
                        "obscene": 0.00018260045908391476,
                        "threat": 0.00011262788757449016,
                        "insult": 0.00018012363580055535,
                        "identity_attack": 0.00013542571105062962
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/382689789",
                    "id": 382689789,
                    "created_at": "2018-04-19T10:39:34Z",
                    "updated_at": "2018-04-19T10:39:34Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@metheoryt you've only confirmed exactly what I've been saying. The exception is a `SocketTimeout`, not an `SSLError`. I really don't see why this should be an SSL exception. You haven't provided a convincing argument that this should be represented as an issue with TLS instead of a timeout.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/382689789/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008473614579997957,
                        "severe_toxicity": 0.00010588254372123629,
                        "obscene": 0.00019640613754745573,
                        "threat": 0.00010628434392856434,
                        "insult": 0.00017609380302019417,
                        "identity_attack": 0.00013225102156866342
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/382979997",
                    "id": 382979997,
                    "created_at": "2018-04-20T05:19:30Z",
                    "updated_at": "2018-04-20T05:19:30Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 neither SSLError, nor ReadTimeout, I guess. It should be a ConnectionError, since it represents an error, produced while connecting to remote host, and subject request is safe to retry.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/382979997/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "metheoryt",
                        "id": 6823542,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006359493709169328,
                        "severe_toxicity": 0.00011851100134663284,
                        "obscene": 0.00018462870502844453,
                        "threat": 0.00011770080891437829,
                        "insult": 0.00017879817460197955,
                        "identity_attack": 0.0001369863166473806
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/383612375",
                    "id": 383612375,
                    "created_at": "2018-04-23T15:16:14Z",
                    "updated_at": "2018-04-23T15:16:14Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@metheoryt let's review the sequence of events:\r\n\r\n- urllib3 **successfully** creates a socket connection to the server on port 443\r\n- urllib3 tries to negotiate TLS with the server (also known as the handshake)\r\n- while negotiating TLS, we don't receive any bytes from the server within the read timeout, as that was set on the successfully created socket connection, we hit a timeout exception for reading and re-raise that appropriately\r\n- urllib3 _might_ be able to separately try to catch that **read timeout** during the handshake, and re-raise it as something else, but I'm not certain ConnectionError is the right thing either.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/383612375/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006452899542637169,
                        "severe_toxicity": 0.00011975035158684477,
                        "obscene": 0.0001964023831533268,
                        "threat": 0.00012060454173479229,
                        "insult": 0.00017347763059660792,
                        "identity_attack": 0.0001352895487798378
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/383861045",
                    "id": 383861045,
                    "created_at": "2018-04-24T09:11:16Z",
                    "updated_at": "2018-04-24T09:17:35Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 I'm sorry if I misled you with `ConnectionError`, I meant `ConnectTimeout`.\r\n\r\nI think of this situation as of borderline case between connection timeout and read timeout. Intuition acts as a background for the left part, while technical nature is a background for the right part. \r\n\r\nIndeed, TLS negotiation is a part of connection procedure. At this stage no business data is sent (even headers). There is no logical reason to treat this case as `ReadTimeout`, because `ReadTimeout` by design tell us that the request COULD BE received and processed by server, while `ConnectTimeout` tells that the request WAS NOT received and, therefore, wasn't processed. \r\n\r\nAnother argument for `ConnectTimeout` is that message of this particular `ReadTimeout` contains waiting time for connection but not for response. (the exception sais `(read timeout=5)` while i was having 5 seconds for connection and 22 for response waiting).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/383861045/reactions",
                        "total_count": 5,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "metheoryt",
                        "id": 6823542,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006336856167763472,
                        "severe_toxicity": 0.0001194453943753615,
                        "obscene": 0.00018471463408786803,
                        "threat": 0.00012154965224908665,
                        "insult": 0.0001712688390398398,
                        "identity_attack": 0.00013715923705603927
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/406722888",
                    "id": 406722888,
                    "created_at": "2018-07-20T20:49:23Z",
                    "updated_at": "2018-07-20T20:49:23Z",
                    "author_association": "NONE",
                    "body": "I am seeing this issue as well. If you use a different timeout value for connect timeout and read timeout. For instance if you pass in (10, 1000), you will see a read timeout after 10 seconds even though the connect timeout is 10 seconds. Observed in requests 2.19.1",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/406722888/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "drice",
                        "id": 12821762,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005879165837541223,
                        "severe_toxicity": 0.00012413844524417073,
                        "obscene": 0.0001861469354480505,
                        "threat": 0.0001243222941411659,
                        "insult": 0.0001742093008942902,
                        "identity_attack": 0.00013996199413668364
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/981823507",
                    "id": 981823507,
                    "created_at": "2021-11-29T16:56:25Z",
                    "updated_at": "2021-11-29T17:22:25Z",
                    "author_association": "NONE",
                    "body": "I confirm this behavior with 1.26.7 also when using _urllib3_ via _requests_. Passing two different timeouts makes it visible. If the connect timeout is large enough for the TCP connection to be established, but short enough for the TLS handshaking to fail, you get a `ReadTimeout` with the timeout value in its description matching the connection timeout specified, not the read timeout.\r\n\r\nIt's all about the semantic we and _urllib3_ want to associate to the meaning of \"connection\". The TCP or the TLS ?? In any case, `ReadTimeout` should not be raised with connection timeout value in its description, after that connection timeout period expires.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/981823507/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "stefano-xy",
                        "id": 16254162,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006250300211831927,
                        "severe_toxicity": 0.00012303351832088083,
                        "obscene": 0.00019542465452104807,
                        "threat": 0.00012381322449073195,
                        "insult": 0.00017388982814736664,
                        "identity_attack": 0.0001378461456624791
                    }
                }
            ]
        },
        "221": {
            "html_url": "https://github.com/psf/requests/issues/4486",
            "id": 292332152,
            "number": 4486,
            "title": "Need additional kwarg option to prevent non-SSL redirects",
            "created_at": "2018-01-29T09:12:14Z",
            "updated_at": "2018-03-12T21:35:26Z",
            "closed_at": null,
            "body": "When a service erroneously send a redirect from an SSL URL to a non-SSL URL, there is a high possibility that secure data (such as passwords) get sent over plaintext without the application's knowledge. There should be an option to prevent such redirects and I am in favor of preventing such redirects by default, though it may break some existing client code.\r\n\r\n## Expected Result\r\n\r\nException raised for `requests.exceptions.SSLError`\r\n\r\n## Actual Result\r\n\r\nRedirection is automatically followed\r\n\r\n## Reproduction Steps\r\n\r\n```\r\n$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes  -subj \"/C=IN/ST=TS/L=Hyderabad/O=Example.com/OU=R&D/CN=example.com\"\r\n$ echo -e \"HTTP/1.1 302 Found\\nLocation: http://google.com\\n\\n\" |  openssl s_server -key key.pem -cert cert.pem -accept 12345\r\n$ python -c 'import requests; print requests.get(\"https://localhost:12345\", verify=False).text'\r\n```\r\n\r\n## System Information\r\n\r\n```\r\n$ python -c 'import requests; print requests.__version__'\r\n2.8.1\r\n$ python -V\r\nPython 2.7.6\r\n$ uname -a\r\nLinux hdara1-wsl 3.13.0-139-generic #188-Ubuntu SMP Tue Jan 9 14:43:09 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "haridsv",
                "id": 166486,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4486/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/361292668",
                    "id": 361292668,
                    "created_at": "2018-01-29T16:01:54Z",
                    "updated_at": "2018-01-30T07:06:07Z",
                    "author_association": "MEMBER",
                    "body": "Hey @haridsv, just to be clear, Requests strips all body information and Authorization headers on redirect. We're pretty aggressive about this, so data shouldn't be resent on redirect regardless of SSL downgrading.\r\n\r\nAs for how we handle redirects to non-SSL URIs, I'm not sure we have a better option. There are some legitimate cases where services are now hosted on SSL secured servers, but need to redirect to older content that's still served in plaintext. We definitely don't want to raise an exception because that would break this behaviour.\r\n\r\nImplementing a kwarg to do this *could* be possible, but we're under a feature freeze, so I'm not sure we'd add this option in the near future. It does seem like it could be useful to allow the user to require SSL only for connections, but that may belong in an extension. @sigmavirus24 do you have any thoughts here?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/361292668/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006040348671376705,
                        "severe_toxicity": 0.00012201019853819162,
                        "obscene": 0.00018384327995590866,
                        "threat": 0.00012631199206225574,
                        "insult": 0.0001735663099680096,
                        "identity_attack": 0.00014178224955685437
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/361617251",
                    "id": 361617251,
                    "created_at": "2018-01-30T14:53:30Z",
                    "updated_at": "2018-01-30T14:53:30Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Implementing a kwarg to do this could be possible, but we're under a feature freeze, so I'm not sure we'd add this option in the near future.\r\n\r\nCorrect. We're not going to add this and it's unlikely we'd even add it in 3.0.\r\n\r\n> It does seem like it could be useful to allow the user to require SSL only for connections, but that may belong in an extension.\r\n\r\nIn reality, I think we could provide, in requests-toolbelt, a session that doesn't follow redirects from `https` to `http` urls. It should be easy to extend our redirect handling there.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/361617251/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005916575901210308,
                        "severe_toxicity": 0.00012392012285999954,
                        "obscene": 0.0001872029824880883,
                        "threat": 0.0001273588859476149,
                        "insult": 0.0001735479454509914,
                        "identity_attack": 0.00014295965956989676
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/361638833",
                    "id": 361638833,
                    "created_at": "2018-01-30T15:56:59Z",
                    "updated_at": "2018-01-30T15:56:59Z",
                    "author_association": "NONE",
                    "body": "> In reality, I think we could provide, in requests-toolbelt, a session that doesn't follow redirects from https to http urls. It should be easy to extend our redirect handling there.\r\n\r\nThat probably would be fine, though I am not sure what the usage would look like.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/361638833/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "haridsv",
                        "id": 166486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005490747862495482,
                        "severe_toxicity": 0.00013175245840102434,
                        "obscene": 0.00018832497880794108,
                        "threat": 0.0001346734061371535,
                        "insult": 0.0001767682406352833,
                        "identity_attack": 0.0001446714741177857
                    }
                }
            ]
        },
        "222": {
            "html_url": "https://github.com/psf/requests/issues/4455",
            "id": 287220555,
            "number": 4455,
            "title": "no response object captured in error of endless redirect chain and confusing message",
            "created_at": "2018-01-09T20:29:36Z",
            "updated_at": "2018-01-10T18:12:47Z",
            "closed_at": null,
            "body": "I found an incredibly bad URL that causes a handful of issues.  the url below jumps between a bunch of SocialFlow (trib.al) and Bitly url shorteners for tracking, then ends up on a connection timeout that also looks like a max retries exceeded (which makes no sense to me)\r\n\r\nThe exception that is raised under Py2 and Py3 does not have a response object, although one should exist \u2013 there are a long history of redirects that gets lost and makes this difficult to debug the url's problem.\r\n\r\n   HTTPSConnectionPool(host='this.cm', port=443): Max retries exceeded with url: /slate/follow (Caused by ConnectTimeoutError(<urllib3.connection.VerifiedHTTPSConnection object at 0x1021788d0>, 'Connection to this.cm timed out. (connect timeout=2)'))\r\n\r\n\r\n```python\r\nimport requests\r\n\r\ntry:\r\n\turl = 'http://slate.me/1KDocND'\r\n\tr = requests.get(url, timeout=2)\r\n\tprint(\"success\")\r\n\tprint(r.response)\r\nexcept Exception as error:\r\n\tprint(\"error\")\r\n\tprint(error)\r\n\tprint(type(error.response))\r\n```\r\n",
            "author_association": "CONTRIBUTOR",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "jvanasco",
                "id": 204779,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4455/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/356680987",
                    "id": 356680987,
                    "created_at": "2018-01-10T17:48:20Z",
                    "updated_at": "2018-01-10T17:48:20Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The `max retries exceeded with url` is due entirely to the fact that Requests uses a subset of urllib3 at this point. Requests' usage of retries were wholly limited to the API that urllib3 provided prior to creating the Retry object. It's been updated little since. As a result, we don't allow urllib3 to perform its own retries so when something like this fails that is potentially retryable from the perspective of urllib3 but retries is at 0 already, we get that exception. It's plagued us for years. That said, I think we can probably do better here, but @nateprewitt or I will have to do some digging to see why we're missing the work of appending a response to the exception. Thanks for the report and the detail provided. \ud83c\udf89 ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/356680987/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006276924978010356,
                        "severe_toxicity": 0.00011961432028329,
                        "obscene": 0.00018284175894223154,
                        "threat": 0.0001263636804651469,
                        "insult": 0.00017147995822597295,
                        "identity_attack": 0.00013787663192488253
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/356688321",
                    "id": 356688321,
                    "created_at": "2018-01-10T18:12:47Z",
                    "updated_at": "2018-01-10T18:12:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I did some digging myself and figured a few things out...\r\n\r\n1. The \"max retries\" text is from `requests/adapters.py` lines 497-514.  `urllib3` reports the connection timeout as a `MaxRetryError`, then wraps that error in a `ConnectionError` from `requests/exceptions.py`.  \r\n\r\n2. Based on your info above, I traced a bunch of stuff back to resolve_redirects - which i'm very familiar with.  I will generate a PR of a starting point for a possible approach (it's just going to be a rough sketch).  I'm not familiar with enough of requests to take this on myself, but I may be able to jumpstart someone else.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/356688321/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jvanasco",
                        "id": 204779,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0013053548755124211,
                        "severe_toxicity": 0.00010036330786533654,
                        "obscene": 0.00023994753428269178,
                        "threat": 0.00010173999180551618,
                        "insult": 0.00021035810641478747,
                        "identity_attack": 0.0001410796248819679
                    }
                }
            ]
        },
        "223": {
            "html_url": "https://github.com/psf/requests/issues/4425",
            "id": 281148349,
            "number": 4425,
            "title": "Address deleting cookies when domain-less defaults are used.",
            "created_at": "2017-12-11T20:00:10Z",
            "updated_at": "2017-12-12T23:00:17Z",
            "closed_at": null,
            "body": "I found a few variations of this \"implementation detail\" in other reports, but I believe this particular use case is worth addressing.\r\n\r\nIf a URL is retrieved with either a dict or unqualified cookie jar, the deletions are ignored.\r\n\r\n    # use a dict\r\n    resp = requests.get(url, cookies={'cookie1': 'value'},)\r\n\r\nor\r\n\r\n    # use a cookiejar\r\n    session1 = requests.Session()\r\n    session1.cookies = requests.cookies.RequestsCookieJar()\r\n    session1.cookies.set('foo', 'bar')\r\n    resp1 = requests.get(url)\r\n\r\nThis can create endless redirect loops if the server's response to a resource/url combination is to set a \"delete cookie\", which requests can not handle.  Aside from failing tests and puzzled developers, this can trigger abuse flags with 3rd party api services.\r\n\r\n## Expected Result\r\n\r\nIf the server sends a cookie deletion value, it should be respected and not sent to the server.\r\n\r\n## Actual Result\r\n\r\npassing a 'cookies=\" dict to `requests.get()` creates a wrapped session with the default cookiejar.  the current implementation just deletes any matching cookie for the domain, which fails because the cookie was set as a default (not for that domain).\r\n\r\n## Potential Way To Fix\r\n\r\nA potential fix is to extend the RequestsCookieJar to use a blacklist when domain-less defaults are provided.\r\n\r\nWhen a SetCookie deletion is encountered and the cookiejar contains domain-less cookies: \r\n\r\n* delete the domain cookie (if it exists) \r\n* and populate the blacklist.\r\n\r\nWhen a request is made, filter the defaults against active blacklist values.\r\n\r\nWhen a SetCookie update is made, remove it from the blacklist (or update the blacklist's to note it as invalid until the cookie's expiry date)\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\n# cookies not unset\r\nsession1 = requests.Session()\r\nsession1.cookies = requests.cookies.RequestsCookieJar()\r\nsession1.cookies.set('foo', 'bar')\r\n\r\nr_set = session1.get(\"http://httpbin.org/cookies/set?bar=foo\")\r\nprint(r_set.json())\r\nr_del = session1.get(\"http://httpbin.org/cookies/delete?foo=bar\")\r\nprint(r_del.json())\r\nr_check = session1.get(\"http://httpbin.org/cookies\")\r\nprint(r_check.json())\r\n\r\n# cookies unset because domain matches\r\nsession2 = requests.Session()\r\nsession2.cookies = requests.cookies.RequestsCookieJar()\r\nsession2.cookies.set('foo', 'bar', domain='httpbin.org', path='/')\r\n\r\nrr_set = session2.get(\"http://httpbin.org/cookies/set?bar=foo\")\r\nprint(rr_set.json())\r\nrr_del = session2.get(\"http://httpbin.org/cookies/delete?foo=bar\")\r\nprint(rr_del.json())\r\nrr_check = session2.get(\"http://httpbin.org/cookies\")\r\nprint(rr_check.json())\r\n```\r\n\r\n## System Information\r\n\r\n\"version\": \"2.18.4\"\r\n",
            "author_association": "CONTRIBUTOR",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "jvanasco",
                "id": 204779,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4425/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/351045720",
                    "id": 351045720,
                    "created_at": "2017-12-12T13:05:59Z",
                    "updated_at": "2017-12-12T13:05:59Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Thanks for this @jvanasco \r\n\r\nI had started hacking on a branch that would make the domain and path required with our cookie jar and probably provide a better interface to all of this in general. Sadly, I think that got lost in the suffle and I'd forgotten it. The API design change needs to be made for v3.0 to make this more tenable.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/351045720/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006361172418110073,
                        "severe_toxicity": 0.00011733337305486202,
                        "obscene": 0.00017530105833429843,
                        "threat": 0.0001227456086780876,
                        "insult": 0.00017297847080044448,
                        "identity_attack": 0.00013765344920102507
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/351123532",
                    "id": 351123532,
                    "created_at": "2017-12-12T17:26:16Z",
                    "updated_at": "2017-12-12T17:26:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Making the domain and path required would be much easier than the blacklist idea I was stubbing out (nowhere near a PR, just some tests on the general logic working before I posted here).\r\n\r\nIf that is required, IMHO, it would make sense to deprecate the 'cookies' argument to `requests.get()` (lose the docs, print a warning) and change the docs around cookiejars and `Session()`to note the impending change.  \r\n\r\nOur unit tests just tossed a dict of cookies into `requests.get()`, because that's what the docs did.  It took an embarrassing amount of time to realize I had successfully fixed an edge case we added a test for, and the problem was in the test/requests.  Then it took looking at the code and a history of tickets to realize that was a bad idea and requests didn't do all the wonderfully brilliant things I expected it to (because it does all those wonderfully brilliant things everywhere else).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/351123532/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jvanasco",
                        "id": 204779,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007306485204026103,
                        "severe_toxicity": 0.00011310660192975774,
                        "obscene": 0.00019367503409739584,
                        "threat": 0.0001115557097364217,
                        "insult": 0.00017492937331553549,
                        "identity_attack": 0.00013421560288406909
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/351209956",
                    "id": 351209956,
                    "created_at": "2017-12-12T22:03:51Z",
                    "updated_at": "2017-12-12T22:03:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@jvanasco I completely agree our behaviour is far from wonderfully brilliant like the rest of the project. That said, I think there's a difference between the following:\r\n\r\n```\r\nrequests.request(METHOD, url, cookies=key_value_pair_cookies)\r\n```\r\n\r\nAnd\r\n\r\n```\r\nsession.cookies.set(key, value)\r\n```\r\n\r\nThe first is a convenience that I think we can *reasonably* keep around. Underneath the functional API is a Session. If we have the session treat that dictionary as calling `.set(key, value, domain=parsed_domain, path=parsed_path)` we can probably then simplify our handling of cookies and the cookie-jar will respect deletions. I think that's a potentially far better solution than deprecating it altogether.\r\n\r\nThe second is just *wrong*. ;)",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/351209956/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006406407919712365,
                        "severe_toxicity": 0.00011848389112856239,
                        "obscene": 0.00017733614367898554,
                        "threat": 0.00012760089884977788,
                        "insult": 0.0001743881293805316,
                        "identity_attack": 0.00013832516560796648
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/351223713",
                    "id": 351223713,
                    "created_at": "2017-12-12T23:00:17Z",
                    "updated_at": "2017-12-12T23:00:17Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "You are correct - parsing the cookie domain/path out of the submitted url would be a much better idea than trashing it, but you'll still end up with issues over the potential of a leading dot in the domain (and ugh, the path, but let's not go there yet).  This can be infuriating to debug if a problem pops up from it.\r\n\r\nFor example, consider making a request to `example.com` with a `foo` cookie:\r\n\r\n    requests.get('http://example.com/path/to/url', cookies={'foo': 'bar'})\r\n\r\nlet's also assume the path is just set for the root `/` (because it gets even more complicated otherwise)\r\n\r\nThe server might be configured to send the SetCookie header for `foo` with any of three options for the domain:\r\n\r\n* domain = None\r\n* domain = 'example.com'\r\n* domain = '.example.com'\r\n\r\nThe RFCs and browser behavior on all this were switching around for a few years too on what no domain should imply, or the behavior of the leading dot.  While everything is settled right now, there are still a lot of legacy clients/servers out there, and the current requests codebase doesn't seem to standardize on anything.\r\n\r\nSo it could be represented by two ways of setting cookies in the jar.  \r\n\r\n    jar.set('foo', 'bar', domain='example.com')\r\n    jar.set('foo', 'bar', domain='.example.com')\r\n\r\nIf the server sends an update/clearout for the cookie value, it's possible that requests will have guessed wrong. While `requests` sends some data to the underlying `cookielib` functionality from the standard library over the initial dot or domain being set, these are treated as unique cookies and must be deleted/updated independently.\r\n\r\nWe just updated/unified all our python and js cookie libraries. I had the \"pleasure\" of reconciling a bunch of issues around how differently libraries & browsers were handling the leading domain dot differently.  (sidenote: My lazy solution on the server side was to migrate everything to specifying the domain with a leading dot, but also killing cookies with both leading dot and not. i hate cookies now. )\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/351223713/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jvanasco",
                        "id": 204779,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0016615315107628703,
                        "severe_toxicity": 9.778167441254482e-05,
                        "obscene": 0.00023503025295212865,
                        "threat": 0.00010901389759965241,
                        "insult": 0.00020333233987912536,
                        "identity_attack": 0.00014868471771478653
                    }
                }
            ]
        },
        "224": {
            "html_url": "https://github.com/psf/requests/pull/4372",
            "id": 271213442,
            "number": 4372,
            "title": "When Location decoding fails, fall back to original",
            "created_at": "2017-11-04T18:28:35Z",
            "updated_at": "2022-01-03T15:30:58Z",
            "closed_at": null,
            "body": "Issue #3888 correctly identified Location headers as *usually* containing UTF-8\r\ncodepoints (when not correctly URL encoded), but this is not always the case.\r\nFor example the URL\r\nhttp://www.finanzen.net/suchergebnis.asp?strSuchString=DE0005933931 redirects\r\nto `b'/etf/ishares_core_dax\\xae_ucits_etf_de'`, containing the Latin-1 byte for\r\nthe \u00ae character.\r\n\r\nIf UTF-8 decoding fails, it is better to fall back to the original.\r\n\r\nThis issue was found via https://stackoverflow.com/questions/47113376/python-3-x-requests-redirect-with-unicode-character",
            "author_association": "CONTRIBUTOR",
            "comments": 11,
            "state": "open",
            "user": {
                "login": "mjpieters",
                "id": 46775,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4372/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/341919715",
                    "id": 341919715,
                    "created_at": "2017-11-04T18:33:29Z",
                    "updated_at": "2017-11-04T18:33:59Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Crumbs, tests fail on 2.x because it encodes a bytestring (latin-1 encoded), while Python 3 handles a Unicode value. Returning a native `latin-1` string should work there.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/341919715/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjpieters",
                        "id": 46775,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.010953464545309544,
                        "severe_toxicity": 0.00010845720680663362,
                        "obscene": 0.0008111642091535032,
                        "threat": 0.00012932525714859366,
                        "insult": 0.0006223883247002959,
                        "identity_attack": 0.00020884904370177537
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/341920405",
                    "id": 341920405,
                    "created_at": "2017-11-04T18:42:53Z",
                    "updated_at": "2017-11-04T18:44:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Nope, `to_native_string()` returns a `str` on Python 2. Suggestions to produce consistent output on 2.x and 3.x appreciated; just returning `location.decode('latin1')` doesn't work either.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/341920405/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjpieters",
                        "id": 46775,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008495434885844588,
                        "severe_toxicity": 0.00010383925109636039,
                        "obscene": 0.00019265762239228934,
                        "threat": 0.00010432289855089039,
                        "insult": 0.00017819125787355006,
                        "identity_attack": 0.00013285025488585234
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/341931359",
                    "id": 341931359,
                    "created_at": "2017-11-04T21:34:50Z",
                    "updated_at": "2017-11-04T21:34:50Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "And another thought: Python 3 ends up with UTF8 bytes in the URL-encoded redirection URL regardless of what encoding the server used in the Location header. Surprisingly, this specific server doesn't appear to care (both variants end accepted and return the same response), but for other servers this may necessarily be the same. Most will expect the exact same byte sequence to be used for the next location. How should requests handle those?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/341931359/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjpieters",
                        "id": 46775,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006071942043490708,
                        "severe_toxicity": 0.0001225652522407472,
                        "obscene": 0.00018352207553107291,
                        "threat": 0.00012563438212964684,
                        "insult": 0.00017697886505629867,
                        "identity_attack": 0.0001405465736752376
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/341955874",
                    "id": 341955874,
                    "created_at": "2017-11-05T09:06:48Z",
                    "updated_at": "2017-11-05T09:06:48Z",
                    "author_association": "MEMBER",
                    "body": "All of this is distressingly difficult for us to handle appropriately. The biggest issue is that we do not control header decoding on Python 3 (as noted in the code comments above the change you made), so things get tricky fast.\r\n\r\nThe core issue though is that we cannot \"retain the original\": we need to transition the string to a native form. Have you tried using `to_native_string(resp.headers['location'], 'latin1')` to see if that resolves the test failure?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/341955874/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006360517581924796,
                        "severe_toxicity": 0.00012158535537309945,
                        "obscene": 0.00017773140280041844,
                        "threat": 0.00012955199053976685,
                        "insult": 0.00017675879644230008,
                        "identity_attack": 0.00014236342394724488
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/341986396",
                    "id": 341986396,
                    "created_at": "2017-11-05T16:37:52Z",
                    "updated_at": "2017-11-05T16:37:52Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Have you tried using `to_native_string(resp.headers['location'], 'latin1')` to see if that resolves the test failure?\r\n\r\nI did, it doesn't, because in Python 2 you'd get a bytestring still. That is then urlencoded to a different representation from the Python 3 Unicode string path.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/341986396/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjpieters",
                        "id": 46775,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007582226535305381,
                        "severe_toxicity": 0.00010932735312962905,
                        "obscene": 0.00018140407337341458,
                        "threat": 0.00011235392594244331,
                        "insult": 0.00017556585953570902,
                        "identity_attack": 0.00013561631203629076
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/341986619",
                    "id": 341986619,
                    "created_at": "2017-11-05T16:41:22Z",
                    "updated_at": "2017-11-05T16:41:22Z",
                    "author_association": "MEMBER",
                    "body": "@mjpieters What is the different urlencoding output in each case?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/341986619/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012566078221425414,
                        "severe_toxicity": 9.42356200539507e-05,
                        "obscene": 0.00020633706299122423,
                        "threat": 9.897249401547015e-05,
                        "insult": 0.00019179579976480454,
                        "identity_attack": 0.00013470486737787724
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/342508697",
                    "id": 342508697,
                    "created_at": "2017-11-07T14:59:37Z",
                    "updated_at": "2017-11-07T14:59:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "For the Latin1 `\u00e5` character, Python 2 outputs `%E5`, Python 3 `%C3%A5`, so the Latin-1 and UTF-8 bytes URL-encoded.\r\n\r\nYou can reproduce these in Python 3 with:\r\n\r\n```python\r\n>>> from urllib.parse import quote\r\n>>> quote('\u00e5', encoding='utf8')\r\n'%C3%A5'\r\n>>> quote('\u00e5', encoding='latin')\r\n'%E5'\r\n ```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/342508697/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjpieters",
                        "id": 46775,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007080821669660509,
                        "severe_toxicity": 0.0001149776580859907,
                        "obscene": 0.00019372120732441545,
                        "threat": 0.00011580035788938403,
                        "insult": 0.00017693685367703438,
                        "identity_attack": 0.00013743141607847065
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/342613525",
                    "id": 342613525,
                    "created_at": "2017-11-07T20:34:23Z",
                    "updated_at": "2017-11-07T20:34:23Z",
                    "author_association": "MEMBER",
                    "body": "So, just to be clear: when given a byte string in Python 2, the quote library just quotes its bytes directly. When given a unicode string on Python 3, the quote library encodes it and then quotes the bytes?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/342613525/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005774702876806259,
                        "severe_toxicity": 0.0001241822465090081,
                        "obscene": 0.00018308618746232241,
                        "threat": 0.00012266464182175696,
                        "insult": 0.00017470917373429984,
                        "identity_attack": 0.00014058906526770443
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/343192551",
                    "id": 343192551,
                    "created_at": "2017-11-09T15:37:17Z",
                    "updated_at": "2017-11-09T15:37:17Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Exactly. And you can tell `quote()` what encoding to use too; the default is UTF-8. So if we can store the encoding for the location header (UTF-8, or if that fails, the fallback to Latin-1) we could use that information to re-encode to the same.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/343192551/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mjpieters",
                        "id": 46775,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005888632731512189,
                        "severe_toxicity": 0.00012345648428890854,
                        "obscene": 0.00018537840514909476,
                        "threat": 0.00012250905274413526,
                        "insult": 0.00017460859089624137,
                        "identity_attack": 0.0001392264530295506
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/343597478",
                    "id": 343597478,
                    "created_at": "2017-11-10T21:54:23Z",
                    "updated_at": "2017-11-10T21:54:23Z",
                    "author_association": "MEMBER",
                    "body": "That sounds like it'd be the best approach, if we can swing it.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/343597478/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005644680932164192,
                        "severe_toxicity": 0.00013880345795769244,
                        "obscene": 0.00020618760026991367,
                        "threat": 0.00013778805441688746,
                        "insult": 0.00018469103088136762,
                        "identity_attack": 0.00014759127225261182
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/575960200",
                    "id": 575960200,
                    "created_at": "2020-01-19T02:44:24Z",
                    "updated_at": "2020-01-19T02:46:13Z",
                    "author_association": "NONE",
                    "body": "Any update on this?\r\n\r\n__Edit:__ I see there's https://github.com/psf/requests/pull/4933 as well.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/575960200/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "imtbl",
                        "id": 28833155,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000613587093539536,
                        "severe_toxicity": 0.000121288001537323,
                        "obscene": 0.00018271942099090666,
                        "threat": 0.00012267084093764424,
                        "insult": 0.00017629674402996898,
                        "identity_attack": 0.00014037392975296825
                    }
                }
            ]
        },
        "225": {
            "html_url": "https://github.com/psf/requests/issues/4325",
            "id": 262873207,
            "number": 4325,
            "title": "Session adapter doesn't update https connections cert data",
            "created_at": "2017-10-04T17:45:28Z",
            "updated_at": "2019-01-04T17:38:35Z",
            "closed_at": null,
            "body": "Under a session, the first https request sets the HTTPSConnectionPool certs data.\r\nIf in a subsequent request, we change the certs data (eg: Set verify to True), the adaptor will update the ConnectionPool attributes, however each connection in the pool will still contain the old certs data, thus when requesting a connection from the pool, its info will differ from what we would expect.\r\n\r\n## Expected Result\r\n\r\nThe used connection should have updated certs data\r\n\r\n## Actual Result\r\n\r\nThe used connection have \"old\" certs data.\r\n\r\n## Reproduction Steps\r\nThese tests where performed against a server with a self-signed CA.\r\n```python\r\nIn [1]: from requests import Session\r\n\r\nIn [2]: url = \"https://somepage\"\r\n\r\nIn [3]: auth = (\"admin\", \"admin123\")\r\n\r\nIn [4]: s = Session()\r\n\r\nIn [5]: s.get(url, auth=auth, verify=False)\r\n\r\nOut[5]: <Response [200]>\r\n\r\n# This should fail, but doesnt\r\nIn [6]: s.get(url, auth=auth, verify=True)\r\n\r\nOut[6]: <Response [200]>\r\n\r\n# Create a new session\r\nIn [7]: Session().get(url, auth=auth, verify=True)\r\n# Raises certificate verify failed\r\n```\r\nI'm aware ConnectionPool is in urllib realm, but since it's the adaptor who is updating the pool data, perhaps it should also handle this scenario?\r\n## System Information\r\n\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  }, \r\n  \"cryptography\": {\r\n    \"version\": \"1.7.2\"\r\n  }, \r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  }, \r\n  \"implementation\": {\r\n    \"name\": \"CPython\", \r\n    \"version\": \"2.7.12\"\r\n  }, \r\n  \"platform\": {\r\n    \"release\": \"4.4.0-59-generic\", \r\n    \"system\": \"Linux\"\r\n  }, \r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1000207f\", \r\n    \"version\": \"16.0.0\"\r\n  }, \r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  }, \r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  }, \r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  }, \r\n  \"using_pyopenssl\": true\r\n}",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "aleperno",
                "id": 2819491,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4325/reactions",
                "total_count": 1,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 1,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/334237947",
                    "id": 334237947,
                    "created_at": "2017-10-04T17:54:21Z",
                    "updated_at": "2017-10-04T17:54:21Z",
                    "author_association": "MEMBER",
                    "body": "Yeah. Requests is using some old APIs in urllib3 that don\u2019t interact with the connection pooling. It should update to pass the TLS data into the pool manager to ensure that the TLS info factors in. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/334237947/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006306348950602114,
                        "severe_toxicity": 0.00011924397404072806,
                        "obscene": 0.00018415680096950382,
                        "threat": 0.00012711307499557734,
                        "insult": 0.00017484815907664597,
                        "identity_attack": 0.00013573106843978167
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/334279422",
                    "id": 334279422,
                    "created_at": "2017-10-04T20:28:05Z",
                    "updated_at": "2017-10-04T20:28:05Z",
                    "author_association": "NONE",
                    "body": "@Lukasa thanks for your prompt reply",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/334279422/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "aleperno",
                        "id": 2819491,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006519128219224513,
                        "severe_toxicity": 0.00011744799121515825,
                        "obscene": 0.00017541676061227918,
                        "threat": 0.00013206615403760225,
                        "insult": 0.00017460707749705762,
                        "identity_attack": 0.0001367440854664892
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/347610515",
                    "id": 347610515,
                    "created_at": "2017-11-28T18:03:03Z",
                    "updated_at": "2017-11-28T18:03:03Z",
                    "author_association": "NONE",
                    "body": "This is also true of the certificate/key paths provided in the `cert` keyword argument. It seems that the `certfile` and `keyfile` attributes are maintained on the connection and not reset if a new `cert` kwarg is given on a subsequent request on the session.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/347610515/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "foslock",
                        "id": 759549,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007077873451635242,
                        "severe_toxicity": 0.00011341441131662577,
                        "obscene": 0.00018814459326677024,
                        "threat": 0.00011845248081954196,
                        "insult": 0.00017536610539536923,
                        "identity_attack": 0.00013540711370296776
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/451513921",
                    "id": 451513921,
                    "created_at": "2019-01-04T17:38:35Z",
                    "updated_at": "2019-01-04T17:38:35Z",
                    "author_association": "NONE",
                    "body": "Still observing this in 2.21.0, but you can issue session.close() to clear out the poolmanager, which will allow new requests with different verify values to be paid attention to. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/451513921/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lifehackjim",
                        "id": 7453963,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005511009367182851,
                        "severe_toxicity": 0.00013213467900641263,
                        "obscene": 0.0001863296638475731,
                        "threat": 0.00013444179785437882,
                        "insult": 0.00018048500351142138,
                        "identity_attack": 0.0001446620881324634
                    }
                }
            ]
        },
        "226": {
            "html_url": "https://github.com/psf/requests/issues/4323",
            "id": 262203652,
            "number": 4323,
            "title": "Make sessions safe[r] in multi-process environment",
            "created_at": "2017-10-02T19:44:08Z",
            "updated_at": "2024-05-19T18:56:37Z",
            "closed_at": null,
            "body": "tldr; in multi-process environment (Celery) sessions might lead to request/responses being mixed up.\r\n\r\nIt is unsafe to use Session in a multi-process environment - if the fork happens after Session initialisation the underlying connection pool will be shared across both processes, leading to potentially dangerous and hard to debug issues.\r\n\r\nI'm not sure what should happen - whather a code change is necessary, or a documentation change is enough. Please advise :)\r\n\r\n## Use case\r\n\r\nIt is likely to happen if Session is created at module load time, like:\r\n\r\n```python\r\nclass MyClient(object):\r\n    session = requests.Session()\r\n\r\n    def do_things(self, **params):\r\n         self.session.get(**params)\r\n```\r\n\r\nor if a 3rd party client is imported at the module level, where it becomes totally invisible:\r\n\r\n```python\r\n\r\nmy_database_client = database.DatabaseClient(**params)\r\n\r\nclass MyDatabaseWrapper(object):\r\n\r\n      def do_things(self, **params):\r\n            my_database_client.update(**params)\r\n```\r\n\r\nThis is particularly tricky in a **Celery**, where a previously working function might start causing troubles if invoked from Celery. Celery seems like a common Python use case.\r\n\r\nI've seen this pattern in 3 different repos written by 3 different developers - it feels common enough for it to be a problem.\r\n\r\n## Reason\r\n\r\nThis is related to https://github.com/shazow/urllib3/issues/850 in urllib3, where it was stated that it's the callers' responsibility to worry about forking - in this case, it's Requests.\r\n\r\n## Expected Result\r\n\r\nIdeally, a new Session with the same parameters would be started by Requests. \r\n\r\nIf that's too complicated, I'd expect an exception to be thrown if PID change was detected.\r\n\r\nAt the very least, docs should state the expected behaviour.\r\n\r\n\r\n## Actual Result\r\n\r\nThe responses are mixed up - one process might receive a response made for a call it didn't make.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport os\r\nimport sys\r\nimport requests\r\n\r\nMAX = 20\r\ns = requests.Session()\r\n\r\nfor n in range(MAX):\r\n    pid = os.fork()\r\n    if pid == 0:\r\n        try:\r\n            # s.mount(\"http://\", requests.adapters.HTTPAdapter())  # uncomment to fix\r\n            r = s.get('http://httpstat.us/300?sleep=100')\r\n        except Exception:\r\n            # ignoring intermittent http errors\r\n            pass\r\n        sys.exit(0)\r\n    else:\r\n        try:\r\n            r = s.get('http://httpstat.us/200')\r\n        except Exception as exc:\r\n            # ignoring intermittent http errors\r\n            pass\r\n\r\n        if r.status_code != 200:\r\n            print 'pid: {} Call {}/{}. Wrong status code detected {}'.format(\r\n                os.getpid(),\r\n                n,\r\n                MAX,\r\n                r.status_code\r\n            )\r\n```\r\n\r\n```\r\npid: 30996 Call 7/20. Wrong status code detected 300   \r\npid: 30996 Call 9/20. Wrong status code detected 300   \r\npid: 30996 Call 14/20. Wrong status code detected 300  \r\npid: 30996 Call 17/20. Wrong status code detected 300  \r\npid: 30996 Call 19/20. Wrong status code detected 300 \r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\npawel@pawel-C02V306VHTDH ~/Uber/tokenizer-python $ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  }, \r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  }, \r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  }, \r\n  \"implementation\": {\r\n    \"name\": \"CPython\", \r\n    \"version\": \"2.7.14\"\r\n  }, \r\n  \"platform\": {\r\n    \"release\": \"16.7.0\", \r\n    \"system\": \"Darwin\"\r\n  }, \r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\", \r\n    \"version\": null\r\n  }, \r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  }, \r\n  \"system_ssl\": {\r\n    \"version\": \"100020cf\"\r\n  }, \r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  }, \r\n  \"using_pyopenssl\": false\r\n}```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).",
            "author_association": "NONE",
            "comments": 8,
            "state": "open",
            "user": {
                "login": "rabbbit",
                "id": 290258,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4323/reactions",
                "total_count": 7,
                "+1": 6,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 1
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/334272120",
                    "id": 334272120,
                    "created_at": "2017-10-04T20:00:10Z",
                    "updated_at": "2017-10-04T20:00:10Z",
                    "author_association": "MEMBER",
                    "body": "So my suggestion here is that we simply document this as a risk. It can\u2019t happen merely by creating a `Session` before forking, it has to actually be *used* before the fork. The difficulty is that forking combined with multi threading and streaming means that we need to check PIDs constantly: additionally, there is no appropriate recovery in many cases. \r\n\r\nAs a result I suggest this is best handled at application scope: either create sessions after forking or wrap them in a data structure that understands your forking paradigm. There is just no general solution to this problem. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/334272120/reactions",
                        "total_count": 3,
                        "+1": 3,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006184413214214146,
                        "severe_toxicity": 0.00012176750897197053,
                        "obscene": 0.00017929325986187905,
                        "threat": 0.00012861689901910722,
                        "insult": 0.00017425430996809155,
                        "identity_attack": 0.00014101171109359711
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/377417115",
                    "id": 377417115,
                    "created_at": "2018-03-30T01:09:13Z",
                    "updated_at": "2018-03-30T01:09:13Z",
                    "author_association": "NONE",
                    "body": "I second to this suggestion. I was using same sessions object across multiple independent processes, and boy, I had to literally spend 3 hours scratching my head before I could finally pinpoint to this as a root cause. \r\n\r\nOddly though, my code was working perfectly on a windows platform. On Linux, I was having a issue with responses mixups. I think may be because windows and Linux handle multiprocessing differently? Not sure here. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/377417115/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "thepegasos",
                        "id": 24960079,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000762576179113239,
                        "severe_toxicity": 0.00011081884440500289,
                        "obscene": 0.0001877660833997652,
                        "threat": 0.0001119351654779166,
                        "insult": 0.00017570704221725464,
                        "identity_attack": 0.00013494142331182957
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/377536999",
                    "id": 377536999,
                    "created_at": "2018-03-30T14:34:00Z",
                    "updated_at": "2018-03-30T14:34:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": ">  I think may be because windows and Linux handle multiprocessing differently? Not sure here.\r\n\r\nThey do. multiprocessing on Windows can't fork in the same was as linux so you were not actually sharing the same session across processes",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/377536999/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006880167056806386,
                        "severe_toxicity": 0.00011460975656518713,
                        "obscene": 0.00017700536409392953,
                        "threat": 0.00012517304276116192,
                        "insult": 0.00017732582637108862,
                        "identity_attack": 0.00013720986316911876
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/402923039",
                    "id": 402923039,
                    "created_at": "2018-07-06T04:35:03Z",
                    "updated_at": "2018-07-06T04:35:03Z",
                    "author_association": "NONE",
                    "body": "I am also having issues with celery and requests, this results in unexplained hangups while .get'ing , bad content, and auth tokens being randomly invalidated.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/402923039/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sivang",
                        "id": 310789,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.009476801380515099,
                        "severe_toxicity": 9.980042523238808e-05,
                        "obscene": 0.0007545897387899458,
                        "threat": 0.00012277861242182553,
                        "insult": 0.0005191534291952848,
                        "identity_attack": 0.000180481220013462
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/403024916",
                    "id": 403024916,
                    "created_at": "2018-07-06T12:51:19Z",
                    "updated_at": "2018-07-06T12:51:19Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Quoting:\r\n\r\n> As a result I suggest this is best handled at application scope: either create sessions after forking or wrap them in a data structure that understands your forking paradigm. There is just no general solution to this problem.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/403024916/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006259357905946672,
                        "severe_toxicity": 0.00011964649456785992,
                        "obscene": 0.00017727562226355076,
                        "threat": 0.000126062921481207,
                        "insult": 0.00017686872160993516,
                        "identity_attack": 0.00013856726582162082
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/403799496",
                    "id": 403799496,
                    "created_at": "2018-07-10T12:09:33Z",
                    "updated_at": "2018-07-10T12:09:33Z",
                    "author_association": "NONE",
                    "body": "Would using two session objects, one for authentication pre-fork, extracting the cookiejar , passing the cookiejar to the to-be-forked task (-celery) and then using it to do whatever needs to be done against the server work? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/403799496/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sivang",
                        "id": 310789,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007205965812318027,
                        "severe_toxicity": 0.0001107959178625606,
                        "obscene": 0.00017792792641557753,
                        "threat": 0.0001186221488751471,
                        "insult": 0.00017597831902094185,
                        "identity_attack": 0.00013461819617077708
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/406849171",
                    "id": 406849171,
                    "created_at": "2018-07-22T08:14:10Z",
                    "updated_at": "2018-07-22T08:14:10Z",
                    "author_association": "NONE",
                    "body": "So I think I've got it, and have a code recipe for a best practice, should I go ahead and write something and then submit a PR for the docs? ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/406849171/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sivang",
                        "id": 310789,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005715406150557101,
                        "severe_toxicity": 0.0001275468966923654,
                        "obscene": 0.00018166736117564142,
                        "threat": 0.0001270077918889001,
                        "insult": 0.00017822660447563976,
                        "identity_attack": 0.00014420939260162413
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/438975251",
                    "id": 438975251,
                    "created_at": "2018-11-15T09:29:06Z",
                    "updated_at": "2018-11-15T09:29:06Z",
                    "author_association": "NONE",
                    "body": "@sivang Can you please share your code recipe for best practice?\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/438975251/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "JackieMa000",
                        "id": 3031795,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006283721886575222,
                        "severe_toxicity": 0.00012065251939930022,
                        "obscene": 0.00017454265616834164,
                        "threat": 0.00013670107000507414,
                        "insult": 0.0001769171212799847,
                        "identity_attack": 0.00014079634274821728
                    }
                }
            ]
        },
        "227": {
            "html_url": "https://github.com/psf/requests/issues/4214",
            "id": 247004428,
            "number": 4214,
            "title": "Returning cookies from Adapters",
            "created_at": "2017-08-01T09:12:47Z",
            "updated_at": "2017-09-05T13:52:49Z",
            "closed_at": null,
            "body": "I've been trying to create a subclass of `BaseAdapter` for Requests that supports WSGI applications, (preferably based on the requests-wsgi-adapter package, or from scratch if need be).\r\n\r\nThe sticking point has been cookies and session handling.  From reading the Requests code, my understanding is that cookies are automatically extracted from the reponse object returned from the adapter's `send` method.  In order for the cookies to be automatically extracted the response needs to have a `r.raw._original_response.msg` chain of attributes and this should return an object with an `info` method that should return an `email.message.Message` instance (largely because of  `cookies.py:extract_cookies_to_jar`, but also because of how `http.cookiejar` behaves).\r\n\r\nThis seems like a needlessly complicated series of steps to go through, particularly as I'm not currently clear on how to correctly convert my response body to an `email.message.Message` (and a quick scan of the Python documentation makes this look non-trivial).\r\n\r\nHave I misunderstood?  Are there any helper functions for performing these steps?\r\n\r\nWould you consider a patch to `extract_cookies_to_jar` that also looks, for example, for a `_cookies_dict` property on the response, at the point that it currently silently returns if there is no `_original_response` attribute?\r\n\r\nAlternatively, would you consider supporting something like https://pypi.python.org/pypi/cookies/ with a friendlier interface (kind of \"Requests for cookies\")?  I haven't dug into it a lot, but it looks relatively easy to add optional support for it (which I'd be happy to contribute).\r\n",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "Singletoned",
                "id": 6284,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4214/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/319349766",
                    "id": 319349766,
                    "created_at": "2017-08-01T11:57:57Z",
                    "updated_at": "2017-08-01T11:57:57Z",
                    "author_association": "MEMBER",
                    "body": "> Have I misunderstood? Are there any helper functions for performing these steps?\r\n\r\nYou have not: there are no helper functions for performing these steps.\r\n\r\n> Alternatively, would you consider supporting something like https://pypi.python.org/pypi/cookies/ with a friendlier interface (kind of \"Requests for cookies\")?\r\n\r\nNope. =) Note the README on that project:\r\n\r\n> This doesn\u2019t compete with the cookielib (http.cookiejar) module in the Python standard library, which is specifically for implementing cookie storage and similar behavior in an HTTP client such as a browser. Things cookielib does that this doesn\u2019t:\r\n>\r\n> - Write to or read from browsers\u2019 cookie stores or other proprietary formats for storing cookie data in files\r\n> - Handle the browser/client logic like deciding which cookies to send or discard, etc.\r\n\r\n`cookies` is not an appropriate replacement for `cookielib`. We need to continue to use `cookielib` for the moment.\r\n> Would you consider a patch to `extract_cookies_to_jar` that also looks, for example, for a `_cookies_dict` property on the response, at the point that it currently silently returns if there is no `_original_response` attribute?\r\n\r\nI am disinclined to do that. Generally speaking I don't think this is a common concern. Additionally, the surface area you actually need here is low. Your `Message` instance actually just needs to be an object with a few methods: `get_all`, and `getheaders`. That's it: everything else should be covered by the shim code. I think the two methods can even have the same implementation, and that in your case `getheaders` may be optional.\r\n\r\nSo I don't think this is completely unreasonable to work with, and given that it's very uncommonly needed the overhead of having an alternative escape method is probably not worthwhile.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/319349766/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008938743267208338,
                        "severe_toxicity": 0.00010652928904164582,
                        "obscene": 0.00018015627574641258,
                        "threat": 0.00011352574802003801,
                        "insult": 0.00017549839685671031,
                        "identity_attack": 0.000140150441438891
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/319456718",
                    "id": 319456718,
                    "created_at": "2017-08-01T18:29:53Z",
                    "updated_at": "2017-08-01T18:29:53Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@Singletoned thank you for doing this! WSGI app mounting is exactly one of the use cases I had in mind when designing the ConnectionAdapter interface \u2014 I've been waiting for someone to do this :)\r\n\r\n\u2728\ud83c\udf70\u2728",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/319456718/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000646740838419646,
                        "severe_toxicity": 0.00011741697380784899,
                        "obscene": 0.00018199261103291065,
                        "threat": 0.00013113617023918778,
                        "insult": 0.00017168642079923302,
                        "identity_attack": 0.00013327454507816583
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/319485674",
                    "id": 319485674,
                    "created_at": "2017-08-01T20:24:19Z",
                    "updated_at": "2017-08-01T20:24:19Z",
                    "author_association": "NONE",
                    "body": "@Lukasa\r\n\r\n> cookies is not an appropriate replacement for cookielib. We need to continue to use cookielib for the moment.\r\n\r\nI'm not suggesting that you replace `cookielib` with `cookies`, I'm suggesting that `cookies` would be a nicer thing to return attached to a response from an adapter than `email.message.Message`.  I've already wasted a day looking into this, and my experience of looking at the `cookielib` code makes me reluctant to get involved with it any further.  It appears to be legacy code that will involve needless pain to interface with, that will be very hard to debug when strange things happen.  All this just to pass a single header.\r\n\r\n> given that it's very uncommonly needed the overhead of having an alternative escape method is probably not worthwhile.\r\n\r\nThe reason it is uncommonly needed is because no one is creating adapters.  If the interface between adapters and sessions is deeply entwined with urllib/cookielib, then that could discourage people from creating adapters.\r\n\r\nAt some point an interface between adapters and sessions will have to be designed (it can't always be based on urllib/cookielib).  I'd prefer it if it was sooner rather than later.  If you can agree on a design, I'd be willing to implement it.\r\n\r\n@kennethreitz Thanks but @seanbrant did most of the work already on https://github.com/seanbrant/requests-wsgi-adapter.  I'm just hoping to stand on his shoulders, and get it working with sessions (or rewrite it if need be).  I want to be able to replace some code using Requests to test a legacy website with some that tests a new WSGI app.  I've also been playing with creating a web testing library that's based on Requests, but returns custom responses with helpers for filling in forms, using css selectors, etc.\r\n\r\nI really like the idea of the adapters and the ability to mount them on particular addresses.  I can see it being useful in a surprising variety of ways.  It also ties in nicely (for me) with the ability to hook into response creation.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/319485674/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Singletoned",
                        "id": 6284,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006748060113750398,
                        "severe_toxicity": 0.00011808123235823587,
                        "obscene": 0.00018183025531470776,
                        "threat": 0.00012538568989839405,
                        "insult": 0.00017155567184090614,
                        "identity_attack": 0.0001413607969880104
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/319488848",
                    "id": 319488848,
                    "created_at": "2017-08-01T20:35:38Z",
                    "updated_at": "2017-08-01T20:35:38Z",
                    "author_association": "MEMBER",
                    "body": "> I'm not suggesting that you replace cookielib with cookies, I'm suggesting that cookies would be a nicer thing to return attached to a response from an adapter than email.message.Message. \r\n\r\nAh, sorry, I misunderstood. If we're redesigning this interface and adding code to Requests to shim from format x to `cookielib` there is no reason to invoke a third party library at all: we should just look straight at the header. We already have the headers, no reason to beat around the bush with an extra dependency. \r\n\r\n> The reason it is uncommonly needed is because no one is creating adapters.\r\n\r\nSure they are. I have done it myself several times. And I have [tackled this problem](https://github.com/Lukasa/hyper/blob/development/hyper/contrib.py#L173). It's not intractable at all: the interface is really as small as I suggested it was. \r\n\r\nHowever, I agree that we could bear to formalise this interface more strongly. The primary reason it takes the form that it does is that Requests throws away some key data about the header: namely, it joins them with commas, which does not work well with cookie handling. So we will need *a* formal interface that we can use, and we will need to map urllib3's responses through that interface. \r\n\r\nThe design wouldn't need to be very complex: just an object that takes a header iterable and implements the two needed methods. Hell, you could lift the one I linked above from hyper, change its name, and use that. That would probably be my initial suggestion. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/319488848/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0019221388502046466,
                        "severe_toxicity": 0.00010461788042448461,
                        "obscene": 0.0003251737798564136,
                        "threat": 0.00010844976350199431,
                        "insult": 0.0002099111006828025,
                        "identity_attack": 0.00014623663446400315
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/320025119",
                    "id": 320025119,
                    "created_at": "2017-08-03T16:43:20Z",
                    "updated_at": "2017-08-03T16:43:20Z",
                    "author_association": "NONE",
                    "body": "@frostming's solution works fine for me (following your suggestion).  If you guys are open to it, I (or @frostming) could make a small utility to put in the adapters code that generates the relevant stub.  At the very least it should be documented somewhere so that other people don't have to go through the same chain of exploration.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/320025119/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Singletoned",
                        "id": 6284,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005694200517609715,
                        "severe_toxicity": 0.0001268298801733181,
                        "obscene": 0.00018270198779646307,
                        "threat": 0.00013377134746406227,
                        "insult": 0.00017374397430103272,
                        "identity_attack": 0.00013959906937088817
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/320027000",
                    "id": 320027000,
                    "created_at": "2017-08-03T16:50:36Z",
                    "updated_at": "2017-08-03T16:50:36Z",
                    "author_association": "MEMBER",
                    "body": "@Singletoned What's the proposed patch for `adapters.py`? I'd be open to seeing what it looks like. Failing that I'd be happy to review a documentation patch for the `Transport Adapters` section of the documentation.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/320027000/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005999965942464769,
                        "severe_toxicity": 0.0001209815454785712,
                        "obscene": 0.00018180425104219466,
                        "threat": 0.00012467346095945686,
                        "insult": 0.00017282151384279132,
                        "identity_attack": 0.00013795502309221774
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/327181871",
                    "id": 327181871,
                    "created_at": "2017-09-05T13:52:48Z",
                    "updated_at": "2017-09-05T13:52:48Z",
                    "author_association": "NONE",
                    "body": "Having looked through the code while working on my own [WSGI adapter project](https://github.com/the-allanc/pyriform), it makes me wonder why we don't just use urllib3's HTTPHeaderDict directly from the urllib3 response object. I'm guessing that's there's an [API difference](https://github.com/shazow/urllib3/issues/670) which means that we can't plug it directly in.\r\n\r\nIf requests had its own `HTTPHeaderDict` which is inspired by the `urllib3` version, but is compatible with `CaseInsensitiveDict` -  would that make things much easier? If so, then I might play with that a little later - adding some methods (maybe just `add` and `getlist`) would do the job.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/327181871/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "the-allanc",
                        "id": 4016213,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006151296547614038,
                        "severe_toxicity": 0.0001230639172717929,
                        "obscene": 0.00019327728659845889,
                        "threat": 0.00012110977695556358,
                        "insult": 0.00017314050637651235,
                        "identity_attack": 0.0001399223692715168
                    }
                }
            ]
        },
        "228": {
            "html_url": "https://github.com/psf/requests/issues/4123",
            "id": 232804149,
            "number": 4123,
            "title": "Make response.next lazily computable.",
            "created_at": "2017-06-01T08:35:46Z",
            "updated_at": "2024-05-19T18:54:54Z",
            "closed_at": null,
            "body": "When attempting to debug #4122 I attempted to use the standard method for debugging this, which is to set `allow_redirects=False` and to manually check the headers. Unfortunately, this no longer works since @kennethreitz shipped 2.15.0, as Requests now *always* computes the first redirect target in order to write it into `Response.next`. This makes it very frustrating to debug problems with Requests redirect following because it cannot be disabled, meaning that monkeypatching is required to prevent Requests blowing up.\r\n\r\nI propose that we should either make `response.next` lazily computable, such that it is only calculated when actually requested, or we should remove it.\r\n\r\n## Expected Result\r\n\r\nI expected that if `allow_redirects=False` was provided Requests would not run any of its redirect handling code.\r\n\r\n## Actual Result\r\n\r\nIt did.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nurl = 'http://www.yftxt.com/plus/xiazai_yfx.php?open=2&id=12914&uhash=7fadfdb165fadc7362f9dc90'\r\nrequests.get(url, allow_redirects=False)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.3\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"16.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.17.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.21.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```",
            "author_association": "MEMBER",
            "comments": 17,
            "state": "open",
            "user": {
                "login": "Lukasa",
                "id": 1382556,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/4123/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305486750",
                    "id": 305486750,
                    "created_at": "2017-06-01T13:04:04Z",
                    "updated_at": "2017-06-01T13:04:04Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> we should remove it.\r\n\r\n+1\r\n\r\nI don't think the implementation is good and I don't think having this on a Response object is the right place for it. There's no way for people to use that Request object with anything other than a Session and if they're already using a Session they have what they need.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305486750/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006124381325207651,
                        "severe_toxicity": 0.00012217971379868686,
                        "obscene": 0.00017970215412788093,
                        "threat": 0.00012924389739055187,
                        "insult": 0.00017270159150939435,
                        "identity_attack": 0.00014078237290959805
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305539714",
                    "id": 305539714,
                    "created_at": "2017-06-01T16:01:33Z",
                    "updated_at": "2017-06-01T16:01:33Z",
                    "author_association": "MEMBER",
                    "body": "We should confirm though: @kennethreitz, what was the rationale for adding it? I assume you had a use-case in mind when you did. If so, it might be better to consider whether there is an alternative factoring of the code that doesn't run into this problem.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305539714/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005681278998963535,
                        "severe_toxicity": 0.0001251187495654449,
                        "obscene": 0.00018185314547736198,
                        "threat": 0.000127070423332043,
                        "insult": 0.00017512496560811996,
                        "identity_attack": 0.00014168805500958115
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305588613",
                    "id": 305588613,
                    "created_at": "2017-06-01T19:02:27Z",
                    "updated_at": "2017-06-01T19:02:27Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I added it to make it simple for people to follow redirect chains manually when `allow_redirects=False`. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305588613/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006294348859228194,
                        "severe_toxicity": 0.0001207313544000499,
                        "obscene": 0.00017587213369552046,
                        "threat": 0.00013088919513393193,
                        "insult": 0.00017966650193557143,
                        "identity_attack": 0.00014020992966834456
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305589545",
                    "id": 305589545,
                    "created_at": "2017-06-01T19:04:56Z",
                    "updated_at": "2017-06-01T19:04:56Z",
                    "author_association": "MEMBER",
                    "body": "Sure, and that makes sense. The question is: why not have them just call `resolve_redirects` themselves? This doesn't avoid any of the logic of `resolve_redirects`, so most of the reasons for manually following redirects go away.\r\n\r\nMore generally, this breaks `allow_redirects=False`, because it automatically always follows the first redirect up to just before sending. If we have any errors in that code, it becomes impossible to *not* hit them, as I've now discovered.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305589545/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000681435049045831,
                        "severe_toxicity": 0.0001175782090285793,
                        "obscene": 0.00018417066894471645,
                        "threat": 0.00011861084203701466,
                        "insult": 0.00017737688904162496,
                        "identity_attack": 0.00014138937694951892
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305590110",
                    "id": 305590110,
                    "created_at": "2017-06-01T19:06:15Z",
                    "updated_at": "2017-06-01T19:06:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'm not against removing it, I don't think anyone will be missing out, but if we can find another way to add this API that is cleaner, I'd be for it (for example, changing it to just returning the next url perhaps?). \r\n\r\nShould have put more though into it perhaps before pushing it out. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305590110/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005928882164880633,
                        "severe_toxicity": 0.00012651873112190515,
                        "obscene": 0.00018541410099714994,
                        "threat": 0.00012839290138799697,
                        "insult": 0.00017541542183607817,
                        "identity_attack": 0.00014323268260341138
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305590704",
                    "id": 305590704,
                    "created_at": "2017-06-01T19:08:11Z",
                    "updated_at": "2017-06-01T19:08:11Z",
                    "author_association": "MEMBER",
                    "body": "> (for example, changing it to just returning the next url perhaps?).\r\n\r\nDoesn't resolve the issue: literally the concern is executing the code in `resolve_redirects` in any form.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305590704/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006080828607082367,
                        "severe_toxicity": 0.00012008126941509545,
                        "obscene": 0.00018571950204204768,
                        "threat": 0.00012053441605530679,
                        "insult": 0.00017416496120858938,
                        "identity_attack": 0.00013600521197076887
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305591478",
                    "id": 305591478,
                    "created_at": "2017-06-01T19:11:12Z",
                    "updated_at": "2017-06-01T19:11:12Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Well, I think it's nice to have, but if it's problematic, i'm fine with removing it. I just think it's a nice touch. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305591478/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005515347584150732,
                        "severe_toxicity": 0.0001390092947985977,
                        "obscene": 0.00021003543224651366,
                        "threat": 0.00013393600238487124,
                        "insult": 0.00017936508811544627,
                        "identity_attack": 0.00014579582784790546
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305591773",
                    "id": 305591773,
                    "created_at": "2017-06-01T19:12:20Z",
                    "updated_at": "2017-06-01T19:12:20Z",
                    "author_association": "MEMBER",
                    "body": "I'm not opposed to having it, but it has to be built in a way that doesn't auto-run the code in `resolve_redirects`. If it computes lazily, that's fine, but it means the `Response` holds a reference to the `Session`. Assuming we're ok with that, I'm ok with it as an alternative.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305591773/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005885075079277158,
                        "severe_toxicity": 0.00012828104081563652,
                        "obscene": 0.0001969416916836053,
                        "threat": 0.00012635946040973067,
                        "insult": 0.0001761572784744203,
                        "identity_attack": 0.00014359741180669516
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305591875",
                    "id": 305591875,
                    "created_at": "2017-06-01T19:12:47Z",
                    "updated_at": "2017-06-01T19:12:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "+1 to lazy evaluation",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305591875/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.05674955993890762,
                        "severe_toxicity": 0.0001207209934364073,
                        "obscene": 0.0013190930476412177,
                        "threat": 0.00021203572396188974,
                        "insult": 0.0020425606053322554,
                        "identity_attack": 0.00036450003972277045
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305591947",
                    "id": 305591947,
                    "created_at": "2017-06-01T19:13:06Z",
                    "updated_at": "2017-06-01T19:13:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "torn about holding onto the session...",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305591947/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000728718820028007,
                        "severe_toxicity": 0.00011404472024878487,
                        "obscene": 0.0001824942883104086,
                        "threat": 0.0001159302846645005,
                        "insult": 0.00018000173440668732,
                        "identity_attack": 0.0001432277640560642
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305613759",
                    "id": 305613759,
                    "created_at": "2017-06-01T20:40:16Z",
                    "updated_at": "2017-06-01T20:40:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I absolutely am *against* the Response object holding onto the session. Let me explain it from this perspective:\r\n\r\nCurrently Requests can _appear_ to leak sockets/memory when users pass `stream=True` and refuse to consume the socket or return it to the connection pool. This is because the Response has a reference to a urllib3.Response which in turn has references to the connection pool and underlying httplib response & socket. The Session also has references to the connection pool. Now Responses, even those created via `requests.get`, will have a Session instance attached so they can maybe follow redirects? Uh, that's gross. That's especially gross since users will now have all the extra allocation of a session who are just using the functional API. And if they're using it enough, they could build up something awful (depending on how long their Response objects live of course). This just seems like a recipe for disaster.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305613759/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010862614726647735,
                        "severe_toxicity": 0.00010213804489467293,
                        "obscene": 0.00018988408555742353,
                        "threat": 0.00011482558329589665,
                        "insult": 0.00018265304970555007,
                        "identity_attack": 0.00014270184328779578
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305614616",
                    "id": 305614616,
                    "created_at": "2017-06-01T20:43:35Z",
                    "updated_at": "2017-06-01T20:43:35Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "i don't disagree",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305614616/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007945210672914982,
                        "severe_toxicity": 0.00011705722863553092,
                        "obscene": 0.000191161161637865,
                        "threat": 0.00011415242624934763,
                        "insult": 0.00017278411542065442,
                        "identity_attack": 0.00015064151375554502
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305616847",
                    "id": 305616847,
                    "created_at": "2017-06-01T20:52:09Z",
                    "updated_at": "2017-06-01T20:52:09Z",
                    "author_association": "MEMBER",
                    "body": "I'm with @sigmavirus24 on this. Hanging the Session instance on a Response conceptually seems pretty bizarre and prone to causing bugs. We also have tests suggesting we guarantee a Response object to be pickleable. Would that still hold true with the Session object attached?\r\n\r\nIf there's a way to maintain the interface without persisting the Session, then great. If not, it may be worth looking at alternatives/removing this method. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305616847/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005781404906883836,
                        "severe_toxicity": 0.0001269392523681745,
                        "obscene": 0.00018518937577027828,
                        "threat": 0.00013055064482614398,
                        "insult": 0.00017697786097414792,
                        "identity_attack": 0.00014514320355374366
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/305617887",
                    "id": 305617887,
                    "created_at": "2017-06-01T20:56:16Z",
                    "updated_at": "2017-06-01T20:56:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "There's too much knowledge specific to a Session object for us to move the logic to the Response object, in my opinion, and I don't see a better way than the suggestions provided above, but I haven't thought too hard about how to preserve the interface, frankly.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/305617887/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006161310011520982,
                        "severe_toxicity": 0.00012297475768718868,
                        "obscene": 0.00018099961744155735,
                        "threat": 0.0001241383288288489,
                        "insult": 0.0001773948170011863,
                        "identity_attack": 0.00014430265582632273
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/306230059",
                    "id": 306230059,
                    "created_at": "2017-06-05T16:09:51Z",
                    "updated_at": "2017-06-05T16:09:51Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I have decided to defer to @Lukasa as to what to do here. Either:\r\n\r\n1. Make it lazily computable. \r\n2. Remove it completely (no one's likely using it yet, so no harm done), replace with documentation. \r\n\r\nIf needed, I'll make the decision. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/306230059/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006098586600273848,
                        "severe_toxicity": 0.00012481107842177153,
                        "obscene": 0.0001924982207128778,
                        "threat": 0.0001263971789740026,
                        "insult": 0.00017748754180502146,
                        "identity_attack": 0.0001440267515135929
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/306232153",
                    "id": 306232153,
                    "created_at": "2017-06-05T16:17:07Z",
                    "updated_at": "2017-06-05T16:17:07Z",
                    "author_association": "MEMBER",
                    "body": "I suspect my inclination is to replace it completely. More generally we can reconsider how we handle redirects for 3.0. For example, `resolve_redirects` could be turned into an iterator of `Request` objects and the `Session` can handle sending those requests.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/306232153/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005947774625383317,
                        "severe_toxicity": 0.0001271649671252817,
                        "obscene": 0.00017970026237890124,
                        "threat": 0.00013919339107815176,
                        "insult": 0.00017748652317095548,
                        "identity_attack": 0.00014458941586781293
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/306232432",
                    "id": 306232432,
                    "created_at": "2017-06-05T16:18:17Z",
                    "updated_at": "2017-06-05T16:18:17Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "That sounds nice! I'm a big fan of the SessionRedirectMixin, but it could use some love. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/306232432/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005634519038721919,
                        "severe_toxicity": 0.0001300831645494327,
                        "obscene": 0.0001822117337724194,
                        "threat": 0.00013484430382959545,
                        "insult": 0.00017439876683056355,
                        "identity_attack": 0.00014342319627758116
                    }
                }
            ]
        },
        "229": {
            "html_url": "https://github.com/psf/requests/issues/3929",
            "id": 215269887,
            "number": 3929,
            "title": "Don't override `Authorization` header when contents are bearer token (or any other token)",
            "created_at": "2017-03-19T15:03:38Z",
            "updated_at": "2024-02-01T00:57:03Z",
            "closed_at": null,
            "body": "I found out that the requests lib is overriding the authorization header when a netrc file is in place, which is awesome. But in some cases you won't want this at all, and is a design flaw imo.\r\n\r\nFor example you use a bearer token, it gets replaced by the user/password from netrc.\r\n\r\nAlso see the issue here: https://github.com/python-social-auth/social-core/issues/43",
            "author_association": "NONE",
            "comments": 20,
            "state": "open",
            "user": {
                "login": "tomvlk",
                "id": 3877688,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/3929/reactions",
                "total_count": 7,
                "+1": 7,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287623676",
                    "id": 287623676,
                    "created_at": "2017-03-19T15:20:30Z",
                    "updated_at": "2017-03-19T15:20:30Z",
                    "author_association": "MEMBER",
                    "body": "This behaviour can be overridden by [`trust_env`](http://docs.python-requests.org/en/master/api/#requests.Session.trust_env), which allows you to instruct Requests to ignore the `.netrc` file. Is that sufficient for your purposes?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287623676/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006596962921321392,
                        "severe_toxicity": 0.00011825509864138439,
                        "obscene": 0.00017676099378149956,
                        "threat": 0.00012640621571335942,
                        "insult": 0.00017521900008432567,
                        "identity_attack": 0.00013854111602995545
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287624224",
                    "id": 287624224,
                    "created_at": "2017-03-19T15:28:26Z",
                    "updated_at": "2017-03-19T15:28:26Z",
                    "author_association": "NONE",
                    "body": "Well, if you look at the issue of the social auth library, you may see that it's really nice to override the user/pass.\r\nShort explanation about my situation related to social library:\r\nI'm using a webservice that requires you to use the username/password HTTP authentication, for this I require  the use of `.netrc` which is perfect. But on the same domain/path there is a oAuth2 endpoint that uses the `Authorization` header with the oAuth tokens.\r\n\r\nIf the `.netrc` feature/standard is only supporting username/password, why not replacing header when not containing a bearer or any other token. This could be done with checking the contents if the header is manually provided.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287624224/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tomvlk",
                        "id": 3877688,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006339390529319644,
                        "severe_toxicity": 0.00011839297076221555,
                        "obscene": 0.00017668632790446281,
                        "threat": 0.00012538593728095293,
                        "insult": 0.00017305006622336805,
                        "identity_attack": 0.00013874999422114342
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287624568",
                    "id": 287624568,
                    "created_at": "2017-03-19T15:33:26Z",
                    "updated_at": "2017-03-19T15:33:26Z",
                    "author_association": "MEMBER",
                    "body": "So, I am *open* to that, but nervous about it. There are failure modes at either side, and trying to be \"clever\" may cause us to just be difficult to understand. The virtue of the model we have today is that it is very *simple* and *consistent*. So my question stands: do the functions currently available suffice for your use case?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287624568/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006960969767533243,
                        "severe_toxicity": 0.00011710512626450509,
                        "obscene": 0.00017355571617372334,
                        "threat": 0.00012772470654454082,
                        "insult": 0.00017851401935331523,
                        "identity_attack": 0.00014298596943262964
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287625138",
                    "id": 287625138,
                    "created_at": "2017-03-19T15:41:40Z",
                    "updated_at": "2017-03-19T15:41:40Z",
                    "author_association": "NONE",
                    "body": "Well I agree on the fact that it's not really nice to change such behavior right now as it's always breaking something. And indeed the usage of the trust_env is a good option, but in this case the author of the library should give us an option to enable/disable it as a backend developer. Also the trust_env will disable more environmental settings or behavior and not only the netrc function, like proxy settings if I understood right.\r\n\r\nAnother option would be turning it on/off per request that overrides the session trust_env, or have another way to not override one specific header.\r\n\r\nAnyway, the module is already trying to be \"clever\" by replacing the whole header :smiley: . Which is great when you have full control over the `Session`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287625138/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tomvlk",
                        "id": 3877688,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005986339529044926,
                        "severe_toxicity": 0.00012459655408747494,
                        "obscene": 0.00018520720186643302,
                        "threat": 0.00012897145643364638,
                        "insult": 0.00017553824000060558,
                        "identity_attack": 0.00014340241614263505
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287625872",
                    "id": 287625872,
                    "created_at": "2017-03-19T15:52:40Z",
                    "updated_at": "2017-03-19T15:52:40Z",
                    "author_association": "MEMBER",
                    "body": "So it is quite possible that the library wrapping requests should be setting `trust_env` to `False` if it is handling headers itself. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287625872/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006135382573120296,
                        "severe_toxicity": 0.00012229220010340214,
                        "obscene": 0.00017959080287255347,
                        "threat": 0.00012852862710133195,
                        "insult": 0.00017574691446498036,
                        "identity_attack": 0.00014077861851546913
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287625970",
                    "id": 287625970,
                    "created_at": "2017-03-19T15:54:03Z",
                    "updated_at": "2017-03-19T15:54:03Z",
                    "author_association": "NONE",
                    "body": "Yep, and that should be the case. But it remains that if you have mixed requests, like I have, it's kinda hard to manage. You need to have two sessions.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287625970/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tomvlk",
                        "id": 3877688,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006278881337493658,
                        "severe_toxicity": 0.00012348921154625714,
                        "obscene": 0.00019293150398880243,
                        "threat": 0.00012392176722642034,
                        "insult": 0.00017660362937022,
                        "identity_attack": 0.0001362827606499195
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287721484",
                    "id": 287721484,
                    "created_at": "2017-03-20T10:24:35Z",
                    "updated_at": "2017-03-20T10:24:35Z",
                    "author_association": "MEMBER",
                    "body": "Well, you don't really. You can just flip the setting around as-and-when you need it.\r\n\r\nHowever, here's a framework I'd consider for handling auth in the 3.0 branch. I'd welcome a PR to make this the case.\r\n\r\n1. If the user sets an Authorization header themselves, either via the request or on the Session, we don't bother to look at the netrc file.\r\n2. If they didn't, we look at the netrc file for basic auth.\r\n3. If we get redirected, we fall back to only looking at the netrc file (which we already currently do).\r\n\r\nDoes that sound like a reasonable approach to your case?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287721484/reactions",
                        "total_count": 6,
                        "+1": 6,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006028474890626967,
                        "severe_toxicity": 0.0001237376854987815,
                        "obscene": 0.0001831813424360007,
                        "threat": 0.00012897096166852862,
                        "insult": 0.0001736474223434925,
                        "identity_attack": 0.00014069299504626542
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287728782",
                    "id": 287728782,
                    "created_at": "2017-03-20T10:59:55Z",
                    "updated_at": "2017-03-20T10:59:55Z",
                    "author_association": "NONE",
                    "body": "That sounds like a pretty clear way to solve this case. Only downside is that it can cause breaking code. But it's better to not force override when user manually given the details in my opinion.\r\n\r\nI'm not sure if I'm capable of doing the PR myself due to time limits.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287728782/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tomvlk",
                        "id": 3877688,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005741838831454515,
                        "severe_toxicity": 0.000126333674415946,
                        "obscene": 0.0001865378289949149,
                        "threat": 0.00013119433424435556,
                        "insult": 0.00017537345411255956,
                        "identity_attack": 0.00014066160656511784
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/291769907",
                    "id": 291769907,
                    "created_at": "2017-04-05T06:47:32Z",
                    "updated_at": "2017-04-05T06:51:51Z",
                    "author_association": "NONE",
                    "body": "[I encountered this problem](https://github.com/koalalorenzo/python-digitalocean/issues/130#issuecomment-291766204) when trying to figure out why the [python-digitalocean](https://github.com/koalalorenzo/python-digitalocean) module, which uses Requests, was failing due to an unexpected authentication error.\r\n\r\nThe root cause turned out to be this `default` directive in my `$HOME/.netrc`:\r\n\r\n`default login anonymous password anonymous@`\r\n\r\nwhich I used, many years ago, to automate my anonymous FTP logins.\r\n\r\nI'm surprised that this directive in my `.netrc` would cause Requests to automatically override the authentication information that is being specified explicitly by `python-digitalocean`, especially since the directive is merely setting _default_ login information that is used when accessing a host that lacks an explicit `machine` entry in `.netrc`.\r\n\r\nSo I like @Lukasa's idea above: when the caller specifies an Authorization header, I think the `.netrc` directives (whether `default` or `machine`) should be ignored. Thanks!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/291769907/reactions",
                        "total_count": 6,
                        "+1": 6,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fjarlq",
                        "id": 441483,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007247919565998018,
                        "severe_toxicity": 0.00011677806469378993,
                        "obscene": 0.0001900429488159716,
                        "threat": 0.00011996647663181648,
                        "insult": 0.00017464105621911585,
                        "identity_attack": 0.00013994425535202026
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/386114903",
                    "id": 386114903,
                    "created_at": "2018-05-02T20:44:36Z",
                    "updated_at": "2018-05-02T20:45:51Z",
                    "author_association": "NONE",
                    "body": "Got bitten by this one as well :(\r\nTo answer @Lukasa question:\r\n> do the functions currently available suffice for your use case?\r\n\r\nI would say no, because `trust_env` is not only `netrc`, it's also `REQUESTS_CA_BUNDLE` for instance. Right now it's a little too much \"take it or leave it\" for the entire set of possible env stuff I could want to use :(",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/386114903/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lmazuel",
                        "id": 1050156,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006551276310347021,
                        "severe_toxicity": 0.00011804926180047914,
                        "obscene": 0.00018723956600297242,
                        "threat": 0.00012003891606582329,
                        "insult": 0.0001744643086567521,
                        "identity_attack": 0.00013769454380962998
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/415436114",
                    "id": 415436114,
                    "created_at": "2018-08-23T14:27:17Z",
                    "updated_at": "2018-08-23T14:27:17Z",
                    "author_association": "NONE",
                    "body": "It would be nice to allow to disable reading from `.netrc` explicitly. Currently, it looks `requests` also handles an existing `.netrc` even if for `requests.get` which is expected to be a anonymous request in most cases.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/415436114/reactions",
                        "total_count": 3,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 1,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tkdchen",
                        "id": 919706,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006172759458422661,
                        "severe_toxicity": 0.00012103774497518316,
                        "obscene": 0.00018284385441802442,
                        "threat": 0.0001284287718590349,
                        "insult": 0.00017322027997579426,
                        "identity_attack": 0.00013617794320452958
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/415455407",
                    "id": 415455407,
                    "created_at": "2018-08-23T15:15:51Z",
                    "updated_at": "2018-08-23T15:15:51Z",
                    "author_association": "NONE",
                    "body": "How about provide a auth class something like `NetrcAuth` instead?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/415455407/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "tkdchen",
                        "id": 919706,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001370484009385109,
                        "severe_toxicity": 9.429018246009946e-05,
                        "obscene": 0.0001889824343379587,
                        "threat": 9.867057087831199e-05,
                        "insult": 0.00021515034313779324,
                        "identity_attack": 0.0001446562964702025
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/435149685",
                    "id": 435149685,
                    "created_at": "2018-11-01T19:01:15Z",
                    "updated_at": "2018-11-01T19:01:15Z",
                    "author_association": "NONE",
                    "body": "Coming here after spending several hours debugging an issue which ended up being the presence of a ~/.netrc file. This behavior violates POLA and should be explicitly enabled rather than enabled by default. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/435149685/reactions",
                        "total_count": 10,
                        "+1": 10,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "danrue",
                        "id": 409011,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007214146316982806,
                        "severe_toxicity": 0.0001119088992709294,
                        "obscene": 0.00017825225950218737,
                        "threat": 0.00011498510866658762,
                        "insult": 0.0001770685048541054,
                        "identity_attack": 0.00013645479339174926
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/485777012",
                    "id": 485777012,
                    "created_at": "2019-04-23T12:13:54Z",
                    "updated_at": "2019-04-23T12:13:54Z",
                    "author_association": "NONE",
                    "body": "I lost half a day because I could not log to production any more, and I couldn't find the issue in our infrastructure. Found out it was because I stored my password in `~/.netrc` and requests read it and added an `Authorization` header when I was using a `Bearer` instead, and got rejected from the server.\r\n\r\nIt should only happen with an explicit `BasicAuth()`.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/485777012/reactions",
                        "total_count": 6,
                        "+1": 6,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "bors-ltd",
                        "id": 1889844,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009123111958615482,
                        "severe_toxicity": 0.00010728223423939198,
                        "obscene": 0.0001965089759323746,
                        "threat": 0.000113494141260162,
                        "insult": 0.00018066786287818104,
                        "identity_attack": 0.00013655384827870876
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/636992236",
                    "id": 636992236,
                    "created_at": "2020-06-01T17:09:59Z",
                    "updated_at": "2020-06-01T17:09:59Z",
                    "author_association": "NONE",
                    "body": "This issue still exists.\r\nIdeally, requests would only use the credentials in the netrc when there is no authorization header explicitly supplied.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/636992236/reactions",
                        "total_count": 6,
                        "+1": 6,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lord-of-the-Galaxy",
                        "id": 25320402,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006482540047727525,
                        "severe_toxicity": 0.000120253607747145,
                        "obscene": 0.00017718554590828717,
                        "threat": 0.00012812481145374477,
                        "insult": 0.00017503983690403402,
                        "identity_attack": 0.00014235216076485813
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1069771857",
                    "id": 1069771857,
                    "created_at": "2022-03-17T00:24:26Z",
                    "updated_at": "2022-03-17T00:24:26Z",
                    "author_association": "NONE",
                    "body": "I think this behavior should be changed. I installed an FTP package that silently generated a sample ~/.netrc. This prevented me from using gcloud (the GCP CLI) because gcloud uses Requests and Requests prefers ~/.netrc over gcloud's OAuth headers. I agree fullly with [Lord-of-the-Galaxy](https://github.com/Lord-of-the-Galaxy)'s suggestion.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1069771857/reactions",
                        "total_count": 5,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "klange-git",
                        "id": 947472,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005951579660177231,
                        "severe_toxicity": 0.00012480869190767407,
                        "obscene": 0.0001833962887758389,
                        "threat": 0.000128928164485842,
                        "insult": 0.00017387408297508955,
                        "identity_attack": 0.0001421596680302173
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1248280214",
                    "id": 1248280214,
                    "created_at": "2022-09-15T15:42:11Z",
                    "updated_at": "2022-09-15T15:42:11Z",
                    "author_association": "NONE",
                    "body": "I also just came across this behavior (based on a user report and it took us about a month to figure out that the presence of a `.netrc` was the \"issue\" in the user's environment)\r\nIt's quite incredible that python-requests will overwrite a header *explicitly set by the programmer* - I mean, I'm not writing `headers={'Authorization': 'xyz'}` for fun in my code!",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1248280214/reactions",
                        "total_count": 7,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 1,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 1
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jacksgt",
                        "id": 11589682,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006469711079262197,
                        "severe_toxicity": 0.00011851202725665644,
                        "obscene": 0.00018812395865097642,
                        "threat": 0.00012001556024188176,
                        "insult": 0.0001739244908094406,
                        "identity_attack": 0.00013579190999735147
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1374834374",
                    "id": 1374834374,
                    "created_at": "2023-01-08T13:18:44Z",
                    "updated_at": "2023-01-08T13:18:44Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I also spent a while debugging this exact problem, and I'll add my voice: requests should not override an explicitly set \"Authentication\" header.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1374834374/reactions",
                        "total_count": 5,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nedbat",
                        "id": 23789,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006345537840388715,
                        "severe_toxicity": 0.00012039954890497029,
                        "obscene": 0.00018288377032149583,
                        "threat": 0.00012261072697583586,
                        "insult": 0.00017649152141530067,
                        "identity_attack": 0.0001377087173750624
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1774193661",
                    "id": 1774193661,
                    "created_at": "2023-10-22T20:40:42Z",
                    "updated_at": "2023-10-23T08:54:48Z",
                    "author_association": "NONE",
                    "body": "I tried in https://github.com/psf/requests/pull/6555, guys \ud83d\ude05 \r\n\r\nI essentially just implemented @Lukasa's [suggestion](https://github.com/psf/requests/issues/3929#issuecomment-287721484), but I got slapped first with \"It's documented!\", followed by \"Why aren't you writing an auth adapter instead of adding/modifying the header?\", and finally \"It's not backwards compatible so fuck off!\". The standoffish attitude seems to be typical behavior for this maintainer so at least it's not personal.\r\n\r\nI would've been happy to discuss alternatives such as displaying a warning to the user when the Authorization header has been set and has been overridden by `.netrc` or introducing a new parameter to control `.netrc` or waiting for a major release for the changes to adopted. \r\n\r\nIt's disappointing to say the least.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1774193661/reactions",
                        "total_count": 2,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 2,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hellosputnik",
                        "id": 4950179,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.6188266277313232,
                        "severe_toxicity": 0.00603727251291275,
                        "obscene": 0.6736422777175903,
                        "threat": 0.0011336100287735462,
                        "insult": 0.06287452578544617,
                        "identity_attack": 0.0018971620593219995
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1919915906",
                    "id": 1919915906,
                    "created_at": "2024-01-31T20:37:29Z",
                    "updated_at": "2024-01-31T20:41:06Z",
                    "author_association": "NONE",
                    "body": "I also struggled with this problem for about a day and had to dig deep into the http library to figure out that my .netrc file (which was valid but for another host was to blame). No warnings, nothing.\r\n\r\nThe behavior doesn't makes sens, and is also inconsistent.\r\n\r\n- If you set basic permissions in the request using the \"auth\" parameters, this is used, and .netrc is ignored\r\n- If you explicitly set \"Authorization: Bearer <token>\", in the header, then this is ignored, .netrc us used\r\n\r\nI think its fair to call this a bug, that has cos a lot of working hours for many people. In my case i need to keep the .netrc file for another API\r\n\r\nA workaround for the bug is something like this\r\n\r\n```\r\ns=requests.Session()\r\ns.trust_env=False\r\nresponse = s.get(CUSTOMER_LOCATIONS_ENDPOINT, headers = hdr, data=data2, verify=None) \r\n```\r\n\r\n\r\nSo 3 lines of code, instead of one for the same operation.  \r\n\r\nTrue, the trus_env variable is documented, but why not set it to false as default, or at very least write a warning f headers are ignored.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1919915906/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "perthi",
                        "id": 19249,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000885847897734493,
                        "severe_toxicity": 0.00011196462583029643,
                        "obscene": 0.0002005829883273691,
                        "threat": 0.00011656300921458751,
                        "insult": 0.00018319147056899965,
                        "identity_attack": 0.0001401670160703361
                    }
                }
            ]
        },
        "230": {
            "html_url": "https://github.com/psf/requests/issues/3829",
            "id": 202820492,
            "number": 3829,
            "title": "Session.verify=False ignored when REQUESTS_CA_BUNDLE environment variable is set",
            "created_at": "2017-01-24T13:40:18Z",
            "updated_at": "2024-02-12T14:04:41Z",
            "closed_at": null,
            "body": "One would expect that when the caller explicitly asks to make unverified requests, then the `REQUESTS_CA_BUNDLE` environment variable doesn't affect it. The reality is different, however.\r\n\r\n```python\r\nimport os\r\nimport requests\r\n\r\nos.environ['REQUESTS_CA_BUNDLE'] = 'asd.pem'  # Must be an existing file\r\n\r\nr = requests.get('https://self-signed.badssl.com/', verify=False)\r\nprint(r)\r\n# Prints: <Response [200]>\r\n\r\nsession = requests.Session()\r\nsession.verify = False\r\n\r\nr = session.get('https://self-signed.badssl.com/')\r\nprint(r)\r\n# Fails: requests.exceptions.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:749)\r\n```\r\n",
            "author_association": "NONE",
            "comments": 14,
            "state": "open",
            "user": {
                "login": "intgr",
                "id": 137616,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/3829/reactions",
                "total_count": 26,
                "+1": 26,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/274807015",
                    "id": 274807015,
                    "created_at": "2017-01-24T13:48:58Z",
                    "updated_at": "2017-01-24T13:48:58Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for raising this issue! This is a related issue to #2018: specifically, we prefer the environment to the `Session` value assuming the environment specifies an auth value. The fix is easy, but we've unfortunately ossified around this value, so we can't fix it until v3.\r\n\r\nGiven that we fail-closed here (that is, it's not possible to use this arrangement to force us not to verify when we should), this isn't a security vulnerability, so there is no way we can justify bringing it forward to before v3.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/274807015/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007294702809303999,
                        "severe_toxicity": 0.00011179861758137122,
                        "obscene": 0.00017636131087783724,
                        "threat": 0.00011596766125876456,
                        "insult": 0.00017171147919725627,
                        "identity_attack": 0.000138821589644067
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/274818005",
                    "id": 274818005,
                    "created_at": "2017-01-24T14:30:36Z",
                    "updated_at": "2017-01-24T14:30:36Z",
                    "author_association": "NONE",
                    "body": "OK, thanks for the quick response. Is 3.0.0 coming some time soon or is it just a plan for now?\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/274818005/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "intgr",
                        "id": 137616,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005622014286927879,
                        "severe_toxicity": 0.0001276097900699824,
                        "obscene": 0.00018376564548816532,
                        "threat": 0.00012825144222006202,
                        "insult": 0.00017726767691783607,
                        "identity_attack": 0.00014054402709007263
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/274820961",
                    "id": 274820961,
                    "created_at": "2017-01-24T14:39:29Z",
                    "updated_at": "2017-01-24T14:39:29Z",
                    "author_association": "MEMBER",
                    "body": "\"soon\" is a bit strong. However, there's a branch that code can be committed to, and there is active work being done on urllib3 v2, which once done will be the catalyst for us to actually ship requests v3.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/274820961/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005914163193665445,
                        "severe_toxicity": 0.00012893197708763182,
                        "obscene": 0.00019214670464862138,
                        "threat": 0.00013280300481710583,
                        "insult": 0.00017674210539553314,
                        "identity_attack": 0.0001453835138818249
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/275603654",
                    "id": 275603654,
                    "created_at": "2017-01-27T07:16:47Z",
                    "updated_at": "2022-06-02T07:52:51Z",
                    "author_association": "NONE",
                    "body": "For whoever else is struggling with this problem, I created a wrapper class as workaround:\r\n\r\n```python\r\nclass WrappedSession(requests.Session):\r\n    \"\"\"A wrapper for requests.Session to override 'verify' property, ignoring REQUESTS_CA_BUNDLE environment variable.\r\n\r\n    This is a workaround for https://github.com/kennethreitz/requests/issues/3829 (will be fixed in requests 3.0.0)\r\n    \"\"\"\r\n    def merge_environment_settings(self, url, proxies, stream, verify, *args, **kwargs):\r\n        if self.verify is False:\r\n            verify = False\r\n\r\n        return super(WrappedSession, self).merge_environment_settings(url, proxies, stream, verify, *args, **kwargs)\r\n```\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/275603654/reactions",
                        "total_count": 20,
                        "+1": 11,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 9,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "intgr",
                        "id": 137616,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010919095948338509,
                        "severe_toxicity": 0.0001017015747493133,
                        "obscene": 0.00019205932039767504,
                        "threat": 0.00011355639435350895,
                        "insult": 0.0001865565136540681,
                        "identity_attack": 0.0001401038171024993
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/301684472",
                    "id": 301684472,
                    "created_at": "2017-05-16T06:05:40Z",
                    "updated_at": "2017-05-16T06:05:40Z",
                    "author_association": "NONE",
                    "body": "This issue hit me today. I had to debug a good amount of code to track it down.\r\n\r\nWhere are we now relative to when it was identified back in January?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/301684472/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "megahall",
                        "id": 1231855,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006312298937700689,
                        "severe_toxicity": 0.00011974715744145215,
                        "obscene": 0.00018469120550435036,
                        "threat": 0.00011755667946999893,
                        "insult": 0.0001754719705786556,
                        "identity_attack": 0.0001384552742820233
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/301685677",
                    "id": 301685677,
                    "created_at": "2017-05-16T06:14:13Z",
                    "updated_at": "2017-05-16T06:14:13Z",
                    "author_association": "MEMBER",
                    "body": "No change.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/301685677/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007784917252138257,
                        "severe_toxicity": 0.00011268256639596075,
                        "obscene": 0.0001899963681353256,
                        "threat": 0.00010827895312104374,
                        "insult": 0.00018674586317501962,
                        "identity_attack": 0.00013868280802853405
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/372070988",
                    "id": 372070988,
                    "created_at": "2018-03-10T22:06:53Z",
                    "updated_at": "2018-03-10T22:06:53Z",
                    "author_association": "NONE",
                    "body": "as my test in win10 python  3.6.4,  requests (2.18.3) (not until v3 ??) urllib3 (1.22) the \r\n```\r\nsession = requests.Session()\r\nsession.verify = False\r\n```\r\nworked, and will prompt a warning message:\r\n```\r\n\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\urllib3\\connectionpool.py:858: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\r\n  InsecureRequestWarning)\r\n```\r\nto disable the warning message, just:\r\n```\r\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\r\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/372070988/reactions",
                        "total_count": 2,
                        "+1": 0,
                        "-1": 2,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Justsoos",
                        "id": 3480043,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007283522863872349,
                        "severe_toxicity": 0.00011392385204089805,
                        "obscene": 0.00019340633298270404,
                        "threat": 0.00011586596519919112,
                        "insult": 0.00017303785716649145,
                        "identity_attack": 0.00013597693759948015
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/403205561",
                    "id": 403205561,
                    "created_at": "2018-07-07T10:27:05Z",
                    "updated_at": "2018-07-07T10:27:05Z",
                    "author_association": "NONE",
                    "body": "The 'fail close, so no security issue' argument is only correct if the verify is set to `False`.\r\n\r\nIf the verify is set to a subset of the global CAs for access to some systems (as a poor mans form of certificate pinning) this fails open. So when used in a library that allows specifiying certificate authorities to allow for e.g. authentication backends that use sessions to allow easier cookie flows, the globally set environments (e.g. to allow access to internet sites in other parts of the program) invalidates this unless the library takes extra precautions.\r\n\r\nFor example:\r\nI allow the usual CAs via the curl/mozilla ca bundle for normal internet sites.\r\nAuthentication is done via OAuth2 against Azure AD and that should be limited to only allow the Baltimore Cybertrust CA used by Azure. \r\nNow i cannot use session.verify for this and have to propagate the flag to all individual requests calls (or use a wrapper around Session as seen above).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/403205561/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "schlenk",
                        "id": 979026,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007606289582327008,
                        "severe_toxicity": 0.00011423104297136888,
                        "obscene": 0.00018681140500120819,
                        "threat": 0.00012367965246085078,
                        "insult": 0.00017554877558723092,
                        "identity_attack": 0.0001431204582331702
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/639455959",
                    "id": 639455959,
                    "created_at": "2020-06-05T12:38:42Z",
                    "updated_at": "2020-06-05T12:39:03Z",
                    "author_association": "NONE",
                    "body": "It would be nice if requests could at least throw a warning about this. I just spend 6 hours trying to figure out what is going on, then found out that `REQUESTS_CA_BUNDLE` is set by the daemon executing my test script and to then only find this issue. :disappointed: ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/639455959/reactions",
                        "total_count": 24,
                        "+1": 24,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mback2k",
                        "id": 231943,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005731242126785219,
                        "severe_toxicity": 0.00012914558465126902,
                        "obscene": 0.0001816342701204121,
                        "threat": 0.0001344288612017408,
                        "insult": 0.00017588789341971278,
                        "identity_attack": 0.00014459009980782866
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/782759523",
                    "id": 782759523,
                    "created_at": "2021-02-20T22:32:53Z",
                    "updated_at": "2021-02-20T22:32:53Z",
                    "author_association": "NONE",
                    "body": "It's funny that this \"fix\" is delayed to v3 because it's considered \"breaking change\", yet a huge number of people keep burning hours pinning down this behavior.\nI'd say that calls it a bug, if no one expects it, and bug fixing would not be breaking changes...",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/782759523/reactions",
                        "total_count": 9,
                        "+1": 9,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fopina",
                        "id": 636320,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007879737531766295,
                        "severe_toxicity": 0.00010944939276669174,
                        "obscene": 0.00018373112834524363,
                        "threat": 0.0001155453355750069,
                        "insult": 0.00017405521066393703,
                        "identity_attack": 0.00013608123117592186
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/791308316",
                    "id": 791308316,
                    "created_at": "2021-03-05T09:53:16Z",
                    "updated_at": "2021-03-05T09:53:31Z",
                    "author_association": "NONE",
                    "body": "We spent 3 hours on this, third party library was set env `REQUESTS_CA_BUNDLE `... It really would be nice to have a warning.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/791308316/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hardenchant",
                        "id": 17965301,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006156376330181956,
                        "severe_toxicity": 0.00012271587911527604,
                        "obscene": 0.00018110682140104473,
                        "threat": 0.00012608095130417496,
                        "insult": 0.00017383595695719123,
                        "identity_attack": 0.00013824117195326835
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/841089770",
                    "id": 841089770,
                    "created_at": "2021-05-14T08:12:10Z",
                    "updated_at": "2021-05-14T08:12:10Z",
                    "author_association": "NONE",
                    "body": "Since this is fixed in requests 3.* version, I added a mechanism to warn the user via #5816. Please provide feedback on the PR.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/841089770/reactions",
                        "total_count": 3,
                        "+1": 0,
                        "-1": 2,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 1,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Akasurde",
                        "id": 633765,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005270155379548669,
                        "severe_toxicity": 0.00013293541269376874,
                        "obscene": 0.0001941802038345486,
                        "threat": 0.0001294429530389607,
                        "insult": 0.00017760384071152657,
                        "identity_attack": 0.00014128857583273202
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1549723111",
                    "id": 1549723111,
                    "created_at": "2023-05-16T13:55:23Z",
                    "updated_at": "2023-05-16T13:55:23Z",
                    "author_association": "NONE",
                    "body": "Hello, Is this documented ? [Official documentation](https://requests.readthedocs.io/en/latest/api/#requests.Session.verify) did not mention this behaviour. I lost 2 hours..\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1549723111/reactions",
                        "total_count": 5,
                        "+1": 5,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "a-belhadj",
                        "id": 82872898,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006893851677887142,
                        "severe_toxicity": 0.00011395612091291696,
                        "obscene": 0.00018095888663083315,
                        "threat": 0.00011793313751695678,
                        "insult": 0.00017584899615030736,
                        "identity_attack": 0.00013368821237236261
                    }
                }
            ]
        },
        "231": {
            "html_url": "https://github.com/psf/requests/issues/3759",
            "id": 194476114,
            "number": 3759,
            "title": "cookies.py why replace escaped quote with nothing?",
            "created_at": "2016-12-08T23:47:56Z",
            "updated_at": "2023-11-27T13:30:27Z",
            "closed_at": null,
            "body": "https://github.com/kennethreitz/requests/blob/master/requests/cookies.py#L346\r\n\r\nWhy do this? An escaped quote can be sent in the case of sending json in the cookie and this code mangles that json. I'm raising this because the http library seems to think that formatting the json this way on the server is the right way to do it. See http/cookies.py function _quote line 225 in my 3.4 version.",
            "author_association": "NONE",
            "comments": 21,
            "state": "open",
            "user": {
                "login": "saft",
                "id": 664265,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/3759/reactions",
                "total_count": 3,
                "+1": 3,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/265907018",
                    "id": 265907018,
                    "created_at": "2016-12-09T01:25:23Z",
                    "updated_at": "2016-12-09T01:25:23Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Can you provide an example of a server sending JSON in the cookie header? The RFCs ([6265](https://tools.ietf.org/html/rfc6265)) for Cookies are explicit and JSON really doesn't fit into the cookie header appropriately.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/265907018/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006203906377777457,
                        "severe_toxicity": 0.00011962092685280368,
                        "obscene": 0.0001800175232347101,
                        "threat": 0.00012033298116875812,
                        "insult": 0.00017468103033024818,
                        "identity_attack": 0.0001376863947371021
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/265907560",
                    "id": 265907560,
                    "created_at": "2016-12-09T01:28:33Z",
                    "updated_at": "2016-12-09T01:28:33Z",
                    "author_association": "NONE",
                    "body": "The following library does it quite explicitly. I'm not sure how stable it is but it is referenced in the aiohttp documentation.\r\nhttps://github.com/aio-libs/aiohttp-session/blob/master/aiohttp_session/__init__.py#L219",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/265907560/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "saft",
                        "id": 664265,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000670639390591532,
                        "severe_toxicity": 0.00011836722842417657,
                        "obscene": 0.00018749968148767948,
                        "threat": 0.00012297944340389222,
                        "insult": 0.00017550024494994432,
                        "identity_attack": 0.00013658159878104925
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/265910150",
                    "id": 265910150,
                    "created_at": "2016-12-09T01:45:33Z",
                    "updated_at": "2016-12-09T01:45:33Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> I'm raising this because the http library seems to think that formatting the json this way on the server is the right way to do it.\r\n\r\nSo you seemed to mention that there was a server sending JSON in the set-cookie header. Now you're pointing at another library? I don't see how that library is storing JSON in a cookie at all. Do you mean that it allows for it?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/265910150/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006877941195853055,
                        "severe_toxicity": 0.00011337213072692975,
                        "obscene": 0.00017544486036058515,
                        "threat": 0.00012141411571064964,
                        "insult": 0.00017546929302625358,
                        "identity_attack": 0.00013796173152513802
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/265912614",
                    "id": 265912614,
                    "created_at": "2016-12-09T02:00:44Z",
                    "updated_at": "2016-12-09T02:00:44Z",
                    "author_association": "NONE",
                    "body": "Maybe this line helps to illustrate where aiohttp_session puts json into the cookie:\r\nhttps://github.com/aio-libs/aiohttp-session/blob/master/aiohttp_session/__init__.py#L245\r\n\r\naiohttp_session uses aiohttp which uses http/cookies.py. The server is my own.\r\n\r\nTo look at it from the other perspective, why remove all escaped quotes from cookie data - 6265 doesn't disallow that?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/265912614/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "saft",
                        "id": 664265,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010367793729528785,
                        "severe_toxicity": 0.00010209315951215103,
                        "obscene": 0.00020351428247522563,
                        "threat": 0.00010963292152155191,
                        "insult": 0.00018097493739333004,
                        "identity_attack": 0.0001375259307678789
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/265962350",
                    "id": 265962350,
                    "created_at": "2016-12-09T08:42:31Z",
                    "updated_at": "2016-12-09T08:42:31Z",
                    "author_association": "MEMBER",
                    "body": "As always, the easiest thing to do when you're trying to work out the answer to a problem like this is to just look at the Git logs. If you do, they direct you to #1440.\r\n\r\nThe TL;DR is that unescaping all quotes was probably unnecessary. The goal of the original patch was simply to remove enclosing quote marks, but we took a (probably a bit too aggressive) shortcut. I'm open to a patch that changes that behaviour.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/265962350/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006579621112905443,
                        "severe_toxicity": 0.00011531683412613347,
                        "obscene": 0.0001800106547307223,
                        "threat": 0.00012071477249264717,
                        "insult": 0.0001740515581332147,
                        "identity_attack": 0.0001364681957056746
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266003815",
                    "id": 266003815,
                    "created_at": "2016-12-09T12:35:39Z",
                    "updated_at": "2016-12-09T12:35:39Z",
                    "author_association": "NONE",
                    "body": "From #1440 I can't figure out what the *end* intent of it was. Perhaps to be out-of-the-box compatible with Django? Certainly now set_cookie actually keeps the enclosing quote marks.\r\n\r\nOn further analysis, RFC6265 does seem to say that backslash and double quotes are invalid characters. However what set_cookie does is to just remove all occurrences of \\\\\".\r\n\r\nI would love to try to improve that bit of code but I'm not sure what I should be trying to improve it towards. ",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266003815/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "saft",
                        "id": 664265,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006574835279025137,
                        "severe_toxicity": 0.00011643247853498906,
                        "obscene": 0.0001838241732912138,
                        "threat": 0.0001196815210278146,
                        "insult": 0.00017450589803047478,
                        "identity_attack": 0.00013460201444104314
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266011246",
                    "id": 266011246,
                    "created_at": "2016-12-09T13:15:43Z",
                    "updated_at": "2016-12-09T13:15:43Z",
                    "author_association": "MEMBER",
                    "body": "@saft The *end* intent was to unescape escaped quote marks that *surround* a cookie value. These are almost certainly in error. However, we seem to have done that by hitting the problem with a sledgehammer by just unescaping *all* quotes, which was probably unnecessary.\r\n\r\nSo the goal would be to craft a change here that uses a regular expression to only unquote quote marks at the start and end of the cookie value.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266011246/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0021526312921196222,
                        "severe_toxicity": 9.21581668080762e-05,
                        "obscene": 0.0002707206585910171,
                        "threat": 0.0001020497438730672,
                        "insult": 0.0002239194291178137,
                        "identity_attack": 0.00014568229380529374
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266014471",
                    "id": 266014471,
                    "created_at": "2016-12-09T13:32:40Z",
                    "updated_at": "2016-12-09T13:32:40Z",
                    "author_association": "NONE",
                    "body": "Are you saying the the intent was to remove parts 2 and 4 of cookie value below if they exist?\r\n```\r\n 1   2    3    4   5\r\n[\"][\\\\\"][...][\\\\\"][\"]\r\n```\r\nIf so why do you want to do that as a special case?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266014471/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "saft",
                        "id": 664265,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008332473807968199,
                        "severe_toxicity": 0.00010633472265908495,
                        "obscene": 0.0001795402931747958,
                        "threat": 0.00011566826287889853,
                        "insult": 0.00017683650366961956,
                        "identity_attack": 0.00013520893116947263
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266016575",
                    "id": 266016575,
                    "created_at": "2016-12-09T13:43:11Z",
                    "updated_at": "2016-12-09T13:43:11Z",
                    "author_association": "NONE",
                    "body": "I think the intent was to change this\r\n`[\\\"]...[\\\"]`\r\nto this\r\n`[\"]...[\"]`\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266016575/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "piotr-dobrogost",
                        "id": 92239,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008237867732532322,
                        "severe_toxicity": 0.00010922241199295968,
                        "obscene": 0.00019029734539799392,
                        "threat": 0.00011832333984784782,
                        "insult": 0.0001738207065500319,
                        "identity_attack": 0.00013202574336901307
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266016614",
                    "id": 266016614,
                    "created_at": "2016-12-09T13:43:21Z",
                    "updated_at": "2016-12-09T13:43:21Z",
                    "author_association": "MEMBER",
                    "body": "@piotr-dobrogost is correct.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266016614/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00103942200075835,
                        "severe_toxicity": 0.00010065150127047673,
                        "obscene": 0.00017751935229171067,
                        "threat": 0.00010461298370501027,
                        "insult": 0.00019554469326976687,
                        "identity_attack": 0.00014823158562649041
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266017966",
                    "id": 266017966,
                    "created_at": "2016-12-09T13:50:01Z",
                    "updated_at": "2016-12-09T13:50:01Z",
                    "author_association": "NONE",
                    "body": "OK, I think I'm out of place to continue to question (or maybe not in this forum) so please suggest we discontinue the conversation if you think so too. \r\n\r\nMy curiosity isn't quite satisfied though. The intent is not in line with RFC6265 so why is it desirable?",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266017966/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "saft",
                        "id": 664265,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006037905113771558,
                        "severe_toxicity": 0.00012455212709028274,
                        "obscene": 0.00017988095351029187,
                        "threat": 0.00013188821321818978,
                        "insult": 0.00017601338913664222,
                        "identity_attack": 0.00014203175669535995
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266021701",
                    "id": 266021701,
                    "created_at": "2016-12-09T14:07:20Z",
                    "updated_at": "2016-12-09T14:07:20Z",
                    "author_association": "MEMBER",
                    "body": "@saft I'm not sure what you mean: we're agreeing that the current behaviour is wrong. We're just trying to discuss what the fix should be.\r\n\r\nAs to \"the intent is not in line with RFC 6265\": sure it is. RFC 6265 allows surrounding DQUOTE characters. This is to allow the possibility that someone has mistakenly escaped the DQUOTE values, which is *forbidden* by RFC 6265.\r\n\r\nHowever, it does end up seeming like this might be superfluous to needs. Right now I'm not able to reproduce a situation in which that behaviour is required.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266021701/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007706779870204628,
                        "severe_toxicity": 0.00010925272363238037,
                        "obscene": 0.00018813992210198194,
                        "threat": 0.00010721084981923923,
                        "insult": 0.00017307877715211362,
                        "identity_attack": 0.000142865494126454
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266022274",
                    "id": 266022274,
                    "created_at": "2016-12-09T14:10:17Z",
                    "updated_at": "2016-12-09T14:17:30Z",
                    "author_association": "NONE",
                    "body": "What is allowed in a cookie value has been traditionally very tricky question. I think the intent was to tolerate *reasonably looking* cookies. However now that there's good answer to the question what is allowed (in the form of RFC 6265) there's no reason to tolerate such invalid cookies anymore. If so then there's no need to unescape anything as any cookie's value including backspace or double quote is invalid. The only problem is backwards compatibility which prevents library from breaking some behavior even though it might have been wrong in the first place. This could be the reason to fix this bug by bringing behavior to what was intended (to tolerate escaped double quotes when they start and end the cookie's value) and not to what is allowed by current standard (RFC 6265).\r\n\r\n> RFC 6265 allows surrounding DQUOTE characters. \r\n\r\nYou mean RFC 6265 allows the cookie's value to be surrounded I guess :)\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266022274/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "piotr-dobrogost",
                        "id": 92239,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007342117605730891,
                        "severe_toxicity": 0.00011213921243324876,
                        "obscene": 0.00018165628716815263,
                        "threat": 0.00011734612780855969,
                        "insult": 0.0001726908958517015,
                        "identity_attack": 0.00013854744611307979
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266024753",
                    "id": 266024753,
                    "created_at": "2016-12-09T14:22:08Z",
                    "updated_at": "2016-12-09T14:46:46Z",
                    "author_association": "NONE",
                    "body": "Yes, they are missing a comma (and the last comma in this line is superfluous :)).\r\n\r\nAccording to RFC 2965:\r\n```\r\ncookie-value    =  NAME \"=\" VALUE [\";\" path] [\";\" domain] [\";\" port]\r\nVALUE           =  value\r\nvalue           =  token | quoted-string\r\n```\r\nand RFC 2616 defines:\r\n```\r\nquoted-string  = ( <\"> *(qdtext | quoted-pair ) <\"> )\r\nqdtext         = <any TEXT except <\">>\r\nquoted-pair    = \"\\\" CHAR\r\n\r\ntoken          = 1*<any CHAR except CTLs or separators>\r\nseparators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\r\n               | \",\" | \";\" | \":\" | \"\\\" | <\">\r\n               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\r\n               | \"{\" | \"}\" | SP | HT\r\n```\r\nYou say that library does not allow `\\\\\"` substring. The question is if it's allowed by cited grammar rules. If it's not allowed then I think the library is right to disallow this.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266024753/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "piotr-dobrogost",
                        "id": 92239,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001101123751141131,
                        "severe_toxicity": 0.00010233459033770487,
                        "obscene": 0.00020830352150369436,
                        "threat": 0.00010583096445770934,
                        "insult": 0.00018168502720072865,
                        "identity_attack": 0.00013640706310980022
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266029039",
                    "id": 266029039,
                    "created_at": "2016-12-09T14:40:52Z",
                    "updated_at": "2016-12-09T14:40:52Z",
                    "author_association": "NONE",
                    "body": "> I think the intent was to change this\r\n[\\\"]...[\\\"]\r\n\r\nOn second thought I don't agree with this because of:\r\n`if hasattr(cookie.value, 'startswith') and cookie.value.startswith('\"') and cookie.value.endswith('\"'):`\r\n\r\n> What is allowed in a cookie value has been traditionally very tricky question.\r\n\r\n+1\r\n> However now that there's good answer to the question what is allowed (in the form of RFC 6265) there's no reason to tolerate such invalid cookies anymore.\r\n\r\nPerhaps. I think this set_cookie is arbitrary. I'm still unconvinced of any justification for any stated intent so far.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266029039/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "saft",
                        "id": 664265,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006506044301204383,
                        "severe_toxicity": 0.00011944233119720593,
                        "obscene": 0.00018959137378260493,
                        "threat": 0.00012401338608469814,
                        "insult": 0.00017251430836040527,
                        "identity_attack": 0.00013898119505029172
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266030578",
                    "id": 266030578,
                    "created_at": "2016-12-09T14:47:26Z",
                    "updated_at": "2016-12-09T14:47:26Z",
                    "author_association": "MEMBER",
                    "body": "> Perhaps. I think this set_cookie is arbitrary. I'm still unconvinced of any justification for any stated intent so far.\r\n\r\nAnd?\r\n\r\nNo-one is disagreeing with the idea that this method is not achieving what it set out to. I am explaining the train of thought that led us here. I am not asserting that it was correct or useful, only that it's the reasoning. I am explaining this because your original issue was a question: \"why do this?\". I have pointed you to the why.\r\n\r\nHowever, both myself and @piotr-dobrogost have *already said* that we are open to changes in behaviour here. I don't know who you're trying to convince: there is no-one here arguing that the status quo is good. I feel like you're arguing against a non-existent opponent.\r\n\r\nThe TL;DR is this: this method seems like it's a waste of everyone's time, and probably should be removed. However, as the Requests project has learned all too clearly, *actually removing it* is likely to be a backward incompatible change. There are some hopes that we will remove or drastically rewrite this entire module, though, so I suspect this will go away.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266030578/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000888603855855763,
                        "severe_toxicity": 0.000108054191514384,
                        "obscene": 0.00018023874145001173,
                        "threat": 0.00012058408174198121,
                        "insult": 0.00017770582053344697,
                        "identity_attack": 0.0001462895015720278
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266033307",
                    "id": 266033307,
                    "created_at": "2016-12-09T14:58:13Z",
                    "updated_at": "2016-12-09T14:59:38Z",
                    "author_association": "NONE",
                    "body": "OK, my apologies. I see that I'm coming across argumentative to you. My intent was purely to educate myself and to help if I could at all. However, I hear you and am ready to drop this. You guys have been really really helpful. \ud83d\udc4d \r\n\r\nTo be totally open and honest I don't feel like there was a coherent intent or 'why' explained. That is why I pursued it.\r\n\r\nBut, I did hear you say that you were open to changes. I doubly hear you that it will probably be a backward incompatible change for some. If we really understood the 'why' of why it was added and who would be burned we might be able to mitigate that.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266033307/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "saft",
                        "id": 664265,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.009183349087834358,
                        "severe_toxicity": 0.0002165535552194342,
                        "obscene": 0.0005101027782075107,
                        "threat": 0.0011175536783412099,
                        "insult": 0.0005314050358720124,
                        "identity_attack": 0.0005530149792321026
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266034858",
                    "id": 266034858,
                    "created_at": "2016-12-09T15:04:20Z",
                    "updated_at": "2016-12-09T15:04:20Z",
                    "author_association": "MEMBER",
                    "body": "@saft Seems like a traditional case of crossed wires due to text-based communication. Thankyou for apologising: I'm sorry as well, I clearly misread your tone.\r\n\r\nBack to being productive. \ud83d\udc4d \r\n\r\nSo, I think this is wrong. I am absolutely not an expert on cookies: they are the part of HTTP I know least about. However, as I understand from some of my collaborators on this project, our cookie stack is ultimately not very good. Part of this is because of the involvement of the standard library, whose cookie stack is *also* not very good.\r\n\r\nSo right now the cookie stack was worked on to the point where all the complaints went away. And they have! The cookie functionality is one of the least-complained-about parts of Requests. So that leads to a strong inclination to avoid making incremental changes to it, and to instead more-or-less leave it alone until such time as we can totally replace it.\r\n\r\nUltimately, I think the reason this patch was added was a sense of defensiveness against a problem that didn't fully exist. An enormous part of that is my responsibility: I reviewed and merged #1440, and ultimately probably should have done more investigating to prove that the problem existed. Certainly, trying today, I can't find any immediate adverse affects from removing that block of code. \r\n\r\nHowever, now that that has happened, there is a problem of inertia. Ultimately, it doesn't seem to be *hurting* many people. It's entirely circumventable, because we allow plugging in other cookiejar objects, so anyone it does inconvenience can nonetheless work around it. And it has been there for three years without so much as a whimper.\r\n\r\nMy strong inclination, then, is to leave it alone until such time as we consider a substantial change to the cookie stack. At that time, we can also include substantial testing of the cookie functionality so that we can do a much better job of indicating why certain bits of functionality are present.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266034858/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007305036997422576,
                        "severe_toxicity": 0.00011477719090180472,
                        "obscene": 0.00018408411415293813,
                        "threat": 0.00012033069651806727,
                        "insult": 0.00017354860028717667,
                        "identity_attack": 0.00014363849186338484
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/266036482",
                    "id": 266036482,
                    "created_at": "2016-12-09T15:10:38Z",
                    "updated_at": "2016-12-09T15:12:46Z",
                    "author_association": "NONE",
                    "body": "I see you're trying to get to **the truth** (even if it's only the *historic truth* :)) and not only I understand this but I applaud you for doing this. I'm with you because I have exactly the same attitude :) Once upon a time I was curious what can be escaped (if I remember well) in cookie-value and I raised issue at https://github.com/sashahart/cookies. However as you can see this repo has since moved and the Issues section is no more available :( That's a pity because I think you might find this issue and discussion there interesting :) I emailed Sasha asking if he could show Issues section again.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/266036482/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "piotr-dobrogost",
                        "id": 92239,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005885279970243573,
                        "severe_toxicity": 0.00012301311653573066,
                        "obscene": 0.00017973847570829093,
                        "threat": 0.0001303707540500909,
                        "insult": 0.00016960939683485776,
                        "identity_attack": 0.00013893666618969291
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/537158193",
                    "id": 537158193,
                    "created_at": "2019-10-01T18:05:12Z",
                    "updated_at": "2023-11-27T13:30:27Z",
                    "author_association": "NONE",
                    "body": "Please stop babbling and start coding. Fix this. Thank you. \ud83d\ude42",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/537158193/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "PedanticHacker",
                        "id": 14254085,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0028450556565076113,
                        "severe_toxicity": 8.746478852117434e-05,
                        "obscene": 0.0002373696624999866,
                        "threat": 0.0001061739312717691,
                        "insult": 0.00025106084649451077,
                        "identity_attack": 0.00015672945301048458
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1827673627",
                    "id": 1827673627,
                    "created_at": "2023-11-27T11:44:53Z",
                    "updated_at": "2023-11-27T11:44:53Z",
                    "author_association": "NONE",
                    "body": "just add\r\n```python\r\ndel requests.cookies.RequestsCookieJar.set_cookie\r\n```\r\nif you want to use the cookie as you get from the request",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1827673627/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "GoldenPalazzo",
                        "id": 11815732,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008518333779647946,
                        "severe_toxicity": 0.00010667790047591552,
                        "obscene": 0.00017807983385864645,
                        "threat": 0.0001276992552448064,
                        "insult": 0.0001824018982006237,
                        "identity_attack": 0.0001357207220280543
                    }
                }
            ]
        },
        "232": {
            "html_url": "https://github.com/psf/requests/issues/3669",
            "id": 188539424,
            "number": 3669,
            "title": "Setting Session Cookies",
            "created_at": "2016-11-10T15:33:34Z",
            "updated_at": "2016-11-10T15:33:34Z",
            "closed_at": null,
            "body": "This is a continuation of the original PR (#3595) to address how we set Session cookies in Requests. The PR had enough disagreement on how this should be addressed that I felt it was better to move this into a discussion.\r\n\r\nAs noted in #3595, Requests currently allows the user to provide cookies as a dictionary. While we've allowed this for individual requests, because their domain is (mostly) scoped, there are some real security concerns for supporting this for Sessions.\r\n\r\nThe issues\r\n=========\r\n\r\n1. If the user sets Session's `cookies` attribute to a `dict`, it will happily accept it, but crashes when you try to send anything. To correct this issue, the cookies need to be supplied as a `CookieJar` instance as noted in the [documentation](http://docs.python-requests.org/en/master/user/advanced/#session-objects). This is unideal because we allow users to use an idiom supported everywhere else in the API, and then fail later with a fairly unhelpful exception.\r\n\r\n2. #3595 automated this suggested process from the documentation, as we do elsewhere in Requests, but it allows you to easily set session-wide cookies that aren't bounded by a domain. This means it's easy to unintentionally send sensitive cookie information to unintended recipients.\r\n\r\n3. The currently proposed solution of using `add_dict_to_cookiejar` or `cookiejar_from_dict` provides no extra protection against the security issues raised in #3595.\r\n\r\nSolutions(?)\r\n==========\r\n\r\n1. I think this is a two step process. For Requests 2.x, I'm suggesting we add a warning to the user when they set Session `cookies` attribute to a `dict`. This points them at the documentation so they can at least *try* to do the right things. Otherwise, they're none the wiser until their program crashes with an error in a separate module and only minor clues on the cause. In 3.0.0, I think this warning should be raised an actual exception since we don't support cookies as dicts for Sessions.\r\n\r\n2. (and also 3.) If we're going to require the extra step of making the user explicitly use `add_dict_to_cookiejar` or `cookie_from_dict`, then let's make them useful. They currently don't provide any benefit over the dictionary approach in #3595. We can emulate some of the functionality of how a browser handles cookies by allowing users to supply cookie parameters on a per-dictionary basis. This is similar to cookies set by individual page requests.\r\n\r\n```python\r\n    cookies = {'SessionID': '1234',\r\n               'SecretToken': 'efe077444d17b2de7feee356601d'}\r\n\r\n    s = Session()\r\n    add_dict_to_cookiejar(\r\n        s.cookies, cookies, domain='auth.myauthsite.com', \r\n        secure=True, expires='123456789'\r\n    )\r\n```\r\n\r\nThis is a relatively simple changed as shown in an initial mockup in e2a4f9f & 4454849. This would need to be accompanied by a documentation update (something like 3e4e5b7) to explain how to do this properly.\r\n\r\n\r\n----\r\n@sigmavirus24, when you've got a moment, could you confirm this issue properly encapsulates your concerns and I didn't leave anything out? As for the possible solutions, are any of these amenable? I know your work in #2714 will help this a little bit with the default cookie policy change, but we still need to provide a way for the user to easily adhere to the safeguards we're putting in place.",
            "author_association": "MEMBER",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "nateprewitt",
                "id": 5271761,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/3669/reactions",
                "total_count": 1,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 1,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "233": {
            "html_url": "https://github.com/psf/requests/issues/3296",
            "id": 159287397,
            "number": 3296,
            "title": "no_proxy env ignored on 302 redirect",
            "created_at": "2016-06-08T22:17:20Z",
            "updated_at": "2016-09-06T00:00:34Z",
            "closed_at": null,
            "body": "Hello,\n\nI have a weird problem using Requests and proxies.\nI have https_proxy and no_proxy env variable for a domain and it seems the no_proxy is ignored on a HTTP 302 redirect target.\nWhat I do is basically:\n\n```\ns = requests.Session()\nr = s.get(\"https://use-the-proxy.com\")\n```\n\nThe response is 302 Found (Location: https://do-not-use-the-proxy.com) and Requests tries to follow.\nHere the problem: even if do-not-use-the-proxy.com is present in no_proxy, Requests still use the proxy for the request following a 302(the 302 \"target\").\nIf I directly request https://do-not-use-the-proxy.com, the proxy is not used as expected.\n\nThanks,\n## \n\nNico\n",
            "author_association": "NONE",
            "comments": 7,
            "state": "open",
            "user": {
                "login": "Gaasmann",
                "id": 13124500,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/3296/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/224827823",
                    "id": 224827823,
                    "created_at": "2016-06-09T08:10:25Z",
                    "updated_at": "2016-06-09T08:10:25Z",
                    "author_association": "MEMBER",
                    "body": "What version of requests are you using?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/224827823/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008137003751471639,
                        "severe_toxicity": 0.00010713849042076617,
                        "obscene": 0.00017420614312868565,
                        "threat": 0.00011421383533161134,
                        "insult": 0.00017741478222887963,
                        "identity_attack": 0.0001356059656245634
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/230287503",
                    "id": 230287503,
                    "created_at": "2016-07-04T13:12:34Z",
                    "updated_at": "2016-07-04T13:12:34Z",
                    "author_association": "NONE",
                    "body": "Hello,\nRequests version is 2.7.0.\nThanks\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/230287503/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Gaasmann",
                        "id": 13124500,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005874069174751639,
                        "severe_toxicity": 0.00012383365537971258,
                        "obscene": 0.00017813706654123962,
                        "threat": 0.0001293778041144833,
                        "insult": 0.0001740822772262618,
                        "identity_attack": 0.0001396326260874048
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/230291239",
                    "id": 230291239,
                    "created_at": "2016-07-04T13:30:36Z",
                    "updated_at": "2016-07-04T13:30:36Z",
                    "author_association": "MEMBER",
                    "body": "Cool, that's a good spot.\n\nYes, there is a minor bug in `resolve_redirects`. Specifically, while `resolve_redirects` attempts to remove proxy information, it cannot actually tell the difference between a proxy that was passed in via the command-line API or from the session and one that was extracted from the environment. This is because `resolve_redirects` is passed the _computed_ `proxies` argument, not the _user's_ `proxies` argument.\n\nWith the way the code in requests is structured, this is a very difficult problem to solve. One option is to hang the original `proxies` kwarg off the `Request` object: this will allow `rebuild_proxies` to essentially re-calculate the proxies argument. Another option is to suggest that the `NO_PROXY` environment variable overrides the user proxies argument for redirects: this is out of line with what we normally do, so I'm inclined to not do this. A third option is to try to do something wacky with storing the original `proxies` kwarg value and passing it to `Session.send` so that we can pass it to `resolve_redirects`, but that seems kind of nutty.\n\nDoes anyone else have an opinion on how to go about doing this that doesn't suck as much as the three I have just mentioned? @sigmavirus24?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/230291239/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.006162762641906738,
                        "severe_toxicity": 0.0001633831998333335,
                        "obscene": 0.0015828084433451295,
                        "threat": 0.0001598294620634988,
                        "insult": 0.0004341009189374745,
                        "identity_attack": 0.00018194870790466666
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/230292514",
                    "id": 230292514,
                    "created_at": "2016-07-04T13:36:59Z",
                    "updated_at": "2016-07-04T13:36:59Z",
                    "author_association": "MEMBER",
                    "body": "For what it's worth, I'd argue that this is a good indication that `proxies` (and probably `verify` and `cert`) are being handled at the wrong level of abstraction. Arguably, the core logic about deciding which proxy to use (and, by analogy, how to work the TLS) belongs more on Transport Adapters than on Sessions: it's a property of the connection, not a property of the HTTP layer.\n\nWe can fix that up, but it requires a breaking change in 3.0.0, which is...less than ideal.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/230292514/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005742120556533337,
                        "severe_toxicity": 0.00012626250099856406,
                        "obscene": 0.00019109666754957289,
                        "threat": 0.0001217863245983608,
                        "insult": 0.00017417939670849591,
                        "identity_attack": 0.00014005386037752032
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/230300812",
                    "id": 230300812,
                    "created_at": "2016-07-04T14:18:20Z",
                    "updated_at": "2016-07-04T14:18:20Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "What if Request/PreparedRequest objects had hidden state about session level settings and per-request level settings (which I think you're referring to as \"user\" settings) so that we could distinguish the two? Storing there, means allowing the TransportAdapter to resolve things would be (maybe?) a simpler change.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/230300812/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005790512659586966,
                        "severe_toxicity": 0.00012642984802369028,
                        "obscene": 0.0001845371734816581,
                        "threat": 0.00013178664084989578,
                        "insult": 0.00017664219194557518,
                        "identity_attack": 0.00014113506767898798
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/230302675",
                    "id": 230302675,
                    "created_at": "2016-07-04T14:27:51Z",
                    "updated_at": "2016-07-04T14:27:51Z",
                    "author_association": "MEMBER",
                    "body": "I don't entirely know, to be honest. I'm uncomfortable with shoving stuff onto the `Request`/`PreparedRequest` object just because that's the convenient thing to do. It feels like fundamentally the wrong abstraction layer. =(\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/230302675/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000576082500629127,
                        "severe_toxicity": 0.00012864927703049034,
                        "obscene": 0.00019568720017559826,
                        "threat": 0.00012538138253148645,
                        "insult": 0.00017587699403520674,
                        "identity_attack": 0.00013935913739260286
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/230307374",
                    "id": 230307374,
                    "created_at": "2016-07-04T14:51:23Z",
                    "updated_at": "2016-07-04T14:51:23Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I know. Unfortunately, we've exposed too much of the internals to users to be able to fix this another way. If we had a better way of wrapping all of this up in some sort of context object for a request that is passed to a transport adapter, that would be much better. Sadly, that might break things for people with custom transport adapters. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/230307374/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005444727139547467,
                        "severe_toxicity": 0.0001325273624388501,
                        "obscene": 0.00018767372239381075,
                        "threat": 0.00013751373626291752,
                        "insult": 0.00017832536832429469,
                        "identity_attack": 0.0001454840530641377
                    }
                }
            ]
        },
        "234": {
            "html_url": "https://github.com/psf/requests/issues/3186",
            "id": 154319859,
            "number": 3186,
            "title": "Response.content iterates in needlessly small chunks",
            "created_at": "2016-05-11T19:12:34Z",
            "updated_at": "2024-07-08T10:55:05Z",
            "closed_at": null,
            "body": "`Response.content` [iterates over the response data in chunks of 10240 bytes](https://github.com/kennethreitz/requests/blob/87704105af65b382b86f168f6a54192eab91faf2/requests/models.py#L741). The number 10240 was set in commit [`62d2ea8`](https://github.com/kennethreitz/requests/commit/62d2ea8).\n\nAfter tracing the source code of urllib3 and httplib, I can\u2019t see a reason for this behavior. It all ultimately goes through httplib\u2019s [`HTTPResponse.readinto`](https://hg.python.org/cpython/file/87130512ef34/Lib/http/client.py#l469), which automatically limits the read size according to `Content-Length` or the `chunked` framing.\n\nTherefore, it seems that, if you simply set `CONTENT_CHUNK_SIZE` to a much larger number (like 10240000), nothing should change, except `Response.content` will become more efficient on large responses.\n\n**Update:** it seems like httplib allocates a buffer of the requested size (to be read into), so simply setting `CONTENT_CHUNK_SIZE` to a large value will cause large chunks of memory to be allocated, which is probably a bad idea.\n\nThis is not a problem for me and I have not researched it thoroughly. I\u2019m filing this issue after investigating [a Stack Overflow question](http://stackoverflow.com/questions/37135880/python-3-urllib-vs-requests-performance) where this caused an unexpected slowdown for the poster, and a subsequent [IRC exchange](https://botbot.me/freenode/python-requests/2016-05-11/?msg=65874287&page=1) with @Lukasa. Feel free to do (or not do) whatever you think is right here.\n",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "vfaronov",
                "id": 300211,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/3186/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/218567984",
                    "id": 218567984,
                    "created_at": "2016-05-11T19:43:41Z",
                    "updated_at": "2016-05-11T19:43:41Z",
                    "author_association": "MEMBER",
                    "body": "It's good to know that httplib allocates a buffer of that size. I think we can probably stretch to double that buffer though: 20kb of buffer is unlikely to be the end of the world.\n\nAt the very least, though, we should understand how this works so that we can write documentation to explain this.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/218567984/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007371109677478671,
                        "severe_toxicity": 0.00011313702270854264,
                        "obscene": 0.0001797458389773965,
                        "threat": 0.00012252294982317835,
                        "insult": 0.000170314364368096,
                        "identity_attack": 0.00013878519530408084
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/218580715",
                    "id": 218580715,
                    "created_at": "2016-05-11T20:31:03Z",
                    "updated_at": "2016-05-11T20:31:03Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Originally, I iterated over a chunk size of `1` :)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/218580715/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005888559971936047,
                        "severe_toxicity": 0.00012701880768872797,
                        "obscene": 0.00019460372277535498,
                        "threat": 0.00012100450112484396,
                        "insult": 0.00017600298451725394,
                        "identity_attack": 0.00013821347965858877
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/261325671",
                    "id": 261325671,
                    "created_at": "2016-11-17T18:20:01Z",
                    "updated_at": "2016-11-17T18:20:01Z",
                    "author_association": "MEMBER",
                    "body": "While we're on the topic, we have 4 different default chunk_sizes between all of our iterator functions in Requests. Some I can find reasoning for ([`CONTENT_CHUNK_SIZE` vs.\n`ITER_CHUNK_SIZE`](https://github.com/kennethreitz/requests/pull/1122)), but others like `__iter__` and the default for `iter_content` aren't entirely clear.\n\nI'm not saying these are wrong, just curious why `__iter__` is declared as 128 instead of `ITER_CHUNK_SIZE` and if there's a reason for still having such a default of 1 on `iter_content`. Is it related to blocking or file-objects not returning without a full read?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/261325671/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "nateprewitt",
                        "id": 5271761,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006228816928341985,
                        "severe_toxicity": 0.00012052981765009463,
                        "obscene": 0.000186729128472507,
                        "threat": 0.0001225869928020984,
                        "insult": 0.000173022344824858,
                        "identity_attack": 0.00013784115435555577
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/261342873",
                    "id": 261342873,
                    "created_at": "2016-11-17T19:23:42Z",
                    "updated_at": "2016-11-17T19:23:42Z",
                    "author_association": "MEMBER",
                    "body": "There is a long, long issue to look at in the backlog. Anyone wanting to make progress on this needs to read _and understand_ #844. Safe to say this is not a good choice for someone who doesn't want to find a really tough slog of a job.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/261342873/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0012053755344823003,
                        "severe_toxicity": 9.975475404644385e-05,
                        "obscene": 0.0002226072974735871,
                        "threat": 9.894616232486442e-05,
                        "insult": 0.00019206847355235368,
                        "identity_attack": 0.0001385575014865026
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/2213683390",
                    "id": 2213683390,
                    "created_at": "2024-07-08T10:55:04Z",
                    "updated_at": "2024-07-08T10:55:04Z",
                    "author_association": "NONE",
                    "body": "just a ping back from the pip project on this 12 years old bug. :)\r\n\r\nthe iter_content() was set to 10240 bytes 12 years ago in requests. it's a needlessly small size and incur a lot of overhead.\r\nlinked bug ticket: real bug in pip, 30% of the time taken by pip to download packages, was just overhead because of using this default chunk size.\r\n\r\nI'm quite curious if there is any reason that prevents from updating `CONTENT_CHUNK_SIZE` to something more reasonable nowadays? \r\n64k-128k-256k would be reasonable values for I/O.\r\n\r\nOn Linux, the network read buffer was increased to 64k in kernel v4.20, year 2018, the read and write buffer were 16k historically before that.\r\n(they're resized dynamically with the TCP window up to 4MB write 6M read, but let's not get into TCP window sizing, see sysctl_tcp_rmem sysctl_tcp_wmem)\r\nlinux code: https://github.com/torvalds/linux/blame/master/net/ipv4/tcp.c#L4775\r\ncommit Sep 2018: https://github.com/torvalds/linux/commit/a337531b942bd8a03e7052444d7e36972aac2d92\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/2213683390/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "morotti",
                        "id": 13528994,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009655940230004489,
                        "severe_toxicity": 0.00010459961777087301,
                        "obscene": 0.0002052827039733529,
                        "threat": 0.0001086104748537764,
                        "insult": 0.00018113998521585017,
                        "identity_attack": 0.00013906364620197564
                    }
                }
            ]
        },
        "235": {
            "html_url": "https://github.com/psf/requests/issues/2716",
            "id": 99878720,
            "number": 2716,
            "title": "Strange behavior when setting cookie value to None in the method-level parameter",
            "created_at": "2015-08-09T09:27:56Z",
            "updated_at": "2015-08-28T17:36:50Z",
            "closed_at": null,
            "body": "After running the following code\n\n```\ns = requests.Session()\ns.cookies.update({'from-my': 'browser'})\nr = s.get('http://httpbin.org/cookies', cookies={'another': 'cookie', 'from-my': None})\nprint r.text\n```\n\nthe output is\n\n```\n{\n  \"cookies\": {\n    \"from-my; another\": \"cookie\"\n  }\n}\n```\n\nI used Python 2.7.6 and requests 2.7.0.\n\nFor more information, please see http://stackoverflow.com/questions/31902510/strange-requests-behavior-when-setting-cookie-value-to-none-in-the-method-level\n",
            "author_association": "NONE",
            "comments": 4,
            "state": "open",
            "user": {
                "login": "mcpwlk",
                "id": 10273733,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2716/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/129175679",
                    "id": 129175679,
                    "created_at": "2015-08-09T12:35:09Z",
                    "updated_at": "2015-08-09T12:35:09Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Because I recently updated that section of the docs, I examined this behavior in order to make sure I didn't add incorrect/misleading documentation. \n\nI believe this is because the pattern of _\"Remove a Value From a Dict Parameter by setting it to `None`\"_ simply isn't being considered for cookies when [merging request cookies with session cookies](https://github.com/kennethreitz/requests/blob/408d75d47aecc3724270217cf47793c114670f38/requests/sessions.py#L367-L369).\n\n[`merge_cookies()`](https://github.com/kennethreitz/requests/blob/408d75d47aecc3724270217cf47793c114670f38/requests/cookies.py#L463-L480) basically just updates the target jar, but does not remove any items.\n\nThis means cookies with a `value` of `None` will make it into the `RequestsCookieJar`, and will be serialized to a `Cookie: from-my; another=cookie`   header.\n\nThis is where the parsing the `Cookie:` header by [httpbin.org/cookies](http://httpbin.org/cookies) also plays a role: Depending on whether the empty cookie appears first or last in the header, it will either combine it into the key of the next cookie, or drop it:\n\n```\nCookie: from-my; another=cookie  ---->  \"cookies\": {\"from-my; another\": \"cookie\"}\nCookie: another=cookie; from-my  ---->  \"cookies\": {\"another\": \"cookie\"}\n```\n\nSo this is why key order seems to matter when testing against [httpbin.org/cookies](http://httpbin.org/cookies).\n\nNow the question is, should a client even be sending empty cookies like that? [RFC 6265 | 5.4.  The Cookie Header](http://tools.ietf.org/html/rfc6265#section-5.4) seems to say no:\n\n> ```\n>   1.  Output the cookie's name, the %x3D (\"=\") character, and the\n>        cookie's value.\n> ```\n\nIt doesn't seem to address empty cookie values specifically, but it does require a `=` delimiter for `cookie-pair`'s. That's also what the [grammar for `cookie-string`](http://tools.ietf.org/html/rfc6265#section-4.2.1) states.\n\nPython's [`cookielib`](https://hg.python.org/cpython/file/2.7/Lib/cookielib.py#l1307) / [`http.cookiejar`](https://hg.python.org/cpython/file/3.4/Lib/http/cookiejar.py#l1310) seems to think differently: \n\n``` python\n            if cookie.value is None:\n                attrs.append(cookie.name)\n            else:\n                attrs.append(\"%s=%s\" % (cookie.name, value))\n```\n\nSo when `None` would be used as a sentinel value to mean _\"Omit this cookie for this request\"_ like for other dict parameters, this would obviously prevent a user from intentionally sending a cookie with an empty value, which currently is possible.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/129175679/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "lukasgraf",
                        "id": 405124,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007374443812295794,
                        "severe_toxicity": 0.00011674510460579768,
                        "obscene": 0.000205401360290125,
                        "threat": 0.00011517286475282162,
                        "insult": 0.0001740019506542012,
                        "identity_attack": 0.0001372548722429201
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/129198695",
                    "id": 129198695,
                    "created_at": "2015-08-09T15:23:53Z",
                    "updated_at": "2015-08-09T15:24:13Z",
                    "author_association": "MEMBER",
                    "body": "Hmm, interesting. I think `cookielib` just doesn't expect to receive a `None` value here.\n\nI think we should do two things: firstly, we should ensure that we unset cookies with `None` values from the method level argument if we can. Secondly, we should consider whether this is a bug report that should be raised upstream. I searched upstream and didn't find any associated bug report, so we might have been the first to hit this.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/129198695/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005837781936861575,
                        "severe_toxicity": 0.0001276637049159035,
                        "obscene": 0.000181399576831609,
                        "threat": 0.00013444808428175747,
                        "insult": 0.00017524157010484487,
                        "identity_attack": 0.0001461348874727264
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/129687694",
                    "id": 129687694,
                    "created_at": "2015-08-11T03:08:42Z",
                    "updated_at": "2015-08-11T03:08:42Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So this does seem to be a bug in the standard library. [RFC 2965](https://tools.ietf.org/html/rfc2965#page-11) even shows the `=VALUE` as being required (even if it didn't use proper ABNF =P). `cookielib` was implemented at a time when 2965 was the actual standard.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/129687694/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006600805791094899,
                        "severe_toxicity": 0.00011838947102660313,
                        "obscene": 0.00018682441441342235,
                        "threat": 0.00011874742631334811,
                        "insult": 0.0001735376863507554,
                        "identity_attack": 0.0001381539332214743
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/135841019",
                    "id": 135841019,
                    "created_at": "2015-08-28T17:36:50Z",
                    "updated_at": "2015-08-28T17:36:50Z",
                    "author_association": "NONE",
                    "body": "@lukasgraf RFC 6265 addresses the issue of empty cookie values in both the `Set-Cookie` grammar in [section 4.1.1](http://tools.ietf.org/html/rfc6265#section-4.1.1) and its interpretation by the client in [section 5.2](http://tools.ietf.org/html/rfc6265#section-5.2) wherein nil values are permitted. Therefore a user agent should return an empty value, subject to constraints imposed when the cookie was set (lifetime, path, etc.), in future requests.\nAs you remark, an equals symbol is required in the relevant headers, which `cookielib` fails to include.\n\nAs a historical note, the grammar in [section 3.2.2 of RFC 2965](https://tools.ietf.org/html/rfc2965#section-3.2) (and [RFC 2901](https://tools.ietf.org/html/rfc2109#section-4.2.2) before it) forbade nil values by specifying cookie values to be tokens (see [section 2.2 of RFC 2616](https://tools.ietf.org/html/rfc2616#section-2.2)) or quoted strings, though the latter could be empty. The original [Netscape proposal](http://curl.haxx.se/rfc/cookie_spec.html) was silent on the matter.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/135841019/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "MikeWinter",
                        "id": 7040853,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006661091465502977,
                        "severe_toxicity": 0.00011778041516663507,
                        "obscene": 0.00019052755669690669,
                        "threat": 0.0001156371581600979,
                        "insult": 0.00017024956468958408,
                        "identity_attack": 0.0001384249044349417
                    }
                }
            ]
        },
        "236": {
            "html_url": "https://github.com/psf/requests/issues/2638",
            "id": 87745606,
            "number": 2638,
            "title": "Behaviors are different when data is a list(dict) and text",
            "created_at": "2015-06-12T14:25:11Z",
            "updated_at": "2015-06-12T20:36:12Z",
            "closed_at": null,
            "body": "When data is unicode, it gives traceback.\nA simple test case:\n\n``` python\nrequest = requests.Request(method='GET', url='https://httpbin.org/get')\nrequest.data =  u'x=f\u00f8\u00f8'\nprepared = request.prepare()\nrequests.Session().send(prepared)\n```\n\n```\nTraceback (most recent call last):\n...\n    requests.Session().send(prepared)\n  File \"/usr/lib/python2.7/dist-packages/requests/sessions.py\", line 566, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/requests/adapters.py\", line 331, in send\n    timeout=timeout\n  File \"/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py\", line 558, in urlopen\n    body=body, headers=headers)\n  File \"/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py\", line 383, in _make_request\n    conn.request(method, url, **httplib_request_kw)\n  File \"/usr/lib/python2.7/httplib.py\", line 975, in request\n    self._send_request(method, url, body, headers)\n  File \"/usr/lib/python2.7/httplib.py\", line 1009, in _send_request\n    self.endheaders(body)\n  File \"/usr/lib/python2.7/httplib.py\", line 971, in endheaders\n    self._send_output(message_body)\n  File \"/usr/lib/python2.7/httplib.py\", line 835, in _send_output\n    self.send(message_body)\n  File \"/usr/lib/python2.7/httplib.py\", line 805, in send\n    self.sock.sendall(data)\n  File \"/usr/lib/python2.7/ssl.py\", line 329, in sendall\n    v = self.send(data[count:])\n  File \"/usr/lib/python2.7/ssl.py\", line 298, in send\n    v = self._sslobj.write(data)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 3-4: ordinal not in range(128)\n```\n\nWhen data is a list, it works fine.\n\n``` python\n    request = requests.Request(method='GET', url='https://httpbin.org/get')\n    request.data = [(u'x', u'f\u00f8\u00f8')]\n    prepared = request.prepare()\n    requests.Session().send(prepared)\n```\n\nRequests seems to be supporting unicode data, shown in the code. However, it seems not work well, and the behavior differs when the data is a list-like type and a text-like type, one try to encode using 'uft-8' and the other just pass through(in _encode_params).\n\n``` python\n    def prepare_body(self, data, files, json=None):\n            ...\n            if files:\n                (body, content_type) = self._encode_files(files, data)\n            else:\n                if data and json is None:\n                    body = self._encode_params(data)     #===> check data\n                    if isinstance(data, basestring) or hasattr(data, 'read'):\n                        content_type = None\n                    else:\n                        content_type = 'application/x-www-form-urlencoded'\n                    ...\n    @staticmethod\n    def _encode_params(data):\n        if isinstance(data, (str, bytes)):   #===> allows unicode\n            return data                              #===> simply return\n        elif hasattr(data, 'read'):\n            return data\n        elif hasattr(data, '__iter__'):        #===> the behavior is different.\n            result = []\n            for k, vs in to_key_val_list(data):\n                if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):\n                    vs = [vs]\n                for v in vs:\n                    if v is not None:\n                        result.append(\n                            (k.encode('utf-8') if isinstance(k, str) else k,\n                             v.encode('utf-8') if isinstance(v, str) else v))   #===>you try to encode as 'utf8'\n            return urlencode(result, doseq=True)\n        else:\n            return data\n```\n",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "zhaoguixu",
                "id": 4114154,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2638/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/111554696",
                    "id": 111554696,
                    "created_at": "2015-06-12T16:51:49Z",
                    "updated_at": "2015-06-12T16:51:49Z",
                    "author_association": "MEMBER",
                    "body": "Yeah, agreed, this is a bug. We shouldn't just return, we should chuck the data through `to_native_str` first.\n\nHowever, that change is backward incompatible, so we should add this into 3.0.0.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/111554696/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008237168658524752,
                        "severe_toxicity": 0.00010871948325075209,
                        "obscene": 0.00018375093350186944,
                        "threat": 0.0001132883844547905,
                        "insult": 0.00017773208674043417,
                        "identity_attack": 0.0001403652277076617
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/111588494",
                    "id": 111588494,
                    "created_at": "2015-06-12T18:55:57Z",
                    "updated_at": "2015-06-12T18:55:57Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So, I don't think that belongs in the `_encode_params` method though. That's mostly there to create an `application/x-www-form-urlencoded` body. The fact that it sees the data doesn't make it the right place, unless we change it's purpose. But that's more for people who are looking to pick this up.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/111588494/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005863022524863482,
                        "severe_toxicity": 0.000125551872770302,
                        "obscene": 0.0001902634248835966,
                        "threat": 0.00012356837396509945,
                        "insult": 0.00017524106078781188,
                        "identity_attack": 0.0001402232883265242
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/111600462",
                    "id": 111600462,
                    "created_at": "2015-06-12T20:04:28Z",
                    "updated_at": "2015-06-12T20:04:28Z",
                    "author_association": "NONE",
                    "body": "So as when `python requests.params=u'x=f\u00f8\u00f8'`, containing non-ascii characters.  _encode_params seems buggy. I find requests easily crashes when meeting non-ascii characters overall. Perhaps, it would be better if testing coverage about this could be higher. I seem find another traceback about this. I will raise a new issue then. Thanks for the response.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/111600462/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zhaoguixu",
                        "id": 4114154,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006478547002188861,
                        "severe_toxicity": 0.00011567089677555487,
                        "obscene": 0.00018256598559673876,
                        "threat": 0.00011746086966013536,
                        "insult": 0.00017382485384587198,
                        "identity_attack": 0.00013704640150535852
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/111604104",
                    "id": 111604104,
                    "created_at": "2015-06-12T20:21:14Z",
                    "updated_at": "2015-06-12T20:21:14Z",
                    "author_association": "MEMBER",
                    "body": "The real problem is that mixing unicode and non-unicode data is a bad idea. Requests will work best if you encode your unicode data before you pass it to us, so we don't have to guess what you want.\n\nWith that said, if there are problems at our interface, we should know about them\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/111604104/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006907724891789258,
                        "severe_toxicity": 0.00011727084347512573,
                        "obscene": 0.00016639175009913743,
                        "threat": 0.0001286052429350093,
                        "insult": 0.0001775273121893406,
                        "identity_attack": 0.00014828827988822013
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/111607008",
                    "id": 111607008,
                    "created_at": "2015-06-12T20:36:12Z",
                    "updated_at": "2015-06-12T20:36:12Z",
                    "author_association": "NONE",
                    "body": "However, requests gives us a phantom being able to support unicode and non-unicode data with non-ascii characters. But to what stage, we don't know and the specification is fuzzy. Indeed, requests is a great project and I am really appreciated. Hope it would be better :100:  Thanks, you guys.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/111607008/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zhaoguixu",
                        "id": 4114154,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005520475679077208,
                        "severe_toxicity": 0.00012944963236805052,
                        "obscene": 0.0001814468123484403,
                        "threat": 0.00013449681864585727,
                        "insult": 0.00017502780247014016,
                        "identity_attack": 0.0001439229672541842
                    }
                }
            ]
        },
        "237": {
            "html_url": "https://github.com/psf/requests/issues/2585",
            "id": 72459274,
            "number": 2585,
            "title": "Session.get_adapter won't work correctly for case-sensitive URLs",
            "created_at": "2015-05-01T15:44:12Z",
            "updated_at": "2015-07-18T14:22:31Z",
            "closed_at": null,
            "body": "In its current implementation Session.get_adapter turns url to lowercase in line 637. If it is aiming for case-insensitive compare it should also turn prefix variable to lowercase in the same line or do that at registration in the mount() method. But this whole idea seems incorrect because URL paths can be case sensitive and one might register different adapters for different paths on the same site.\n\nThe fix should most likely be spliting the URL into components and using that tuple as a key in the self.adapters dictionary. Changes mount() and get_adapter().\n\n``` python\nIn [48]: urlparse.urlparse('HTTP://lala.mi.do/path')\nOut[48]: ParseResult(scheme='http', netloc='lala.mi.do', path='/path', params='', query='', fragment='')\n\nIn [49]: d = {}\n\nIn [50]: purl = urlparse.urlparse('HTTP://lala.mi.do/path')\n\nIn [51]: d[purl] = 'myadapter'\n\nIn [52]: purl = urlparse.urlparse('HTTP://lala.mi.do/Path2')\n\nIn [53]: purl\nOut[53]: ParseResult(scheme='http', netloc='lala.mi.do', path='/Path2', params='', query='', fragment='')\n\nIn [54]: d[purl] = 'myadapter2'\n\nIn [55]: d\nOut[55]:\n{ParseResult(scheme='http', netloc='lala.mi.do', path='/Path2', params='', query='', fragment=''): 'myadapter2',\n ParseResult(scheme='http', netloc='lala.mi.do', path='/path', params='', query='', fragment=''): 'myadapter'}\n```\n",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "agilevic",
                "id": 1110390,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2585/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/98167770",
                    "id": 98167770,
                    "created_at": "2015-05-01T16:10:02Z",
                    "updated_at": "2015-05-01T16:10:02Z",
                    "author_association": "MEMBER",
                    "body": "Agreed that the case-insensitive compare is a bad idea, but I also think splitting the URL into components is not a good idea either. The correct thing to do is to remove the case-insensitive compare in 3.0.0.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/98167770/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006632016156800091,
                        "severe_toxicity": 0.00011536874808371067,
                        "obscene": 0.00017570535419508815,
                        "threat": 0.0001199466860271059,
                        "insult": 0.00017733716231305152,
                        "identity_attack": 0.00014276825822889805
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/98176203",
                    "id": 98176203,
                    "created_at": "2015-05-01T16:50:23Z",
                    "updated_at": "2015-05-01T16:50:23Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "If I remember correctly, we compare them case-insensitively because most people don't use adapters with paths (which isn't to say that your use-case is invalid or that this bug is invalid).\n\nAt least 90% of people mounting custom adapters will be doing it based on scheme alone (e.g., `http://`) while at least another 5% will probably be mounting based on scheme + host (e.g., `http://lala.mi.do`). For those use-cases the case-insensitive comparison is 100% valid. Scheme and non-user-info authority comparisons _should_ be case-insensitive.\n\nIt's probably over-kill, but I think we should [normalize](https://github.com/sigmavirus24/rfc3986/blob/master/rfc3986/api.py#L65) the input to `mount` and `get_adapter`. That way we can appropriately make a comparison. That of course, does not preclude anyone from messing with the underlying attribute that stores the adapters and their mount points directly and thereby breaking these assumptions/safe-guards.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/98176203/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007408271776512265,
                        "severe_toxicity": 0.00011209473450435326,
                        "obscene": 0.0001822897611418739,
                        "threat": 0.0001188295500469394,
                        "insult": 0.00017361763457302004,
                        "identity_attack": 0.00013792187382932752
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/98253570",
                    "id": 98253570,
                    "created_at": "2015-05-01T22:19:20Z",
                    "updated_at": "2015-05-01T22:35:00Z",
                    "author_association": "NONE",
                    "body": "Thanks for looking into this. The case here is using different caching strategies for different paths and is valid perfectly sensible. \n\nTuple or string as key is an implementation detail, but doing a plain case-sensitive compare is not entirely correct either. See my example below where one spelling uses HTTP:// and another is http:// for a scheme. Parser correctly normalizes URL fragments and its result can be used as key. If you want to use strings call geturl() on the parsed object.\n\n``` python\n\nIn [3]: urlparse.urlparse('http://lala.mi.do/Path2')\nOut[3]: ParseResult(scheme='http', netloc='lala.mi.do', path='/Path2', params='', query='', fragment='')\n\nIn [4]: urlparse.urlparse('HTTP://lala.mi.do/Path2')\nOut[4]: ParseResult(scheme='http', netloc='lala.mi.do', path='/Path2', params='', query='', fragment='')\n\nIn [5]: urlparse.urlparse('HTTP://lala.mi.do/path2')\nOut[5]: ParseResult(scheme='http', netloc='lala.mi.do', path='/path2', params='', query='', fragment='')\n\nIn [6]: urlparse.urlparse('ftp://user:pass@lala.mi.do/path2')\nOut[6]: ParseResult(scheme='ftp', netloc='user:pass@lala.mi.do', path='/path2', params='', query='', fragment='')\n\nIn [7]: urlparse.urlparse('ftp://User:pass@lala.mi.do/path2')\nOut[7]: ParseResult(scheme='ftp', netloc='User:pass@lala.mi.do', path='/path2', params='', query='', fragment='')\n\n# performance-wise any implementation will work\nIn [14]: %timeit hash(urlparse.urlparse('ftp://User:pass@lala.mi.do/path2').geturl())\n100000 loops, best of 3: 3.73 \u00b5s per loop\n\nIn [15]: %timeit hash(urlparse.urlparse('ftp://User:pass@lala.mi.do/path2'))\n100000 loops, best of 3: 2.18 \u00b5s per loop\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/98253570/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "agilevic",
                        "id": 1110390,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008490717154927552,
                        "severe_toxicity": 0.00011263561464147642,
                        "obscene": 0.0002044862339971587,
                        "threat": 0.00011058839299948886,
                        "insult": 0.0001784058113116771,
                        "identity_attack": 0.00013987821876071393
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/98349672",
                    "id": 98349672,
                    "created_at": "2015-05-02T11:32:51Z",
                    "updated_at": "2015-05-02T11:32:51Z",
                    "author_association": "MEMBER",
                    "body": "Agreed, we should be normalising those inputs. Regardless, this is an API change and so can't land until 3.0.0.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/98349672/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005843028193339705,
                        "severe_toxicity": 0.00012545613572001457,
                        "obscene": 0.00018770700262393802,
                        "threat": 0.00013016865705139935,
                        "insult": 0.000176852016011253,
                        "identity_attack": 0.00014126472524367273
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/98349693",
                    "id": 98349693,
                    "created_at": "2015-05-02T11:33:30Z",
                    "updated_at": "2015-05-02T11:33:30Z",
                    "author_association": "MEMBER",
                    "body": "@sigmavirus24 I'm beginning to wonder if we should have a 3.0.0 feature branch, and should start landing these things we keep deferring to 3.0.0.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/98349693/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000572624325286597,
                        "severe_toxicity": 0.00012957323633600026,
                        "obscene": 0.0001802026672521606,
                        "threat": 0.00013780553126707673,
                        "insult": 0.00017792130529414862,
                        "identity_attack": 0.000148146107676439
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/98367928",
                    "id": 98367928,
                    "created_at": "2015-05-02T14:49:12Z",
                    "updated_at": "2015-05-02T14:49:12Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@Lukasa I've been thinking of starting just such a branch in my fork. I wasn't sure if we would want to keep it here or elsewhere. While having people test it would be nice, having bug reports here about it might become confusing to some.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/98367928/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005715619190596044,
                        "severe_toxicity": 0.00012630067067220807,
                        "obscene": 0.00018012810323853046,
                        "threat": 0.00012905178300570697,
                        "insult": 0.00017560235573910177,
                        "identity_attack": 0.00014389853458851576
                    }
                }
            ]
        },
        "238": {
            "html_url": "https://github.com/psf/requests/issues/2433",
            "id": 56194102,
            "number": 2433,
            "title": "iter_lines method will always hold the last response in the server in a buffer",
            "created_at": "2015-02-02T04:09:56Z",
            "updated_at": "2019-12-11T22:42:18Z",
            "closed_at": null,
            "body": "The implementation of the `iter_lines` and `iter_content` methods in `requests` means that when receiving line-by-line data from a server in \"push\" mode, the latest line received from the server will almost invariably be smaller than the `chunk_size` parameter, causing the final read operation to block.\n\n A good example of this is the Kubernetes `watch` api, which produces one line of JSON output per event, like this:\n\n```\n{\"type\":\"ADDED\",\"object\":{\"kind\":\"Service\",\"id\":\"kubernetes-ro\",\"uid\":\"5718d954-a31a-11e4-8c74-20cf30467e62\",\"creationTimestamp\":\"2015-01-23T11:10:25-05:00\",\"selfLink\":\"/api/v1beta1/services/kubernetes-ro\",\"resourceVersion\":4,\"apiVersion\":\"v1beta1\",\"namespace\":\"default\",\"port\":80,\"protocol\":\"TCP\",\"labels\":{\"component\":\"apiserver\",\"provider\":\"kubernetes\"},\"selector\":null,\"containerPort\":0,\"portalIP\":\"10.254.6.100\"}}\n```\n\nIf you compare the output of:\n\n```\nimport requests\nr = requests.get('http://localhost:8080/api/v1beta1/watch/services',\n                 stream=True)\n\nfor line in r.iter_lines():\n    print line\n```\n\nWith the output of `curl` running against the same URL, you will see\nthat the output from the Python code lags behind the output seen by\n`curl` by one line.\n\nI was able to work around this behavior by writing my own `iter_lines`\nmethod, which looks like this:\n\n```\ndef iter_lines(fd, chunk_size=1024):\n    '''Iterates over the content of a file-like object line-by-line.'''\n\n    pending = None\n\n    while True:\n        chunk = os.read(fd.fileno(), chunk_size)\n        if not chunk:\n            break\n\n        if pending is not None:\n            chunk = pending + chunk\n            pending = None\n\n        lines = chunk.splitlines()\n\n        if lines and lines[-1]:\n            pending = lines.pop()\n\n        for line in lines:\n            yield line\n\n    if pending:\n        yield(pending)\n```\n\nThis works around the problem partly by calling `os.read`, which will\nhappily return fewer bytes than requested in `chunk_size`.  With the\nabove routing available, the following code behaves correctly:\n\n```\nimport requests\nr = requests.get('http://localhost:8080/api/v1beta1/watch/services',\n                 stream=True)\n\nfor line in iter_lines(r.raw):\n    print line\n```\n\nThis code will always print out the most recent reply from the server\nwhen it is received.\n",
            "author_association": "NONE",
            "comments": 10,
            "state": "open",
            "user": {
                "login": "larsks",
                "id": 82622,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2433/reactions",
                "total_count": 1,
                "+1": 1,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/72414851",
                    "id": 72414851,
                    "created_at": "2015-02-02T07:13:57Z",
                    "updated_at": "2015-02-02T07:13:57Z",
                    "author_association": "MEMBER",
                    "body": "Generally speaking I'd be in favour of changing this behaviour. It's been stupid for a long time now.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/72414851/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.031032830476760864,
                        "severe_toxicity": 0.00017029714945238084,
                        "obscene": 0.002195245586335659,
                        "threat": 0.00021579152962658554,
                        "insult": 0.0011109726037830114,
                        "identity_attack": 0.00035740857128985226
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/72465247",
                    "id": 72465247,
                    "created_at": "2015-02-02T14:25:15Z",
                    "updated_at": "2015-02-02T14:25:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "You also have my support. The trick is doing this in a way that's backwards compatible so we can help you out before 3.0\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/72465247/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007123811519704759,
                        "severe_toxicity": 0.00011794157762778923,
                        "obscene": 0.00017050512542482466,
                        "threat": 0.0001422193308826536,
                        "insult": 0.0001800298923626542,
                        "identity_attack": 0.00014231537352316082
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/72496143",
                    "id": 72496143,
                    "created_at": "2015-02-02T17:14:53Z",
                    "updated_at": "2015-02-02T17:14:53Z",
                    "author_association": "NONE",
                    "body": "The above change works for me with python 2.7.8 and 3.4.1 (both with `urllib3` available).\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/72496143/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "larsks",
                        "id": 82622,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005606787162832916,
                        "severe_toxicity": 0.00012738705845549703,
                        "obscene": 0.00018646918761078268,
                        "threat": 0.00012732208415400237,
                        "insult": 0.00017528301395941526,
                        "identity_attack": 0.00014224347251001745
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/105071945",
                    "id": 105071945,
                    "created_at": "2015-05-24T22:25:11Z",
                    "updated_at": "2015-05-24T22:25:11Z",
                    "author_association": "NONE",
                    "body": "I've just encountered this unfortunate behavior trying to consume a feed=continuous changes feed from couchdb which has much the same semantics. Any chance of this going in?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/105071945/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rnewson",
                        "id": 47223,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007974230102263391,
                        "severe_toxicity": 0.00010633259080350399,
                        "obscene": 0.00018181014456786215,
                        "threat": 0.00011089347390225157,
                        "insult": 0.00018125487258657813,
                        "identity_attack": 0.0001331514649791643
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/105072257",
                    "id": 105072257,
                    "created_at": "2015-05-24T22:35:18Z",
                    "updated_at": "2015-05-24T22:35:18Z",
                    "author_association": "NONE",
                    "body": "note that this doesn't seem to work if you don't have urllib3 installed and using r.raw means requests emits the raw chunks of the chunked transfer mode.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/105072257/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rnewson",
                        "id": 47223,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007525513647124171,
                        "severe_toxicity": 0.00010992246825480834,
                        "obscene": 0.00018100583110935986,
                        "threat": 0.00011879114754265174,
                        "insult": 0.00017619793652556837,
                        "identity_attack": 0.00013400510943029076
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/105082824",
                    "id": 105082824,
                    "created_at": "2015-05-25T00:57:13Z",
                    "updated_at": "2015-05-25T00:57:13Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> note that this doesn't seem to work if you don't have urllib3 installed and using r.raw means requests emits the raw chunks of the chunked transfer mode.\n\nI'm sorry. I don't understand that at all. Could you help me understand? If you're using requests from PyPI, you always have urllib3 installed as `requests.packages.urllib3`. Are you using requests from one of the distribution packages without urllib3 installed? If so, how is requests even working?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/105082824/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007486497634090483,
                        "severe_toxicity": 0.00010950085561489686,
                        "obscene": 0.00017623220628593117,
                        "threat": 0.00011772438301704824,
                        "insult": 0.0001756993297021836,
                        "identity_attack": 0.00013498298358172178
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/105291675",
                    "id": 105291675,
                    "created_at": "2015-05-25T19:10:14Z",
                    "updated_at": "2015-05-25T19:10:14Z",
                    "author_association": "NONE",
                    "body": "an excellent question but likely off-topic (I only noticed that 'pip install urllib3' installed the library, and then I uninstalled it, but of course I probably have another copy somewhere else).\n\nThe bug in iter_lines is real and affects at least two use cases, so great to see it destined for 3.0, thanks :)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/105291675/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "rnewson",
                        "id": 47223,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006209334242157638,
                        "severe_toxicity": 0.00011945189180551097,
                        "obscene": 0.0001883161603473127,
                        "threat": 0.0001168216040241532,
                        "insult": 0.00017784668307285756,
                        "identity_attack": 0.0001375850843032822
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/249245570",
                    "id": 249245570,
                    "created_at": "2016-09-23T16:56:26Z",
                    "updated_at": "2016-09-23T16:56:26Z",
                    "author_association": "NONE",
                    "body": "I am pretty sure we've seen another instance of this bug [in the wild](http://stackoverflow.com/questions/39662596/python-requests-get-ignores-the-last-record).\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/249245570/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "larsks",
                        "id": 82622,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006963125779293478,
                        "severe_toxicity": 0.00011684044147841632,
                        "obscene": 0.00017620886501390487,
                        "threat": 0.00011988814367214218,
                        "insult": 0.00017761146591510624,
                        "identity_attack": 0.0001442186039639637
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/564739863",
                    "id": 564739863,
                    "created_at": "2019-12-11T21:26:10Z",
                    "updated_at": "2019-12-11T21:26:10Z",
                    "author_association": "NONE",
                    "body": "Is this really still a bug? At the very least this should be well documented -- I would imagine most people would just not use `iter_lines` if they knew about this\r\n\r\n> in a way that's backwards compatible\r\n\r\n@sigmavirus24 I'm having trouble understanding that. It's a bug, right? It's not intended behavior that's being broken, it's fixing it to work as intended.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/564739863/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "eschwartz",
                        "id": 1153371,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008433263283222914,
                        "severe_toxicity": 0.00010822196054505184,
                        "obscene": 0.00018240173812955618,
                        "threat": 0.00011531826021382585,
                        "insult": 0.00017506553558632731,
                        "identity_attack": 0.00013662951823789626
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/564766512",
                    "id": 564766512,
                    "created_at": "2019-12-11T22:42:18Z",
                    "updated_at": "2019-12-11T22:42:18Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@eschwartz I'm no longer involved in this project. Please don't mention me on this or other issues.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/564766512/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006608003168366849,
                        "severe_toxicity": 0.00011892941984115168,
                        "obscene": 0.00017792708240449429,
                        "threat": 0.0001302169548580423,
                        "insult": 0.0001745771151036024,
                        "identity_attack": 0.0001388617092743516
                    }
                }
            ]
        },
        "239": {
            "html_url": "https://github.com/psf/requests/issues/2392",
            "id": 52934168,
            "number": 2392,
            "title": "requests.exceptions.ReadTimeout is not raised when response is chunked",
            "created_at": "2014-12-26T18:19:10Z",
            "updated_at": "2018-01-12T23:43:42Z",
            "closed_at": null,
            "body": "https://gist.github.com/nickjoyce-wf/c536f2573ef124115f86\n\nWhen a request has a timeout param supplied and the response is chunked but does not return enough data in time, `requests.exceptions.ReadTimeout` should be raised.\n\n``` shell\n$ mkvirtualenv test\n(test)$ pip install requests werkzeug\n(test)$ python server.py\n```\n\nIn another terminal:\n\n``` shell\n$ workon test\n(test)$ python client.py\n```\n\nExpected results:\n\n`requests.exceptions.ReadTimeout` is raised due to response not being sent within the timeout specified by `requests.get`.\n\nActual results:\n\n```\nTraceback (most recent call last):\n  File \"client.py\", line 3, in <module>\n    requests.get('http://127.0.0.1:8000/', timeout=0.5)\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/api.py\", line 65, in get\n    return request('get', url, **kwargs)\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/api.py\", line 49, in request\n    response = session.request(method=method, url=url, **kwargs)\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/sessions.py\", line 461, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/sessions.py\", line 610, in send\n    r.content\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/models.py\", line 730, in content\n    self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/models.py\", line 662, in generate\n    raise ConnectionError(e)\nrequests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8000): Read timed out.\n```\n\nRecorded http request/response via Wireshark:\n\n```\nGET / HTTP/1.1\nHost: 127.0.0.1:8000\nConnection: keep-alive\nAccept-Encoding: gzip, deflate\nAccept: */*\nUser-Agent: python-requests/2.5.1 CPython/2.7.9 Darwin/13.4.0\n\nHTTP/1.0 200 OK\nContent-type: text/plain\nTransfer-Encoding: chunked\nConnection: close\nServer: Werkzeug/0.9.6 Python/2.7.9\nDate: Fri, 26 Dec 2014 17:51:21 GMT\n```\n\nTested with requests==2.5.1\n",
            "author_association": "NONE",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "nickjoyce-wf",
                "id": 1444666,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2392/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/68152211",
                    "id": 68152211,
                    "created_at": "2014-12-26T18:27:43Z",
                    "updated_at": "2014-12-26T18:27:43Z",
                    "author_association": "MEMBER",
                    "body": "Just to be really clear, the bug here is that exception we're raising is wrong. We're raising a `ConnectionError`, not a `ReadTimeoutError`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/68152211/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007818937883712351,
                        "severe_toxicity": 0.00010923949594143778,
                        "obscene": 0.00017921635298989713,
                        "threat": 0.00011391081352485344,
                        "insult": 0.00018104621267411858,
                        "identity_attack": 0.00013865820073988289
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/68152477",
                    "id": 68152477,
                    "created_at": "2014-12-26T18:33:54Z",
                    "updated_at": "2014-12-26T18:33:54Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "At this point though, people are almost certainly wrapping their code in except blocks for `ConnectionError` but most likely not in [`ReadTimeout`](https://github.com/kennethreitz/requests/blob/2d1ffad80bdfbefcb1922e0129fca28d493d3fb0/requests/exceptions.py#L62). We can't exactly just change this under their feet in 2.5.x, or 2.x. We'll have to wait for 3.0 for this.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/68152477/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006524550844915211,
                        "severe_toxicity": 0.00011980289127677679,
                        "obscene": 0.0001885110978037119,
                        "threat": 0.00012258419883437455,
                        "insult": 0.00017609549104236066,
                        "identity_attack": 0.00013862858759239316
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/116979761",
                    "id": 116979761,
                    "created_at": "2015-06-30T05:44:42Z",
                    "updated_at": "2015-06-30T05:47:55Z",
                    "author_association": "NONE",
                    "body": "Can an exception be thrown when access response content i.e:\ncontent = r.text\n\ncan the above statement throw the following exception:\nrequests.exceptions.ConnectionError: HTTPConnectionPool(host='<some website>', port=80): Read timed out\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/116979761/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ashishmadeti",
                        "id": 4900687,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006905727204866707,
                        "severe_toxicity": 0.00011445368727436289,
                        "obscene": 0.00018081418238580227,
                        "threat": 0.00011804160021711141,
                        "insult": 0.00017620599828660488,
                        "identity_attack": 0.00013398812734521925
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/117029215",
                    "id": 117029215,
                    "created_at": "2015-06-30T07:10:51Z",
                    "updated_at": "2015-06-30T07:10:51Z",
                    "author_association": "MEMBER",
                    "body": "Yes, if you set `stream=True`. Otherwise, no.\n\nIn future, it's better if you can ask these questions on Stack Overflow: this issue tracker is really meant for bugs only. =)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/117029215/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005911117186769843,
                        "severe_toxicity": 0.00012432466610334814,
                        "obscene": 0.00018411045311950147,
                        "threat": 0.00012841983698308468,
                        "insult": 0.00017639898578636348,
                        "identity_attack": 0.00013982194650452584
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/357385003",
                    "id": 357385003,
                    "created_at": "2018-01-12T23:43:42Z",
                    "updated_at": "2018-01-12T23:43:42Z",
                    "author_association": "NONE",
                    "body": "> people are almost certainly wrapping their code in except blocks for `ConnectionError` but most likely not in `ReadTimeout`\r\n\r\nOn contrary, people who set timeout are most likely wrapping their code in except blocks for `ReadTimeout` already, because this exception is thrown from the send request function.",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/357385003/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "VasiliPupkin256",
                        "id": 27725951,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007018717005848885,
                        "severe_toxicity": 0.00011435506894486025,
                        "obscene": 0.00017890919116325676,
                        "threat": 0.0001192452255054377,
                        "insult": 0.000177095687831752,
                        "identity_attack": 0.00013771279191132635
                    }
                }
            ]
        },
        "240": {
            "html_url": "https://github.com/psf/requests/issues/2235",
            "id": 43205423,
            "number": 2235,
            "title": "chunk size error for unicode content",
            "created_at": "2014-09-19T05:27:53Z",
            "updated_at": "2014-10-10T16:46:04Z",
            "closed_at": null,
            "body": "I found this code in requests/adapters.py (latest version installed by pip): \n\nhttps://github.com/kennethreitz/requests/blob/master/requests/adapters.py#L383\n\n``` python\nfor i in request.body:                                                     \n       low_conn.send(hex(len(i))[2:].encode('utf-8'))\n```\n\nif `i` is a unicode,  the low_conn send utf8 encoding byte string, but the chunk size is wrong.\nI think it should change to:\n\n``` python\nif isinstance(i, unicode):\n  i = i.encode('utf8')\nlow_conn.send(hex(len(i))[2:].encode('utf-8'))\n```\n",
            "author_association": "NONE",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "ilovenwd",
                "id": 32542,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2235/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56139143",
                    "id": 56139143,
                    "created_at": "2014-09-19T06:18:31Z",
                    "updated_at": "2014-09-19T06:18:31Z",
                    "author_association": "MEMBER",
                    "body": "Thanks for raising this!\n\nI don't think we should do that, however. If you've passed us a unicode string we should not be guessing at what text encoding you want to use in the body. I think I'd be happier not accepting unicode at all in this case, rather than guessing that 'UTF-8' is what is meant.\n\nThis is a bit of a thorny issue though, because that reduces our compatibility: we've implicitly allowed it in the past. Maybe force a decode to ASCII instead? (A choice which is almost certain to work.)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56139143/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006919861771166325,
                        "severe_toxicity": 0.00011343410005792975,
                        "obscene": 0.00017024745466187596,
                        "threat": 0.00011970000196015462,
                        "insult": 0.0001731210359139368,
                        "identity_attack": 0.00014100054977461696
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56139152",
                    "id": 56139152,
                    "created_at": "2014-09-19T06:18:42Z",
                    "updated_at": "2014-09-19T06:18:42Z",
                    "author_association": "MEMBER",
                    "body": "@sigmavirus24, can I get your thoughts here?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56139152/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000631274189800024,
                        "severe_toxicity": 0.00012027539924019948,
                        "obscene": 0.00018291255400981754,
                        "threat": 0.00011832638847408816,
                        "insult": 0.0001758528669597581,
                        "identity_attack": 0.000140918287797831
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56177297",
                    "id": 56177297,
                    "created_at": "2014-09-19T13:34:22Z",
                    "updated_at": "2014-09-19T13:34:22Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So while my instinct is to insist the user give us everything as a bytes object (and I don't think it's entirely unreasonable), we actively encourage users to do:\n\n``` python\nrequests.post(url,\n              data=json.dumps({'my': 'json', 'data': 'here'}),\n              headers={'Content-Type': 'application/json'})\n```\n\nIf we don't handle this in requests, at least for some deprecation period, we will be forcing users to do:\n\n``` python\nrequests.post(url,\n              data=json.dumps({'my': 'json', 'data': 'here'}).encode('utf-8'),\n              headers={'Content-Type': 'application/json'})\n```\n\nI'm sure the number of people passing JSON to `data` is not insignificant. I guess I'm in favor of using a Warning and transitioning to forcing this. This use case I outlined will also become obsolete soon because requests will be handling `json.dumps` for users. Which reminds me...\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56177297/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0010749143548309803,
                        "severe_toxicity": 0.00010276005923515186,
                        "obscene": 0.0002075210795737803,
                        "threat": 0.00010841822222573683,
                        "insult": 0.0001779073936631903,
                        "identity_attack": 0.0001376328436890617
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56296656",
                    "id": 56296656,
                    "created_at": "2014-09-21T11:58:16Z",
                    "updated_at": "2014-09-21T12:01:50Z",
                    "author_association": "NONE",
                    "body": "UTF8 is the most reasonable default.\nBesides, python3 string defaults to unicode, many data read from db/http is auto convert to unicode(default utf8).\nso, why not accept utf8 as default unicode encoding?\nThe python standard library ALREADY AUTO convert unicode to utf8 when write to socket.\n(that why the chunk size is wrong, but the chunk body is ok)\n\n@sigmavirus24 this bug only appears when using generator as data (chunked encoding)\npost data=unicode works because \n\n> The python standard library ALREADY AUTO convert unicode to utf8 when write to socket.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56296656/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ilovenwd",
                        "id": 32542,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007707859622314572,
                        "severe_toxicity": 0.00011214819096494466,
                        "obscene": 0.0001797910954337567,
                        "threat": 0.00012205139501020312,
                        "insult": 0.00017822439258452505,
                        "identity_attack": 0.00014450644084718078
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56296906",
                    "id": 56296906,
                    "created_at": "2014-09-21T12:09:33Z",
                    "updated_at": "2014-09-21T12:09:33Z",
                    "author_association": "MEMBER",
                    "body": "> The python standard library ALREADY AUTO convert unicode to utf8 when write to socket. (that why the chunk size is wrong, not the chunk body)\n\nNot in Python 3 it doesn't:\n\n``` python\nPython 3.4.1 (default, Aug 25 2014, 11:56:02) \n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import socket\n>>> s = socket.create_connection(('mkcert.org', 80))\n>>> s.write(\"unicode string\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'str' does not support the buffer interface\n```\n\nIn fact, it doesn't even work in Python 2 on my machine:\n\n``` python\nPython 2.7.8 (default, Aug 25 2014, 11:53:26) \n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import socket\n>>> s = socket.create_connection(('mkcert.org', 80))\n>>> s.send(u\"unicode string with \u00dcB\u0130TAK\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xdc' in position 20: ordinal not in range(128)\n```\n\nThe answer to 'why not accept utf8 as default encoding' is because that mistake is exactly what causes this problem in the first place. There is no 'default encoding', there's only right and wrong. We cannot and should not guess in this regard. It makes no sense to send unicode bytes on a socket.\n\nSometimes, we can guess. JSON has a set of well-defined text encodings, so we can pick one of those. But you could be sending text in _any_ encoding, and we have no way to guess. Getting weird server errors is worse than us blowing up and saying \"you have to give us binary data!\"\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56296906/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008075928781181574,
                        "severe_toxicity": 0.00010993032628903165,
                        "obscene": 0.00019313949451316148,
                        "threat": 0.0001133512778324075,
                        "insult": 0.00017499511886853725,
                        "identity_attack": 0.00013921994832344353
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56299555",
                    "id": 56299555,
                    "created_at": "2014-09-21T14:00:31Z",
                    "updated_at": "2014-09-21T14:00:31Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Getting weird server errors is worse than us blowing up and saying \"you have to give us binary data!\"\n\nYeah I'm surprised we haven't had more bug reports about this frankly. Like I said, I think we should follow a deprecation pattern for this behaviour for 2.5 and 2.6, then make it default in 2.7 (or 3.0).\n- I think we should issue a `DeprecationWarning` when we receive `data` whose type is not `bytes`. We should then immediately try to encode the data for the user.\n- For the case that @ilovenwd is encountering (using a generator) we should issue _1_ deprecation warning after the first chunk and then encode the data for the user.\n- In the case of the user passing a file(-like) object to `data`, we should check the mode to ensure it was opened with `'b'` or is an instance/subclass of `BytesIO`. This case is tougher because some portions of it may be handled by the generator case (i.e., some users don't define `__len__` on `BytesIO` subclasses and so they're treated as generators.).\n\nOnce we have a `json` parameter, we can confidently handle that ourselves, for the user.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56299555/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0018459089333191514,
                        "severe_toxicity": 9.829454938881099e-05,
                        "obscene": 0.0002496008819434792,
                        "threat": 0.00011224330228287727,
                        "insult": 0.00019781342416536063,
                        "identity_attack": 0.00014887993165757507
                    }
                }
            ]
        },
        "241": {
            "html_url": "https://github.com/psf/requests/issues/2233",
            "id": 43191940,
            "number": 2233,
            "title": "Refactoring exception hierarchy",
            "created_at": "2014-09-19T00:00:11Z",
            "updated_at": "2016-01-26T10:17:01Z",
            "closed_at": null,
            "body": "This was mentioned in #2230 as a project for requests 3.0, but it probably should get its own thread.\n\nI wrote a lot of words about what I'd like exception hierarchy to look like, here:\n\nhttps://gist.github.com/kevinburke/b98e053a4bf9835c67bb\n",
            "author_association": "CONTRIBUTOR",
            "comments": 5,
            "state": "open",
            "user": {
                "login": "kevinburke",
                "id": 234019,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2233/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/56139306",
                    "id": 56139306,
                    "created_at": "2014-09-19T06:21:29Z",
                    "updated_at": "2014-09-19T06:21:29Z",
                    "author_association": "MEMBER",
                    "body": "I am in principle a strong +1 on this work. It's most definitely a breaking change, however.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/56139306/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005761560751125216,
                        "severe_toxicity": 0.00013205040886532515,
                        "obscene": 0.00020174089877400547,
                        "threat": 0.0001301548763876781,
                        "insult": 0.00017854059115052223,
                        "identity_attack": 0.00014356084284372628
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/57944576",
                    "id": 57944576,
                    "created_at": "2014-10-05T17:13:03Z",
                    "updated_at": "2014-10-05T17:13:03Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'm starting to collect issues and features for a potential 3.0 release.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/57944576/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005883370176889002,
                        "severe_toxicity": 0.00012647108815144747,
                        "obscene": 0.0001789537345757708,
                        "threat": 0.0001361230097245425,
                        "insult": 0.0001774719712557271,
                        "identity_attack": 0.0001418552710674703
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/174736830",
                    "id": 174736830,
                    "created_at": "2016-01-25T23:59:53Z",
                    "updated_at": "2016-01-25T23:59:53Z",
                    "author_association": "NONE",
                    "body": "Since it seems like a 3.0 release is drawing closer I'm just raising awareness to this issue which seems rather interesting. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/174736830/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jonathan-s",
                        "id": 2124818,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005369922146201134,
                        "severe_toxicity": 0.00013701608986593783,
                        "obscene": 0.00019987621635664254,
                        "threat": 0.00013616819342132658,
                        "insult": 0.00017655749979894608,
                        "identity_attack": 0.00014728042879141867
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/174760620",
                    "id": 174760620,
                    "created_at": "2016-01-26T01:33:36Z",
                    "updated_at": "2016-01-26T01:33:43Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Thanks @jonathan-s. Those of us interested in this were already aware of requests 3.0 drawing close.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/174760620/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005275372532196343,
                        "severe_toxicity": 0.00013388301886152476,
                        "obscene": 0.00018728082068264484,
                        "threat": 0.0001381822512485087,
                        "insult": 0.00017627103079576045,
                        "identity_attack": 0.00014578290574718267
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/174942668",
                    "id": 174942668,
                    "created_at": "2016-01-26T10:17:01Z",
                    "updated_at": "2016-01-26T10:17:01Z",
                    "author_association": "NONE",
                    "body": "Ah, sorry I missed that the 3.0.0 milestone had already been added that's keeping track of the issues for 3.0.0. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/174942668/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jonathan-s",
                        "id": 2124818,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006062782485969365,
                        "severe_toxicity": 0.00012014975800411776,
                        "obscene": 0.00017994304653257132,
                        "threat": 0.00012422619329299778,
                        "insult": 0.0001753602409735322,
                        "identity_attack": 0.000137823008117266
                    }
                }
            ]
        },
        "242": {
            "html_url": "https://github.com/psf/requests/issues/2155",
            "id": 39202386,
            "number": 2155,
            "title": "Streaming gzipped responses",
            "created_at": "2014-07-31T14:55:22Z",
            "updated_at": "2018-09-24T09:33:32Z",
            "closed_at": null,
            "body": "I need to process big XML responses as a stream. The uncompressed responses can be multiple hundred megabytes in size, so loading them entirely into memory before handing them to the XML parser is not an option.\n\nI'm using lxml to parse and I just hand the `response.raw` to its `iterparse()` function, as described somewhere in the requests docs. This works fine for uncompressed responses.\n\nUnfortunately, the API I'm calling isn't particularly good. So it will sometimes return `Content-Encoding: gzip` even if I explicitly ask for uncompressed data. Also, the compression ratio on these extremely repetitive and verbose XML files is really good (10x+), so I'd really like to make use of compressed responses.\n\nIs this possible with requests? I couldn't find it in the documentation. Researching deeper into urllib3, its [HTTPResponse.read()](https://github.com/shazow/urllib3/blob/master/urllib3/response.py#L140) method seems to support a `decode_content` parameter. If not set, urllib3 falls back to what's set in the constructor. When requests calls the constructor in [requests.adapters.HTTPAdapter.send()](https://github.com/kennethreitz/requests/blob/fe693c492242ae532211e0c173324f09ca8cf227/requests/adapters.py#L343), it explicitly sets `decode_content` to False.\n\nIs there a reason why requests does that?\n\nStrangely, `iter_content()` actually sets `decode_content=True` while reading. Why here? It all appears a bit arbitrary. I don't really understand the motivation for doing it one way here and another way there.  \nPersonally, I can't really use `iter_content()` of course because I need a file-like object for lxml.\n\nI previously wrote my own file-like object that I can hook in between requests and lxml, but of course buffering is hard and I feel like smarter people than me have written this before, so I'd prefer to not have to roll my own.\n\nWhat's your advice how to handle this? Should requests be changed to default to setting `decode_content=True` in urllib3?\n",
            "author_association": "NONE",
            "comments": 10,
            "state": "open",
            "user": {
                "login": "hheimbuerger",
                "id": 159414,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2155/reactions",
                "total_count": 2,
                "+1": 2,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50771010",
                    "id": 50771010,
                    "created_at": "2014-07-31T15:01:38Z",
                    "updated_at": "2014-07-31T15:01:38Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "No it should not default to setting that for a wide variety of reasons. What you should do is use `functools.partial` to replace the `read` method on the response (or just wrap it another way) so that you do something like:\n\n``` python\nresponse.raw.read = functools.partial(response.raw.read, decode_content=True)\n```\n\nand then pass `response.raw` to your parser.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50771010/reactions",
                        "total_count": 7,
                        "+1": 6,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007254998781718314,
                        "severe_toxicity": 0.0001143527842941694,
                        "obscene": 0.00018180737970396876,
                        "threat": 0.00012608623364940286,
                        "insult": 0.0001776270364644006,
                        "identity_attack": 0.00013566015695687383
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50885814",
                    "id": 50885814,
                    "created_at": "2014-08-01T13:48:51Z",
                    "updated_at": "2014-08-01T13:48:51Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 Thanks, that's definitely an elegant solution to the problem I outlined above!\n\nI would recommend adding that to requests' documentation, e.g. in the FAQ: http://docs.python-requests.org/en/latest/community/faq/#encoded-data  \nCurrently, the statement \"Requests automatically decompresses gzip-encoded responses\" is not correct for the `stream=True` case and can lead to surprises.\n\nAs for my problem, as you've read on the [urllib3 issue](https://github.com/shazow/urllib3/issues/437), the urllib3 implementation of the gzip decompression has its own little quirks I have to work around in my code, but that is no longer a problem for requests.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50885814/reactions",
                        "total_count": 5,
                        "+1": 4,
                        "-1": 1,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hheimbuerger",
                        "id": 159414,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000602699292358011,
                        "severe_toxicity": 0.00012248616258148104,
                        "obscene": 0.0001818978926166892,
                        "threat": 0.00012472552771214396,
                        "insult": 0.00017172735533677042,
                        "identity_attack": 0.00013934372691437602
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50887575",
                    "id": 50887575,
                    "created_at": "2014-08-01T14:03:50Z",
                    "updated_at": "2014-08-01T14:03:50Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> but that is no longer a problem for requests.\n\nAs in you feel this can be closed?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50887575/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006972834817133844,
                        "severe_toxicity": 0.00011614018876571208,
                        "obscene": 0.0001711795193841681,
                        "threat": 0.00012741111277136952,
                        "insult": 0.0001803253690013662,
                        "identity_attack": 0.0001408499083481729
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50887791",
                    "id": 50887791,
                    "created_at": "2014-08-01T14:05:43Z",
                    "updated_at": "2014-08-01T14:05:43Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 I believe it should be documented, as the current documentation is incorrect.\n\nBut if you disagree with that, yes, close away!\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50887791/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hheimbuerger",
                        "id": 159414,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005876919603906572,
                        "severe_toxicity": 0.0001312640233663842,
                        "obscene": 0.00019457272719591856,
                        "threat": 0.00012863626761827618,
                        "insult": 0.0001820842589950189,
                        "identity_attack": 0.0001477966143283993
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50888322",
                    "id": 50888322,
                    "created_at": "2014-08-01T14:10:15Z",
                    "updated_at": "2014-08-01T14:10:15Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "The documentation could be clearer. To me (and this is entirely because I'm a core developer) the first paragraph speaks to the 90% of users who will never touch the raw response, while the second paragraph contradicts the first in saying \"but if you need to access the raw data, it's there for you\". Like I said, that's apparent to me, but I can see how that could be made clearer. I'll work on that tonight.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50888322/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005239571910351515,
                        "severe_toxicity": 0.00013598238001577556,
                        "obscene": 0.0002013264165725559,
                        "threat": 0.00013439604663290083,
                        "insult": 0.0001784825581125915,
                        "identity_attack": 0.00014443631516769528
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50891684",
                    "id": 50891684,
                    "created_at": "2014-08-01T14:39:40Z",
                    "updated_at": "2014-08-01T14:39:40Z",
                    "author_association": "NONE",
                    "body": "For me, it's more that I would have interpreted \"raw data\" as \"raw payload\", i.e. a decompressed stream. I just have to read it in whatever chunks I need. As opposed to `.content`, which is a decompressed blob (also the payload, but in a different form).\n\nThe actual decompression feels like a concern of the HTTP library to me\u2014an implementation detail of HTTP if you will, one that I would expect requests to abstract away. Whether I read the payload from requests as a stream or as a prefetched blob of data wouldn't make a difference. Either way, requests would abstract the implementation detail 'compression'.\n\n(This assumption was also at the core of my original request to default `decode_content` to `True`. Of course now that I see what a leaky abstraction this is, I'm no longer suggesting that.)\n\nBut yeah, I absolutely agree that 99% of your users will never be affected by this detail.\n\nFeel free to close this issue.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50891684/reactions",
                        "total_count": 2,
                        "+1": 2,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "hheimbuerger",
                        "id": 159414,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006372602074407041,
                        "severe_toxicity": 0.00012083639740012586,
                        "obscene": 0.0001925140095409006,
                        "threat": 0.00011943423305638134,
                        "insult": 0.00017164109158329666,
                        "identity_attack": 0.00013788137584924698
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/50893660",
                    "id": 50893660,
                    "created_at": "2014-08-01T14:56:06Z",
                    "updated_at": "2014-08-01T14:56:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So this actually leads to something that's been rattling around in my head for a while and which I haven't proposed yet because it would be a significant API change.\n\nI don't like the fact that we suggest people use `r.raw` because it's an object which we don't document and it's an object provided by `urllib3` (which we've claimed in the past is more of an implementation detail). With that in mind, I've been toying with the idea of providing methods on a `Response` object which just proxy to the `urllib3` methods (`read` would just proxy to `raw.read`, etc.). This gives us extra flexibility around `urllib3` and allows us to handle (on behalf of the users) an API change in `urllib3` (which historically has almost never been a problem, so there isn't any urgency in that).\n\nWith that said, we already have enough methods on a Response object in my opinion and growing our API isn't ideal. The best API is the API from which there's nothing left to remove. So I'm continuously on the fence about this.\n\n---\n\n> This assumption was also at the core of my original request to default decode_content to True. Of course now that I see what a leaky abstraction this is, I'm no longer suggesting that.\n\nFor others who find this and may not be certain why this is true, allow me to explain.\n\nThere are several users of requests who turn off automatic decompression to validate the length of a response, or to do other important things with it. One consumer of the former kind is OpenStack. Many of the OpenStack clients validate the `Content-Length` header sent to the client and the actual length of the body received. To them, handling decompression is a fair trade-off to be certain they're receiving and handling a valid response.\n\nAnother consumer is Betamax (or really any tool that (re)constructs Response objects) because when it is handling the full process of making a totally valid response, it needs the content to be in the compressed format.\n\nI'm sure there are others that neither @Lukasa or I know about that also rely heavily on this behaviour.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/50893660/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008550935890525579,
                        "severe_toxicity": 0.00011282975901849568,
                        "obscene": 0.00020795167074538767,
                        "threat": 0.00011533256474649534,
                        "insult": 0.00017401904915459454,
                        "identity_attack": 0.00013989381841383874
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/67687973",
                    "id": 67687973,
                    "created_at": "2014-12-19T19:50:51Z",
                    "updated_at": "2014-12-19T19:50:51Z",
                    "author_association": "NONE",
                    "body": "Hit the same issue today, and ended up making the same assumption as there is no other way to stream responses at the moment.\n\nRather than multiple new methods on Response why not a single new attribute e.g. `response.stream` which would play the same role of proxy to `.raw`? It would also nicely mirror the `stream=True` setting/parameter, and would not affect users needing the current `.raw` behavior.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/67687973/reactions",
                        "total_count": 11,
                        "+1": 10,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 1,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "masklinn",
                        "id": 6993,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007554020849056542,
                        "severe_toxicity": 0.000113521637103986,
                        "obscene": 0.00019426557992119342,
                        "threat": 0.00011451438331278041,
                        "insult": 0.00017462873074691743,
                        "identity_attack": 0.0001337522262474522
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/287628933",
                    "id": 287628933,
                    "created_at": "2017-03-19T16:36:26Z",
                    "updated_at": "2017-03-19T16:36:26Z",
                    "author_association": "NONE",
                    "body": "I've done this in the past\r\n\r\n```python\r\nr = requests.get('url', stream=True)\r\nr.raw.decode_content = True\r\n...\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/287628933/reactions",
                        "total_count": 16,
                        "+1": 16,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "reubano",
                        "id": 157864,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007068753475323319,
                        "severe_toxicity": 0.00011347022518748417,
                        "obscene": 0.00018757050565909594,
                        "threat": 0.00011802426161011681,
                        "insult": 0.00017343660874757916,
                        "identity_attack": 0.00013252560165710747
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/423920384",
                    "id": 423920384,
                    "created_at": "2018-09-24T09:33:08Z",
                    "updated_at": "2018-09-24T09:33:32Z",
                    "author_association": "NONE",
                    "body": "Note that the [workaround](https://github.com/requests/requests/issues/2155#issuecomment-50771010) by @sigmavirus24 breaks the semantics of the `tell` method, which will return incorrect offsets.\r\n\r\nI ran into this when streaming a response as a resumable upload into the Google Cloud Storage API, which uses `tell()` to figure out the number of bytes that were just read ([here](https://github.com/GoogleCloudPlatform/google-resumable-media-python/blob/50f4c4d22cdaea71c794639226e819197f11f555/google/resumable_media/_upload.py#L804)).",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/423920384/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ttencate",
                        "id": 90930,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006596884923055768,
                        "severe_toxicity": 0.00011808877752628177,
                        "obscene": 0.00018952558457385749,
                        "threat": 0.00011777682084357366,
                        "insult": 0.00017436218331567943,
                        "identity_attack": 0.0001381975453114137
                    }
                }
            ]
        },
        "243": {
            "html_url": "https://github.com/psf/requests/issues/2109",
            "id": 36326374,
            "number": 2109,
            "title": "[idea] Change how we merge request and session settings",
            "created_at": "2014-06-23T20:09:09Z",
            "updated_at": "2014-10-05T17:15:42Z",
            "closed_at": null,
            "body": "# Problem\n\nCurrently, tools (e.g., [openstack/python-swiftclient](https://github.com/openstack/python-swiftclient/blob/3d0de79e26e2aa6285742c60aca3c164e9c2fbb9/swiftclient/client.py#L942..L945)) fight how requests sets the `Content-Type` header for a request. Notice that if the user of swiftclient doesn't provide their own `content_type` then the library sets the header's value to `''`. Ideally, setting `None` in a situation like this (where the Session has no default `Content-Type`) would prevent the request preparation from setting its own `Content-Type` header. This doesn't work because the per-session and per-request settings are [merged at the session level](https://github.com/kennethreitz/requests/blob/master/requests/sessions.py#L361).\n# Potential solutions\n## Split the responsibility of merging settings\n\nThe merge at the session level could just take care of ensuring that the per-request settings have priority while waiting for the request preparation to remove `None`s. The downside of this behaviour is that it breaks backwards compatibility. Why? Consider the following:\n\n``` python\nimport requests\n\ns = requests.Session()\ns.headers['Content-Type'] = 'application/json'\ns.post(url, data={'some': 'formdata'}, headers={'Content-Type': None})\n```\n\nThis allows for requests to detect that it is in fact `application/x-www-form-urlencoded` by removing the default set by the session. Keeping backwards compatibility would mean that we would have to do extra work while merging settings on the session-level. We would have to check if the header was set on the session level, and then we would delete headers with value `None`, otherwise, persist the `None` value. This is clearly a lot of extra logic.\n## Create a constant/singleton to mean \"Do not autogenerate any of this for me\"\n\nWe could potentially expose a new constant or singleton in requests to allow users to specify when they want to prevent requests from handling it for them. I dislike this idea a lot, but it's potentially easier to implement and a bit more explicit than overloading the already overloaded meaning of `None` in this context.\n",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "sigmavirus24",
                "id": 240830,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2109/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "244": {
            "html_url": "https://github.com/psf/requests/issues/2086",
            "id": 35202262,
            "number": 2086,
            "title": "Remove ISO-8859-1 charset fallback",
            "created_at": "2014-06-07T06:54:12Z",
            "updated_at": "2018-02-07T16:04:07Z",
            "closed_at": null,
            "body": "For a long time we've had a fallback value in `response.encoding` of `ISO-8859-1`, because RFC 2616 told us to. RFC 2616 is now obsolete, replaced by RFCs 7230, 7231, 7232, 7233, 7234, and 7235. The authoritative RFC on this issue is RFC 7231, which has this to say:\n\n> The default charset of ISO-8859-1 for text media types has been removed; the default is now whatever the media type definition says.\n\nThe media type definitions for `text/*` are most recently affected by RFC 6657, which has this to say:\n\n> In accordance with option (a) above, registrations for \"text/*\" media types that can transport charset information inside the corresponding payloads (such as \"text/html\" and \"text/xml\") SHOULD NOT specify the use of a \"charset\" parameter, nor any default value, in order to avoid conflicting interpretations should the \"charset\" parameter value and the value specified in the payload disagree.\n\nI checked the registration for `text/html` [here](https://www.iana.org/assignments/media-types/media-types.xhtml#text). Unsurprisingly, it provides no default values. It does allow a charset parameter which overrides anything in the content itself.\n\nI propose the following changes:\n1. Remove the ISO-8859-1 fallback, as it's no longer valid (being only enforced by RFC 2616). We should _definitely_ do this.\n2. Consider writing a module that has the appropriate fallback encodings for other `text/*` content and use them where appropriate. This isn't vital, just is a \"might be nice\".\n3. Begin checking HTML content for meta tags again, in order to appropriately fall back. This is controversial, and we'll want @kennethreitz to consider it carefully.\n",
            "author_association": "MEMBER",
            "comments": 37,
            "state": "open",
            "user": {
                "login": "Lukasa",
                "id": 1382556,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2086/reactions",
                "total_count": 5,
                "+1": 5,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45438713",
                    "id": 45438713,
                    "created_at": "2014-06-08T14:56:11Z",
                    "updated_at": "2014-06-08T14:58:31Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Remove the ISO-8859-1 fallback, as it's no longer valid (being only enforced by RFC 2616). We should definitely do this.\n\nI agree that we should remove the fallback. I do wonder how we should handle `Response#text` in the event that the server does not specify a charset (in anyway, including the meta tags of the body). Should we disable `Response#text` conditionally either through an exception or something else? Not doing so will rely more heavily on chardet, which I have decreasing confidence in given the number of new encodings it does not detect.\n\n> Consider writing a module that has the appropriate fallback encodings for other text/\\* content and use them where appropriate. This isn't vital, just is a \"might be nice\".\n\nGiven that this is not guaranteed to be included in requests, I'm fine with adding it to the toolbelt, that said. I'm also okay with making this a separate package so users can just use that with out having to install the rest of the toolbelt. That, however, is a separate discussion.\n\n> Begin checking HTML content for meta tags again, in order to appropriately fall back. This is controversial, and we'll want @kennethreitz to consider it carefully.\n\nWe still have a method to do this in `utils`, right? I don't like the idea in the slightest, but it won't cost extra effort. That said, we have to make sure any charset provided in the media type takes precedence.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45438713/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006124562351033092,
                        "severe_toxicity": 0.00012383164721541107,
                        "obscene": 0.0001854717411333695,
                        "threat": 0.00012631368008442223,
                        "insult": 0.00017133989604189992,
                        "identity_attack": 0.00014293538697529584
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45440773",
                    "id": 45440773,
                    "created_at": "2014-06-08T16:09:16Z",
                    "updated_at": "2014-06-08T16:09:16Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Upon reading more int RFC 7231, specifically [Section 3.1.1.5](https://tools.ietf.org/html/rfc7231#section-3.1.1.5) I think the third option should ideally be opt-in, not opt-out. My specific reasoning for this is:\n\n> Clients that do so _[examine a payload's content]_  risk drawing incorrect conclusions, which might expose additional security risks (e.g., \"privilege escalation\").\n\nTaken from the same section I linked above.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45440773/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000575645302888006,
                        "severe_toxicity": 0.00012579777103383094,
                        "obscene": 0.00019198827794753015,
                        "threat": 0.00012145870277890936,
                        "insult": 0.00017469302110839635,
                        "identity_attack": 0.00014196053962223232
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45440987",
                    "id": 45440987,
                    "created_at": "2014-06-08T16:18:06Z",
                    "updated_at": "2014-06-08T16:18:06Z",
                    "author_association": "MEMBER",
                    "body": "Agreed from a correctness perspective, but I wonder if @kennethreitz is going to want it from a usability perspective.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45440987/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005501253181137145,
                        "severe_toxicity": 0.00013476962340064347,
                        "obscene": 0.00019299903942737728,
                        "threat": 0.00013692806533072144,
                        "insult": 0.00018023702432401478,
                        "identity_attack": 0.00014798373740632087
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45441361",
                    "id": 45441361,
                    "created_at": "2014-06-08T16:34:57Z",
                    "updated_at": "2014-06-08T16:34:57Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I wonder how easy it would be to prop up a simple app to demonstrate the security risks involved to give a concrete example why not to do it.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45441361/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005958796828053892,
                        "severe_toxicity": 0.0001241260179085657,
                        "obscene": 0.00017222635506186634,
                        "threat": 0.00013275578385218978,
                        "insult": 0.0001757660211296752,
                        "identity_attack": 0.00014464760897681117
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45887423",
                    "id": 45887423,
                    "created_at": "2014-06-12T12:56:18Z",
                    "updated_at": "2014-06-12T12:56:18Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "If only `1.)` is going to be implemented, i guess `r.encoding = None` and requests will use chardet?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45887423/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "untitaker",
                        "id": 837573,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006434991373680532,
                        "severe_toxicity": 0.00011769879347411916,
                        "obscene": 0.0001803296763682738,
                        "threat": 0.00012402852007653564,
                        "insult": 0.00017754729196894914,
                        "identity_attack": 0.00013605449930764735
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45889162",
                    "id": 45889162,
                    "created_at": "2014-06-12T13:13:56Z",
                    "updated_at": "2014-06-12T13:13:56Z",
                    "author_association": "MEMBER",
                    "body": "Correct. =)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45889162/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007447553798556328,
                        "severe_toxicity": 0.00011156666005263105,
                        "obscene": 0.00018433247169014066,
                        "threat": 0.00011502021516207606,
                        "insult": 0.0001786587672540918,
                        "identity_attack": 0.00013420855975709856
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/45892369",
                    "id": 45892369,
                    "created_at": "2014-06-12T13:41:25Z",
                    "updated_at": "2014-06-12T13:41:25Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "That's how it works now, so I don't think we'd change that.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/45892369/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006584623479284346,
                        "severe_toxicity": 0.00012214826710987836,
                        "obscene": 0.0001899163326015696,
                        "threat": 0.0001249477791134268,
                        "insult": 0.0001781693281373009,
                        "identity_attack": 0.00013997255882713944
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/46131317",
                    "id": 46131317,
                    "created_at": "2014-06-15T23:23:44Z",
                    "updated_at": "2014-06-15T23:23:44Z",
                    "author_association": "NONE",
                    "body": "> I wonder how easy it would be to prop up a simple app to demonstrate the security risks involved to give a concrete example why not to do it.\n\nLook up all the UTF-7 XSS attacks. (None work in any current browser, as everyone simply dropped UTF-7 sniffing \u2014 and most UTF-7 support entirely \u2014 to avoid making sites thus vulnerable.)\n\nIn a very real sense, using chardet is _worse_ than option three above \u2014 it will make different conclusions to what any implementation following a specification defining how to sniff the content would (and both HTML and XML provide such a specification). The only safe thing to do is if you don't know how to determine the charset is to not try. You can probably support the vast majority of users by implementing the (standardised) HTML and XML character encoding detection algorithms.\n\n> I checked the registration for text/html here. Unsurprisingly, it provides no default values. It does allow a charset parameter which overrides anything in the content itself.\n\nHmm, the registration (which is included inline in the HTML spec) contradicts the HTML spec itself \u2014 per the HTML spec, UTF-8/UTF-16 BOMs are given precedence over the MIME type. I've filed [bug 26100](https://www.w3.org/Bugs/Public/show_bug.cgi?id=26100) for that.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/46131317/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006287912256084383,
                        "severe_toxicity": 0.00012173965660622343,
                        "obscene": 0.0001834764116210863,
                        "threat": 0.00012392259668558836,
                        "insult": 0.00017143056902568787,
                        "identity_attack": 0.00014251499669626355
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/48657986",
                    "id": 48657986,
                    "created_at": "2014-07-10T20:15:11Z",
                    "updated_at": "2014-07-10T20:15:11Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hmmm....\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/48657986/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0017290563555434346,
                        "severe_toxicity": 9.385484736412764e-05,
                        "obscene": 0.00021742124226875603,
                        "threat": 0.00010375878628110513,
                        "insult": 0.0001950540317920968,
                        "identity_attack": 0.0001452639262424782
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/54065536",
                    "id": 54065536,
                    "created_at": "2014-09-01T14:25:28Z",
                    "updated_at": "2014-09-01T14:25:35Z",
                    "author_association": "NONE",
                    "body": "http://html5.org/tools/web-apps-tracker?from=8723&to=8724 fixes the IANA registration in the HTML spec to match the body of it. It now reads:\n\n> The charset parameter may be provided to specify the document's character encoding, overriding any character encoding declarations in the document other than a Byte Order Mark (BOM). The parameter's value must be one of the labels of the character encoding used to serialise the file. [ENCODING]\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/54065536/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005753753939643502,
                        "severe_toxicity": 0.00012432027142494917,
                        "obscene": 0.00018294132314622402,
                        "threat": 0.00012296772911213338,
                        "insult": 0.00017519779794383794,
                        "identity_attack": 0.00014101291890256107
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/76007287",
                    "id": 76007287,
                    "created_at": "2015-02-25T17:17:19Z",
                    "updated_at": "2015-02-25T17:17:49Z",
                    "author_association": "NONE",
                    "body": "Hello,\n\nI just got hit by this reading XML files which were encoded as UTF8. On OSX the content type was being returned as 'application/xml' but on linux it was set to 'text/xml' therefore the requests lib assumed its default encoding of 'ISO-8859-1' as 'text' was in the content. Most XML files will be encoded in UTF8 so setting the encoding as 'ISO-8859-1' for 'text/xml' content is surely wrong as discussed.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/76007287/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "erowan",
                        "id": 400114,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005970433703623712,
                        "severe_toxicity": 0.0001267580664716661,
                        "obscene": 0.00019438898016232997,
                        "threat": 0.00012237910414114594,
                        "insult": 0.00017766820383258164,
                        "identity_attack": 0.00014244706835597754
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77347475",
                    "id": 77347475,
                    "created_at": "2015-03-05T11:19:23Z",
                    "updated_at": "2015-03-05T11:19:23Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Just because an RFC specifies something, doesn't mean we should do it. Especially if it makes the code crazy.\n\nI believe that our current behavior is elegant and actually works quite effectively. Is this not the case?\n\nAs always, what does Chrome do?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77347475/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006482280441559851,
                        "severe_toxicity": 0.00011960700794588774,
                        "obscene": 0.00017398038471583277,
                        "threat": 0.00012769000022672117,
                        "insult": 0.00017539870168548077,
                        "identity_attack": 0.00014244108751881868
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77349267",
                    "id": 77349267,
                    "created_at": "2015-03-05T11:34:15Z",
                    "updated_at": "2015-03-05T11:34:15Z",
                    "author_association": "MEMBER",
                    "body": "Chrome introspects the HTML, a position we've always decided we don't want to do. We could optionally add support for hooks to do content-type specific encoding heuristics if we wanted. We already kinda do that for JSON, it might not hurt to do it more generally for other content types.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77349267/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005865553976036608,
                        "severe_toxicity": 0.00012450404756236821,
                        "obscene": 0.00018379316315986216,
                        "threat": 0.00012878379493486136,
                        "insult": 0.000172953397850506,
                        "identity_attack": 0.00014201538579072803
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77556798",
                    "id": 77556798,
                    "created_at": "2015-03-06T13:16:45Z",
                    "updated_at": "2015-03-06T13:16:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Grumble. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77556798/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.017082970589399338,
                        "severe_toxicity": 0.00016259649419225752,
                        "obscene": 0.0013770543737336993,
                        "threat": 0.00014854315668344498,
                        "insult": 0.0005950828199274838,
                        "identity_attack": 0.00021824495343025774
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77565791",
                    "id": 77565791,
                    "created_at": "2015-03-06T14:23:16Z",
                    "updated_at": "2015-03-06T14:23:16Z",
                    "author_association": "NONE",
                    "body": "Note the HTML case is even worse than that, really. Because the pre-scan in browsers just looks at the first 1024 bytes or there abouts, and the parser itself can then change it.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77565791/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006997804739512503,
                        "severe_toxicity": 0.0001143371919170022,
                        "obscene": 0.00017645617481321096,
                        "threat": 0.0001157368824351579,
                        "insult": 0.00017664354527369142,
                        "identity_attack": 0.00013943942030891776
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77785456",
                    "id": 77785456,
                    "created_at": "2015-03-09T00:45:55Z",
                    "updated_at": "2015-03-09T00:45:55Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I still feel like our current behavior is a great implementation. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77785456/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005737749161198735,
                        "severe_toxicity": 0.00013084837701171637,
                        "obscene": 0.00018853589426726103,
                        "threat": 0.0001342350587947294,
                        "insult": 0.00017606609617359936,
                        "identity_attack": 0.00014294371067080647
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/77821444",
                    "id": 77821444,
                    "created_at": "2015-03-09T09:20:23Z",
                    "updated_at": "2015-03-09T09:20:23Z",
                    "author_association": "MEMBER",
                    "body": "Ok. =)\n\nHow about I knock up a proposal for smarter encoding heuristics, that takes certain known content-types and attempts to gently introspect them for their encodings. At least then we'll have something concrete to discuss.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/77821444/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007446872186847031,
                        "severe_toxicity": 0.00011261177132837474,
                        "obscene": 0.00017027750436682254,
                        "threat": 0.00012378535757306963,
                        "insult": 0.00018049671780318022,
                        "identity_attack": 0.00014193048991728574
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/159119676",
                    "id": 159119676,
                    "created_at": "2015-11-24T01:13:02Z",
                    "updated_at": "2015-11-24T01:13:18Z",
                    "author_association": "NONE",
                    "body": "@Lukasa  @kennethreitz \nHey guys, for the time being, I don't think we have a obvious solution yet, but can we at least make this `ISO-8859-1` optional? \n\n```\n    if 'text' in content_type:\n        return 'ISO-8859-1'\n```\n\nThis looks way too brutal. Some parameters like `Session(auto_encoding=False)` would be nice. What do you guys think?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/159119676/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "est",
                        "id": 23570,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000590805837418884,
                        "severe_toxicity": 0.0001259470882359892,
                        "obscene": 0.00018977494619321078,
                        "threat": 0.000126102109788917,
                        "insult": 0.0001747115165926516,
                        "identity_attack": 0.00014146084140520543
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/159189806",
                    "id": 159189806,
                    "created_at": "2015-11-24T08:03:31Z",
                    "updated_at": "2015-11-24T08:03:31Z",
                    "author_association": "MEMBER",
                    "body": "@est ISO-8859-1 _is_ optional, you can simply set `response.encoding` yourself. It's a one-line change. =)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/159189806/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007520111976191401,
                        "severe_toxicity": 0.00010918003681581467,
                        "obscene": 0.00017945162835530937,
                        "threat": 0.00011615004041232169,
                        "insult": 0.00018050652579404414,
                        "identity_attack": 0.00013251599739305675
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164829260",
                    "id": 164829260,
                    "created_at": "2015-12-15T17:07:37Z",
                    "updated_at": "2015-12-15T17:07:52Z",
                    "author_association": "NONE",
                    "body": "@Lukasa But you can't determine whether the initial `response.encoding` came from the `Content-Type` header or whether it's the `ISO-8859-1` fallback, which means if you want to avoid the fallback you have to start parsing the `Content-Type` header yourself, and that's quite a lot of extra complexity all of a sudden.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164829260/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006233440362848341,
                        "severe_toxicity": 0.00011998626723652706,
                        "obscene": 0.00018139404710382223,
                        "threat": 0.00012211845023557544,
                        "insult": 0.00017749126709531993,
                        "identity_attack": 0.00013857599697075784
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164829905",
                    "id": 164829905,
                    "created_at": "2015-12-15T17:10:11Z",
                    "updated_at": "2015-12-15T17:10:11Z",
                    "author_association": "MEMBER",
                    "body": "@gsnedders Sure you can. `if 'charset' in response.headers['Content-Type']`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164829905/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006765787838958204,
                        "severe_toxicity": 0.00011502525012474507,
                        "obscene": 0.00018299123621545732,
                        "threat": 0.00011687698861351237,
                        "insult": 0.00017675693379715085,
                        "identity_attack": 0.00013233655772637576
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164831618",
                    "id": 164831618,
                    "created_at": "2015-12-15T17:16:58Z",
                    "updated_at": "2015-12-15T17:16:58Z",
                    "author_association": "NONE",
                    "body": "While yes, that works under the assumption the other party is doing something sane, it doesn't work in the face of madness and something like `text/html; foo=charset`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164831618/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001640636706724763,
                        "severe_toxicity": 9.407912148162723e-05,
                        "obscene": 0.00018808683671522886,
                        "threat": 0.00011428552534198388,
                        "insult": 0.00020553593640215695,
                        "identity_attack": 0.00015753282059449703
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164832662",
                    "id": 164832662,
                    "created_at": "2015-12-15T17:21:18Z",
                    "updated_at": "2015-12-15T17:21:18Z",
                    "author_association": "MEMBER",
                    "body": "@gsnedders Try `if 'charset=' in response.headers['Content-Type']`. At this point we're out of 'crazy' and into 'invalid formatting'.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164832662/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.004244689829647541,
                        "severe_toxicity": 9.366359881823882e-05,
                        "obscene": 0.0003279893135186285,
                        "threat": 0.0001215257725561969,
                        "insult": 0.00029100110987201333,
                        "identity_attack": 0.00016811472596600652
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164835667",
                    "id": 164835667,
                    "created_at": "2015-12-15T17:32:28Z",
                    "updated_at": "2015-12-15T17:32:28Z",
                    "author_association": "NONE",
                    "body": "@Lukasa uh, I thought there was whitespace (or rather what 2616 had as implicit *LWS) allowed around the equals, apparently not.\n\nThe grammar appears to be:\n\n```\n     media-type = type \"/\" subtype *( OWS \";\" OWS parameter )\n     type       = token\n     subtype    = token\n\n   The type/subtype MAY be followed by parameters in the form of\n   name=value pairs.\n\n     parameter      = token \"=\" ( token / quoted-string )\n```\n\nSo I guess the only issue here is something like `text/html; foo=\"charset=bar\"`.\n\nFWIW, html5lib's API changes are going to make the correct behaviour with requests require something like:\n\n``` python\nr = requests.get('https://api.github.com/events')\ne = response.encoding if 'charset=' in response.headers['Content-Type'] else None\ntree = html5lib.parse(r.content, transport_encoding=e)\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164835667/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007575285853818059,
                        "severe_toxicity": 0.00011110823106719181,
                        "obscene": 0.0001905413664644584,
                        "threat": 0.00011235178681090474,
                        "insult": 0.00017521149129606783,
                        "identity_attack": 0.00013504478556569666
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/164838185",
                    "id": 164838185,
                    "created_at": "2015-12-15T17:43:10Z",
                    "updated_at": "2015-12-15T17:43:10Z",
                    "author_association": "MEMBER",
                    "body": "That seems reasonable. =)\n\nFWIW, in requests 3.0.0 we'll reconsider this, or at least consider adding some way of working out what decision we made.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/164838185/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00055788888130337,
                        "severe_toxicity": 0.0001306197518715635,
                        "obscene": 0.00019430577231105417,
                        "threat": 0.0001319092116318643,
                        "insult": 0.00017745757941156626,
                        "identity_attack": 0.0001432650606147945
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/170237579",
                    "id": 170237579,
                    "created_at": "2016-01-09T12:52:06Z",
                    "updated_at": "2016-01-09T12:52:06Z",
                    "author_association": "NONE",
                    "body": "Interesting discussion.\n\n> I still feel like our current behavior is a great implementation.\n\nIf I may, a counterexample. I use requests to extract the `<title>` from a requested document, and here is facebook.com.\n\n``` python\n>>> import requests\n>>> r = requests.get(\"https://www.facebook.com/mathiassundin/posts/10153748227675479\")\n>>> r.encoding\n'ISO-8859-1'\n>>> import re\n>>> m = re.search('<title[^>]*>\\s*(.+?)\\s*<\\/title>', r.text, re.IGNORECASE|re.MULTILINE)\n>>> m.group(1)\nu'Mathias Sundin - M\\xc3\\xa5nga roliga samtal mellan Tony Blair och... | Facebook'\n>>> r.headers['Content-Type']\n'text/html'\n```\n\nApparently they don't specify the encoding in their headers. But they do in the HTML (`<meta charset=\"utf-8\" />`, full example at https://gist.github.com/dentarg/f13ef7cc0ce55753faf6).\n\nAs mentioned in #2161, \"requests aren't a HTML library\", and I can understand that point of view. Perhaps I should be looking into parsing the HTML with some library that also can take the specified encoding into consideration.\n\nThank you for your work on requests. I'm looking forward to 3.0.0.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/170237579/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dentarg",
                        "id": 42626,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006458591087721288,
                        "severe_toxicity": 0.00011911827459698543,
                        "obscene": 0.00018706361879594624,
                        "threat": 0.00012483893078751862,
                        "insult": 0.0001719216670608148,
                        "identity_attack": 0.00013706836034543812
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/170244645",
                    "id": 170244645,
                    "created_at": "2016-01-09T14:50:11Z",
                    "updated_at": "2016-01-09T14:50:11Z",
                    "author_association": "MEMBER",
                    "body": "@dentarg That's not really a counter example: it's an example of why this system works.\n\nThe guidance from the IETF is that for all text/\\* encodings, one of the following things MUST be true:\n- the peer MUST send a `charset` in the content-type\n- the content MUST carry an encoding specifier in it (HTML, XML)\n\nRequests' default behaviour here works well: in the case of XML and HTML, ISO-8859-1 is guaranteed to safely decode the text well enough to let you see the `<meta>` tag. Anyone working with HTML really should go looking for that tag, because servers almost never correctly advertise the content type of the HTML they deliver, but the HTML itself is usually (though sadly not always) right. \n\nThe behaviour requests has right now is probably less prone to failure with HTML than the one proposed for 3.0.0, and part of me does wonder if we should try to solve this more by documentation than by code change.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/170244645/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006740681128576398,
                        "severe_toxicity": 0.00011683062621159479,
                        "obscene": 0.0001786332140909508,
                        "threat": 0.00012426599278114736,
                        "insult": 0.0001741289161145687,
                        "identity_attack": 0.00014075713988859206
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/170251057",
                    "id": 170251057,
                    "created_at": "2016-01-09T15:16:18Z",
                    "updated_at": "2016-01-09T15:16:18Z",
                    "author_association": "NONE",
                    "body": "Yes, perhaps documentation is the way forward.\n\nI can share my experience. I'm a very new user of requests, and I haven't looked at all the documentation for requests, but I have looked some. The [requests website](http://docs.python-requests.org/en/latest/) have this in the code snippet on the front page:\n\n``` python\n>>> r.encoding\n'utf-8'\n```\n\nThat information, combined with me somehow (maybe from browsing issues here on GitHub) finding out that requests uses chardet, gave me the impression that requests would solve the charset/encoding problem for me \"all the way\".\n\nOnce I found the [right documentation](http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html#Beautiful%20Soup%20Gives%20You%20Unicode,%20Dammit), it was straightforward to workaround the limitations with another library. I can fully understand that requests just want to be the HTTP parser, not the HTML parser.\n\nAll that said, let me share some short examples where I think the ISO-8859-1 fallback might cause some unexpected behavior.\n\n``` python\n>>> import requests\n>>> r = requests.get(\"https://www.facebook.com/mathiassundin/posts/10153748227675479\")\n>>> from bs4 import BeautifulSoup\n```\n\nYou can't use `r.text`:\n\n``` python\n>>> print BeautifulSoup(r.text, \"html5lib\", from_encoding=\"\").title.text\nMathias Sundin - M\u00c3\u00a5nga roliga samtal mellan Tony Blair och... | Facebook\n```\n\n``` python\n>>> print BeautifulSoup(r.text, \"html5lib\", from_encoding=r.encoding).title.text\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/site-packages/bs4/__init__.py\", line 215, in __init__\n    self._feed()\n  File \"/usr/local/lib/python2.7/site-packages/bs4/__init__.py\", line 239, in _feed\n    self.builder.feed(self.markup)\n  File \"/usr/local/lib/python2.7/site-packages/bs4/builder/_html5lib.py\", line 50, in feed\n    doc = parser.parse(markup, encoding=self.user_specified_encoding)\n  File \"/usr/local/lib/python2.7/site-packages/html5lib/html5parser.py\", line 236, in parse\n    parseMeta=parseMeta, useChardet=useChardet)\n  File \"/usr/local/lib/python2.7/site-packages/html5lib/html5parser.py\", line 89, in _parse\n    parser=self, **kwargs)\n  File \"/usr/local/lib/python2.7/site-packages/html5lib/tokenizer.py\", line 40, in __init__\n    self.stream = HTMLInputStream(stream, encoding, parseMeta, useChardet)\n  File \"/usr/local/lib/python2.7/site-packages/html5lib/inputstream.py\", line 144, in HTMLInputStream\n    raise TypeError(\"Cannot explicitly set an encoding with a unicode string\")\nTypeError: Cannot explicitly set an encoding with a unicode string\n```\n\nYou need to use `r.content`, but if requests have fallen back to ISO-8859-1, `r.encoding` will cause trouble:\n\n``` python\n>>> print BeautifulSoup(r.content, \"html5lib\", from_encoding=r.encoding).title.text\nMathias Sundin - M\u00c3\u00a5nga roliga samtal mellan Tony Blair och... | Facebook\n```\n\nWorking as intended:\n\n``` python\n>>> print BeautifulSoup(r.content, \"html5lib\", from_encoding=\"\").title.text\nMathias Sundin - M\u00e5nga roliga samtal mellan Tony Blair och... | Facebook\n```\n\n``` python\n>>> print BeautifulSoup(r.content, \"html5lib\", from_encoding=\"utf-8\").title.text\nMathias Sundin - M\u00e5nga roliga samtal mellan Tony Blair och... | Facebook\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/170251057/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dentarg",
                        "id": 42626,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007820756291039288,
                        "severe_toxicity": 0.00011035159695893526,
                        "obscene": 0.00019689231703523546,
                        "threat": 0.00011061233817599714,
                        "insult": 0.00016978431085590273,
                        "identity_attack": 0.0001331853709416464
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/170257475",
                    "id": 170257475,
                    "created_at": "2016-01-09T16:22:31Z",
                    "updated_at": "2016-01-09T16:22:31Z",
                    "author_association": "MEMBER",
                    "body": "So here we hit a problem, which is that we can't really document the way Requests interacts with every possible tool you may want to use it with: there are just too many possibilities! So instead we try to provide general documentation.\n\nThe best advice I can give is that the more specific the tool, the more likely it can handle bytes as an input and DTRT with them. BeautifulSoup is a HTML tool and so can almost certainly take a stream of arbitrary bytes and find the relevant `meta` tag (and indeed, it can), so you can just pass it `r.content`. The same would be true if you were passing it to an XML library, or to a JSON library, or to anything else like that.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/170257475/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006762706907466054,
                        "severe_toxicity": 0.0001170253090094775,
                        "obscene": 0.00017906841821968555,
                        "threat": 0.00012137059820815921,
                        "insult": 0.00017342122737318277,
                        "identity_attack": 0.00013855115685146302
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/202769182",
                    "id": 202769182,
                    "created_at": "2016-03-29T08:03:08Z",
                    "updated_at": "2016-03-29T08:03:16Z",
                    "author_association": "NONE",
                    "body": "> Requests' default behaviour here works well: in the case of XML and HTML, ISO-8859-1 is guaranteed to safely decode the text well enough to let you see the `<meta>` tag. \n\nSadly, that isn't true, because of UTF-16. In both cases, they should be able to handle BOMs. Furthermore, a conforming XML parser should be able to handle a UTF-16 encoded `<?xml version=\"1.0\" encoding=\"UTF-16\">` with no preceding BOM.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/202769182/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "gsnedders",
                        "id": 176218,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005885703722015023,
                        "severe_toxicity": 0.0001229837944265455,
                        "obscene": 0.0001817238371586427,
                        "threat": 0.0001250214409083128,
                        "insult": 0.0001728623901726678,
                        "identity_attack": 0.00014147433103062212
                    }
                }
            ]
        },
        "245": {
            "html_url": "https://github.com/psf/requests/issues/2061",
            "id": 34191133,
            "number": 2061,
            "title": "Making https proxies easier to deal with",
            "created_at": "2014-05-23T16:35:02Z",
            "updated_at": "2021-02-28T04:03:09Z",
            "closed_at": null,
            "body": "I'm trying to add support for proxies to conda, in particular, automatically prompting for a username and password on a 407. For http proxies, it's all fine. I can detect the 407 error code on `HTTPError` from `raise_for_status` and inject `HTTPProxyAuth` and try again.\n\nBut for https, it raises `ConnectionError` on `get`. Adding `HTTPProxyAuth` does not work. I have to parse the URL and add it in as `https://username:password@proxy:port`. `urlparse` does not make this particularly easy.\n\nFurthermore, the only way I can tell to actually detect the the `ConnectionError` is a 407 is to do\n\n``` py\ntry:\n    # do request\nexcept ConnectionError as e:\n    if \"407\" in str(e):\n        # get username and password\n```\n",
            "author_association": "NONE",
            "comments": 19,
            "state": "open",
            "user": {
                "login": "asmeurer",
                "id": 71486,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2061/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44033663",
                    "id": 44033663,
                    "created_at": "2014-05-23T16:40:46Z",
                    "updated_at": "2014-05-23T16:40:46Z",
                    "author_association": "MEMBER",
                    "body": "This was briefly discussed in IRC, [as seen here](https://botbot.me/freenode/python-requests/2014-05-23/?msg=15109663&page=1). This GitHub issue encompasses a number of problems. Let's enumerate them.\n1. `HTTPProxyAuth` doesn't work for tunneling proxies. Yes, that's true, and that's because tunneling proxies are fundamentally a very different beast to your standard proxy, involving the CONNECT request and all kinds of funky nonsense. Our auth paradigm doesn't map to this special case.\n   \n   My proposal here is actually to get rid of `HTTPProxyAuth` altogether. I hate it. We have had auth-in-the-proxy-url for a long time now, so it's not like it's the only way to do it. Additionally, it provides better conceptual abstraction: all auth handlers now apply auth to the _origin_, not to intermediaries. I like that distinction.\n2. If you aren't authed to a tunneling proxy, you receive a `ConnectionError` on the method call rather than getting the 407 back. This is again because of the way `httplib` is designed for tunneling proxies. I think we can improve this situation by getting `urllib3` to throw an appropriate exception which we catch and wrap. We can't move the exception to `.raise_for_status()` because that would require a `httplib` rewrite (or something truly evil), but at least we can make it easier to work out what happened.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44033663/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00196650973521173,
                        "severe_toxicity": 9.897702693706378e-05,
                        "obscene": 0.00026282251928932965,
                        "threat": 0.00011642392200883478,
                        "insult": 0.00021356251090765,
                        "identity_attack": 0.0001532188180135563
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44033682",
                    "id": 44033682,
                    "created_at": "2014-05-23T16:40:54Z",
                    "updated_at": "2014-05-23T16:40:54Z",
                    "author_association": "MEMBER",
                    "body": "@shazow, are you open to doing part 2?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44033682/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007556122727692127,
                        "severe_toxicity": 0.00010981905506923795,
                        "obscene": 0.00017254588601645082,
                        "threat": 0.0001199036996695213,
                        "insult": 0.00017478816153015941,
                        "identity_attack": 0.0001387355732731521
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44035272",
                    "id": 44035272,
                    "created_at": "2014-05-23T16:55:27Z",
                    "updated_at": "2014-05-23T16:55:27Z",
                    "author_association": "NONE",
                    "body": "Well, in this case, the `response` attribute of the `ConnectionError` is `None`. If it were the same as with HTTPError, I could just handle them uniformly. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44035272/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006407393957488239,
                        "severe_toxicity": 0.00012220721691846848,
                        "obscene": 0.0001924097741721198,
                        "threat": 0.00012117042933823541,
                        "insult": 0.00017796881729736924,
                        "identity_attack": 0.00013804476475343108
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44035421",
                    "id": 44035421,
                    "created_at": "2014-05-23T16:57:06Z",
                    "updated_at": "2014-05-23T16:57:06Z",
                    "author_association": "MEMBER",
                    "body": "I don't think it can be, logistically: we don't have a response in hand. This is all handled transparently by `httplib`. Because it's terrible.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44035421/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0022986247204244137,
                        "severe_toxicity": 9.599973418517038e-05,
                        "obscene": 0.000236067600781098,
                        "threat": 0.00011105760495411232,
                        "insult": 0.00020611959917005152,
                        "identity_attack": 0.00015693581372033805
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44052639",
                    "id": 44052639,
                    "created_at": "2014-05-23T19:45:31Z",
                    "updated_at": "2014-05-23T19:45:31Z",
                    "author_association": "NONE",
                    "body": "Another possibly unrelated issue (I can open a new issue). If you mutate the `proxies` attribute of a `Session` object, the new value isn't used. So if you want to redo the request with the fixed proxies (\"fixed\" meaning including authentication credentials), you have to do\n\n``` py\ndef dostuff(url, session=None):\n     session = session or Session() # Actually a custom Session subclass\n     ...\n     try:\n        resp = session.get(url, proxies=session.proxies) # I shouldn't have to include the proxies in get() here; they are already in session.proxies!\n        resp.raise_for_status\n     except HTTPError as e:\n        if e.response.status_code == 407:\n            # Get username and password and put it on the proxy url\n            session.proxies['http'] = fixes_proxy_url\n            # Try again\n            dostuff(url, session=session)\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44052639/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011525320587679744,
                        "severe_toxicity": 0.00010268434562021866,
                        "obscene": 0.00021233069128356874,
                        "threat": 0.00011303868086542934,
                        "insult": 0.00018406692834105343,
                        "identity_attack": 0.00013788242358714342
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44055352",
                    "id": 44055352,
                    "created_at": "2014-05-23T20:14:04Z",
                    "updated_at": "2014-05-23T20:14:04Z",
                    "author_association": "NONE",
                    "body": "And more to the point, that's a lot of logic to repeat every time I do a `get` (it's actually more, because I also have to check for `ConnectionError`). It would be nice if requests just had a way to automatically prompt the user for proxy authentication and retry the request. \n\nBut I'll be happy to just get these basic issues ironed out first. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44055352/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005594551912508905,
                        "severe_toxicity": 0.00013292640505824238,
                        "obscene": 0.00020400580251589417,
                        "threat": 0.00013047223910689354,
                        "insult": 0.00017663562903180718,
                        "identity_attack": 0.00014127590111456811
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44081660",
                    "id": 44081660,
                    "created_at": "2014-05-24T08:49:37Z",
                    "updated_at": "2014-05-24T08:49:37Z",
                    "author_association": "MEMBER",
                    "body": "Uh...as far as I can see on a quick code read, we absolutely pick up the proxy settings from the Session. What makes you think we're not?\n\nAs for 'prompting' for proxy auth, that's not going to happen, it's simply not requests' job.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44081660/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006481391028501093,
                        "severe_toxicity": 0.00011598027049330994,
                        "obscene": 0.00018313227337785065,
                        "threat": 0.0001159458770416677,
                        "insult": 0.00017405953258275986,
                        "identity_attack": 0.00013456314627546817
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44088278",
                    "id": 44088278,
                    "created_at": "2014-05-24T14:08:44Z",
                    "updated_at": "2014-05-24T14:09:25Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Uh...as far as I can see on a quick code read, we absolutely pick up the proxy settings from the Session. What makes you think we're not?\n\nMy guess would be that once we have made a request with a proxy, e.g., we've used the `http` proxy, then if @asmeurer changes the list of proxies it isn't fixed because we're using the same `HTTPAdapter` which hits [lines 209 through 215](https://github.com/kennethreitz/requests/blob/a7c218480d7acf1e866e07fde0627d05fb77fbc1/requests/adapters.py#L209..L215). Notice that if `http` is already in `self.proxy_manager` we don't do anything. Since it is, the new proxy is ignored. I haven't attempted to test if that's in fact the case, but that's my first guess as to what might be causing the behaviour that @asmeurer is seeing.\n\n> As for 'prompting' for proxy auth, that's not going to happen, it's simply not requests' job.\n\nI agree.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44088278/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007965333643369377,
                        "severe_toxicity": 0.00011390668078092858,
                        "obscene": 0.00021483712771441787,
                        "threat": 0.00011298328900011256,
                        "insult": 0.00017366497195325792,
                        "identity_attack": 0.00013471514103002846
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44096194",
                    "id": 44096194,
                    "created_at": "2014-05-24T18:51:26Z",
                    "updated_at": "2014-05-24T18:51:26Z",
                    "author_association": "NONE",
                    "body": "> As for 'prompting' for proxy auth, that's not going to happen, it's simply not requests' job.\n\nThat's unfortunate. It seems that a lot of http libraries take this view, which is why every application that connects to the internet has to implement its own proxy authentication (I don't use proxies, but I've noticed this pattern). \n\nAny thoughts on how requests could make this easier? A callback mechanism?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44096194/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006640434148721397,
                        "severe_toxicity": 0.00011693495616782457,
                        "obscene": 0.00018376915249973536,
                        "threat": 0.00012048684584442526,
                        "insult": 0.00017591289361007512,
                        "identity_attack": 0.00013861828483641148
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44127117",
                    "id": 44127117,
                    "created_at": "2014-05-25T09:49:22Z",
                    "updated_at": "2014-05-25T09:49:22Z",
                    "author_association": "MEMBER",
                    "body": "Requests should absolutely allow you to apply auth if you hadn't before.\n\nAs for making it easier to make the same request with auth for the proxy, the reason HTTP libraries generally don't is because we don't know what people are going to want. In requests case, this is sufficiently unusual that adding a mechanism would have two effects:\n1. Disappointing the people who wanted another way to add the proxy auth if they needed to.\n2. Require us to maintain a code path used by a tiny fraction of our users. \n\nFor that reason, we assume that users who need to re-make a request will do it themselves. \n\nThe auth stuff makes that harder, so we should fix it, but otherwise I think that's the end of it. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44127117/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006350838229991496,
                        "severe_toxicity": 0.00012178574252175167,
                        "obscene": 0.0001833018905017525,
                        "threat": 0.0001294207468163222,
                        "insult": 0.00017058642697520554,
                        "identity_attack": 0.00014168872439768165
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44141997",
                    "id": 44141997,
                    "created_at": "2014-05-25T18:34:08Z",
                    "updated_at": "2014-05-25T18:34:08Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "So I want to be sure I'm understanding everyone's concerns here properly:\n\n@asmeurer when you say you'd like requests to prompt for proxy auth, do you mean you'd like us to literally use `raw_input` (or `input` in the case of Python 3)? I'm pretty sure that's not what you want and that's not something we'll ever support. Further, I'm not quite certain how we would properly implement a callback system for this particular case since the only other system like it in requests relies on having a response which we don't have in this case.\n\nThat said, we've had a troubled history (which @Lukasa knows much better than I) dealing with HTTPS Proxy Authentication. If there were a better way of handling them, we would have already implemented it (I'd like to think).\n\nThis discussion should remain in this issue. Your other problem @asmeurer (in which mutating a Session's proxies does not affect subsequent requests should be a separate issue). I'm trying to think of a good way to handle that case since I think I've located the problem above.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44141997/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005711272824555635,
                        "severe_toxicity": 0.0001258089323528111,
                        "obscene": 0.00018638564506545663,
                        "threat": 0.00012947678624186665,
                        "insult": 0.00016920524649322033,
                        "identity_attack": 0.00014061051479075104
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44143540",
                    "id": 44143540,
                    "created_at": "2014-05-25T19:40:04Z",
                    "updated_at": "2014-05-25T19:40:04Z",
                    "author_association": "NONE",
                    "body": "Sure I'll open a new issue for the Session thing.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44143540/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005536325625143945,
                        "severe_toxicity": 0.00013246519665699452,
                        "obscene": 0.00019303751469124109,
                        "threat": 0.00013116018089931458,
                        "insult": 0.00017593604570720345,
                        "identity_attack": 0.00014311022823676467
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44143598",
                    "id": 44143598,
                    "created_at": "2014-05-25T19:42:14Z",
                    "updated_at": "2014-05-25T19:42:14Z",
                    "author_association": "NONE",
                    "body": "https://github.com/kennethreitz/requests/issues/2063\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44143598/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007862250204198062,
                        "severe_toxicity": 0.00010941683285636827,
                        "obscene": 0.00017586341709829867,
                        "threat": 0.0001135364655056037,
                        "insult": 0.00017801346257328987,
                        "identity_attack": 0.0001423550129402429
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44185623",
                    "id": 44185623,
                    "created_at": "2014-05-26T12:42:43Z",
                    "updated_at": "2014-05-26T12:42:43Z",
                    "author_association": "MEMBER",
                    "body": "The situation with HTTPS proxy authentication remains like this:\n- Tunneling HTTPS over a proxy involves sending a request to the proxy with the CONNECT verb that establishes a TCP tunnel through the proxy, then sending the _actual_ request over TLS over that TCP tunnel.\n- This procedure is not done by using `httplib` to send that first request, but by using its `tunnel` functionality.\n- This functionality is enabled at the connection level, not at the request/response level.\n- Requests Auth Handlers act at the request/response level.\n- Thus, ProxyAuth for HTTPS over proxy _cannot_ be handled by an auth handler.\n\nI appreciate this is unfortunate, but there's simply no way around it: it needs to be done the way it's currently being done, or we need to special-case the Proxy Auth handler to mean something special. I don't want to do that because the Proxy Auth handler is semantically out of place: it applies authentication to the proxy, not to the origin. Given that you may _also_ want to authenticate the origin, and that we don't allow multiple auth handlers, applying the Proxy Auth handler impedes your ability to do any other kind.\n\nBest to have proxy authentication credentials come in on the `proxies` dictionary.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44185623/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007668936159461737,
                        "severe_toxicity": 0.00011424258991610259,
                        "obscene": 0.00018701028602663428,
                        "threat": 0.00012452054943423718,
                        "insult": 0.00017411015869583935,
                        "identity_attack": 0.00014276742876973003
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44203843",
                    "id": 44203843,
                    "created_at": "2014-05-26T16:47:57Z",
                    "updated_at": "2014-05-26T16:47:57Z",
                    "author_association": "NONE",
                    "body": "Ok, I agree that this is the wrong place for it. ProxyAuth did seem strange to me, for the reason you cited. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44203843/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000640813959762454,
                        "severe_toxicity": 0.00011952447675867006,
                        "obscene": 0.00018216796161141247,
                        "threat": 0.00012137638259446248,
                        "insult": 0.00017677478899713606,
                        "identity_attack": 0.0001393772108713165
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44307163",
                    "id": 44307163,
                    "created_at": "2014-05-27T17:26:05Z",
                    "updated_at": "2014-05-27T17:26:05Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Not sure if this discussion is resolved or not, but please ping me again if I still have an action item/question. I will be home tomorrow for more in-depth reading. :)\n\n@Lukasa If this is still an open question, handling special-handling 407 in urllib3 sounds sensible if we can do it in a low-impact way.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44307163/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "shazow",
                        "id": 6292,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005201715975999832,
                        "severe_toxicity": 0.00013649227912537754,
                        "obscene": 0.00019557490304578096,
                        "threat": 0.00013777072308585048,
                        "insult": 0.00018120856839232147,
                        "identity_attack": 0.00014571673818863928
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44313296",
                    "id": 44313296,
                    "created_at": "2014-05-27T18:08:56Z",
                    "updated_at": "2014-05-27T18:08:56Z",
                    "author_association": "NONE",
                    "body": "My understanding of what is going on is limited here, but it didn't seem to me like there were any concrete action items yet. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44313296/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asmeurer",
                        "id": 71486,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005733187426812947,
                        "severe_toxicity": 0.00013083303929306567,
                        "obscene": 0.00019271420023869723,
                        "threat": 0.0001290537475142628,
                        "insult": 0.00017825583927333355,
                        "identity_attack": 0.00014370109420269728
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/44314789",
                    "id": 44314789,
                    "created_at": "2014-05-27T18:19:21Z",
                    "updated_at": "2014-05-27T18:19:21Z",
                    "author_association": "MEMBER",
                    "body": "Yeah, we're still trying to drill down into exactly what's happening where.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/44314789/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006028285133652389,
                        "severe_toxicity": 0.00012623252405319363,
                        "obscene": 0.00018660578643903136,
                        "threat": 0.00013029520050622523,
                        "insult": 0.0001725955808069557,
                        "identity_attack": 0.00014215764531400055
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/787324644",
                    "id": 787324644,
                    "created_at": "2021-02-28T04:03:09Z",
                    "updated_at": "2021-02-28T04:03:09Z",
                    "author_association": "NONE",
                    "body": "Hello guys. I tried to look around in the repo to find some answers but wasn't lucky. Is there any workaround to do a `get` request using a HTTPS proxy ? \r\n\r\nI'm getting this error \r\n\r\n` requests.exceptions.ProxyError: HTTPSConnectionPool(host='httpbin.org', port=443): Max retries exceeded with url: /ip (Caused by ProxyError('Cannot connect to proxy.', NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x0000021DB2CDF668>: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond',))) ` \r\n\r\nand this is what I'm trying to do to test. \r\n\r\n```\r\nimport requests\r\nurl = 'https://httpbin.org/ip'\r\nprox = 'https://89.36.195.238:35328'\r\n\r\nproxies = {\r\n    \"https\": prox\r\n}\r\nresponse = requests.get(url,proxies=proxies)\r\nprint(response.json())\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/787324644/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ary-ber",
                        "id": 26523073,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0020359018817543983,
                        "severe_toxicity": 0.00010091943840961903,
                        "obscene": 0.00033213026472367346,
                        "threat": 9.856487304205075e-05,
                        "insult": 0.00021289220603648573,
                        "identity_attack": 0.0001393788115819916
                    }
                }
            ]
        },
        "246": {
            "html_url": "https://github.com/psf/requests/issues/2018",
            "id": 32203116,
            "number": 2018,
            "title": "Re-order proxy precedence.",
            "created_at": "2014-04-25T03:09:20Z",
            "updated_at": "2022-02-17T19:17:32Z",
            "closed_at": null,
            "body": "`Session.trust_env = False` turns off the checking of environment variables for options including proxy settings (`*_proxy`). But `urllib` picks up and uses these environment proxy settings anyway. `requests` should pass the `trust_env` setting on to `urllib`. (Although I'm not sure if `urllib` has a similar override.)\n\n(Proxy setting precedence should be sorted out here as well. They way it is now, environment proxy settings will interfere with (rather than be over-ridden by) the `proxies` argument in `Session.request` or `requests.request` calls and the `Session.proxies` config regardless of `trust_env` settings.)\n",
            "author_association": "NONE",
            "comments": 16,
            "state": "open",
            "user": {
                "login": "ouroborus",
                "id": 392047,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2018/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41370743",
                    "id": 41370743,
                    "created_at": "2014-04-25T08:39:40Z",
                    "updated_at": "2014-04-25T08:39:40Z",
                    "author_association": "MEMBER",
                    "body": "I've taken a quick look at the code in urllib3 and I can't find any reference to the `*_PROXY` environment variables there. Can you point to where in the code urllib3 grabs that information?\n\nAs for proxy setting precedence, what do you mean by 'interfere with'? We don't override any settings already in the proxy dictionary as we use `dict.setdefault` to set those values. All that happens is you may get an additional proxy value for a scheme you didn't declare. Is this what you meant by 'interfere with'?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41370743/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006787009770050645,
                        "severe_toxicity": 0.00011352617730153725,
                        "obscene": 0.00017926728469319642,
                        "threat": 0.00011523208377184346,
                        "insult": 0.0001742078020470217,
                        "identity_attack": 0.00013690770720131695
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41448619",
                    "id": 41448619,
                    "created_at": "2014-04-25T23:22:58Z",
                    "updated_at": "2014-04-25T23:22:58Z",
                    "author_association": "NONE",
                    "body": "I'll have to write up a sample that triggers this.\n\nSo far I've got a situation where the env proxy is defined, `session.proxy` is defined (with a different proxy), and `session.trust_env = False`. The results are the initial request goes through the session-defined proxy and the redirect goes through the env-defined proxy.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41448619/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006216860492713749,
                        "severe_toxicity": 0.00012101685570087284,
                        "obscene": 0.00019159838848281652,
                        "threat": 0.0001210199625347741,
                        "insult": 0.0001708242343738675,
                        "identity_attack": 0.00013786533963866532
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41465160",
                    "id": 41465160,
                    "created_at": "2014-04-26T10:18:04Z",
                    "updated_at": "2014-04-26T10:18:04Z",
                    "author_association": "NONE",
                    "body": "It seems redirects pass through `SessionRedirectMixin.resolve_redirects` in `sessions.py` which has a line `proxies = self.rebuild_proxies(prepared_request, proxies)`. `rebuild_proxies` appears to ignore the passed in `proxies` argument and `session.trust_env` settings.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41465160/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006814892985858023,
                        "severe_toxicity": 0.00011530286428751424,
                        "obscene": 0.00018708378775045276,
                        "threat": 0.00012089723895769566,
                        "insult": 0.00017563902656547725,
                        "identity_attack": 0.00013475459127221256
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41465280",
                    "id": 41465280,
                    "created_at": "2014-04-26T10:25:06Z",
                    "updated_at": "2014-04-26T10:25:06Z",
                    "author_association": "MEMBER",
                    "body": "It does ignore `trust_env` and the original proxies dict (both bugs), but you're not running that code unless you're using the requests release from GitHub. =) Fixing both of those bugs, however, should resolve the problem. I'll fix it up later today.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41465280/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006508841179311275,
                        "severe_toxicity": 0.00011721371265593916,
                        "obscene": 0.00018049274513032287,
                        "threat": 0.000121342483907938,
                        "insult": 0.0001768655056366697,
                        "identity_attack": 0.0001372800034005195
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41465417",
                    "id": 41465417,
                    "created_at": "2014-04-26T10:33:41Z",
                    "updated_at": "2014-04-26T10:35:21Z",
                    "author_association": "NONE",
                    "body": "Ah, somehow I though the installation docs were saying to use the github source rather than pip or easy_install. I see now that it says instead to use pip instead of easy_install and then goes on to say where you can get the source.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41465417/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006770871113985777,
                        "severe_toxicity": 0.00011402644304325804,
                        "obscene": 0.00017240461602341384,
                        "threat": 0.00012401775165926665,
                        "insult": 0.00017816442414186895,
                        "identity_attack": 0.00013907134416513145
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41483290",
                    "id": 41483290,
                    "created_at": "2014-04-26T22:48:00Z",
                    "updated_at": "2014-04-26T22:48:00Z",
                    "author_association": "NONE",
                    "body": "Regarding proxy setting precedence, I think `Session.request(..., proxies)` should override `Session.proxies` which should override proxies set in the environment. Currently, environment proxies override session proxies (using `Session.trust_env = True`).\n\nIn pseudo-code, it'd be something like:\n\n```\ntrust_env = request.trust_env\nif trust_env == None:\n    trust_env = Session.trust_env\nif trust_env == None:\n    trust_env = True\nproxies = {}\nif trust_env:\n    proxies = env.proxies\nproxies = proxies.update(Session.proxies).update(request.proxies)\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41483290/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007296875701285899,
                        "severe_toxicity": 0.00011351481225574389,
                        "obscene": 0.00018788731540553272,
                        "threat": 0.00012236650218255818,
                        "insult": 0.00017277688311878592,
                        "identity_attack": 0.00013576343189924955
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41483349",
                    "id": 41483349,
                    "created_at": "2014-04-26T22:50:42Z",
                    "updated_at": "2014-04-26T22:50:42Z",
                    "author_association": "MEMBER",
                    "body": "To be clear for those who aren't sure, the way @ouroborus' suggestion differs from the current logic is that we take the proxies from the request, then apply proxies from the environment, then finally apply proxies from the `Session`.\n\nI'm open to re-ordering the precedence of the priorities. @sigmavirus24, thoughts?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41483349/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005523391300812364,
                        "severe_toxicity": 0.00013043193030171096,
                        "obscene": 0.00018467658082954586,
                        "threat": 0.00013211125042289495,
                        "insult": 0.00017915603530127555,
                        "identity_attack": 0.00014554205699823797
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41635083",
                    "id": 41635083,
                    "created_at": "2014-04-29T01:58:18Z",
                    "updated_at": "2014-04-29T01:58:18Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Can anyone recall the reasoning behind the current order of precedence? It is extremely odd to me that the order of precedence is contrary to the rest of the library.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41635083/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006293019978329539,
                        "severe_toxicity": 0.00012047374912071973,
                        "obscene": 0.0001682428555795923,
                        "threat": 0.00012561510084196925,
                        "insult": 0.00018309193546883762,
                        "identity_attack": 0.00014468692825175822
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41655204",
                    "id": 41655204,
                    "created_at": "2014-04-29T09:07:18Z",
                    "updated_at": "2014-04-29T09:07:18Z",
                    "author_association": "MEMBER",
                    "body": "No, and IIRC (I'm on my phone) it's been that way for a while. Looked like an oversight to me. \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41655204/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006723079713992774,
                        "severe_toxicity": 0.00011823095701402053,
                        "obscene": 0.00020788941765204072,
                        "threat": 0.00011135217937408015,
                        "insult": 0.00017878078506328166,
                        "identity_attack": 0.00012917180720251054
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/41668942",
                    "id": 41668942,
                    "created_at": "2014-04-29T12:22:37Z",
                    "updated_at": "2014-04-29T12:22:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "## Then consider me in favor of the reordering.\n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/41668942/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0014471813337877393,
                        "severe_toxicity": 9.534697164781392e-05,
                        "obscene": 0.00018440315034240484,
                        "threat": 0.00011127990001114085,
                        "insult": 0.00020240736193954945,
                        "identity_attack": 0.00015063116734381765
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/42138719",
                    "id": 42138719,
                    "created_at": "2014-05-04T17:28:09Z",
                    "updated_at": "2014-05-04T17:31:19Z",
                    "author_association": "NONE",
                    "body": "It's been noted that this issue is poorly named. I'm not sure what to rename it or even if it should be now that it has been created. @Lukasa, feel free to rename it if and as you see fit.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/42138719/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "ouroborus",
                        "id": 392047,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006119751487858593,
                        "severe_toxicity": 0.00012195599992992356,
                        "obscene": 0.0001767731155268848,
                        "threat": 0.0001311514206463471,
                        "insult": 0.00017619978461880237,
                        "identity_attack": 0.00014060609100852162
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/52005041",
                    "id": 52005041,
                    "created_at": "2014-08-13T03:10:02Z",
                    "updated_at": "2014-08-13T03:10:02Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@Lukasa wasn't this already fixed?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/52005041/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008251533145084977,
                        "severe_toxicity": 0.00010618618398439139,
                        "obscene": 0.00017507036682218313,
                        "threat": 0.00011203895701328292,
                        "insult": 0.00018099011504091322,
                        "identity_attack": 0.00013741385191679
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/52014273",
                    "id": 52014273,
                    "created_at": "2014-08-13T06:28:04Z",
                    "updated_at": "2014-08-13T06:28:04Z",
                    "author_association": "MEMBER",
                    "body": "@sigmavirus24 Not that I can see. =)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/52014273/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006682283710688353,
                        "severe_toxicity": 0.00011744094081223011,
                        "obscene": 0.00018011573411058635,
                        "threat": 0.00012043377500958741,
                        "insult": 0.00017872640455607325,
                        "identity_attack": 0.00014010794984642416
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/134221509",
                    "id": 134221509,
                    "created_at": "2015-08-24T14:18:38Z",
                    "updated_at": "2015-08-24T14:41:50Z",
                    "author_association": "NONE",
                    "body": "This issue causes real headache when using saltstack with pip states and https_proxy set in the environment. \nWhile saltstacks pip state allows passing a proxy, this bug ignores the proxy given and prefers the environment proxy instead, as a result the wrong proxy gets used.\n\nA workaround is overwriting your environment variable with saltstacks env_var:\n\n```\nPackageX:\n  pip.installed:\n    - proxy: http://proxyA\n    - env_vars:\n      https_proxy: \"http://proxyA\n      http_proxy: \"http://proxyA\n```\n\nBut it is rather messy, therefore I'd appreciate if this bug would be fixed.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/134221509/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "commonism",
                        "id": 164513,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001182561507448554,
                        "severe_toxicity": 0.00010695739911170676,
                        "obscene": 0.00021172479318920523,
                        "threat": 0.00012749132292810827,
                        "insult": 0.00018496630946174264,
                        "identity_attack": 0.00014865367847960442
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/134230649",
                    "id": 134230649,
                    "created_at": "2015-08-24T14:46:02Z",
                    "updated_at": "2015-08-24T14:46:02Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> But it is rather messy, therefore I'd appreciate if this bug would be fixed.\n\nIt will be. That's why it's labeled as \"Planned\". Also note that we've set a milestone for it. Thanks for your interest.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/134230649/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005493341013789177,
                        "severe_toxicity": 0.00013809373194817454,
                        "obscene": 0.0002072825882351026,
                        "threat": 0.0001379608002025634,
                        "insult": 0.00018072557577397674,
                        "identity_attack": 0.00014716139412485063
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/1043324004",
                    "id": 1043324004,
                    "created_at": "2022-02-17T19:17:31Z",
                    "updated_at": "2022-02-17T19:17:31Z",
                    "author_association": "NONE",
                    "body": "To quote @nateprewitt from Aug 11, 2016:\r\n\r\n> It may be worth noting that it's PR #2839 that fixes this.\r\n> \r\n> _Originally posted by @nateprewitt in https://github.com/psf/requests/issues/3506#issuecomment-239304816_\r\n>",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/1043324004/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "dmich2",
                        "id": 12903966,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006888866773806512,
                        "severe_toxicity": 0.00011372217704774812,
                        "obscene": 0.00018606158846523613,
                        "threat": 0.00011865801207022741,
                        "insult": 0.00017410964937880635,
                        "identity_attack": 0.00013430253602564335
                    }
                }
            ]
        },
        "247": {
            "html_url": "https://github.com/psf/requests/issues/2002",
            "id": 31505086,
            "number": 2002,
            "title": "bool(failure response) is False",
            "created_at": "2014-04-14T21:09:55Z",
            "updated_at": "2016-04-15T21:39:43Z",
            "closed_at": null,
            "body": "This is rather surprising, and not documented that I've seen (though I could certainly have missed it):\n\n```\n>>> r = requests.request('get', 'http://google.com/aopsdufsaf')\n>>> r\n<Response [404]>\n>>> bool(r)\nFalse\n```\n\nTo me, \"failure = false\" is neither intuitive nor expected.\n",
            "author_association": "NONE",
            "comments": 20,
            "state": "open",
            "user": {
                "login": "slinkp",
                "id": 98610,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/2002/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40418922",
                    "id": 40418922,
                    "created_at": "2014-04-14T21:13:07Z",
                    "updated_at": "2014-04-14T21:13:07Z",
                    "author_association": "NONE",
                    "body": "+1\n\nA common pattern is\n\n``` python\nresp = None\n\ntry:\n    resp = requests.get(...)\nexcept:\n    log.exception(\"ruh roh\")\n\nif resp:\n    print(\"we got somethin'!\")\n    handle_resp(resp)\n```\n\nThe current implementation of `__bool__` makes this intuitive pattern very tricky when writing code that accounts for erroneous status codes.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40418922/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000761618313845247,
                        "severe_toxicity": 0.00011090393672930077,
                        "obscene": 0.00019845196220558137,
                        "threat": 0.00011124159209430218,
                        "insult": 0.00017423836106900126,
                        "identity_attack": 0.00013350069639272988
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40419542",
                    "id": 40419542,
                    "created_at": "2014-04-14T21:18:37Z",
                    "updated_at": "2014-04-14T21:18:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Hey @slinkp thanks for opening this!\n\nIn this case, what you're looking for is an explicit attribute: `r.ok`\n\nThe fact of the matter is that this works on Python 3 because we define `__bool__`. If we define `__nonzero__` on Python 2 this would work there as well. That said, I think you should be using the `r.ok` pattern anyway. It's a far better pattern personally.\n\n@jamesob you're getting exactly what you ask for in that case, sorry to say it. You did get something if `resp` is not `None`. If you want a \"good\" response that also isn't None, you should be explicit about it:\n\n``` python\nif resp and resp.ok:\n    print(\"we got something!\")\n    handle_resp(resp)\n```\n\nEven if the `__nonzero__` bug is fixed, this is still far more obvious to anyone who is going to come along and read your code that you're not only expecting a non-`None` value but also a `2xx` response.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40419542/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0026571000926196575,
                        "severe_toxicity": 0.00010279719572281465,
                        "obscene": 0.00035359885077923536,
                        "threat": 0.00011504038411658257,
                        "insult": 0.0002348387351958081,
                        "identity_attack": 0.0001476023899158463
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40419988",
                    "id": 40419988,
                    "created_at": "2014-04-14T21:23:00Z",
                    "updated_at": "2014-04-14T21:23:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Wait never mind, we do implement `__nonzero__`. So `bool(resp)` should work just fine. Investigating.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40419988/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007311632507480681,
                        "severe_toxicity": 0.00011192725651198998,
                        "obscene": 0.00017965897859539837,
                        "threat": 0.0001156806101789698,
                        "insult": 0.00017850840231403708,
                        "identity_attack": 0.00013797356223221868
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40419995",
                    "id": 40419995,
                    "created_at": "2014-04-14T21:23:05Z",
                    "updated_at": "2014-04-14T21:23:05Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 heh, appears this issue has just bitten you too. \n\n> You did get something if resp is not None.\n\nisn't true given the current implementation of `__nonzero__` (which kicks to `ok`), which is the point I was trying to get across.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40419995/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007330292137339711,
                        "severe_toxicity": 0.00011106777674285695,
                        "obscene": 0.00018211672431789339,
                        "threat": 0.00011159964924445376,
                        "insult": 0.00017432510503567755,
                        "identity_attack": 0.0001358517474727705
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420180",
                    "id": 40420180,
                    "created_at": "2014-04-14T21:24:45Z",
                    "updated_at": "2014-04-14T21:24:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "``` pycon\n>>> import requests\nr>>> r = requests.get('https://api.github.com/user')\n>>> r\n<Response [401]>\n>>> bool(r)\nFalse\n>>> r = requests.get('http://madisonpl.us/rubby')\n>>> r\n<Response [404]>\n>>> bool(r)\nFalse\n```\n\nWhat version of requests are both of you on?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420180/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0025535880122333765,
                        "severe_toxicity": 8.949285256676376e-05,
                        "obscene": 0.0002741594216786325,
                        "threat": 0.00010420120815979317,
                        "insult": 0.00022844175691716373,
                        "identity_attack": 0.00014331274724099785
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420257",
                    "id": 40420257,
                    "created_at": "2014-04-14T21:25:29Z",
                    "updated_at": "2014-04-14T21:25:34Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Oh, I misread the issue. >_< Yeah that's something I disagree with :). I bet it was someone else's feature request and not something we can \"fix\" until requests 3.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420257/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006020884029567242,
                        "severe_toxicity": 0.00012257180060259998,
                        "obscene": 0.0001855159644037485,
                        "threat": 0.00012296432396396995,
                        "insult": 0.00017345944070257246,
                        "identity_attack": 0.00013738528650719672
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420334",
                    "id": 40420334,
                    "created_at": "2014-04-14T21:26:09Z",
                    "updated_at": "2014-04-14T21:26:09Z",
                    "author_association": "NONE",
                    "body": "``` python\nIn [3]: r = requests.get('http://google.com/awefawefae')\n\nIn [4]: r\nOut[4]: <Response [404]>\n\nIn [5]: if r:\n   ...:     print \"yo\"\n   ...:     \n\nIn [6]: requests.__version__\nOut[6]: '2.1.0'\n```\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420334/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007231571362353861,
                        "severe_toxicity": 0.00011518462997628376,
                        "obscene": 0.0002005049609579146,
                        "threat": 0.00011302920029265806,
                        "insult": 0.0001741491723805666,
                        "identity_attack": 0.00013534334721043706
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420439",
                    "id": 40420439,
                    "created_at": "2014-04-14T21:27:12Z",
                    "updated_at": "2014-04-14T21:27:12Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@jamesob yeah I asked that because I thought I read that `bool(resp) is True` in the original issue. I've had too much caffeine to deal with the sleep deprivation caused by PyCon. =D\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420439/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0024217627942562103,
                        "severe_toxicity": 9.697299537947401e-05,
                        "obscene": 0.00032377740717493,
                        "threat": 8.803966193227097e-05,
                        "insult": 0.00023307873925659806,
                        "identity_attack": 0.00015798123786225915
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420494",
                    "id": 40420494,
                    "created_at": "2014-04-14T21:27:39Z",
                    "updated_at": "2014-04-14T21:27:39Z",
                    "author_association": "NONE",
                    "body": "haha, I hear ya. Anyways, would be awesome to get this ironed out.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420494/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000642250117380172,
                        "severe_toxicity": 0.00012127966328989714,
                        "obscene": 0.00019116592011414468,
                        "threat": 0.00012178331235190853,
                        "insult": 0.00017812314035836607,
                        "identity_attack": 0.00013676469097845256
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420621",
                    "id": 40420621,
                    "created_at": "2014-04-14T21:28:54Z",
                    "updated_at": "2014-04-14T21:28:54Z",
                    "author_association": "NONE",
                    "body": "Yeah I figured this would break backward compatibility... somebody somewhere is surely depending on the current behavior.  I just really dislike it :)\n\nThanks @sigmavirus24 \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420621/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "slinkp",
                        "id": 98610,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000697048963047564,
                        "severe_toxicity": 0.00011492351768538356,
                        "obscene": 0.0001767719368217513,
                        "threat": 0.00012052684178343043,
                        "insult": 0.0001742295571602881,
                        "identity_attack": 0.00013932060392107815
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40420937",
                    "id": 40420937,
                    "created_at": "2014-04-14T21:32:06Z",
                    "updated_at": "2014-04-14T21:32:06Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Yeah I'm :+1: for removing this. @Lukasa thoughts? \n\nI know it would have to wait for requests 3.0 but it might still be good to have a wishlist for 3.0 \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40420937/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006019495194777846,
                        "severe_toxicity": 0.0001229292684001848,
                        "obscene": 0.0001767955400282517,
                        "threat": 0.00013536361802835017,
                        "insult": 0.00017613948148209602,
                        "identity_attack": 0.00014078975073061883
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40422705",
                    "id": 40422705,
                    "created_at": "2014-04-14T21:50:16Z",
                    "updated_at": "2014-04-14T21:50:16Z",
                    "author_association": "MEMBER",
                    "body": "I just chatted with Kenneth about this, he definitely doesn't like it. I think we should be leaving this on a wishlist for 3.0, but @kennethreitz might disagree.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40422705/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005703864153474569,
                        "severe_toxicity": 0.0001293121895287186,
                        "obscene": 0.0001846095110522583,
                        "threat": 0.0001288082276005298,
                        "insult": 0.00017502246191725135,
                        "identity_attack": 0.00014906957221683115
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40423225",
                    "id": 40423225,
                    "created_at": "2014-04-14T21:55:57Z",
                    "updated_at": "2014-04-14T21:55:57Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I know Semantic Versioning isn't a hard rule but I really really really really would like it if it were =P\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40423225/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006550379912368953,
                        "severe_toxicity": 0.00011789378913817927,
                        "obscene": 0.00017778344044927508,
                        "threat": 0.00012700463412329555,
                        "insult": 0.00017086903972085565,
                        "identity_attack": 0.00013766986376140267
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40423768",
                    "id": 40423768,
                    "created_at": "2014-04-14T22:02:02Z",
                    "updated_at": "2014-04-14T22:02:02Z",
                    "author_association": "NONE",
                    "body": "as the issue reporter, I would chime in to say semver++ ... don't break\nthings for people who rely on this behavior even if I hate it.\n\nOn Mon, Apr 14, 2014 at 5:56 PM, Ian Cordasco notifications@github.comwrote:\n\n> I know Semantic Versioning isn't a hard rule but I really really really\n> really would like it if it were =P\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kennethreitz/requests/issues/2002#issuecomment-40423225\n> .\n\n## \n\nhttp://www.slinkp.com\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40423768/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "slinkp",
                        "id": 98610,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011668840888887644,
                        "severe_toxicity": 0.00010017685417551547,
                        "obscene": 0.000198361900402233,
                        "threat": 0.00011476078361738473,
                        "insult": 0.0001790332462405786,
                        "identity_attack": 0.00014170884969644248
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/40423801",
                    "id": 40423801,
                    "created_at": "2014-04-14T22:02:22Z",
                    "updated_at": "2014-04-14T22:02:22Z",
                    "author_association": "NONE",
                    "body": "semver++ :)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/40423801/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "jamesob",
                        "id": 73197,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009204456000588834,
                        "severe_toxicity": 0.00010474635200807825,
                        "obscene": 0.0001810476096579805,
                        "threat": 0.00010622172703733668,
                        "insult": 0.00018145408830605447,
                        "identity_attack": 0.0001378283923259005
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/43691922",
                    "id": 43691922,
                    "created_at": "2014-05-20T22:31:21Z",
                    "updated_at": "2014-05-20T22:31:21Z",
                    "author_association": "NONE",
                    "body": "I think this is an irrelevant design decision that should really never be relied on either way. In my opinion neither `__nonzero__` nor `__bool__` should have been implemented for response objects in the first place.\n\n@jamesob In your first code snippet, you shouldn't be using None as a boolean anyways. Write `if resp is None:` instead and that pattern works fine. (Also, just FYI, `except:` should always be `except Exception:`, otherwise you catch things like KeyboardInterrupt which is baaaaaaad.)\n\nThe truthiness of an HTTP response is a very ambiguous concept. Instead, just use `response.ok` as was suggested earlier.\n\n> Explicit is better than implicit.\n> \u2014 Tim Peters\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/43691922/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fletom",
                        "id": 127497,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0039604827761650085,
                        "severe_toxicity": 0.00010765196202555671,
                        "obscene": 0.0004788681981153786,
                        "threat": 0.0001358299923595041,
                        "insult": 0.00032582852873019874,
                        "identity_attack": 0.00016685057198628783
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/43960624",
                    "id": 43960624,
                    "created_at": "2014-05-23T00:43:47Z",
                    "updated_at": "2014-05-23T00:43:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@fletom I'd like to remind you to [be cordial](http://www.kennethreitz.org/essays/be-cordial-or-be-on-your-way). The code snippets provided for this issue likely do no represent code actually copied and pasted from production code. They merely serve as examples to illustrate a point. There's no need to teach anyone about bad practices. All you needed to do was voice an opinion relevant to the discussion of what `bool(response)` would return.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/43960624/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006818833062425256,
                        "severe_toxicity": 0.00011535037629073486,
                        "obscene": 0.00017768294492270797,
                        "threat": 0.00012343765411060303,
                        "insult": 0.00017037836369127035,
                        "identity_attack": 0.00013652547204401344
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/43964337",
                    "id": 43964337,
                    "created_at": "2014-05-23T01:58:29Z",
                    "updated_at": "2014-05-23T01:58:29Z",
                    "author_association": "NONE",
                    "body": "@sigmavirus24 Sorry my comment came across as negative. I only meant to suggest a way that that common pattern can work with requests' current design. As KR suggested, the intention was to be educational/constructive and not insulting.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/43964337/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "fletom",
                        "id": 127497,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005877642543055117,
                        "severe_toxicity": 0.00012439557758625597,
                        "obscene": 0.00017891789320856333,
                        "threat": 0.00012558324669953436,
                        "insult": 0.00017712608678266406,
                        "identity_attack": 0.0001430852571502328
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/58920399",
                    "id": 58920399,
                    "created_at": "2014-10-13T16:48:39Z",
                    "updated_at": "2014-10-13T16:48:39Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "This was one of the earliest features of requests and should def be removed :)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/58920399/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kennethreitz",
                        "id": 119893,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007374071283265948,
                        "severe_toxicity": 0.00011228259972995147,
                        "obscene": 0.00018224891391582787,
                        "threat": 0.00012458408309612423,
                        "insult": 0.00017696739814709872,
                        "identity_attack": 0.00013567930727731436
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/58924766",
                    "id": 58924766,
                    "created_at": "2014-10-13T17:17:07Z",
                    "updated_at": "2014-10-13T17:17:07Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Yep that's why it's lined up for 3.0 =D \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/58924766/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007896568276919425,
                        "severe_toxicity": 0.00010822155309142545,
                        "obscene": 0.00019354284449946135,
                        "threat": 0.00011777670442825183,
                        "insult": 0.00017586341709829867,
                        "identity_attack": 0.0001304591860389337
                    }
                }
            ]
        },
        "248": {
            "html_url": "https://github.com/psf/requests/issues/1953",
            "id": 29363729,
            "number": 1953,
            "title": "The iterable produced by `Session.resolve_redirects` does not include the very first response",
            "created_at": "2014-03-13T16:06:54Z",
            "updated_at": "2015-08-31T06:50:04Z",
            "closed_at": null,
            "body": "If you are manually walking over redirects, you probably want to structure your code like this:\n\n```\nredirect_sequence = session.send_with_manual_redirect_walking(request, ...)\nfor resp in redirect_sequence:\n    # do something with 'resp'\n```\n\nThe existing API does not let you do that.  You must write either\n\n```\nfirst_response = session.send(request, ..., allow_redirects=False)\n# do something with 'first_response'\nfor resp in session.resolve_redirects(first_response, request, ...)\n    # do something with 'resp'\n```\n\nwhich involves writing the same \"do something with\" code in two places, or\n\n```\nresp = session.send(request, ..., allow_redirects=False)\nredir_iter = session.resolve_redirects(resp, request, ...)\nwhile True:\n    # do something with 'resp'\n    if not resp.is_redirect: break\n    resp = next(redir_iter)\n```\n\nwhich is un-Pythonic loop structure.\n\nSince `Session.resolve_redirects` must remain as is for compatibility's sake, the only way to fix this is to add either a new mode to `send` (`allow_redirects=MANUAL`?) or a new Session method (perhaps in fact called `send_with_manual_redirect_walking`) which returns an iterable that _does_ include the very first response.  I do not particularly care which, or what the new method is called in the second case.\n",
            "author_association": "CONTRIBUTOR",
            "comments": 14,
            "state": "open",
            "user": {
                "login": "zackw",
                "id": 325899,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/1953/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37573600",
                    "id": 37573600,
                    "created_at": "2014-03-13T19:03:30Z",
                    "updated_at": "2014-03-13T19:03:30Z",
                    "author_association": "MEMBER",
                    "body": "It seems like the best approach is the second with a better method name.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37573600/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005549567868001759,
                        "severe_toxicity": 0.00013077491894364357,
                        "obscene": 0.0001902637886814773,
                        "threat": 0.0001278048730455339,
                        "insult": 0.00017602380830794573,
                        "identity_attack": 0.00014122821448836476
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37574734",
                    "id": 37574734,
                    "created_at": "2014-03-13T19:14:00Z",
                    "updated_at": "2014-03-13T19:14:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "What do you think a better method name would be?  I am chronically bad at names.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37574734/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zackw",
                        "id": 325899,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0011037355288863182,
                        "severe_toxicity": 9.91483757388778e-05,
                        "obscene": 0.0001694474194664508,
                        "threat": 0.00010857175220735371,
                        "insult": 0.00018953281687572598,
                        "identity_attack": 0.00014588524936698377
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37574861",
                    "id": 37574861,
                    "created_at": "2014-03-13T19:15:01Z",
                    "updated_at": "2014-03-13T19:15:01Z",
                    "author_association": "MEMBER",
                    "body": "Heh, there's not really a good one here, but could be `iter_send()`. Matches an established trend in requests to use `iter_x`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37574861/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006755855865776539,
                        "severe_toxicity": 0.00011761867790482938,
                        "obscene": 0.00019192513718735427,
                        "threat": 0.00011376231850590557,
                        "insult": 0.00017511897021904588,
                        "identity_attack": 0.00013608226436190307
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37624194",
                    "id": 37624194,
                    "created_at": "2014-03-14T08:00:33Z",
                    "updated_at": "2014-03-14T08:00:33Z",
                    "author_association": "NONE",
                    "body": "Wouldn't `iter_locations` or `iter_redirects` be better?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37624194/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "piotr-dobrogost",
                        "id": 92239,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000722134776879102,
                        "severe_toxicity": 0.00011645035556284711,
                        "obscene": 0.00017956031661015004,
                        "threat": 0.00011660503514576703,
                        "insult": 0.00018141652981285006,
                        "identity_attack": 0.00014083796122577041
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37624254",
                    "id": 37624254,
                    "created_at": "2014-03-14T08:01:47Z",
                    "updated_at": "2014-03-14T08:02:11Z",
                    "author_association": "MEMBER",
                    "body": "I thought about it, but both are misleading, as they contain the first response (which is _not_ a redirect). Could be `iter_responses`?\n\nAnyway, this is bikeshedding of the highest order. The question is are we happy to add this method to the API?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37624254/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006010004435665905,
                        "severe_toxicity": 0.0001238552649738267,
                        "obscene": 0.00018309420556761324,
                        "threat": 0.00012257987691555172,
                        "insult": 0.00017829492571763694,
                        "identity_attack": 0.0001409024407621473
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37645263",
                    "id": 37645263,
                    "created_at": "2014-03-14T13:15:35Z",
                    "updated_at": "2014-03-14T13:15:35Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It's the very _last_ response in the sequence that's not a redirect, but yeah, one of them isn't.  I rather like `iter_responses`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37645263/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zackw",
                        "id": 325899,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.00073377595981583,
                        "severe_toxicity": 0.00011134772648802027,
                        "obscene": 0.00019223795970901847,
                        "threat": 0.0001108992873923853,
                        "insult": 0.00016865451470948756,
                        "identity_attack": 0.00013090891297906637
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37646303",
                    "id": 37646303,
                    "created_at": "2014-03-14T13:27:24Z",
                    "updated_at": "2014-03-14T13:27:24Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I like `iter_send` better than `iter_responses`. They both sound a little nebulous though. The former makes a bit more sense to me with the understanding that `allow_redirects` is **not** a parameter.\n\nAll things considered, the goal here is more to provide an equivalent to `send` that gives the user more control than `request` over their redirects. Since it really will be a companion to `send` then, I think `iter_send` makes more sense. `iter_responses` could mean too many things. We have to design this API with the constraint that the users taking advantage of this will will be advanced users. They should already be familiar with `send` so `iter_send` should be an intuitive leap to them, even if the name still is a bit vague.\n\n---\n\nOn a side note, allow me to play devil's advocate. I can easily see people complaining that we only allow for this handling of redirects on such a low level. People will want this change to bubble up to `iter_response` (to correlate to the `response` method) as well as corresponding methods for `iter_get`, `iter_post`, etc. (regardless of whether or not some of those make sense based on the RFCs and the way servers behave). In other words, as devil's advocate, I'm warning of what could be perceived by some users as a foot in the door to further API extensions that are unnecessary and ugly. This is less of an argument against this change, and more of a warning that we should be careful how we choose to architect and document this.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37646303/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008959710830822587,
                        "severe_toxicity": 0.00011065568833146244,
                        "obscene": 0.0001967969728866592,
                        "threat": 0.00012128568778280169,
                        "insult": 0.00017405256221536547,
                        "identity_attack": 0.00014280283357948065
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37651764",
                    "id": 37651764,
                    "created_at": "2014-03-14T14:22:43Z",
                    "updated_at": "2014-03-14T14:22:43Z",
                    "author_association": "MEMBER",
                    "body": "Taking @sigmavirus24's concern on board, is there an elegant way we can do this _outside_ of the library, e.g. in the toolbelt?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37651764/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006024193135090172,
                        "severe_toxicity": 0.00012327285367064178,
                        "obscene": 0.00018418104446027428,
                        "threat": 0.00012436533870641142,
                        "insult": 0.0001794109120965004,
                        "identity_attack": 0.0001412590645486489
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37670234",
                    "id": 37670234,
                    "created_at": "2014-03-14T16:54:52Z",
                    "updated_at": "2014-03-14T16:54:52Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I'm not familiar with this \"toolbelt\"?  But, an alternative would be a `Session.prepare_request_for_redirect` method that takes an `.is_redirect` response and produces a new `PreparedRequest` to follow the redirect.  That is sufficiently low-level that I don't think it would induce feature creep, but makes it straightforward to write the generator yourself if you want it:\n\n```\ndef iter_send(session, request, **kwargs):\n    resp = session.send(request, allow_redirects=False, **kwargs)\n    while resp.is_redirect:\n        yield resp\n        resp = session.send(session.prepare_request_for_redirect(resp),\n                            allow_redirects=False, **kwargs)\n   yield resp\n```\n\nSince backward compatibility dictates preserving `resolve_redirects`, we are going to want a method like this anyway to house shared code between `iter_send` and `resolve_redirects`.\n\nHaving said that, personally I'm not much concerned about the feature creep issue, because I think anyone who wants to do manual redirection chasing is going to want to work with the Session API anyway.  If nothing else, you probably need Session-level control over cookies.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37670234/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zackw",
                        "id": 325899,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000711211352609098,
                        "severe_toxicity": 0.00011514135985635221,
                        "obscene": 0.0001864604710135609,
                        "threat": 0.00012099988089175895,
                        "insult": 0.00017304941138718277,
                        "identity_attack": 0.00013620949175674468
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37731798",
                    "id": 37731798,
                    "created_at": "2014-03-15T17:21:34Z",
                    "updated_at": "2014-03-16T13:44:37Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> Taking @sigmavirus24's concern on board\n\nIt isn't a very strong concern. It's more of a pattern I've seen develop as of late. People watch the repo for a tiny change and use that change to get their foot in the door for a larger one that is widely unnecessary. It's a tiny concern that's ever present now.\n\nLikewise, I think the toolbelt could easily accomodate this. That said, I'm not convinced it should be either in or outside of the core (i.e., I don't actually know where it belongs).\n\nI've also been thinking along the same lines @zackw, but more geared towards making an eventual refactor a lot easier. I like having a compliment to `prepare_request` sibling. How does `prepare_redirected_request` sound?\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37731798/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005657753790728748,
                        "severe_toxicity": 0.00012916677223984152,
                        "obscene": 0.00019614917982835323,
                        "threat": 0.00012887519551441073,
                        "insult": 0.000174170927493833,
                        "identity_attack": 0.0001430143165634945
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37751179",
                    "id": 37751179,
                    "created_at": "2014-03-16T07:26:08Z",
                    "updated_at": "2014-03-16T07:26:08Z",
                    "author_association": "MEMBER",
                    "body": "I can get behind that idea, though I'm +0.5 until I see some code.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37751179/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006308510201051831,
                        "severe_toxicity": 0.00012048477947246283,
                        "obscene": 0.00018109491793438792,
                        "threat": 0.00011958580580540001,
                        "insult": 0.00017488734738435596,
                        "identity_attack": 0.00014246282808016986
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37757426",
                    "id": 37757426,
                    "created_at": "2014-03-16T13:45:56Z",
                    "updated_at": "2014-03-16T13:45:56Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "I really want to get some work done on the toolbelt and betamax today. If @zackw has the time to throw together an example of `prepare_redirected_request` that'd be great. Otherwise, I'll likely work on it later this week.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37757426/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005457508377730846,
                        "severe_toxicity": 0.00013307365588843822,
                        "obscene": 0.00019383926701266319,
                        "threat": 0.00013458097237162292,
                        "insult": 0.0001786017237463966,
                        "identity_attack": 0.00014435728371609002
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37758455",
                    "id": 37758455,
                    "created_at": "2014-03-16T14:28:47Z",
                    "updated_at": "2014-03-16T14:28:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@sigmavirus24 Not a problem - it's a simple matter of moving code around.  See #1965.\n\n(I am going to be offline for most of the rest of the day, though.)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37758455/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "zackw",
                        "id": 325899,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0005974976811558008,
                        "severe_toxicity": 0.00012382408021949232,
                        "obscene": 0.00018682244990486652,
                        "threat": 0.00012493670510593802,
                        "insult": 0.00017819329514168203,
                        "identity_attack": 0.0001402212947141379
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/37759398",
                    "id": 37759398,
                    "created_at": "2014-03-16T15:07:47Z",
                    "updated_at": "2014-03-16T15:07:47Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "It's the weekend. Enjoy your Sunday! :cake: \n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/37759398/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.001610844279639423,
                        "severe_toxicity": 9.806480375118554e-05,
                        "obscene": 0.00019168829021509737,
                        "threat": 0.00011062192788813263,
                        "insult": 0.00020561924611683935,
                        "identity_attack": 0.0001680475688772276
                    }
                }
            ]
        },
        "249": {
            "html_url": "https://github.com/psf/requests/issues/1737",
            "id": 22655515,
            "number": 1737,
            "title": "[Suggestion] Simplify charset handling",
            "created_at": "2013-11-14T10:56:19Z",
            "updated_at": "2014-10-05T17:26:54Z",
            "closed_at": null,
            "body": "To cut to the chase, here are my suggestions:\n- Remove automatic character set detection (charade) from the library\n- Have response.encoding represent the charset from the Content-Type header\n- Mention the caveat in the documentation\n### Long version\n\nThere seems to be a lot of confusion regarding how the `.text` property works. After getting into some trouble with it myself, I searched the issues list, and found a dozen or so issues, all boiling down to the same mismatch between users' expectations and the intent of the library designers.\n#147 - bytecode string returned when page has charset=UTF-8\n#156 - get_unicode_from_response does not check charsets from meta tags\n#592 - Internal encoding detection doesn't match external chardet call\n#654 - requests.get() ignores charset=UTF-8 and BOM\n#765 - Chardet sometimes fails and force the wrong encoding\n#861 - parsing encoding utf-8 page doesn't as expected\n#1087 - Encodings from content\n#1150 - On some pages requests detect encoding incorrectly\n#1546 - use a default encoding in Response's text property\n#1589 - Make sure content is checked when setting encoding\n#1604 - Response.text returns improperly decoded text\n#1683 - models.text Behaviour (encoding choice)\n\n(It must be tiring to have the same conversation over and over again. I hope I'm being helpful here and not just piling on).\n\nThe argument seems to be:\n- As an HTTP library, requests should not know or care about HTML and META attributes\n- RFC 2616 states that if no charset is defined, \"text/*\" media types should be regarded as ISO-8859-1\n\nI accept both these arguments. However, the documentation seems a bit coy, saying that \"Requests makes an educated guess about the encoding\", implying chardet/charade. In practice, for any content with a \"text\" media subtype, charade will not be used unless the user explicitly sets the `response.encoding` to None before reading the `.text` property.\n\nAdditionally, while ISO-8859-1 can be used as a default, won't it make more sense to handle that default in `.text` and not in the `get_encoding_from_headers` method? This way, the `encoding` property will be None if indeed no encoding is specified, allowing the user to make the decision on how to proceed.\n\nIf you're going to keep the `.text` property, I think it should do a simple decoding if the charset is specified in the headers, and throw an exception otherwise. This way is much less confusing than the state of affairs now. Additionally, the documentation should contain a warning not to use it for arbitrary web pages, and perhaps a code sample showing the proper way to do it.\n\n``` python\n\nimport re\nimport charade\nimport requests\n\ndef get_encodings_from_content(content):\n    charset_re = re.compile(r'<meta.*?charset=[\"\\']*(.+?)[\"\\'>]', flags=re.I)\n    pragma_re = re.compile(r'<meta.*?content=[\"\\']*;?charset=(.+?)[\"\\'>]', flags=re.I)\n    xml_re = re.compile(r'^<\\?xml.*?encoding=[\"\\']*(.+?)[\"\\'>]')\n\n    # FIXME: Does not work in python 3\n    return (charset_re.findall(content) +\n            pragma_re.findall(content) +\n            xml_re.findall(content))\n\nr = requests.get('https://example.com/page.html')\nif \"charset\" not in r.headers.get(\"content-type\", \"\"):\n    encodings = get_encodings_from_content(r.content)\n    if encodings:\n        r.encoding = encodings[0]\n    else:\n        r.encoding = charade.detect(r.content)['encoding']\n\nhtml = r.text\n\n```\n",
            "author_association": "CONTRIBUTOR",
            "comments": 6,
            "state": "open",
            "user": {
                "login": "itsadok",
                "id": 142512,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/psf/requests/issues/1737/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28479978",
                    "id": 28479978,
                    "created_at": "2013-11-14T12:28:21Z",
                    "updated_at": "2013-11-14T12:28:21Z",
                    "author_association": "MEMBER",
                    "body": "You've got lots of good suggestions here. I'll respond to some of them. In no particular order:\n1. `Response.text` should never ever ever ever throw an exception if we can possibly avoid it. Properties throwing exceptions is bad. If we were going to start throwing exceptions from `Response.text` I'd want it to become `Response.text()`.\n2. Your observation that `charade` will never get called for any content with a `text/*` MIME type is totally correct, and by design. RFC 2616 is incredibly clear on this point.\n3. I am open to moving the ISO-8859-1 default to `Response.text` and out of `get_encoding_from_headers`.\n4. I am not open to removing flexibility from `Response.text`.\n\nStripping all the functionality from `Response.text`, as you suggest in your last point, seems silly to me. If we're going that far, we should remove `Response.text` altogether.\n\n`Response.text` has _carte blanche_ to do whatever it can to correctly decode the output. There are points of finesse here, but that will always be the case. No matter what `Response.text` does, someone will disapprove.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28479978/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0008896111394278705,
                        "severe_toxicity": 0.0001071736405720003,
                        "obscene": 0.00017965144070331007,
                        "threat": 0.00012043400784023106,
                        "insult": 0.00017889673472382128,
                        "identity_attack": 0.00014430086594074965
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28481771",
                    "id": 28481771,
                    "created_at": "2013-11-14T13:00:00Z",
                    "updated_at": "2013-11-14T13:00:00Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "@Lukasa you were tricked into saying this:\n\n> Stripping all the functionality from Response.text, as you suggest in your last point, seems silly to me. If we're going that far, we should remove Response.text altogether.\n\nThis is clearly the agenda of this issue as you can tell by:\n\n> If you're going to keep the .text property\n\n@itsadok clearly wants the `.text` property to disappear because issues have been filed regarding it in the past.\n\nLet me address one other thing that @Lukasa didn't before I add my opinion.\n\n> Additionally, the documentation should contain a warning not to use it for arbitrary web pages, and perhaps a code sample showing the proper way to do it.\n1. charade works fairly well for well established codecs. There are new ones that subsume old ones which it doesn't support yet. Why? There aren't publicly available statistics for those encodings and that's what charade relies on. If you disagree with how something is being detected, why not file a bug report on charade?\n2. That code sample is **not** the proper way to do it. Using regular expressions on HTML is insanity and is **never** the correct answer.\n\nWith that addressed, let me address one more theme of this issue: Because _some negligible percentage_ of all issues have been filed about _x_, _x_ should be (changed|removed).\n\nOne thing to note is that all the issues with numbers lower than 1000 were filed before requests 1.0 which is when the API was finalized. If there were legitimate bugs in this attribute prior to that, I would be far from surprised. Also some of those issues are instead about the choice that chardet/charade made. Those are not bugs in requests or `.text` but instead in the underlying support.\n\nFinally, after the release of 1.0 we had a lot of issues about the change from `json` being a property on a Response object to becoming a method. We didn't remove it or change it back for a good reason. It was a deliberate design decision.\n\nThe `.text` attribute is quite crucial to this library, especially to the `json` method, and it will likely never be removed. Can it be improved? Almost certainly. You provided a couple of good suggestions, but the overall tone this issue is meant to convince the reader that it should be removed and that will not happen. Without a reasonable guess at the encoding of the text, we cannot provide the user with the `json` method which also will not go away. Simply, the user is not the sole consumer of `.text`.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28481771/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.000924028514418751,
                        "severe_toxicity": 0.00010539388313191012,
                        "obscene": 0.00018069922225549817,
                        "threat": 0.00011372283915989101,
                        "insult": 0.00017674345872364938,
                        "identity_attack": 0.00014228117652237415
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28482990",
                    "id": 28482990,
                    "created_at": "2013-11-14T13:20:14Z",
                    "updated_at": "2013-11-14T13:21:04Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "Sorry about the closing and reopening, that was a mis-click.\n\n@sigmavirus24 I'm sorry if it seems like I have an agenda. I'm honestly just trying to help. I read through the discussions in **all** of the issues I posted. They all really seem to revolve around the same basic confusion, with people expecting Response.text to be an all-encompassing solution where in reality it is not. \n\nLet me just clarify some misunderstandings in what I wrote.\n\n> > Additionally, the documentation should contain a warning not to use it for arbitrary web pages, and perhaps a code sample showing the proper way to do it.\n> > charade works fairly well for well established codecs. There are new ones that subsume old ones which it doesn't support yet. Why? There aren't publicly available statistics for those encodings and that's what charade relies on. If you disagree with how something is being detected, why not file a bug report on charade?\n\nI merely meant that it should be noted that `Response.text` should not be used willy-nilly on arbitrary web page, precisely because it avoids using charade in many places where it can be used.\n\n> That code sample is not the proper way to do it. Using regular expressions on HTML is insanity and is never the correct answer.\n\nThe `get_encodings_from_content` function is fully copied from `requests.utils`, with the added comment by me that it doesn't really work in Python 3. In any case the point was that this needs to be clarified, not my specific solution.\n\n> The .text attribute is quite crucial to this library, especially to the json method, and it will likely never be removed. Can it be improved? Almost certainly. You provided a couple of good suggestions, but the overall tone this issue is meant to convince the reader that it should be removed and that will not happen. Without a reasonable guess at the encoding of the text, we cannot provide the user with the json method which also will not go away. Simply, the user is not the sole consumer of .text.\n\nThis is a valid point, and perhaps serves to explain the weird nature of .text. Perhaps all that is needed is a note in the documentation.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28482990/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "itsadok",
                        "id": 142512,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007478177431039512,
                        "severe_toxicity": 0.0001125394192058593,
                        "obscene": 0.00018550075765233487,
                        "threat": 0.00011402666132198647,
                        "insult": 0.0001737956772558391,
                        "identity_attack": 0.0001390226825606078
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28485988",
                    "id": 28485988,
                    "created_at": "2013-11-14T14:05:54Z",
                    "updated_at": "2013-11-14T14:05:54Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "OK, mea culpa. I missed the part where `Response.json` relies almost entirely on `Response.text` for charset issues. That explains some of the design, and I would have phrased my post differently if I had noticed.\n\nIt seems like I hit a nerve, which was really not my intention. I'm going to close the issue, but there is one pun that I just have to make.\n\n> 1. Your observation that charade will never get called for any content with a text/\\* MIME type is totally correct, and by design. RFC 2616 is incredibly clear on this point.\n\nThe thing is, it seems that in most cases where you'd even want to access the `.text` property, you would also have a text/\\* MIME type (application/json being the exception). That means that the cases where automatic charset detection is actually used are pretty rare, and unpredictable for the user. _So why keep the charade?_\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28485988/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "itsadok",
                        "id": 142512,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0007483605877496302,
                        "severe_toxicity": 0.00011024303967133164,
                        "obscene": 0.0001885393139673397,
                        "threat": 0.00011305000225547701,
                        "insult": 0.0001747573260217905,
                        "identity_attack": 0.00013328954810276628
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28488444",
                    "id": 28488444,
                    "created_at": "2013-11-14T14:39:45Z",
                    "updated_at": "2013-11-14T14:39:45Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "> I merely meant that it should be noted that Response.text should not be used willy-nilly on arbitrary web page, precisely because it avoids using charade in many places where it can be used.\n\nJust because something _can_ be used somewhere does not mean it should be. `charade` is slow as a result of its accuracy and painstaking meticulousness. Using it when it _can_ be used as opposed to when it _must_ be used makes the performance difference in the user's eyes.\n\n> The get_encodings_from_content function is fully copied from requests.utils\n\nBut we never use it. It is cruft and _should_ be removed. It is the wrong way to do things.\n\n> That means that the cases where automatic charset detection is actually used are pretty rare, and unpredictable for the user. So why keep the charade?\n\nYou're assuming everything behaves the same way and that RFCs are followed by servers. They're not. Charade is occasionally used. We keep it because it is essentially part of the API. Response's couldn't have an `apparent_encoding` attribute if we discarded charade. We can break the API if we ever release 3.0 but until then, the API is frozen except for backwards compatible changes. Also, that's an excellent pun.\n\n> It seems like I hit a nerve, which was really not my intention. I'm going to close the issue\n\nI'm going to re-open it. You made valid points as @Lukasa pointed out. It just needs to be clear that this is not any agreement about removing the property.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28488444/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sigmavirus24",
                        "id": 240830,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0009080171585083008,
                        "severe_toxicity": 0.00010699229460442439,
                        "obscene": 0.00019269544281996787,
                        "threat": 0.00011460221139714122,
                        "insult": 0.00017430401931051165,
                        "identity_attack": 0.00013905410014558583
                    }
                },
                {
                    "url": "https://api.github.com/repos/psf/requests/issues/comments/28488797",
                    "id": 28488797,
                    "created_at": "2013-11-14T14:44:20Z",
                    "updated_at": "2013-11-14T14:44:20Z",
                    "author_association": "MEMBER",
                    "body": "Heh, @sigmavirus24 both have the same reactions. Neither of us thinks this issue should be closed: I reopened it just before he could!\n\nNeither of us is angry, or unhappy about having this feedback. We're both delighted. You just can't tell because of the limitations of textual communication! =D\n\nThe reality is that text encoding is hard, everyone is doing the wrong thing from time to time, and we cannot possibly please anyone. For that reason, we do the best we can, and then we expose the `Response.encoding` property for people who don't like the way we do it.\n\nYou've identified good issues with `Response.text`, and I plan to fix them (unless someone else does so first). They're not all backward compatible, so we'll need to sit on them for a bit, but they're good.\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/psf/requests/issues/comments/28488797/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Lukasa",
                        "id": 1382556,
                        "site_admin": false
                    },
                    "comment_sentiments": {
                        "toxicity": 0.0006527530495077372,
                        "severe_toxicity": 0.00011877359065692872,
                        "obscene": 0.00018371168698649853,
                        "threat": 0.00012526976934168488,
                        "insult": 0.00016998258070088923,
                        "identity_attack": 0.00013867051166016608
                    }
                }
            ]
        }
    },
    "issue_dependency": {
        "1": {
            "issue_id": 2622273505,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "2": {
            "issue_id": 2617295858,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "3": {
            "issue_id": 2601341152,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "4": {
            "issue_id": 2601337465,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "5": {
            "issue_id": 2597150655,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "6": {
            "issue_id": 2579970702,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "7": {
            "issue_id": 2566364683,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "8": {
            "issue_id": 2560495194,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "9": {
            "issue_id": 2488949689,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "10": {
            "issue_id": 2467952666,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "11": {
            "issue_id": 2467944147,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "12": {
            "issue_id": 2453668217,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "13": {
            "issue_id": 2447794874,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "14": {
            "issue_id": 2445493555,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "15": {
            "issue_id": 2439802444,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "16": {
            "issue_id": 2433915924,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "17": {
            "issue_id": 2431274058,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "18": {
            "issue_id": 2428863569,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "19": {
            "issue_id": 2417032156,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "20": {
            "issue_id": 2396860900,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "21": {
            "issue_id": 2370269383,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "22": {
            "issue_id": 2370262817,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "23": {
            "issue_id": 2347707641,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "24": {
            "issue_id": 2338910221,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "25": {
            "issue_id": 2333148611,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "26": {
            "issue_id": 2328435863,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "27": {
            "issue_id": 2327497338,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "28": {
            "issue_id": 2324074364,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "29": {
            "issue_id": 2316526442,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "30": {
            "issue_id": 2312650768,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "31": {
            "issue_id": 2308638504,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "32": {
            "issue_id": 2308104459,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "33": {
            "issue_id": 2285865468,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "34": {
            "issue_id": 2281336920,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "35": {
            "issue_id": 2210123960,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "36": {
            "issue_id": 2176501923,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "37": {
            "issue_id": 2157769336,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "38": {
            "issue_id": 2156727937,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "39": {
            "issue_id": 2152354747,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "40": {
            "issue_id": 2150619043,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "41": {
            "issue_id": 2150140274,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "42": {
            "issue_id": 2008770091,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "43": {
            "issue_id": 2000644097,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "44": {
            "issue_id": 1988368738,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "45": {
            "issue_id": 1978580987,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "46": {
            "issue_id": 1971661689,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "47": {
            "issue_id": 1966661607,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "48": {
            "issue_id": 1960808790,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "49": {
            "issue_id": 1949696623,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "50": {
            "issue_id": 1896100712,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "51": {
            "issue_id": 1888745855,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "52": {
            "issue_id": 1863874236,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "53": {
            "issue_id": 1848697407,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "54": {
            "issue_id": 1708743145,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "55": {
            "issue_id": 1704948479,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "56": {
            "issue_id": 1703537523,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "57": {
            "issue_id": 1654506335,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "58": {
            "issue_id": 1636884109,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "59": {
            "issue_id": 1631149287,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "60": {
            "issue_id": 1618801708,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "61": {
            "issue_id": 1574264336,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "62": {
            "issue_id": 1560963030,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "63": {
            "issue_id": 1506222821,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "64": {
            "issue_id": 1465062456,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "65": {
            "issue_id": 1462357280,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "66": {
            "issue_id": 1443045891,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "67": {
            "issue_id": 1440191701,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "68": {
            "issue_id": 1435476003,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "69": {
            "issue_id": 1424104539,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "70": {
            "issue_id": 1419643957,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "71": {
            "issue_id": 1401998263,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "72": {
            "issue_id": 1400226001,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "73": {
            "issue_id": 1391512671,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "74": {
            "issue_id": 1390004728,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "75": {
            "issue_id": 1382483856,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "76": {
            "issue_id": 1374478536,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "77": {
            "issue_id": 1368938993,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "78": {
            "issue_id": 1360883908,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "79": {
            "issue_id": 1355430987,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "80": {
            "issue_id": 1327625146,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "81": {
            "issue_id": 1320190408,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "82": {
            "issue_id": 1298956810,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "83": {
            "issue_id": 1293744958,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "84": {
            "issue_id": 1288922045,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "85": {
            "issue_id": 1288910937,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "86": {
            "issue_id": 1278928229,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "87": {
            "issue_id": 1276016823,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "88": {
            "issue_id": 1275758940,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "89": {
            "issue_id": 1268321914,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "90": {
            "issue_id": 1266333457,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "91": {
            "issue_id": 1244638913,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "92": {
            "issue_id": 1244044304,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "93": {
            "issue_id": 1242045051,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "94": {
            "issue_id": 1232797065,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "95": {
            "issue_id": 1228062318,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "96": {
            "issue_id": 1226490072,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "97": {
            "issue_id": 1224967057,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "98": {
            "issue_id": 1223719666,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "99": {
            "issue_id": 1220894214,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "100": {
            "issue_id": 1209453328,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "101": {
            "issue_id": 1191981901,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "102": {
            "issue_id": 1191322611,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "103": {
            "issue_id": 1178140499,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "104": {
            "issue_id": 1170383353,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "105": {
            "issue_id": 1113918664,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "106": {
            "issue_id": 1091897772,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "107": {
            "issue_id": 1091484277,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "108": {
            "issue_id": 1089176381,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "109": {
            "issue_id": 1082739182,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "110": {
            "issue_id": 1077668422,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "111": {
            "issue_id": 1052405538,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "112": {
            "issue_id": 1021171999,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "113": {
            "issue_id": 1016443852,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "114": {
            "issue_id": 998380556,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "115": {
            "issue_id": 985083834,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "116": {
            "issue_id": 980930645,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "117": {
            "issue_id": 944382996,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "118": {
            "issue_id": 938529554,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "119": {
            "issue_id": 904032198,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "120": {
            "issue_id": 891696495,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "121": {
            "issue_id": 886491580,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "122": {
            "issue_id": 836016285,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "123": {
            "issue_id": 833712902,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "124": {
            "issue_id": 805501636,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "125": {
            "issue_id": 805400543,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "126": {
            "issue_id": 804678861,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "127": {
            "issue_id": 802720321,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "128": {
            "issue_id": 802017200,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "129": {
            "issue_id": 796256743,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "130": {
            "issue_id": 792638349,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "131": {
            "issue_id": 791814139,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "132": {
            "issue_id": 791526254,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "133": {
            "issue_id": 781373560,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "134": {
            "issue_id": 774742813,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "135": {
            "issue_id": 764088748,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "136": {
            "issue_id": 762917561,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "137": {
            "issue_id": 755724610,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "138": {
            "issue_id": 752649243,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "139": {
            "issue_id": 750244584,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "140": {
            "issue_id": 746843383,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "141": {
            "issue_id": 729507670,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "142": {
            "issue_id": 714114435,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "143": {
            "issue_id": 708215345,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "144": {
            "issue_id": 692373612,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "145": {
            "issue_id": 668903401,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "146": {
            "issue_id": 665135091,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "147": {
            "issue_id": 660816593,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "148": {
            "issue_id": 641242223,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "149": {
            "issue_id": 639579432,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "150": {
            "issue_id": 636196928,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "151": {
            "issue_id": 621354329,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "152": {
            "issue_id": 619752546,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "153": {
            "issue_id": 614907671,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "154": {
            "issue_id": 607860646,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "155": {
            "issue_id": 606483070,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "156": {
            "issue_id": 602744441,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "157": {
            "issue_id": 592523068,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "158": {
            "issue_id": 580653057,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "159": {
            "issue_id": 566817921,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "160": {
            "issue_id": 550522326,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "161": {
            "issue_id": 522980865,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "162": {
            "issue_id": 520055151,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "163": {
            "issue_id": 519861422,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "164": {
            "issue_id": 517568621,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "165": {
            "issue_id": 511283605,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "166": {
            "issue_id": 508622251,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "167": {
            "issue_id": 504608266,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "168": {
            "issue_id": 501663168,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "169": {
            "issue_id": 501644975,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "170": {
            "issue_id": 501092513,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "171": {
            "issue_id": 495858434,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "172": {
            "issue_id": 494624604,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "173": {
            "issue_id": 493850293,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "174": {
            "issue_id": 488930661,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "175": {
            "issue_id": 488819667,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "176": {
            "issue_id": 487366546,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "177": {
            "issue_id": 486283008,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "178": {
            "issue_id": 485992682,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "179": {
            "issue_id": 485962234,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "180": {
            "issue_id": 483683996,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "181": {
            "issue_id": 480694119,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "182": {
            "issue_id": 476422332,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "183": {
            "issue_id": 469878823,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "184": {
            "issue_id": 466210052,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "185": {
            "issue_id": 463974765,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "186": {
            "issue_id": 463771555,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "187": {
            "issue_id": 453975653,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "188": {
            "issue_id": 449473763,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "189": {
            "issue_id": 445060555,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "190": {
            "issue_id": 442846687,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "191": {
            "issue_id": 434029127,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "192": {
            "issue_id": 426347341,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "193": {
            "issue_id": 425199662,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "194": {
            "issue_id": 422092368,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "195": {
            "issue_id": 420973695,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "196": {
            "issue_id": 417421164,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "197": {
            "issue_id": 414095090,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "198": {
            "issue_id": 413885095,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "199": {
            "issue_id": 413494208,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "200": {
            "issue_id": 413363129,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "201": {
            "issue_id": 407445365,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "202": {
            "issue_id": 404226225,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "203": {
            "issue_id": 399365119,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "204": {
            "issue_id": 398171423,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "205": {
            "issue_id": 395415751,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "206": {
            "issue_id": 394710773,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "207": {
            "issue_id": 393115557,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "208": {
            "issue_id": 388355491,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "209": {
            "issue_id": 380254230,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "210": {
            "issue_id": 373692014,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "211": {
            "issue_id": 372482456,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "212": {
            "issue_id": 370965521,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "213": {
            "issue_id": 365528185,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "214": {
            "issue_id": 361042061,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "215": {
            "issue_id": 343920747,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "216": {
            "issue_id": 339479519,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "217": {
            "issue_id": 332556014,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "218": {
            "issue_id": 327141477,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "219": {
            "issue_id": 316075823,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "220": {
            "issue_id": 314514389,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "221": {
            "issue_id": 292332152,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "222": {
            "issue_id": 287220555,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "223": {
            "issue_id": 281148349,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "224": {
            "issue_id": 271213442,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "225": {
            "issue_id": 262873207,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "226": {
            "issue_id": 262203652,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "227": {
            "issue_id": 247004428,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "228": {
            "issue_id": 232804149,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "229": {
            "issue_id": 215269887,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "230": {
            "issue_id": 202820492,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "231": {
            "issue_id": 194476114,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "232": {
            "issue_id": 188539424,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "233": {
            "issue_id": 159287397,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "234": {
            "issue_id": 154319859,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "235": {
            "issue_id": 99878720,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "236": {
            "issue_id": 87745606,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "237": {
            "issue_id": 72459274,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "238": {
            "issue_id": 56194102,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "239": {
            "issue_id": 52934168,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "240": {
            "issue_id": 43205423,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "241": {
            "issue_id": 43191940,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "242": {
            "issue_id": 39202386,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "243": {
            "issue_id": 36326374,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "244": {
            "issue_id": 35202262,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "245": {
            "issue_id": 34191133,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "246": {
            "issue_id": 32203116,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "247": {
            "issue_id": 31505086,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "248": {
            "issue_id": 29363729,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        },
        "249": {
            "issue_id": 22655515,
            "dependency_id": "788290375758465e9b699ee777c32aa028f65daa1d4b8b1db06cc2082c7a64e8"
        }
    }
}