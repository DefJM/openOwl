{
  "issue": {
    "html_url": "https://github.com/psf/requests/issues/6711",
    "id": 2308638504,
    "number": 6711,
    "title": "breaking aws s3 usage with requests 2.32.0",
    "created_at": "2024-05-21T16:04:59Z",
    "updated_at": "2024-07-03T10:36:54Z",
    "closed_at": null,
    "body": "requests 2.32.0 introduced a change https://github.com/psf/requests/pull/6644 that strips double /. \r\n\r\nThis has introduced an issue where generated presigned urls for s3 keys that start with a / can no longer be used. requests now strips that second / meaning that the key is modified and the signature does not match resulting in 403 errors. We can adjust to remove the leading / in our keys but this may be affecting other users or use cases\r\n\r\n## Expected Result\r\n\r\nTo be able to use presigned_urls for s3 keys with leading \"/\"\r\n\r\n## Actual Result\r\n\r\nURL that was passed was modified resulting in a 403 error response from aws\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport boto3\r\ns3 = boto3.client('s3')\r\nbucket = \"bucket\"\r\nkey = \"/key_with_leading_slash.txt\"\r\npresigned_url = s3.generate_presigned_url(\"get_object\", Params={'Bucket': bucket, 'Key': key})\r\nrequests.get(presigned_url)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.1.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.15\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "author_association": "NONE",
    "comments": 13,
    "state": "open",
    "user": {
      "login": "kristianelliott80",
      "id": 34159454,
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6711/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "assignees": []
  },
  "comments": [
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2191427456",
      "id": 2191427456,
      "created_at": "2024-06-26T11:07:44Z",
      "updated_at": "2024-06-26T11:07:44Z",
      "author_association": "NONE",
      "body": "I can second this. It's not only AWS. We just hit this problem with a completely unrelated web service that also behaves differently if the double leading slash is normalized to one.",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191427456/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "crabhi",
        "id": 1015246,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2191511247",
      "id": 2191511247,
      "created_at": "2024-06-26T11:58:40Z",
      "updated_at": "2024-06-26T11:58:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "I believe the s3 use case is being addressed by AWS in their SDK. \n\nAs for a service that expects a URI whose path is not normalized and returns different behavior, that's not compliant with any RFC or security best practices. I'm not losing sleep over that not working ",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191511247/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "sigmavirus24",
        "id": 240830,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2191578590",
      "id": 2191578590,
      "created_at": "2024-06-26T12:33:18Z",
      "updated_at": "2024-06-26T13:32:27Z",
      "author_association": "NONE",
      "body": "Thanks for your response! Why do you think double slash is not compliant with any RFC? I agree it's unusual but that service is not under our control.\r\n\r\nReading [RFC3986, section 3.3](https://datatracker.ietf.org/doc/html/rfc3986#section-3.3), it seems to me the case of double leading slash is legal. It doesn't contradict anything in the text and it conforms to the ABNF below: using `path-abempty` (because `authority` is present, also used in ABNF at the beginning of Sec. 3). The first `segment` would be zero-length which is allowed in `path-abempty` as opposed to `path-absolute`.",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191578590/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "crabhi",
        "id": 1015246,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2191588650",
      "id": 2191588650,
      "created_at": "2024-06-26T12:37:51Z",
      "updated_at": "2024-06-26T12:37:51Z",
      "author_association": "NONE",
      "body": "Another case in point - `curl` handles leading double slash just fine. Source: my testing with mitmproxy.",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191588650/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "crabhi",
        "id": 1015246,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2191691410",
      "id": 2191691410,
      "created_at": "2024-06-26T13:23:26Z",
      "updated_at": "2024-06-26T13:23:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "It is absolutely a valid URI. It's also semantically equivalent to the normalized version and must be treated that way. `GET //example` is equivalent to `GET /example`",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191691410/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "sigmavirus24",
        "id": 240830,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2191721951",
      "id": 2191721951,
      "created_at": "2024-06-26T13:36:08Z",
      "updated_at": "2024-06-26T13:36:08Z",
      "author_association": "NONE",
      "body": "What defines the normalization? In that RFC, I can find only about \"dot-segment removal\". This is a genuine question - I'm but a user. I have never had to implement URL parsing, so there may be another RFC I don't know about that defines this normalization.\r\n\r\nThe path `//example` is equivalent to `/example` in a filesystem. But is it necessarily true for an URI/URL?",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2191721951/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "crabhi",
        "id": 1015246,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2196910185",
      "id": 2196910185,
      "created_at": "2024-06-28T13:30:40Z",
      "updated_at": "2024-06-28T13:30:40Z",
      "author_association": "NONE",
      "body": "> I believe the s3 use case is being addressed by AWS in their SDK.\r\n\r\n@sigmavirus24 where have you seen this? Is there an issue or something you can point us towards?",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2196910185/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "SpoonMeiser",
        "id": 255844,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2197013655",
      "id": 2197013655,
      "created_at": "2024-06-28T14:06:10Z",
      "updated_at": "2024-06-28T14:06:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "I don't follow the issues there but I had a conversation with one of the python SDK maintainers. I won't tag them here though so that they don't get harangued as this community is wont to do",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2197013655/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "sigmavirus24",
        "id": 240830,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2197124131",
      "id": 2197124131,
      "created_at": "2024-06-28T14:55:44Z",
      "updated_at": "2024-06-28T14:55:44Z",
      "author_association": "NONE",
      "body": "I couldn't find an issue for it, so I created one: https://github.com/boto/boto3/issues/4181\r\n\r\n@sigmavirus24 if you have another conversation with your maintainer friend, you could point him at this issue, and those of us that don't care whether the requests behaviour is technically right or not and only want it to work with S3, can watch to see when that issue gets resolved.",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2197124131/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "SpoonMeiser",
        "id": 255844,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2197261277",
      "id": 2197261277,
      "created_at": "2024-06-28T16:19:37Z",
      "updated_at": "2024-06-28T16:19:37Z",
      "author_association": "NONE",
      "body": "For what it's worth, I don't care that much about RFC legalese. The problem is I also see a web service (completely unrelated to S3, not even a storage) that doesn't work correctly when queried from `requests`.\r\n\r\nIf we can agree the previous behaviour was a bug WRT the colon handling in the first path segment but the current fix introduced another bug, I can try to contribute a patch to `urllib3` to fix the colon issue there, so that #6644 can be reverted.",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2197261277/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "crabhi",
        "id": 1015246,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2198804057",
      "id": 2198804057,
      "created_at": "2024-06-30T23:33:20Z",
      "updated_at": "2024-06-30T23:33:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "I don't agree that stripping the redundant and superfluous slash is a bug. I also think that urllib3 can be improved in general around this but doing so in a backwards compatible fashion that doesn't recreate this bug but in a lower part of the stack isn't going to improve things ",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2198804057/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 1,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "sigmavirus24",
        "id": 240830,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2199601374",
      "id": 2199601374,
      "created_at": "2024-07-01T08:55:39Z",
      "updated_at": "2024-07-01T08:55:39Z",
      "author_association": "NONE",
      "body": "I tried a few other clients - Python stdlib, Curl, Go stdlib, Elixir Req, Groovy stdlib (probably same as Java) - and I couldn't find another one that strips the slashes. Also, I've tested a few servers (Python http.server, Nginx and Apache) and neither of them \"normalizes\" the slashes.\r\n\r\nhttps://gist.github.com/crabhi/080d746e3eb4fc53380bc8291cdd0f7d\r\n\r\n@sigmavirus24 what leads you to believe the slash is \"redundant and superfluous\"? I see this is not an issue that would affect many people, so I'm willing to contribute a fix that would work in line with other clients. Other options I have are no joy - staying on 2.31, or maintaining a fork, or using Python stdlib for this particular request.",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2199601374/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "crabhi",
        "id": 1015246,
        "site_admin": false
      }
    },
    {
      "url": "https://api.github.com/repos/psf/requests/issues/comments/2205754330",
      "id": 2205754330,
      "created_at": "2024-07-03T10:36:53Z",
      "updated_at": "2024-07-03T10:36:53Z",
      "author_association": "NONE",
      "body": "For what it's worth, the issue I raised against boto got rejected, so it appears the python SDK developers are _not_ planning to address this in the SDK.\r\n\r\nInstead, the suggestion is for when using requests, to use a prepared request and escape the first slash. I have not tested this myself.",
      "reactions": {
        "url": "https://api.github.com/repos/psf/requests/issues/comments/2205754330/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "performed_via_github_app": null,
      "user": {
        "login": "SpoonMeiser",
        "id": 255844,
        "site_admin": false
      }
    }
  ]
}