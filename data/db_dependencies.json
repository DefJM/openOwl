{"dependencies": {"1": {"package_manager": "pypi", "owner": "pandas-dev", "name": "pandas", "version": "2.2.3", "id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "2": {"package_manager": "pypi", "owner": "pydantic", "name": "pydantic", "version": "2.10.3", "id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}}, "issues": {"1": {"html_url": "https://github.com/pandas-dev/pandas/pull/60525", "id": 2725011974, "number": 60525, "title": "Update frame.rst", "created_at": "2024-12-08T07:39:25Z", "updated_at": "2024-12-08T07:39:25Z", "closed_at": null, "body": "Fix the navigation bar\r\n\r\n- [ ] closes #60492  (Replace xxxx with the GitHub issue number)\r\n- [ ] [Tests added and passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#writing-tests) if fixing a bug or adding a new feature\r\n- [ ] All [code checks passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#pre-commit).\r\n- [ ] Added [type annotations](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#type-hints) to new arguments/methods/functions.\r\n- [ ] Added an entry in the latest `doc/source/whatsnew/vX.X.X.rst` file if fixing a bug or adding a new feature.\r\n\r\npandas.DataFrame.head and pandas.DataFrame.tail appear twice in the navigation bar, and they jump to the same location.\r\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "easternsun7", "id": 165460574, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "2": {"html_url": "https://github.com/pandas-dev/pandas/pull/60524", "id": 2724919914, "number": 60524, "title": "DOC: fix broken link in Resampler.bfill", "created_at": "2024-12-08T03:00:13Z", "updated_at": "2024-12-08T04:25:59Z", "closed_at": null, "body": "It's weird that the trailing `)` was not included after rendering, causing the link broken.\r\n\r\n![ref](https://github.com/user-attachments/assets/c294042b-23d6-452a-8d0a-c64783e9d1ae)\r\n\r\n\r\n- [ ] closes #xxxx (Replace xxxx with the GitHub issue number)\r\n- [ ] [Tests added and passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#writing-tests) if fixing a bug or adding a new feature\r\n- [ ] All [code checks passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#pre-commit).\r\n- [ ] Added [type annotations](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#type-hints) to new arguments/methods/functions.\r\n- [ ] Added an entry in the latest `doc/source/whatsnew/vX.X.X.rst` file if fixing a bug or adding a new feature.\r\n", "author_association": "CONTRIBUTOR", "comments": 1, "state": "open", "user": {"login": "yuanx749", "id": 47032563, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525412353", "id": 2525412353, "created_at": "2024-12-08T04:25:51Z", "updated_at": "2024-12-08T04:25:51Z", "author_association": "CONTRIBUTOR", "body": "/preview", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525412353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "yuanx749", "id": 47032563, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006455083494074643, "severe_toxicity": 0.00011920827091671526, "obscene": 0.00018397865642327815, "threat": 0.00011387409904273227, "insult": 0.0001791148679330945, "identity_attack": 0.0001411714038113132}}]}, "3": {"html_url": "https://github.com/pandas-dev/pandas/pull/60523", "id": 2724916564, "number": 60523, "title": "DOC: Fix docstrings for errors", "created_at": "2024-12-08T02:47:59Z", "updated_at": "2024-12-08T02:47:59Z", "closed_at": null, "body": "fixs\r\n\r\n        -i \"pandas.errors.NullFrequencyError SA01\" \\\r\n        -i \"pandas.errors.NumbaUtilError SA01\" \\\r\n        -i \"pandas.errors.PerformanceWarning SA01\" \\\r\n\r\n", "author_association": "CONTRIBUTOR", "comments": 0, "state": "open", "user": {"login": "sunlight798", "id": 138234530, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "4": {"html_url": "https://github.com/pandas-dev/pandas/issues/60522", "id": 2724837854, "number": 60522, "title": "BUG: `ListAccessor` does not preserve series name", "created_at": "2024-12-07T22:26:50Z", "updated_at": "2024-12-08T09:37:44Z", "closed_at": null, "body": "### Pandas version checks\r\n\r\n- [X] I have checked that this issue has not already been reported.\r\n\r\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\r\n\r\n- [ ] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\r\n\r\n\r\n### Reproducible Example\r\n\r\n```python\r\nimport pandas as pd\r\nimport pyarrow as pa\r\n\r\ndf = pd.DataFrame({\r\n    \"a\": [[1,2,3], [4,5]],\r\n    \"b\": [\"hello\", \"pandas\"]\r\n}).astype({\"a\": pd.ArrowDtype(pa.list_(pa.int64()))})\r\n\r\ndf[\"a\"].list.len().name, df[\"b\"].str.len().name\r\n# (None, \"b\")\r\n```\r\n\r\n\r\n### Issue Description\r\n\r\n`ListAccessor` nullifies the series name (`list.len()` is just an example, other available methods lead to the same outcome).\r\n\r\n### Expected Behavior\r\n\r\nSeries name to be preserved, as per other accessor (see `.str.len()` in the example)\r\n\r\n### Installed Versions\r\n\r\nTL;DR for relevant:\r\npandas                : 2.2.3\r\npyarrow               : 18.1.0\r\nnumpy                 : 2.1.3\r\n\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit                : 0691c5cf90477d3503834d983f69350f250a6ff7\r\npython                : 3.12.2\r\npython-bits           : 64\r\nOS                    : Linux\r\nOS-release            : 5.15.133.1-microsoft-standard-WSL2\r\nVersion               : #1 SMP Thu Oct 5 21:02:42 UTC 2023\r\nmachine               : x86_64\r\nprocessor             : x86_64\r\nbyteorder             : little\r\nLC_ALL                : None\r\nLANG                  : C.UTF-8\r\nLOCALE                : C.UTF-8\r\n\r\npandas                : 2.2.3\r\nnumpy                 : 2.1.3\r\npytz                  : 2024.2\r\ndateutil              : 2.9.0.post0\r\npip                   : None\r\nCython                : None\r\nsphinx                : None\r\nIPython               : 8.29.0\r\nadbc-driver-postgresql: None\r\nadbc-driver-sqlite    : None\r\nbs4                   : 4.12.3\r\nblosc                 : None\r\nbottleneck            : None\r\ndataframe-api-compat  : None\r\nfastparquet           : None\r\nfsspec                : 2024.10.0\r\nhtml5lib              : None\r\nhypothesis            : 6.122.1\r\ngcsfs                 : None\r\njinja2                : 3.1.4\r\nlxml.etree            : None\r\nmatplotlib            : 3.9.3\r\nnumba                 : None\r\nnumexpr               : None\r\nodfpy                 : None\r\nopenpyxl              : None\r\npandas_gbq            : None\r\npsycopg2              : None\r\npymysql               : None\r\npyarrow               : 18.1.0\r\npyreadstat            : None\r\npytest                : 8.3.4\r\npython-calamine       : None\r\npyxlsb                : None\r\ns3fs                  : None\r\nscipy                 : 1.14.1\r\nsqlalchemy            : None\r\ntables                : None\r\ntabulate              : None\r\nxarray                : None\r\nxlrd                  : 2.0.1\r\nxlsxwriter            : None\r\nzstandard             : None\r\ntzdata                : 2024.2\r\nqtpy                  : None\r\npyqt5                 : None", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "FBruzzesi", "id": 42817048, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "5": {"html_url": "https://github.com/pandas-dev/pandas/pull/60521", "id": 2724698006, "number": 60521, "title": "#Duplicated names in concatenation", "created_at": "2024-12-07T16:02:53Z", "updated_at": "2024-12-07T16:56:17Z", "closed_at": null, "body": "- [ ] closes #60504\r\n- [ ] [Tests added and passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#writing-tests) if fixing a bug or adding a new feature\r\n- [x] All [code checks passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#pre-commit).\r\n- [x] Added [type annotations](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#type-hints) to new arguments/methods/functions.\r\n- [ ] Added an entry in the latest `doc/source/whatsnew/vX.X.X.rst` file if fixing a bug or adding a new feature.\r\n", "author_association": "NONE", "comments": 1, "state": "open", "user": {"login": "kevkle", "id": 33009654, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525230355", "id": 2525230355, "created_at": "2024-12-07T16:11:39Z", "updated_at": "2024-12-07T16:11:39Z", "author_association": "NONE", "body": "I am not sure if this functionality should be a private method in the Index class. \r\n\r\nLet me know what you think ?\r\n", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525230355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "kevkle", "id": 33009654, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006729178712703288, "severe_toxicity": 0.0001168448943644762, "obscene": 0.00016612271429039538, "threat": 0.00012882272130809724, "insult": 0.00017996638780459762, "identity_attack": 0.0001444775116397068}}]}, "6": {"html_url": "https://github.com/pandas-dev/pandas/pull/60520", "id": 2724696132, "number": 60520, "title": "Add extended summary for fullmatch, match, pad, repeat, slice and slice_replace", "created_at": "2024-12-07T15:58:46Z", "updated_at": "2024-12-07T15:58:46Z", "closed_at": null, "body": "Added extended summary (ES01) of below methods:\r\n\r\n```\r\n-i \"pandas.Series.str.fullmatch\" \\\r\n-i \"pandas.Series.str.match\" \\ \r\n-i \"pandas.Series.str.pad\" \\\r\n-i \"pandas.Series.str.repeat\" \\\r\n-i \"pandas.Series.str.slice\" \\\r\n-i \"pandas.Series.str.slice_replace\" \\\r\n```", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "Nanashi-bot", "id": 72292940, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "7": {"html_url": "https://github.com/pandas-dev/pandas/pull/60519", "id": 2724661981, "number": 60519, "title": "BUG: Fix multi-index on columns with bool level values does not roundtrip through parquet", "created_at": "2024-12-07T14:58:41Z", "updated_at": "2024-12-08T01:26:01Z", "closed_at": null, "body": "- [x] closes #60508  (Replace xxxx with the GitHub issue number)\r\n- [x] [Tests added and passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#writing-tests) if fixing a bug or adding a new feature\r\n- [ ] All [code checks passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#pre-commit).\r\n- [x] Added an entry in the latest `doc/source/whatsnew/v3.0.0.rst` file if fixing a bug or adding a new feature.\r\n", "author_association": "CONTRIBUTOR", "comments": 0, "state": "open", "user": {"login": "sunlight798", "id": 138234530, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "8": {"html_url": "https://github.com/pandas-dev/pandas/pull/60518", "id": 2724454656, "number": 60518, "title": "updated v to conv_val in that function", "created_at": "2024-12-07T07:59:42Z", "updated_at": "2024-12-07T07:59:42Z", "closed_at": null, "body": "- [ ] closes #60517 (Replace xxxx with the GitHub issue number)\r\nno issues arose with change-\r\nissue addressed with no problems in functionality", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "migelogali", "id": 107483586, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "9": {"html_url": "https://github.com/pandas-dev/pandas/issues/60517", "id": 2724454232, "number": 60517, "title": "DOC: Convert v to conv_val in function for pytables.py", "created_at": "2024-12-07T07:58:29Z", "updated_at": "2024-12-07T07:58:48Z", "closed_at": null, "body": "### Pandas version checks\n\n- [X] I have checked that the issue still exists on the latest versions of the docs on `main` [here](https://pandas.pydata.org/docs/dev/)\n\n\n### Location of the documentation\n\npandas\\pandas\\core\\computation\\pytables.py\n\n### Documentation problem\n\nMany instances of just v in this function. Wanted to clarify throughout\n\n### Suggested fix for documentation\n\nChange v to conv_val", "author_association": "NONE", "comments": 1, "state": "open", "user": {"login": "migelogali", "id": 107483586, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [{"login": "migelogali", "id": 107483586, "node_id": "U_kgDOBmgRwg", "avatar_url": "https://avatars.githubusercontent.com/u/107483586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/migelogali", "html_url": "https://github.com/migelogali", "followers_url": "https://api.github.com/users/migelogali/followers", "following_url": "https://api.github.com/users/migelogali/following{/other_user}", "gists_url": "https://api.github.com/users/migelogali/gists{/gist_id}", "starred_url": "https://api.github.com/users/migelogali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/migelogali/subscriptions", "organizations_url": "https://api.github.com/users/migelogali/orgs", "repos_url": "https://api.github.com/users/migelogali/repos", "events_url": "https://api.github.com/users/migelogali/events{/privacy}", "received_events_url": "https://api.github.com/users/migelogali/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524995813", "id": 2524995813, "created_at": "2024-12-07T07:58:37Z", "updated_at": "2024-12-07T07:58:37Z", "author_association": "NONE", "body": "take", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524995813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "migelogali", "id": 107483586, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0017316780285909772, "severe_toxicity": 0.00010141733946511522, "obscene": 0.0002310213603777811, "threat": 0.00010367215145379305, "insult": 0.00019131143926642835, "identity_attack": 0.00014188962813932449}}]}, "10": {"html_url": "https://github.com/pandas-dev/pandas/pull/60516", "id": 2724430662, "number": 60516, "title": "Added numpy project to ndarray shape and ndim to fix hyperlink", "created_at": "2024-12-07T07:02:31Z", "updated_at": "2024-12-07T07:02:31Z", "closed_at": null, "body": "- [X] closes #60515 \r\n\r\nUpdated the \"See Also\" section for ndarray.shape and ndarray.ndim to allow the hyperlinks to work.\r\nLet me know if any additional changes are needed!\r\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "Shubhank-Gyawali", "id": 68085066, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "11": {"html_url": "https://github.com/pydantic/pydantic/issues/11062", "id": 2724644616, "number": 11062, "title": "Replacing python-email-validator with emval for a 100x Faster Validation", "created_at": "2024-12-07T14:17:41Z", "updated_at": "2024-12-07T14:18:19Z", "closed_at": null, "body": "### Initial Checks\r\n\r\n- [X] I have searched Google & GitHub for similar requests and couldn't find anything\r\n- [X] I have read and followed [the docs](https://docs.pydantic.dev) and still think this feature is missing\r\n\r\n### Description\r\n\r\n`pydantic[email]` currently relies on `python-email-validator`. I\u2019d like to suggest exploring a switch to [emval](https://github.com/bnkc/emval/), a Rust-powered email validator that's 100-1000x faster than other validators. Faster validation would benefit large-scale applications or services processing a high volume of user input (libraries such as [patito](https://github.com/JakobGM/patito) validating polars/pandas df's using pydantic under the hood).\r\n\r\n`emval` offers:\r\n\r\n- Compliance with RFC 5322 / RFC 6531\r\n- Internationalized domain & local part support\r\n- Normalized output and friendly error messages\r\n\r\n**Example Code**\r\n\r\n```python\r\nfrom emval import validate_email\r\n\r\nvalidated = validate_email(\"test@example.com\")\r\nprint(validated.normalized)\r\n```\r\n\r\nIn essence it's implimentation for `validate_email` is almost the exact same as [python-email-validator](https://github.com/JoshData/python-email-validator).\r\n\r\n**Shameless Plug**\r\n\r\nI am the author of [emval](https://github.com/bnkc/emval/) \ud83d\ude0a\u2764\ufe0f\r\n\r\n\r\n### Affected Components\r\n\r\n- [ ] [Compatibility between releases](https://docs.pydantic.dev/changelog/)\r\n- [X] [Data validation/parsing](https://docs.pydantic.dev/concepts/models/#basic-model-usage)\r\n- [ ] [Data serialization](https://docs.pydantic.dev/concepts/serialization/) - `.model_dump()` and `.model_dump_json()`\r\n- [ ] [JSON Schema](https://docs.pydantic.dev/concepts/json_schema/)\r\n- [ ] [Dataclasses](https://docs.pydantic.dev/concepts/dataclasses/)\r\n- [ ] [Model Config](https://docs.pydantic.dev/concepts/config/)\r\n- [X] [Field Types](https://docs.pydantic.dev/api/types/) - adding or changing a particular data type\r\n- [ ] [Function validation decorator](https://docs.pydantic.dev/concepts/validation_decorator/)\r\n- [ ] [Generic Models](https://docs.pydantic.dev/concepts/models/#generic-models)\r\n- [ ] [Other Model behaviour](https://docs.pydantic.dev/concepts/models/) - `model_construct()`, pickling, private attributes, ORM mode\r\n- [ ] [Plugins](https://docs.pydantic.dev/) and integration with other tools - mypy, FastAPI, python-devtools, Hypothesis, VS Code, PyCharm, etc.", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "bnkc", "id": 34930566, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "12": {"html_url": "https://github.com/pydantic/pydantic/pull/11060", "id": 2723895504, "number": 11060, "title": "Rewrite validators documentation", "created_at": "2024-12-06T20:46:18Z", "updated_at": "2024-12-06T20:57:01Z", "closed_at": null, "body": "<!-- Thank you for your contribution! -->\r\n<!-- Unless your change is trivial, please create an issue to discuss the change before creating a PR -->\r\n\r\n## Change Summary\r\n\r\n<!-- Please give a short summary of the changes. -->\r\n\r\n## Related issue number\r\n\r\n<!-- WARNING: please use \"fix #123\" style references so the issue is closed when this PR is merged. -->\r\n\r\n## Checklist\r\n\r\n* [ ] The pull request title is a good summary of the changes - it will be used in the changelog\r\n* [ ] Unit tests for the changes exist\r\n* [ ] Tests pass on CI\r\n* [ ] Documentation reflects the changes where applicable\r\n* [ ] My PR is ready to review, **please add a comment including the phrase \"please review\" to assign reviewers**\r\n", "author_association": "MEMBER", "comments": 2, "state": "open", "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2524152511", "id": 2524152511, "created_at": "2024-12-06T20:50:20Z", "updated_at": "2024-12-06T20:52:28Z", "author_association": "NONE", "body": "## Deploying pydantic-docs with &nbsp;<a href=\"https://pages.dev\"><img alt=\"Cloudflare Pages\" src=\"https://user-images.githubusercontent.com/23264/106598434-9e719e00-654f-11eb-9e59-6167043cfa01.png\" width=\"16\"></a> &nbsp;Cloudflare Pages\n\n<table><tr><td><strong>Latest commit:</strong> </td><td>\n<code>0ec2a4c</code>\n</td></tr>\n<tr><td><strong>Status:</strong></td><td>&nbsp;\u2705&nbsp; Deploy successful!</td></tr>\n<tr><td><strong>Preview URL:</strong></td><td>\n<a href='https://97ce1275.pydantic-docs.pages.dev'>https://97ce1275.pydantic-docs.pages.dev</a>\n</td></tr>\n<tr><td><strong>Branch Preview URL:</strong></td><td>\n<a href='https://validators-docs.pydantic-docs.pages.dev'>https://validators-docs.pydantic-docs.pages.dev</a>\n</td></tr>\n</table>\n\n[View logs](https://dash.cloudflare.com/?to=/:account/pages/view/pydantic-docs/97ce1275-6154-4b39-8c4e-bdf0160d9bd3)\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2524152511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 85455, "client_id": "Iv1.0879b6ff6c8f7a1a", "slug": "cloudflare-workers-and-pages", "node_id": "MDM6QXBwODU0NTU=", "owner": {"login": "cloudflare", "id": 314135, "node_id": "MDEyOk9yZ2FuaXphdGlvbjMxNDEzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/314135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cloudflare", "html_url": "https://github.com/cloudflare", "followers_url": "https://api.github.com/users/cloudflare/followers", "following_url": "https://api.github.com/users/cloudflare/following{/other_user}", "gists_url": "https://api.github.com/users/cloudflare/gists{/gist_id}", "starred_url": "https://api.github.com/users/cloudflare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cloudflare/subscriptions", "organizations_url": "https://api.github.com/users/cloudflare/orgs", "repos_url": "https://api.github.com/users/cloudflare/repos", "events_url": "https://api.github.com/users/cloudflare/events{/privacy}", "received_events_url": "https://api.github.com/users/cloudflare/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "Cloudflare Workers and Pages", "description": "", "external_url": "https://cloudflare.com/", "html_url": "https://github.com/apps/cloudflare-workers-and-pages", "created_at": "2020-10-19T20:23:00Z", "updated_at": "2024-09-19T15:15:04Z", "permissions": {"checks": "write", "contents": "read", "deployments": "write", "metadata": "read", "pull_requests": "write"}, "events": ["pull_request", "push"]}, "user": {"login": "cloudflare-workers-and-pages[bot]", "id": 73139402, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0015411826316267252, "severe_toxicity": 0.00010164757259190083, "obscene": 0.00025350996293127537, "threat": 0.00011071670451201499, "insult": 0.00019547647389117628, "identity_attack": 0.00014025230484548956}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2524154642", "id": 2524154642, "created_at": "2024-12-06T20:51:53Z", "updated_at": "2024-12-06T20:57:01Z", "author_association": "NONE", "body": "## [CodSpeed Performance Report](https://codspeed.io/pydantic/pydantic/branches/validators-docs)\n\n### Merging #11060 will **not alter performance**\n\n<sub>Comparing <code>validators-docs</code> (0ec2a4c) with <code>main</code> (32f405b)</sub>\n\n\n\n### Summary\n\n`\u2705 46` untouched benchmarks  \n\n\n\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2524154642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 257293, "client_id": "Iv1.e7febeb3870a36fb", "slug": "codspeed-hq", "node_id": "A_kwHOBvQP3M4AA-0N", "owner": {"login": "CodSpeedHQ", "id": 116658140, "node_id": "O_kgDOBvQP3A", "avatar_url": "https://avatars.githubusercontent.com/u/116658140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodSpeedHQ", "html_url": "https://github.com/CodSpeedHQ", "followers_url": "https://api.github.com/users/CodSpeedHQ/followers", "following_url": "https://api.github.com/users/CodSpeedHQ/following{/other_user}", "gists_url": "https://api.github.com/users/CodSpeedHQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodSpeedHQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodSpeedHQ/subscriptions", "organizations_url": "https://api.github.com/users/CodSpeedHQ/orgs", "repos_url": "https://api.github.com/users/CodSpeedHQ/repos", "events_url": "https://api.github.com/users/CodSpeedHQ/events{/privacy}", "received_events_url": "https://api.github.com/users/CodSpeedHQ/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "CodSpeed HQ", "description": "## What is [CodSpeed](https://codspeed.io)?\r\nCodSpeed is a **continuous benchmarking** platform that allows you to **track** and **compare** the **performance** of your codebase during development.\r\n\r\nIt uses a smart **runtime engine** to measure the performance of your code in an **accurate** and **reproducible** way without creating a huge **runtime overhead**, unlike traditional benchmarks.\r\n\r\nCodSpeed produces detailed **performance reports** helping you **improve** your codebase **performance**, directly **within your repository provider** (Pull Requests comments, Merge checks, ...).\r\n\r\n## How it works\r\n\r\nThe core of the **performance measurement** is done directly within your **CI environment** through the **CodSpeed Action**. Allowing you to **stay the sole owner** of your data and to keep your **codebase private**.\r\n\r\nOnce the performance data is generated, **only the benchmark results** are sent to the CodSpeed servers to be **analyzed**.\r\n\r\nThen, performance reports are **generated** and **published** directly **within your repository provider**.\r\n\r\n## How long does it take to install?\r\n\r\nIf you're **already benchmarking** your codebase, you can plug your **existing benchmarks** to CodSpeed in **less than 5 minutes** since CodSpeed benchmark's API is **compatible** with the most **popular benchmarking frameworks**.\r\n\r\nIf **you haven't any benchmarks yet**, we provide an **intuitive** benchmarking API that allows you to **create your first benchmarks** in a **few minutes**.\r\n", "external_url": "https://codspeed.io", "html_url": "https://github.com/apps/codspeed-hq", "created_at": "2022-11-02T17:17:13Z", "updated_at": "2024-11-26T12:25:51Z", "permissions": {"actions": "read", "checks": "write", "contents": "read", "emails": "read", "members": "read", "metadata": "read", "organization_self_hosted_runners": "write", "pull_requests": "write", "statuses": "read"}, "events": ["organization", "pull_request", "repository", "workflow_job"]}, "user": {"login": "codspeed-hq[bot]", "id": 117304815, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007412423728965223, "severe_toxicity": 0.00011189353972440585, "obscene": 0.0001828490785555914, "threat": 0.00011998650734312832, "insult": 0.00017748060054145753, "identity_attack": 0.00013683161523658782}}]}, "13": {"html_url": "https://github.com/pydantic/pydantic/issues/11058", "id": 2722705421, "number": 11058, "title": "Model docstring/description dropped for generic models", "created_at": "2024-12-06T10:55:01Z", "updated_at": "2024-12-06T10:59:00Z", "closed_at": null, "body": "### Initial Checks\r\n\r\n- [X] I confirm that I'm using Pydantic V2\r\n\r\n### Description\r\n\r\nFirst of all, I'm not 100% sure if that is the intended behavior, but it was a surprise to me.\r\n\r\nWhenever a generic model gets an actual type, it suddenly loses its docstring and therefore its `description` attribute in the resulting JSON schema.\r\n\r\nI noticed that the generated OpenAPI specification was missing the documentation of our generic classes.\r\n\r\nThe change could be as easy as adding one line\r\n\r\n```diff\r\n    created_model = meta(\r\n        model_name,\r\n        bases,\r\n        namespace,\r\n        __pydantic_generic_metadata__={\r\n            'origin': origin,\r\n            'args': args,\r\n            'parameters': params,\r\n        },\r\n        __pydantic_reset_parent_namespace__=False,\r\n        **kwds,\r\n    )    \r\n+   created_model.__doc__ = origin.__doc__\r\n\r\n    model_module, called_globally = _get_caller_frame_info(depth=3)\r\n```\r\n\r\nafter the creation of the new model at \r\nhttps://github.com/pydantic/pydantic/blob/32f405bcf6171602ffe754f1fca1681c5ddee96e/pydantic/_internal/_generics.py#L137-L150\r\n\r\n### Example Code\r\n\r\n```Python\r\nfrom pydantic import BaseModel\r\nfrom typing import TypeVar, Generic\r\n\r\nItem = TypeVar(\"Item\")\r\n\r\n\r\nclass Pagination(BaseModel, Generic[Item]):\r\n    \"\"\"Some description\"\"\"\r\n\r\n    page: int\r\n    page_cnt: int\r\n    page_size: int\r\n    items: list[Item]\r\n\r\n\r\nassert \"description\" in Pagination.model_json_schema()\r\nassert \"description\" in Pagination[str].model_json_schema()  # <-- this fails\r\n```\r\n\r\n\r\n### Python, Pydantic & OS Version\r\n\r\n```Text\r\npydantic version: 2.10.3\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: .../.venv/lib/python3.11/site-packages/pydantic\r\n               python version: 3.11.9 (main, Apr  2 2024, 08:25:04) [Clang 15.0.0 (clang-1500.3.9.4)]\r\n                     platform: macOS-14.6.1-arm64-arm-64bit\r\n             related packages: fastapi-0.115.6 pydantic-settings-2.6.1 mypy-1.13.0 pydantic-extra-types-2.10.0 typing_extensions-4.12.2\r\n                       commit: unknown\r\n```\r\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "flxdot", "id": 35657654, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "14": {"html_url": "https://github.com/pydantic/pydantic/issues/11057", "id": 2722537903, "number": 11057, "title": "Punctually allow/forbid extra parameters when disabled by config", "created_at": "2024-12-06T09:36:38Z", "updated_at": "2024-12-06T16:59:36Z", "closed_at": null, "body": "### Initial Checks\r\n\r\n- [X] I have searched Google & GitHub for similar requests and couldn't find anything\r\n- [X] I have read and followed [the docs](https://docs.pydantic.dev) and still think this feature is missing\r\n\r\n### Description\r\n\r\nI work on libraries that implement the [SCIM](https://datatracker.ietf.org/doc/html/rfc7644) protocol. The libraries covers the [server implementation](https://scim2-models.readthedocs.io/), [the client implementation](https://scim2-client.readthedocs.io/) and [some compliance tests](https://scim2-tester.readthedocs.io/) of the protocol. All the libraries are based on a [common set of Pydantic models](https://scim2-models.readthedocs.io/).\r\n\r\nDepending on the context, the `extra` parameters might be either needed or unwanted:\r\n- The server or client implementations might want accept payloads from actors which don't precisely respect the norm, and tolerate extra parameters.\r\n- The protocol compliance checker want to strictly respect the norm and forbid extra parameters.\r\n\r\nHowever, once I set `allow` or `extra` in the model configuration, I cannot update the value afterward. I\u00a0would love a way to punctually set an explicit value for `extra` that might be different from the config.\r\n\r\nFor example, adding a new `extra` parameter in `model_validate` that would overwrite the model config value would be a bliss.\r\n\r\nWhat do you think?\r\n\r\n### Affected Components\r\n\r\n- [ ] [Compatibility between releases](https://docs.pydantic.dev/changelog/)\r\n- [X] [Data validation/parsing](https://docs.pydantic.dev/concepts/models/#basic-model-usage)\r\n- [ ] [Data serialization](https://docs.pydantic.dev/concepts/serialization/) - `.model_dump()` and `.model_dump_json()`\r\n- [ ] [JSON Schema](https://docs.pydantic.dev/concepts/json_schema/)\r\n- [ ] [Dataclasses](https://docs.pydantic.dev/concepts/dataclasses/)\r\n- [ ] [Model Config](https://docs.pydantic.dev/concepts/config/)\r\n- [ ] [Field Types](https://docs.pydantic.dev/api/types/) - adding or changing a particular data type\r\n- [ ] [Function validation decorator](https://docs.pydantic.dev/concepts/validation_decorator/)\r\n- [ ] [Generic Models](https://docs.pydantic.dev/concepts/models/#generic-models)\r\n- [ ] [Other Model behaviour](https://docs.pydantic.dev/concepts/models/) - `model_construct()`, pickling, private attributes, ORM mode\r\n- [ ] [Plugins](https://docs.pydantic.dev/) and integration with other tools - mypy, FastAPI, python-devtools, Hypothesis, VS Code, PyCharm, etc.", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "azmeuk", "id": 60163, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "15": {"html_url": "https://github.com/pydantic/pydantic/issues/11056", "id": 2722317263, "number": 11056, "title": "NameEmail validation fails when the name has a period in it", "created_at": "2024-12-06T07:53:05Z", "updated_at": "2024-12-07T10:18:18Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nUsing the NameEmail field type, I want to validate a name and email of the form ```Homer J. Simpson <homer@thesimpsons.com>```\r\n\r\nHowever, when I try to validate this, it fails because Pydantic doesn't like the use of the period character to abbreviate the middle name. I would expect this to be valid.\r\n\n\n### Example Code\n\n```Python\nfrom pydantic import BaseModel, NameEmail, ValidationError\r\n\r\n\r\nclass User(BaseModel):\r\n    name_email: NameEmail\r\n\r\n# This works\r\ntry:\r\n    name_email = NameEmail(\r\n        name=\"Homer J. Simpson\",\r\n        email=\"homer@thesimpsons.com\",\r\n    )\r\n    print(f\"{name_email}\")\r\nexcept ValidationError as e:\r\n    print(f\"{e}\")\r\n\r\n# This is a validation error\r\ntry:\r\n    name_email = User.model_validate(\r\n        {\r\n            \"name_email\": \"Homer J. Simpson <homer@thesimpsons.com>\",\r\n        }\r\n    )\r\n    print(f\"{name_email}\")\r\nexcept ValidationError as e:\r\n    print(f\"{e}\")\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.3\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /Users/glynm/.pyenv/versions/3.12.7/envs/mantis-git/lib/python3.12/site-packages/pydantic\r\n               python version: 3.12.7 (main, Oct 17 2024, 10:06:07) [Clang 16.0.0 (clang-1600.0.26.3)]\r\n                     platform: macOS-15.1.1-arm64-arm-64bit\r\n             related packages: mypy-1.13.0 typing_extensions-4.12.2\r\n                       commit: unknown\n```\n", "author_association": "NONE", "comments": 10, "state": "open", "user": {"login": "glynos", "id": 125010, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522491503", "id": 2522491503, "created_at": "2024-12-06T08:22:46Z", "updated_at": "2024-12-07T08:47:01Z", "author_association": "NONE", "body": "The issue you're facing with Pydantic 2.10.3 is related to a change in behavior for fields marked as Optional or Maybe types when the default value is set to None.\r\n\r\nIn Pydantic 2.x, a stricter validation mechanism was introduced. By default, when you use Field(None), it implies that the field can be None, but the presence of a None value can cause issues when validation is done. The key difference here is that Field(None) now treats the field as required, which is why you're encountering the Field required error.\r\n\r\n\r\nSolution example\r\n`from typing import Optional\r\nimport uvicorn\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel, Field\r\n\r\napp = FastAPI()\r\n\r\nclass Item(BaseModel):\r\n    field: Optional[int] = None  # Use Optional[int] and set default to None\r\n\r\n@app.post(\"/items/\")\r\nasync def create_item(item: Item):\r\n    return item\r\n\r\nuvicorn.run(app)\r\n`\r\n\r\nTo solve the issue and allow the field to be blank or None without raising the validation error, you can make the following adjustment:\r\n\r\nUse Field(default=None) instead of Field(None) to explicitly mark the field as optional without requiring a value.\r\nYou can also use Optional from typing instead of relying on Maybe, since Optional explicitly means the field can either have a value or be None", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522491503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sangameshbagewadi", "id": 174851408, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007079205242916942, "severe_toxicity": 0.00011466003343230113, "obscene": 0.0001823469647206366, "threat": 0.00011704182543326169, "insult": 0.00017603555170353502, "identity_attack": 0.0001409958495059982}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522602165", "id": 2522602165, "created_at": "2024-12-06T09:11:30Z", "updated_at": "2024-12-07T08:46:54Z", "author_association": "NONE", "body": "> The issue you're facing with Pydantic 2.10.3 is related to a change in behavior for fields marked as Optional or Maybe types when the default value is set to None.\r\n> \r\n> In Pydantic 2.x, a stricter validation mechanism was introduced. By default, when you use Field(None), it implies that the field can be None, but the presence of a None value can cause issues when validation is done. The key difference here is that Field(None) now treats the field as required, which is why you're encountering the Field required error.\r\n> \r\n> Solution example `from typing import Optional import uvicorn from fastapi import FastAPI from pydantic import BaseModel, Field\r\n> \r\n> app = FastAPI()\r\n> \r\n> class Item(BaseModel): field: Optional[int] = None # Use Optional[int] and set default to None\r\n> \r\n> @app.post(\"/items/\") async def create_item(item: Item): return item\r\n> \r\n> uvicorn.run(app) `\r\n> \r\n> To solve the issue and allow the field to be blank or None without raising the validation error, you can make the following adjustment:\r\n> \r\n> Use Field(default=None) instead of Field(None) to explicitly mark the field as optional without requiring a value. You can also use Optional from typing instead of relying on Maybe, since Optional explicitly means the field can either have a value or be None\r\n\r\nThis has nothing to do with optional values, it's related to a regex in the email validator which explicitly excludes the period character in the display name for NameEmail.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522602165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "glynos", "id": 125010, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0008009299635887146, "severe_toxicity": 0.0001085995027096942, "obscene": 0.00018549952073954046, "threat": 0.00011094011279055849, "insult": 0.00017667654901742935, "identity_attack": 0.0001383851922582835}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522755982", "id": 2522755982, "created_at": "2024-12-06T10:22:24Z", "updated_at": "2024-12-07T08:46:43Z", "author_association": "NONE", "body": "You're absolutely correct \u2014 the issue lies in the NameEmail regex validator's strict enforcement of rules for the display name, which excludes the use of a period (.) in certain contexts. Pydantic's NameEmail relies on a strict interpretation of the RFC 5322 standard for email addresses, and its display name validation doesn't account for names with periods used as abbreviations.\r\nTo resolve this, you need to override the default behavior of NameEmail and adjust the regex used for validating the display name.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522755982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sangameshbagewadi", "id": 174851408, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006695769261568785, "severe_toxicity": 0.00011690295650623739, "obscene": 0.00017493654740974307, "threat": 0.00012438383419066668, "insult": 0.0001759977894835174, "identity_attack": 0.0001393256534356624}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522869954", "id": 2522869954, "created_at": "2024-12-06T11:01:19Z", "updated_at": "2024-12-06T11:01:19Z", "author_association": "NONE", "body": "Types are implemented in different styles within Pydantic. \r\n\r\nThe validation only really works in the context of BaseModel, or TypeAdapter. I suspect this is the source of the inconsistency in the two (stylistically) different examples you provided. This is perhaps creating some confusion.\r\n\r\nMore info on TypeAdapter. \r\n\r\nhttps://docs.pydantic.dev/latest/api/type_adapter/\r\n\r\n\r\nTo demonstrate this in the REPL.\r\n\r\n(No validation is occurring here, only assigning of values)\r\n\r\n```bash\r\nIn [12]: from pydantic import NameEmail, PositiveInt\r\n\r\nIn [13]: PositiveInt(-7)\r\nOut[13]: -7\r\n\r\nIn [14]: NameEmail(1, 2)\r\nOut[14]: NameEmail(name=1, email=2)\r\n\r\nIn [15]: NameEmail(PositiveInt(-7), NameEmail(\"a\", \"b\"))\r\nOut[15]: NameEmail(name=-7, email=NameEmail(name='a', email='b'))\r\n```\r\n\r\nI believe the underlying issue can be resolved by quoting the string. \r\n\r\n```bash\r\nIn [19]: name_email = TypeAdapter(NameEmail).validate_python('\"Homer J. Simpson\" <jsimpson@a.com>')\r\n\r\nIn [20]: name_email\r\nOut[20]: NameEmail(name='Homer J. Simpson', email='jsimpson@a.com')\r\n```", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522869954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "mpkocher", "id": 868552, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007026413222774863, "severe_toxicity": 0.00011551185161806643, "obscene": 0.00019057044119108468, "threat": 0.00011790694406954572, "insult": 0.00017494139319751412, "identity_attack": 0.0001384745555697009}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522962588", "id": 2522962588, "created_at": "2024-12-06T11:30:45Z", "updated_at": "2024-12-07T08:42:24Z", "author_association": "NONE", "body": "Thanks for the responses, but perhaps my original example wasn't clear. I don't have an issue with creating a NameEmail with or without a TypeAdapter, but the issue is when I want to validate it from an input string. I don't control the input, so quoting the display name as suggested is not an option. To adapt my original example, you can see there are two different outcomes when I would expect them to behave the same:\r\n\r\n```py\r\nfrom pydantic import BaseModel, NameEmail, ValidationError\r\n\r\n\r\nclass User(BaseModel):\r\n    name_email: NameEmail\r\n\r\n\r\n# This works\r\ntry:\r\n    user = User(\r\n        name_email=NameEmail(\r\n           name=\"Homer J. Simpson\",\r\n            email=\"homer@thesimpsons.com\",\r\n        ),\r\n    )\r\n    print(f\"{user}\")\r\nexcept ValidationError as e:\r\n    print(f\"{e}\")\r\n\r\n# This is a validation error\r\ntry:\r\n    user = User.model_validate(\r\n        {\r\n            \"name_email\": \"Homer J. Simpson <homer@thesimpsons.com>\",\r\n        }\r\n    )\r\n    print(f\"{user}\")\r\nexcept ValidationError as e:\r\n    print(f\"{e}\")\r\n```\r\n\r\nTo respond to @sangameshbagewadi , section 4.1 in the RFC document you cite explicitly states that names with periods in them must be interpreted properly: https://datatracker.ietf.org/doc/html/rfc5322#section-4.1\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522962588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "glynos", "id": 125010, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007424653740599751, "severe_toxicity": 0.00011169727804372087, "obscene": 0.0001956148335011676, "threat": 0.00010832211410161108, "insult": 0.0001755733828758821, "identity_attack": 0.00013331217633094639}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2523096948", "id": 2523096948, "created_at": "2024-12-06T12:18:30Z", "updated_at": "2024-12-07T08:46:15Z", "author_association": "NONE", "body": "Try this\r\n\r\n\r\n`from pydantic import BaseModel, ValidationError\r\nfrom pydantic.networks import EmailStr\r\nfrom typing import Any\r\n\r\n\r\nclass CustomNameEmail:\r\n    def __init__(self, name: str, email: str):\r\n        self.name = name\r\n        self.email = email\r\n\r\n    @classmethod\r\n    def validate(cls, value: Any) -> \"CustomNameEmail\":\r\n        if isinstance(value, str):\r\n            try:\r\n                # Split the input into \"name\" and \"email\" parts\r\n                name, email = value.rsplit(\" <\", 1)\r\n                email = email.rstrip(\">\")\r\n                if not email or \"@\" not in email:\r\n                    raise ValueError(\"Invalid email format\")\r\n                # Return a validated CustomNameEmail instance\r\n                return cls(name=name.strip(), email=email.strip())\r\n            except ValueError:\r\n                raise ValueError(f\"Invalid NameEmail format: {value}\")\r\n        raise TypeError(\"Expected a string for NameEmail\")\r\n\r\n    def __repr__(self):\r\n        return f\"{self.name} <{self.email}>\"\r\n\r\n    def __str__(self):\r\n        return self.__repr__()\r\n\r\n\r\nclass User(BaseModel):\r\n    name_email: CustomNameEmail\r\n\r\n    @classmethod\r\n    def model_validate(cls, value: dict):\r\n        # Manually apply validation using CustomNameEmail\r\n        try:\r\n            value['name_email'] = CustomNameEmail.validate(value['name_email'])\r\n        except (ValueError, TypeError) as e:\r\n            raise ValidationError(str(e))\r\n        return cls(**value)\r\n\r\n\r\n# Example Usage\r\n\r\n# This works\r\ntry:\r\n    user = User(\r\n        name_email=CustomNameEmail(\r\n            name=\"Homer J. Simpson\",\r\n            email=\"homer@thesimpsons.com\",\r\n        )\r\n    )\r\n    print(f\"User (manual init): {user}\")\r\nexcept ValidationError as e:\r\n    print(f\"Validation Error: {e}\")\r\n\r\n# This is now consistent\r\ntry:\r\n    user = User.model_validate(\r\n        {\r\n            \"name_email\": \"Homer J. Simpson <homer@thesimpsons.com>\",\r\n        }\r\n    )\r\n    print(f\"User (string input): {user}\")\r\nexcept ValidationError as e:\r\n    print(f\"Validation Error: {e}\")\r\n`", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2523096948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sangameshbagewadi", "id": 174851408, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0025376181583851576, "severe_toxicity": 0.00010487497638678178, "obscene": 0.00034333631629124284, "threat": 0.00012231446453370154, "insult": 0.00024093006504699588, "identity_attack": 0.00015817613166291267}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525034163", "id": 2525034163, "created_at": "2024-12-07T08:46:25Z", "updated_at": "2024-12-07T08:46:25Z", "author_association": "MEMBER", "body": "@sangameshbagewadi we appreciate the help but your (AI generated?) answers are irrelevant and poorly formatted. I marked them as off topic, please avoid doing so again.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525034163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006013686652295291, "severe_toxicity": 0.0001236063108080998, "obscene": 0.0001754585828166455, "threat": 0.00013242705608718097, "insult": 0.00017950247274711728, "identity_attack": 0.0001408351381542161}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525043555", "id": 2525043555, "created_at": "2024-12-07T09:08:03Z", "updated_at": "2024-12-07T09:08:48Z", "author_association": "MEMBER", "body": "The `NameEmail` type is a bit confusing, because it is meant to be used as an annotation in a Pydantic context (i.e. as a field type/with `TypeAdapter`).\r\n\r\nHowever, it is instantiable even though no validation is performed on instantiation.\r\n\r\nDoing:\r\n\r\n```python\r\nuser = User(\r\n    name_email=NameEmail(\r\n        name=\"Homer J. Simpson\",\r\n        email=\"homer@thesimpsons.com\",\r\n    ),\r\n)\r\n```\r\n\r\nwill *not* perform any validation, because the validation function (which is **only called during Pydantic validation**, not instantiation) is defined as:\r\n\r\nhttps://github.com/pydantic/pydantic/blob/32f405bcf6171602ffe754f1fca1681c5ddee96e/pydantic/networks.py#L1008-L1013\r\n\r\nwhich is arguably flawed: the `input_value` type hint indicates that validating as a `NameInstance` is supported (because we allow `Self`) but we don't perform any validation here (probably it was assumed here that if it is an instance, it was already validated, perhaps on init or from another model validation).\r\n\r\ncc @sydney-runkle, this is similar to the URL types, we are missing consistency here.\r\n\r\nWhether we should allow period in names or not, from my understanding of https://datatracker.ietf.org/doc/html/rfc5322#section-4 we should. It is an obsolete token, but:\r\n\r\n> they MUST be accepted and parsed by a conformant receiver.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525043555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007081074872985482, "severe_toxicity": 0.00011584486492210999, "obscene": 0.00019825715571641922, "threat": 0.00011536115925991908, "insult": 0.00017399598436895758, "identity_attack": 0.00013639092503581196}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525054813", "id": 2525054813, "created_at": "2024-12-07T09:52:56Z", "updated_at": "2024-12-07T09:52:56Z", "author_association": "NONE", "body": "> @sangameshbagewadi we appreciate the help but your (AI generated?) answers are irrelevant and poorly formatted. I marked them as off topic, please avoid doing so again.\r\n\r\nThank you for feedback but using AI in search for possible solutions is not out of the question  it is using tools of tomorrow. It is not a response that failed but the issue itself, for its subtlety cannot be aptly conveyed in that media. Instead of discarding an idea, it is better to offer constructive suggestions.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525054813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sangameshbagewadi", "id": 174851408, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0005589951761066914, "severe_toxicity": 0.00012716314813587815, "obscene": 0.00018260010983794928, "threat": 0.00012948147195857018, "insult": 0.00017518609820399433, "identity_attack": 0.00014163617743179202}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525061202", "id": 2525061202, "created_at": "2024-12-07T10:18:17Z", "updated_at": "2024-12-07T10:18:17Z", "author_association": "MEMBER", "body": "Thanks but no thanks. Please take time to assess the really poor quality of your answers, especially [this one](https://github.com/pydantic/pydantic/issues/11056#issuecomment-2523096948).", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525061202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007596488576382399, "severe_toxicity": 0.00011305344378342852, "obscene": 0.0001649628538871184, "threat": 0.000122202662169002, "insult": 0.00019063768559135497, "identity_attack": 0.00014516479859594256}}]}, "16": {"html_url": "https://github.com/pydantic/pydantic/issues/11054", "id": 2721083628, "number": 11054, "title": "populate_by_name not recognized by mypy when set by a non literal", "created_at": "2024-12-05T18:07:48Z", "updated_at": "2024-12-05T19:37:28Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nDefining `model_config` with non-literal breaks the pydantic mypy integration with `populate_by_name`. \r\n\r\nThis code incorrectly throws an error:\u00a0\r\n```python\r\nfrom pydantic import BaseModel, Field, ConfigDict\r\n\r\ncommon_model_config = ConfigDict(populate_by_name=True)\r\n\r\nclass MyModel(BaseModel):\r\n    model_config = common_model_config\r\n    my_field: int = Field(..., alias=\"my.field\")\r\n\r\nmy_model = MyModel(my_field=1)  # Incorrectly throws mypy: Missing named argument \"my.field\" for \"MyModel\"\r\n```\r\n\r\nThis code works:\r\n```python\r\nfrom pydantic import BaseModel, Field, ConfigDict\r\n\r\nclass MyModel(BaseModel):\r\n    model_config = ConfigDict(populate_by_name=True)\r\n    my_field: int = Field(..., alias=\"my.field\")\r\n\r\nmy_model = MyModel(my_field=1)  # Works as expected\r\n```\r\n\r\nWith the following `mypy.ini`\r\n```ini\r\n[mypy]\r\nplugins = pydantic.mypy\r\n[pydantic-mypy]\r\ninit_typed = True\r\n```\r\n\r\nThis is problematic as I have a lot of models and I want them all to use the same config defined once.\n\n### Example Code\n\n_No response_\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.3\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /home/sbarrett2/tmp/.venv/lib/python3.11/site-packages/pydantic\r\n               python version: 3.11.7 (main, Jan 22 2024, 00:00:00) [GCC 11.4.1 20231218 (Red Hat 11.4.1-3)]\r\n                     platform: Linux-5.14.0-427.el9.x86_64-x86_64-with-glibc2.34\r\n             related packages: typing_extensions-4.12.2 mypy-1.13.0 typing_extensions-4.12.2 mypy-1.13.0\r\n                       commit: unknown\n```\n", "author_association": "NONE", "comments": 1, "state": "open", "user": {"login": "BarrettStephen", "id": 9559818, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521117000", "id": 2521117000, "created_at": "2024-12-05T18:24:49Z", "updated_at": "2024-12-05T18:24:49Z", "author_association": "NONE", "body": "This workaround works:\r\n```python\r\nclass MyParent(BaseModel):\r\n    model_config = ConfigDict(populate_by_name=True)\r\n\r\nclass MyModel(MyParent):\r\n    my_field: int = Field(..., alias=\"my.field\")\r\n\r\nmy_model = MyModel(my_field=1)  # Works as expected\r\n```", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521117000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "BarrettStephen", "id": 9559818, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006394585943780839, "severe_toxicity": 0.0001192020281450823, "obscene": 0.0001907756959553808, "threat": 0.00011871640890603885, "insult": 0.00017495489737484604, "identity_attack": 0.00013458200555760413}}]}, "17": {"html_url": "https://github.com/pydantic/pydantic/issues/11053", "id": 2721036073, "number": 11053, "title": "Apache24 (mod_wsgi) - server hangs on validation", "created_at": "2024-12-05T17:43:10Z", "updated_at": "2024-12-06T21:38:20Z", "closed_at": null, "body": "### Initial Checks\r\n\r\n- [X] I confirm that I'm using Pydantic V2\r\n\r\n### Description\r\n\r\nMinimal reproduction:\r\nhttps://github.com/asaff1/pydantic_mod_wsgi_bug\r\n\r\nI must say it is an extremely weird issue, not sure if it is a pydantic issue or mod_wsgi issue. Still I'd like to understand what is happening.\r\n\r\nI'm running apache24 server on Windows, using mod_wsgi.  I use django + django ninja.\r\n\r\nI have a simple custom field for my endpoint with regex validation\r\n```py\r\nPhoneNumber = Annotated[str, StringConstraints(strip_whitespace=True, pattern=r\"^0\\d\\d-?\\d{7}$\")]\r\n\r\nclass AddPhonePayload(BaseModel):\r\n    phone: PhoneNumber\r\n\r\n    @field_validator(\"phone\")\r\n    @classmethod\r\n    def fix_hyphen(cls, v):\r\n        return v.replace(\"-\", \"\")\r\n```\r\n\r\n```py\r\n@router.post(\"/add_phone\")\r\ndef login_add_phone(request, payload: Form[AddPhonePayload]):\r\n    raise ValueError(\"test\")\r\n    # rest of code.. not relevant\r\n```\r\n\r\nWhen using django `manage.py runserver`, the code works as expected, in this case, it returns server error (500).\r\nBut, when running with apache, this endpoint hangs. Other API endpoints in the app works perfectly. \r\nInitially, I've tried to investigate line by line in the endpoint code, and finally figured that even if the first line is `raise ValueError` as you see, it still hangs in apache. (Browser gets \"Connection reset\" error, no log available in apache access / error logs ).\r\n\r\nNow, the \"solution\" is surprising: in `AddPhonePayload` if I change `phone: PhoneNumber` to `phone: str`, suddenly it works with apache.\r\nAlso, the endpoint hangs on apache only when I enter a **valid** input to the `phone: PhoneNumber` field. If I enter an invalid input (that doesn't pass the regex), I get the \"missing_field\" pydantic error immediately.\r\n\r\nAgain, with `django runserver`, no problems at all!\r\n\r\nHow is this possible? What is happening in pydantic validation under the hood, that causes mod_wsgi + apache to hang (and only with valid input)?\r\n\r\n### Example Code\r\n\r\n_No response_\r\n\r\n### Python, Pydantic & OS Version\r\n\r\n```Text\r\npydantic version: 2.7.1\r\n        pydantic-core version: 2.18.2\r\n          pydantic-core build: profile=release pgo=true\r\n                 install path: C:\\Python39\\Lib\\site-packages\\pydantic\r\n               python version: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]\r\n                     platform: Windows-10-10.0.20348-SP0\r\n             related packages: fastapi-0.115.4 typing_extensions-4.8.0\r\n                       commit: unknown\r\n```\r\n", "author_association": "NONE", "comments": 3, "state": "open", "user": {"login": "asaff1", "id": 18662769, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521096379", "id": 2521096379, "created_at": "2024-12-05T18:14:26Z", "updated_at": "2024-12-05T18:14:34Z", "author_association": "NONE", "body": "UPDATE: I just tried to rollback pydantic version.\r\nWith this version there is no issue with apache:\r\n```\r\npydantic==2.5.2\r\npydantic_core==2.14.5\r\n```\r\n\r\nWhat was introduced between 2.5.2 and 2.7.1 that can cause this?", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521096379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "asaff1", "id": 18662769, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007544663967564702, "severe_toxicity": 0.00010931202996289358, "obscene": 0.00017975048103835434, "threat": 0.00011466080468380824, "insult": 0.00017509674944449216, "identity_attack": 0.00013593169569503516}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521302590", "id": 2521302590, "created_at": "2024-12-05T20:12:39Z", "updated_at": "2024-12-05T20:12:39Z", "author_association": "MEMBER", "body": "It will be difficult for use to debug the issue, unless you can provide a repo with clear reproduction steps (I can test on both Linux and Windows).\r\n\r\nI would suggest attaching a debugger or try profiling with [`py-spy`](https://github.com/benfred/py-spy), and see where the code hangs.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521302590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006910516531206667, "severe_toxicity": 0.00011567266483325511, "obscene": 0.0001846677769208327, "threat": 0.00011821102089015767, "insult": 0.00017493170162197202, "identity_attack": 0.00013768929056823254}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522773443", "id": 2522773443, "created_at": "2024-12-06T10:32:25Z", "updated_at": "2024-12-06T10:32:25Z", "author_association": "NONE", "body": "@Viicos \r\nThere you go, I've created a repo with instructions. Please see:\r\nhttps://github.com/asaff1/pydantic_mod_wsgi_bug\r\n\r\nI've tested the bug indeed happens on two Windows machines. You can try different versions of apache, mod-wsgi, I believe that bug will happen anyway. \r\nFrom my experiments, it seems like the issue is when str strip is on. This for some reason cause apache to crash. \r\n\r\nI know it might not strictly be an issue with pydantic, but I'd like to get some insight what is going on there.\r\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522773443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "asaff1", "id": 18662769, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007114618201740086, "severe_toxicity": 0.00011404329416109249, "obscene": 0.000187084122444503, "threat": 0.0001173924611066468, "insult": 0.00017067755106836557, "identity_attack": 0.00013659682008437812}}]}, "18": {"html_url": "https://github.com/pydantic/pydantic/issues/11050", "id": 2718714973, "number": 11050, "title": "OpenAPI 3.1.1 Annotated Enumerations support", "created_at": "2024-12-04T20:22:27Z", "updated_at": "2024-12-04T20:41:31Z", "closed_at": null, "body": "### Initial Checks\r\n\r\n- [X] I have searched Google & GitHub for similar requests and couldn't find anything\r\n- [X] I have read and followed [the docs](https://docs.pydantic.dev) and still think this feature is missing\r\n\r\n### Description\r\n\r\nIt would be great if `enum.Enum` objects can be represented as a set of annotated values in the UI of API docs.\r\n\r\nPlease, see:\r\n- https://spec.openapis.org/oas/v3.1.1.html#annotated-enumerations\r\n- https://spec.openapis.org/oas/v3.1.1.html#model-with-annotated-enumeration\r\n\r\nAn example of possible coding experience:\r\n```python\r\nimport enum\r\nfrom typing import Annotated\r\nfrom pydantic import json_schema_description, json_schema_title, BaseModel, Field\r\n\r\nclass ColorModel(enum.StrEnum):\r\n  RGB: Annotated[\r\n    str, json_schema_description('Specify colors with the red, green, and blue additive color model'),\r\n    json_schema_title('RGB')\r\n  ] = 'RGB'\r\n  CMYK: Annotated[\r\n    str, json_schema_description('Specify colors with the cyan, magenta, yellow, and black subtractive color model')\r\n  ] = 'CMYK'\r\n\r\nclass Form(BaseModel):\r\n  colorModel: ColorModel = Field(default=ColorModel.RGB, description='Color model')\r\n```\r\n\r\nAn example of sort of matching UI experience (made with https://editor-next.swagger.io/ ):\r\n\r\n![image](https://github.com/user-attachments/assets/64fbf053-c778-4d47-984c-303e2de098f2)\r\n\r\n### Affected Components\r\n\r\n- [ ] [Compatibility between releases](https://docs.pydantic.dev/changelog/)\r\n- [ ] [Data validation/parsing](https://docs.pydantic.dev/concepts/models/#basic-model-usage)\r\n- [ ] [Data serialization](https://docs.pydantic.dev/concepts/serialization/) - `.model_dump()` and `.model_dump_json()`\r\n- [X] [JSON Schema](https://docs.pydantic.dev/concepts/json_schema/)\r\n- [ ] [Dataclasses](https://docs.pydantic.dev/concepts/dataclasses/)\r\n- [ ] [Model Config](https://docs.pydantic.dev/concepts/config/)\r\n- [ ] [Field Types](https://docs.pydantic.dev/api/types/) - adding or changing a particular data type\r\n- [ ] [Function validation decorator](https://docs.pydantic.dev/concepts/validation_decorator/)\r\n- [ ] [Generic Models](https://docs.pydantic.dev/concepts/models/#generic-models)\r\n- [ ] [Other Model behaviour](https://docs.pydantic.dev/concepts/models/) - `model_construct()`, pickling, private attributes, ORM mode\r\n- [ ] [Plugins](https://docs.pydantic.dev/) and integration with other tools - mypy, FastAPI, python-devtools, Hypothesis, VS Code, PyCharm, etc.", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "while0pass", "id": 140562, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "19": {"html_url": "https://github.com/pydantic/pydantic/issues/11045", "id": 2716229255, "number": 11045, "title": "Can't acces docs.pydantic.dev", "created_at": "2024-12-03T23:43:56Z", "updated_at": "2024-12-04T15:42:42Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nI can't access pydantic docs (as well as accessing logfire dashboard). I believe it's cloudflare, but can't be sure. Both sites simply do not load.\r\n\r\nThis is the output of my  cloudflare trace:\r\n\r\n```\r\nfl=363f207\r\nh=www.cloudflare.com\r\nip=186.151.92.12\r\nts=1733269193.734\r\nvisit_scheme=https\r\nuag=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\ncolo=MIA\r\nsliver=none\r\nhttp=http/3\r\nloc=GT\r\ntls=TLSv1.3\r\nsni=plaintext\r\nwarp=off\r\ngateway=off\r\nrbi=off\r\nkex=X25519MLKEM768\r\n```\r\n\r\n\n\n### Example Code\n\n```Python\nimport pydantic\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.9.2\r\n        pydantic-core version: 2.23.4\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /Users/sebas/Dev/vana/vana-pay-mvp/.venv/lib/python3.12/site-packages/pydantic\r\n               python version: 3.12.6 (main, Sep  9 2024, 21:36:32) [Clang 18.1.8 ]\r\n                     platform: macOS-15.1.1-arm64-arm-64bit\r\n             related packages: fastapi-0.115.5 typing_extensions-4.12.2\n```\n", "author_association": "NONE", "comments": 1, "state": "open", "user": {"login": "sebasibarguen", "id": 291937, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2517819026", "id": 2517819026, "created_at": "2024-12-04T15:42:41Z", "updated_at": "2024-12-04T15:42:41Z", "author_association": "MEMBER", "body": "Sorry about this, please can you confirm if you're still have issues?", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2517819026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "samuelcolvin", "id": 4039449, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006808164180256426, "severe_toxicity": 0.00011963849829044193, "obscene": 0.0001868449035100639, "threat": 0.00014104385627433658, "insult": 0.0001791510876500979, "identity_attack": 0.00013589553418569267}}]}, "20": {"html_url": "https://github.com/pydantic/pydantic/pull/11044", "id": 2715943005, "number": 11044, "title": "WIP: test 3rd party packages", "created_at": "2024-12-03T20:44:49Z", "updated_at": "2024-12-05T11:04:03Z", "closed_at": null, "body": "WIP, going to add tests against:\r\n\r\n- `prefect`\r\n- `airflow`\r\n- `fastapi`\r\n- `sqlmodel`\r\n- `langchain`\r\n- https://github.com/openapi-generators/openapi-python-client (inter-dependent models, lots of non straightforward string annotations).\r\n\r\nSeparately, we should move tests with pydantic deps to a daily CI job, like `typing-extensions`\r\n\r\nMaybe more", "author_association": "MEMBER", "comments": 3, "state": "open", "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11044/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515522044", "id": 2515522044, "created_at": "2024-12-03T20:48:34Z", "updated_at": "2024-12-03T21:57:48Z", "author_association": "NONE", "body": "## Deploying pydantic-docs with &nbsp;<a href=\"https://pages.dev\"><img alt=\"Cloudflare Pages\" src=\"https://user-images.githubusercontent.com/23264/106598434-9e719e00-654f-11eb-9e59-6167043cfa01.png\" width=\"16\"></a> &nbsp;Cloudflare Pages\n\n<table><tr><td><strong>Latest commit:</strong> </td><td>\n<code>cee8e66</code>\n</td></tr>\n<tr><td><strong>Status:</strong></td><td>&nbsp;\u2705&nbsp; Deploy successful!</td></tr>\n<tr><td><strong>Preview URL:</strong></td><td>\n<a href='https://4d5ac918.pydantic-docs.pages.dev'>https://4d5ac918.pydantic-docs.pages.dev</a>\n</td></tr>\n<tr><td><strong>Branch Preview URL:</strong></td><td>\n<a href='https://testing-expeirment.pydantic-docs.pages.dev'>https://testing-expeirment.pydantic-docs.pages.dev</a>\n</td></tr>\n</table>\n\n[View logs](https://dash.cloudflare.com/?to=/:account/pages/view/pydantic-docs/4d5ac918-b978-4341-808e-4517abe7598c)\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515522044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 85455, "client_id": "Iv1.0879b6ff6c8f7a1a", "slug": "cloudflare-workers-and-pages", "node_id": "MDM6QXBwODU0NTU=", "owner": {"login": "cloudflare", "id": 314135, "node_id": "MDEyOk9yZ2FuaXphdGlvbjMxNDEzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/314135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cloudflare", "html_url": "https://github.com/cloudflare", "followers_url": "https://api.github.com/users/cloudflare/followers", "following_url": "https://api.github.com/users/cloudflare/following{/other_user}", "gists_url": "https://api.github.com/users/cloudflare/gists{/gist_id}", "starred_url": "https://api.github.com/users/cloudflare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cloudflare/subscriptions", "organizations_url": "https://api.github.com/users/cloudflare/orgs", "repos_url": "https://api.github.com/users/cloudflare/repos", "events_url": "https://api.github.com/users/cloudflare/events{/privacy}", "received_events_url": "https://api.github.com/users/cloudflare/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "Cloudflare Workers and Pages", "description": "", "external_url": "https://cloudflare.com/", "html_url": "https://github.com/apps/cloudflare-workers-and-pages", "created_at": "2020-10-19T20:23:00Z", "updated_at": "2024-09-19T15:15:04Z", "permissions": {"checks": "write", "contents": "read", "deployments": "write", "metadata": "read", "pull_requests": "write"}, "events": ["pull_request", "push"]}, "user": {"login": "cloudflare-workers-and-pages[bot]", "id": 73139402, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0015805396251380444, "severe_toxicity": 0.00010168402513954788, "obscene": 0.00025621007080189884, "threat": 0.00011101926793344319, "insult": 0.0001967992284335196, "identity_attack": 0.00014101358829066157}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515524974", "id": 2515524974, "created_at": "2024-12-03T20:50:25Z", "updated_at": "2024-12-03T22:02:34Z", "author_association": "NONE", "body": "## [CodSpeed Performance Report](https://codspeed.io/pydantic/pydantic/branches/testing-expeirment)\n\n### Merging #11044 will **not alter performance**\n\n<sub>Comparing <code>testing-expeirment</code> (cee8e66) with <code>main</code> (3173cf5)</sub>\n\n\n\n### Summary\n\n`\u2705 46` untouched benchmarks  \n\n\n\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515524974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 257293, "client_id": "Iv1.e7febeb3870a36fb", "slug": "codspeed-hq", "node_id": "A_kwHOBvQP3M4AA-0N", "owner": {"login": "CodSpeedHQ", "id": 116658140, "node_id": "O_kgDOBvQP3A", "avatar_url": "https://avatars.githubusercontent.com/u/116658140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodSpeedHQ", "html_url": "https://github.com/CodSpeedHQ", "followers_url": "https://api.github.com/users/CodSpeedHQ/followers", "following_url": "https://api.github.com/users/CodSpeedHQ/following{/other_user}", "gists_url": "https://api.github.com/users/CodSpeedHQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodSpeedHQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodSpeedHQ/subscriptions", "organizations_url": "https://api.github.com/users/CodSpeedHQ/orgs", "repos_url": "https://api.github.com/users/CodSpeedHQ/repos", "events_url": "https://api.github.com/users/CodSpeedHQ/events{/privacy}", "received_events_url": "https://api.github.com/users/CodSpeedHQ/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "CodSpeed HQ", "description": "## What is [CodSpeed](https://codspeed.io)?\r\nCodSpeed is a **continuous benchmarking** platform that allows you to **track** and **compare** the **performance** of your codebase during development.\r\n\r\nIt uses a smart **runtime engine** to measure the performance of your code in an **accurate** and **reproducible** way without creating a huge **runtime overhead**, unlike traditional benchmarks.\r\n\r\nCodSpeed produces detailed **performance reports** helping you **improve** your codebase **performance**, directly **within your repository provider** (Pull Requests comments, Merge checks, ...).\r\n\r\n## How it works\r\n\r\nThe core of the **performance measurement** is done directly within your **CI environment** through the **CodSpeed Action**. Allowing you to **stay the sole owner** of your data and to keep your **codebase private**.\r\n\r\nOnce the performance data is generated, **only the benchmark results** are sent to the CodSpeed servers to be **analyzed**.\r\n\r\nThen, performance reports are **generated** and **published** directly **within your repository provider**.\r\n\r\n## How long does it take to install?\r\n\r\nIf you're **already benchmarking** your codebase, you can plug your **existing benchmarks** to CodSpeed in **less than 5 minutes** since CodSpeed benchmark's API is **compatible** with the most **popular benchmarking frameworks**.\r\n\r\nIf **you haven't any benchmarks yet**, we provide an **intuitive** benchmarking API that allows you to **create your first benchmarks** in a **few minutes**.\r\n", "external_url": "https://codspeed.io", "html_url": "https://github.com/apps/codspeed-hq", "created_at": "2022-11-02T17:17:13Z", "updated_at": "2024-11-26T12:25:51Z", "permissions": {"actions": "read", "checks": "write", "contents": "read", "emails": "read", "members": "read", "metadata": "read", "organization_self_hosted_runners": "write", "pull_requests": "write", "statuses": "read"}, "events": ["organization", "pull_request", "repository", "workflow_job"]}, "user": {"login": "codspeed-hq[bot]", "id": 117304815, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007289289496839046, "severe_toxicity": 0.00011255229765083641, "obscene": 0.00018351436301600188, "threat": 0.00011936842201976106, "insult": 0.00017737723828759044, "identity_attack": 0.00013716380635742098}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515527231", "id": 2515527231, "created_at": "2024-12-03T20:51:46Z", "updated_at": "2024-12-03T20:51:46Z", "author_association": "CONTRIBUTOR", "body": "## Coverage report\n\n\n<img title=\"Coverage for the whole project is 95.85%. Previous coverage rate is not available, cannot report on evolution.\" src=\"https://img.shields.io/badge/Coverage-95%25-orange.svg\"> <img title=\"100% of the statement lines added by this PR are covered\" src=\"https://img.shields.io/badge/PR%20Coverage-100%25-brightgreen.svg\">\n\n_This PR does not seem to contain any modification to coverable code._\n\n<!-- This comment was produced by python-coverage-comment-action -->", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515527231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 15368, "client_id": "Iv1.05c79e9ad1f6bdfa", "slug": "github-actions", "node_id": "MDM6QXBwMTUzNjg=", "owner": {"login": "github", "id": 9919, "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github", "html_url": "https://github.com/github", "followers_url": "https://api.github.com/users/github/followers", "following_url": "https://api.github.com/users/github/following{/other_user}", "gists_url": "https://api.github.com/users/github/gists{/gist_id}", "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github/subscriptions", "organizations_url": "https://api.github.com/users/github/orgs", "repos_url": "https://api.github.com/users/github/repos", "events_url": "https://api.github.com/users/github/events{/privacy}", "received_events_url": "https://api.github.com/users/github/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "GitHub Actions", "description": "Automate your workflow from idea to production", "external_url": "https://help.github.com/en/actions", "html_url": "https://github.com/apps/github-actions", "created_at": "2018-07-30T09:30:17Z", "updated_at": "2024-04-10T20:33:16Z", "permissions": {"actions": "write", "administration": "read", "attestations": "write", "checks": "write", "contents": "write", "deployments": "write", "discussions": "write", "issues": "write", "merge_queues": "write", "metadata": "read", "packages": "write", "pages": "write", "pull_requests": "write", "repository_hooks": "write", "repository_projects": "write", "security_events": "write", "statuses": "write", "vulnerability_alerts": "read"}, "events": ["branch_protection_rule", "check_run", "check_suite", "create", "delete", "deployment", "deployment_status", "discussion", "discussion_comment", "fork", "gollum", "issues", "issue_comment", "label", "merge_group", "milestone", "page_build", "project", "project_card", "project_column", "public", "pull_request", "pull_request_review", "pull_request_review_comment", "push", "registry_package", "release", "repository", "repository_dispatch", "status", "watch", "workflow_dispatch", "workflow_run"]}, "user": {"login": "github-actions[bot]", "id": 41898282, "site_admin": false}, "comment_sentiments": {"toxicity": 0.000657098600640893, "severe_toxicity": 0.00011616909614531323, "obscene": 0.0001849241671152413, "threat": 0.0001167949812952429, "insult": 0.00017364625819027424, "identity_attack": 0.0001355176791548729}}]}, "21": {"html_url": "https://github.com/pydantic/pydantic/issues/11043", "id": 2715714364, "number": 11043, "title": "Poor error messages when validating a discriminated Union of a \"type statement\". ", "created_at": "2024-12-03T18:20:40Z", "updated_at": "2024-12-03T18:42:57Z", "closed_at": null, "body": "### Initial Checks\r\n\r\n- [X] I confirm that I'm using Pydantic V2\r\n\r\n### Description\r\n\r\nWhen validating a discriminated Union of a \"type statement\", the errors are **far** worse than when not using a \"type statement\", making it very difficult to understand why the value failed validation.\r\n\r\nIt seems like `pydantic` is duplicating/nesting the `type`, since the (undesirable) output contains \"`tagged-union[union[A,B],union[A,B]]`\", rather than \"`tagged-union[A,B]`\" (as found in the output when not using a type statement). Additionally, we see `A.A.extra_field` instead of `A.extra_field`.\r\n\r\nPossibly related to https://github.com/pydantic/pydantic/issues/6352.\r\n\r\n### Example Code\r\n\r\n```py3\r\nfrom typing import Annotated, Literal\r\n\r\nimport pydantic\r\n\r\n\r\nclass _Base(pydantic.BaseModel):\r\n    model_config = pydantic.ConfigDict(extra=\"forbid\")\r\n\r\nclass A(_Base):\r\n    type: Literal[\"A\"] = \"A\"\r\n    val: int\r\n\r\nclass B(_Base):\r\n    type: Literal[\"B\"] = \"B\"\r\n    val: str\r\n\r\ntype _U = A | B\r\nU = Annotated[_U, pydantic.Field(discriminator=\"type\")]\r\nU_ADAPTER = pydantic.TypeAdapter[U](U)\r\n\r\nU_ADAPTER.validate_python({\"type\": \"A\", \"val\": 1, \"extra_field\": \"oops!\"})\r\n```\r\n\r\n\r\nOutput:\r\n\r\n```log\r\nTraceback (most recent call last):\r\n  File \"<REDACTED_PATH>/pydantic_playground.py\", line 23, in <module>\r\n    U_ADAPTER.validate_python({\"type\": \"A\", \"val\": 1, \"extra_field\": \"oops!\"})\r\n  File \"<REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic/type_adapter.py\", line 144, in wrapped\r\n    return func(self, *args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic/type_adapter.py\", line 375, in validate_python\r\n    return self.validator.validate_python(object, strict=strict, from_attributes=from_attributes, context=context)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\npydantic_core._pydantic_core.ValidationError: 4 validation errors for tagged-union[union[A,B],union[A,B]]\r\nA.A.extra_field\r\n  Extra inputs are not permitted [type=extra_forbidden, input_value='oops!', input_type=str]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden\r\nA.B.type\r\n  Input should be 'B' [type=literal_error, input_value='A', input_type=str]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error\r\nA.B.val\r\n  Input should be a valid string [type=string_type, input_value=1, input_type=int]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type\r\nA.B.extra_field\r\n  Extra inputs are not permitted [type=extra_forbidden, input_value='oops!', input_type=str]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/extra_forbid\r\n```\r\n\r\nReplacing `type _U = A | B` with `_U = A | B`, the error is much improved:\r\n\r\n```log\r\nTraceback (most recent call last):\r\n  File \"<REDACTED_PATH>/pydantic_playground.py\", line 21, in <module>\r\n    U_ADAPTER.validate_python({\"type\": \"A\", \"val\": 1, \"extra_field\": \"oops!\"})\r\n  File \"<REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic/type_adapter.py\", line 144, in wrapped\r\n    return func(self, *args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic/type_adapter.py\", line 375, in validate_python\r\n    return self.validator.validate_python(object, strict=strict, from_attributes=from_attributes, context=context)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\npydantic_core._pydantic_core.ValidationError: 1 validation error for tagged-union[A,B]\r\nA.extra_field\r\n  Extra inputs are not permitted [type=extra_forbidden, input_value='oops!', input_type=str]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden\r\n```\r\n\r\n\r\n### Python, Pydantic & OS Version\r\n\r\n```Text\r\n             pydantic version: 2.9.0\r\n        pydantic-core version: 2.23.2\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: <REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic\r\n               python version: 3.12.7 (main, Oct  2 2024, 16:35:10) [Clang 18.1.8 ]\r\n                     platform: Linux-5.4.0-131-generic-x86_64-with-glibc2.31\r\n             related packages: fastapi-0.115.2 mypy-1.13.0 typing_extensions-4.12.2\r\n                       commit: unknown\r\n```\r\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "cj81499", "id": 9152032, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "22": {"html_url": "https://github.com/pydantic/pydantic/issues/11042", "id": 2715528370, "number": 11042, "title": "Regression using regex_engine python-re in pydantic >= 2.10b1", "created_at": "2024-12-03T16:50:55Z", "updated_at": "2024-12-03T16:50:55Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nStarting in pydantic 2.10b1 the regex_engine is strict(/rust?) for RootModel even if python-re is configured.\r\n\r\n```\r\n    return SchemaValidator(schema, config)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\npydantic_core._pydantic_core.SchemaError: Error building \"model\" validator:\r\n  SchemaError: Error building \"str\" validator:\r\n  SchemaError: regex parse error:\r\n    (^Passphrase:[ ^[ !#-~]+$)\r\n```\n\n### Example Code\n\n```Python\nfrom typing import Annotated, Dict\r\nfrom pydantic import BaseModel, constr, Field, RootModel, create_model\r\n\r\nPATTERN = r\"(^Passphrase:[ ^[ !#-~]+$)\"\r\n\r\nclass A(BaseModel):\r\n    v: str = constr(pattern=PATTERN)\r\n\r\nassert A.model_validate({\"v\": \"Passphrase: test\"})\r\n\r\nclass B(BaseModel):\r\n    model_config = dict(regex_engine=\"python-re\")\r\n    v: str = Field(pattern=PATTERN)\r\n\r\nassert B.model_validate({\"v\": \"Passphrase: test\"})\r\n\r\nclass GoodModel(RootModel):\r\n    model_config = dict(regex_engine=\"python-re\")\r\n\r\nC = Annotated[str, Field(pattern=PATTERN)]\r\nCx = create_model(\"C\", __base__=(GoodModel[C], )) # raises on pydantic >= 2.10.0b1\r\n\r\nassert Cx.model_validate(\"Passphrase: test\")\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.0b1\r\n        pydantic-core version: 2.26.0\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: ~/venv/lib/python3.12/site-packages/pydantic\r\n               python version: 3.12.7 (main, Oct  1 2024, 08:52:12) [GCC 11.4.0]\r\n                     platform: Linux-6.8.0-49-generic-x86_64-with-glibc2.35\r\n             related packages: typing_extensions-4.12.2\r\n                       commit: unknown\n```\n", "author_association": "CONTRIBUTOR", "comments": 0, "state": "open", "user": {"login": "commonism", "id": 164513, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "23": {"html_url": "https://github.com/pydantic/pydantic/issues/11041", "id": 2715463125, "number": 11041, "title": "Error message for return value in `validate_call` says \"input\"", "created_at": "2024-12-03T16:22:29Z", "updated_at": "2024-12-03T16:22:29Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nI had a function like:\r\n```py\r\nIn [1]: from pydantic import ValidationError, validate_call\r\n   ...: @validate_call(validate_return=True)\r\n   ...: def abc(s: str, b: int) -> str\r\n   ...:     return 1\r\n```\r\n\r\nand I ran it with: `abc('a', 1)` to get the following error:\r\n```py\r\nIn [2]: abc('a', 1)\r\n---------------------------------------------------------------------------\r\nValidationError                           Traceback (most recent call last)\r\nFile ~/venv3.11/lib/python3.11/site-packages/pydantic/validate_call_decorator.py:60, in validate_call.<locals>.validate.<locals>.wrapper_function(*args, **kwargs)\r\n     58 @functools.wraps(function)\r\n     59 def wrapper_function(*args, **kwargs):\r\n---> 60     return validate_call_wrapper(*args, **kwargs)\r\n\r\nFile ~/venv3.11/lib/python3.11/site-packages/pydantic/_internal/_validate_call.py:98, in ValidateCallWrapper.__call__(self, *args, **kwargs)\r\n     96 res = self.__pydantic_validator__.validate_python(pydantic_core.ArgsKwargs(args, kwargs))\r\n     97 if self.__return_pydantic_validator__:\r\n---> 98     return self.__return_pydantic_validator__(res)\r\n     99 return res\r\n\r\nValidationError: 1 validation error for abc\r\n  Input should be a valid string [type=string_type, input_value=1, input_type=int]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/bytes_type\r\n```\r\n\r\nIt took me waaay too long to figure out that this error which was saying \"Input should be ...\" actual meant \"Return value should be ...\"\r\n\r\nIn addition, I feel the error got me even more confused because errors in arguments don't show the argument name currently - Related to: https://github.com/pydantic/pydantic/issues/6791 \n\n### Example Code\n\n```Python\nfrom pydantic import ValidationError, validate_call\r\n@validate_call(validate_return=True)\r\ndef abc(s: str, b: int) -> str\r\n    return 1\r\n\r\nabc('a', 1)\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.9.2\r\n        pydantic-core version: 2.23.4\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /home/ali/venv3.11/lib/python3.11/site-packages/pydantic\r\n               python version: 3.11.9 (main, Aug 14 2024, 05:07:28) [Clang 18.1.8 ]\r\n                     platform: Linux-5.15.146.1-microsoft-standard-WSL2-x86_64-with-glibc2.39\r\n             related packages: typing_extensions-4.12.2 pyright-1.1.387 fastapi-0.115.4\r\n                       commit: unknown\n```\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "AbdealiLoKo", "id": 2200743, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "24": {"html_url": "https://github.com/pydantic/pydantic/issues/11039", "id": 2715368758, "number": 11039, "title": "Discriminated Union not working on models with alias generator", "created_at": "2024-12-03T15:41:10Z", "updated_at": "2024-12-03T15:47:12Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nRecently I upgraded pydantic from `2.9.2` to `2.10.2` and discriminated union on models with alias generator is causing `PydanticJsonSchemaWarning` warning as below:\r\n\r\n```\r\n/home/dikesh/.cache/pypoetry/virtualenvs/utilities-w-UxRgOW-py3.12/lib/python3.12/site-packages/pydantic/json_schema.py:2270: PydanticJsonSchemaWarning: Cannot update undefined schema for $ref=#/components/schemas/models__data_source__FacebookConfig-Input__1 [skipped-discriminator]\r\n  warnings.warn(message, PydanticJsonSchemaWarning)\r\n```\n\n### Example Code\n\n```Python\nfrom typing import Annotated, Literal\r\nfrom pydantic import BaseModel, ConfigDict, Field\r\nfrom pydantic.alias_generators import to_camel\r\n\r\n\r\nclass FacebookConfig(BaseModel):\r\n    \"\"\"FB Config\"\"\"\r\n\r\n    model_config = ConfigDict(alias_generator=to_camel)\r\n\r\n    account_id: str\r\n    account_name: str\r\n    data_source: Literal[\"facebook\"]\r\n\r\n\r\nclass GoogleConfig(BaseModel):\r\n    \"\"\"Google Config\"\"\"\r\n\r\n    model_config = ConfigDict(alias_generator=to_camel)\r\n\r\n    customer_id: str\r\n    login_customer_id: str\r\n    data_source: Literal[\"google\"]\r\n\r\n\r\n# Datasource config\r\nDataSourceConfig = Annotated[\r\n    FacebookConfig | GoogleConfig, Field(discriminator=\"data_source\")\r\n]\r\n\r\n\r\nclass ValidationRequest(BaseModel):\r\n    \"\"\"Validation Request\"\"\"\r\n\r\n    configs: list[DataSourceConfig]\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.2\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /home/dikesh/.cache/pypoetry/virtualenvs/utilities-w-UxRgOW-py3.12/lib/python3.12/site-packages/pydantic\r\n               python version: 3.12.7 (main, Oct  1 2024, 11:15:50) [GCC 14.2.1 20240910]\r\n                     platform: Linux-6.12.1-arch1-1-x86_64-with-glibc2.40\r\n             related packages: fastapi-0.115.5 typing_extensions-4.12.2\r\n                       commit: unknown\n```\n", "author_association": "NONE", "comments": 1, "state": "open", "user": {"login": "dikesh", "id": 1618526, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514926874", "id": 2514926874, "created_at": "2024-12-03T15:45:33Z", "updated_at": "2024-12-03T15:47:12Z", "author_association": "NONE", "body": "##### FastAPI code using the specified models\r\n\r\n```python\r\n# 3rd party\r\nfrom fastapi import FastAPI\r\nfrom models.data_source import ValidationRequest\r\n\r\n# Create FastAPI app\r\napp = FastAPI()\r\n\r\n\r\n@app.post(\"/\")\r\nasync def validate_account_access(req_body: ValidationRequest):\r\n    print(req_body)\r\n    return {}\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514926874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "dikesh", "id": 1618526, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007121280068531632, "severe_toxicity": 0.00011279393947916105, "obscene": 0.00018360032117925584, "threat": 0.00011785086098825559, "insult": 0.0001767289504641667, "identity_attack": 0.00013511034194380045}}]}, "25": {"html_url": "https://github.com/pydantic/pydantic/pull/11037", "id": 2715130579, "number": 11037, "title": "Fix `PydanticRecursiveRef` returned by `mro` in multi-level generic model", "created_at": "2024-12-03T14:07:19Z", "updated_at": "2024-12-03T16:04:45Z", "closed_at": null, "body": "<!-- Thank you for your contribution! -->\r\n<!-- Unless your change is trivial, please create an issue to discuss the change before creating a PR -->\r\n\r\n## Change Summary\r\n\r\n<!-- Please give a short summary of the changes. -->\r\nDuring creation of generic models, we may parametrize and insert some base models into the MRO. This may let `generic_recursion_self_type` report false positive, i.e. mistaken non-recursive models for recursive ones, eventually the new MRO will contain `PydanticRecursiveRef` instead of the concrete model. This can be fixed by one line in `_generics.generic_recursion_self_type`. \r\n\r\nI also add some comments in `mro`.\r\n\r\n#### Side notes\r\nPrevious workaround rely on caches. However, this fails because in some cases two models may have different cache keys despite having same `ref`. For example:\r\n```py\r\nclass A[T1, T2](BaseModel): ...\r\nclass B[T](BaseModel): ...\r\nprint(B[A[int, int]] == B[A][int, int])  # False\r\n```\r\n\r\n## Related issue number\r\nfix #11024 \r\n\r\n<!-- WARNING: please use \"fix #123\" style references so the issue is closed when this PR is merged. -->\r\n\r\n## Checklist\r\n\r\n* [x] The pull request title is a good summary of the changes - it will be used in the changelog\r\n* [x] Unit tests for the changes exist\r\n* [x] Tests pass on CI\r\n* [x] Documentation reflects the changes where applicable\r\n* [x] My PR is ready to review, **please add a comment including the phrase \"please review\" to assign reviewers**\r\n", "author_association": "CONTRIBUTOR", "comments": 2, "state": "open", "user": {"login": "kc0506", "id": 89458301, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514676186", "id": 2514676186, "created_at": "2024-12-03T14:13:12Z", "updated_at": "2024-12-03T14:13:12Z", "author_association": "NONE", "body": "## [CodSpeed Performance Report](https://codspeed.io/pydantic/pydantic/branches/kc0506%3Afix-11024)\n\n### Merging #11037 will **not alter performance**\n\n<sub>Comparing <code>kc0506:fix-11024</code> (954e61d) with <code>main</code> (aee6057)</sub>\n\n\n\n### Summary\n\n`\u2705 46` untouched benchmarks  \n\n\n\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514676186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 257293, "client_id": "Iv1.e7febeb3870a36fb", "slug": "codspeed-hq", "node_id": "A_kwHOBvQP3M4AA-0N", "owner": {"login": "CodSpeedHQ", "id": 116658140, "node_id": "O_kgDOBvQP3A", "avatar_url": "https://avatars.githubusercontent.com/u/116658140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodSpeedHQ", "html_url": "https://github.com/CodSpeedHQ", "followers_url": "https://api.github.com/users/CodSpeedHQ/followers", "following_url": "https://api.github.com/users/CodSpeedHQ/following{/other_user}", "gists_url": "https://api.github.com/users/CodSpeedHQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodSpeedHQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodSpeedHQ/subscriptions", "organizations_url": "https://api.github.com/users/CodSpeedHQ/orgs", "repos_url": "https://api.github.com/users/CodSpeedHQ/repos", "events_url": "https://api.github.com/users/CodSpeedHQ/events{/privacy}", "received_events_url": "https://api.github.com/users/CodSpeedHQ/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "CodSpeed HQ", "description": "## What is [CodSpeed](https://codspeed.io)?\r\nCodSpeed is a **continuous benchmarking** platform that allows you to **track** and **compare** the **performance** of your codebase during development.\r\n\r\nIt uses a smart **runtime engine** to measure the performance of your code in an **accurate** and **reproducible** way without creating a huge **runtime overhead**, unlike traditional benchmarks.\r\n\r\nCodSpeed produces detailed **performance reports** helping you **improve** your codebase **performance**, directly **within your repository provider** (Pull Requests comments, Merge checks, ...).\r\n\r\n## How it works\r\n\r\nThe core of the **performance measurement** is done directly within your **CI environment** through the **CodSpeed Action**. Allowing you to **stay the sole owner** of your data and to keep your **codebase private**.\r\n\r\nOnce the performance data is generated, **only the benchmark results** are sent to the CodSpeed servers to be **analyzed**.\r\n\r\nThen, performance reports are **generated** and **published** directly **within your repository provider**.\r\n\r\n## How long does it take to install?\r\n\r\nIf you're **already benchmarking** your codebase, you can plug your **existing benchmarks** to CodSpeed in **less than 5 minutes** since CodSpeed benchmark's API is **compatible** with the most **popular benchmarking frameworks**.\r\n\r\nIf **you haven't any benchmarks yet**, we provide an **intuitive** benchmarking API that allows you to **create your first benchmarks** in a **few minutes**.\r\n", "external_url": "https://codspeed.io", "html_url": "https://github.com/apps/codspeed-hq", "created_at": "2022-11-02T17:17:13Z", "updated_at": "2024-11-26T12:25:51Z", "permissions": {"actions": "read", "checks": "write", "contents": "read", "emails": "read", "members": "read", "metadata": "read", "organization_self_hosted_runners": "write", "pull_requests": "write", "statuses": "read"}, "events": ["organization", "pull_request", "repository", "workflow_job"]}, "user": {"login": "codspeed-hq[bot]", "id": 117304815, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007736993138678372, "severe_toxicity": 0.00010983487300109118, "obscene": 0.0001831541012506932, "threat": 0.00011851214367197827, "insult": 0.00017779582412913442, "identity_attack": 0.00013562149251811206}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514684248", "id": 2514684248, "created_at": "2024-12-03T14:14:46Z", "updated_at": "2024-12-03T14:14:46Z", "author_association": "CONTRIBUTOR", "body": "## Coverage report\n\n\n<img title=\"Coverage for the whole project is 95.84%. Previous coverage rate is not available, cannot report on evolution.\" src=\"https://img.shields.io/badge/Coverage-95%25-orange.svg\"> <img title=\"81.81% of the statement lines added by this PR are covered\" src=\"https://img.shields.io/badge/PR%20Coverage-81%25-orange.svg\"><details><summary>Click to see where and how coverage changed</summary><table><thead>\n  <tr><th>File</th><th>Statements</th><th>Missing</th><th>Coverage</th><th>Coverage<br>(new stmts)</th><th>Lines missing</th></tr>\n</thead>\n<tbody><tr>\n<td colspan=\"6\">&nbsp;&nbsp;<b>pydantic/_internal</b></td><tr>\n<td>&nbsp;&nbsp;<a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-106c17841815abb5e16d2ef6120bbaf9033249d900a633b6648ff37d34394933\">_generics.py</a></td>\n<td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-106c17841815abb5e16d2ef6120bbaf9033249d900a633b6648ff37d34394933\"><img title=\"This PR adds 225 statements to pydantic/_internal/_generics.py. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/225-%28%2B225%29-007ec6.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-106c17841815abb5e16d2ef6120bbaf9033249d900a633b6648ff37d34394933\"><img title=\"This PR adds 12 statements missing coverage to pydantic/_internal/_generics.py. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/12-%28%2B12%29-red.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-106c17841815abb5e16d2ef6120bbaf9033249d900a633b6648ff37d34394933\"><img title=\"The coverage rate of pydantic/_internal/_generics.py is 93% (213/225). The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/93%25-%28213/225%29-orange.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-106c17841815abb5e16d2ef6120bbaf9033249d900a633b6648ff37d34394933\"><img title=\"In this PR, 1 new statements are added to pydantic/_internal/_generics.py, 1 of which are covered (100%).\" src=\"https://img.shields.io/badge/100%25-%281/1%29-brightgreen.svg\"></a></td><td></td><tr>\n<td>&nbsp;&nbsp;<a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-ea75a1ef1da6bb38913477e979605f6a05e2ffe8c28fe47d9b798c89ba436c7c\">_model_construction.py</a></td>\n<td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-ea75a1ef1da6bb38913477e979605f6a05e2ffe8c28fe47d9b798c89ba436c7c\"><img title=\"This PR adds 372 statements to pydantic/_internal/_model_construction.py. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/372-%28%2B372%29-007ec6.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-ea75a1ef1da6bb38913477e979605f6a05e2ffe8c28fe47d9b798c89ba436c7c\"><img title=\"This PR adds 5 statements missing coverage to pydantic/_internal/_model_construction.py. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/5-%28%2B5%29-red.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-ea75a1ef1da6bb38913477e979605f6a05e2ffe8c28fe47d9b798c89ba436c7c\"><img title=\"The coverage rate of pydantic/_internal/_model_construction.py is 98.09% (367/372). The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/98%25-%28367/372%29-orange.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-ea75a1ef1da6bb38913477e979605f6a05e2ffe8c28fe47d9b798c89ba436c7c\"><img title=\"In this PR, 10 new statements are added to pydantic/_internal/_model_construction.py, 8 of which are covered (80%).\" src=\"https://img.shields.io/badge/80%25-%288/10%29-orange.svg\"></a></td><td><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-ea75a1ef1da6bb38913477e979605f6a05e2ffe8c28fe47d9b798c89ba436c7cR329-R330\">329-330</a></td></tbody>\n<tfoot>\n<tr>\n<td><b>Project Total</b></td>\n<td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"This PR adds 9943 statements to the whole project. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/9.9k-%28%2B9943%29-007ec6.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"This PR adds 304 statements missing coverage to the whole project. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/304-%28%2B304%29-red.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"The coverage rate of the whole project is 95.84% (9639/9943). The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/95%25-%289.6k/9.9k%29-orange.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11037/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"In this PR, 11 new statements are added to the whole project, 9 of which are covered (81.81%).\" src=\"https://img.shields.io/badge/81%25-%289/11%29-orange.svg\"></a></td><td>&nbsp;</td>\n</tr>\n</tfoot>\n</table>\n\n<sub>\n\nThis report was generated by [python-coverage-comment-action](https://github.com/py-cov-action/python-coverage-comment-action)\n\n</sub>\n</details>\n\n\n\n<!-- This comment was produced by python-coverage-comment-action -->", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514684248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 15368, "client_id": "Iv1.05c79e9ad1f6bdfa", "slug": "github-actions", "node_id": "MDM6QXBwMTUzNjg=", "owner": {"login": "github", "id": 9919, "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github", "html_url": "https://github.com/github", "followers_url": "https://api.github.com/users/github/followers", "following_url": "https://api.github.com/users/github/following{/other_user}", "gists_url": "https://api.github.com/users/github/gists{/gist_id}", "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github/subscriptions", "organizations_url": "https://api.github.com/users/github/orgs", "repos_url": "https://api.github.com/users/github/repos", "events_url": "https://api.github.com/users/github/events{/privacy}", "received_events_url": "https://api.github.com/users/github/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "GitHub Actions", "description": "Automate your workflow from idea to production", "external_url": "https://help.github.com/en/actions", "html_url": "https://github.com/apps/github-actions", "created_at": "2018-07-30T09:30:17Z", "updated_at": "2024-04-10T20:33:16Z", "permissions": {"actions": "write", "administration": "read", "attestations": "write", "checks": "write", "contents": "write", "deployments": "write", "discussions": "write", "issues": "write", "merge_queues": "write", "metadata": "read", "packages": "write", "pages": "write", "pull_requests": "write", "repository_hooks": "write", "repository_projects": "write", "security_events": "write", "statuses": "write", "vulnerability_alerts": "read"}, "events": ["branch_protection_rule", "check_run", "check_suite", "create", "delete", "deployment", "deployment_status", "discussion", "discussion_comment", "fork", "gollum", "issues", "issue_comment", "label", "merge_group", "milestone", "page_build", "project", "project_card", "project_column", "public", "pull_request", "pull_request_review", "pull_request_review_comment", "push", "registry_package", "release", "repository", "repository_dispatch", "status", "watch", "workflow_dispatch", "workflow_run"]}, "user": {"login": "github-actions[bot]", "id": 41898282, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0010200823890045285, "severe_toxicity": 0.00010487547115189955, "obscene": 0.00021337872021831572, "threat": 0.0001116527637350373, "insult": 0.0001818828022805974, "identity_attack": 0.000135585549287498}}]}, "26": {"html_url": "https://github.com/pydantic/pydantic/issues/11033", "id": 2714969901, "number": 11033, "title": "JSON Schema gen chokes on `BeforeValidator` with a union in the `json_schema_input_type`", "created_at": "2024-12-03T12:58:52Z", "updated_at": "2024-12-06T14:10:53Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nUsing a `BeforeValidator` with a union type (see `example.py` below) results in :\r\n\r\n```\r\nTraceback (most recent call last):\r\n...\r\n  File \"/<...>/.venv/lib/python3.11/site-packages/pydantic/json_schema.py\", line 2245, in _add_json_refs\r\n    _add_json_refs(self.definitions[defs_ref])\r\n                   ~~~~~~~~~~~~~~~~^^^^^^^^^^\r\nKeyError: '__main____TypeA-Input__1'\r\n```\n\n### Example Code\n\n```Python\nfrom pydantic.plugin import TypeAlias\r\nfrom typing_extensions import TypeAliasType\r\nfrom typing import Annotated\r\nfrom pydantic import BaseModel, BeforeValidator, AfterValidator\r\n\r\nclass TypeA(BaseModel):\r\n    pass\r\n\r\nclass TypeB(BaseModel):\r\n    pass\r\n\r\nFieldType = Annotated[list[str], BeforeValidator(lambda x: x if isinstance(x, list) else [x], TypeA | TypeB)]\r\n\r\nclass Model(BaseModel):\r\n    field: FieldType\r\n\r\nprint(Model.model_json_schema())\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.0b2\r\n        pydantic-core version: 2.27.0\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /Users/joshcannon/code/shimbboleth/.venv/lib/python3.11/site-packages/pydantic\r\n               python version: 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:37:07) [Clang 15.0.7 ]\r\n                     platform: macOS-14.7.1-arm64-arm-64bit\r\n             related packages: typing_extensions-4.12.2\r\n                       commit: unknown\n```\n", "author_association": "NONE", "comments": 6, "state": "open", "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514498404", "id": 2514498404, "created_at": "2024-12-03T13:00:24Z", "updated_at": "2024-12-03T13:00:24Z", "author_association": "NONE", "body": "I suspect this may be related to https://github.com/pydantic/pydantic/blob/aee6057378ccfec02126bf9c984a9b6d6b411777/pydantic/functional_validators.py#L130\r\n\r\n(maybe it doesn't handle more complex schemas?)", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514498404/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007967106066644192, "severe_toxicity": 0.0001113890393753536, "obscene": 0.00018745768466033041, "threat": 0.00012190425331937149, "insult": 0.00018282642122358084, "identity_attack": 0.00013939489144831896}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514524700", "id": 2514524700, "created_at": "2024-12-03T13:12:51Z", "updated_at": "2024-12-03T13:12:51Z", "author_association": "MEMBER", "body": "cc @Viicos", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514524700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.000829359982162714, "severe_toxicity": 0.00010755356925074011, "obscene": 0.0001884083030745387, "threat": 0.00010474184819031507, "insult": 0.00017363783263135701, "identity_attack": 0.00013897987082600594}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515986912", "id": 2515986912, "created_at": "2024-12-04T01:51:07Z", "updated_at": "2024-12-04T01:51:07Z", "author_association": "NONE", "body": "Oh yeah the `input_schema` is `{'type': 'union', 'choices': [{'type': 'definition-ref', 'schema_ref': '__main__.TypeA:5517702256'}, {'type': 'definition-ref', 'schema_ref': '__main__.TypeB:5805303600'}]}`\r\n\r\nso the `resolve_ref_schema` call should be recursive over the input schema", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515986912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006784338620491326, "severe_toxicity": 0.00011942534911213443, "obscene": 0.00020481015963014215, "threat": 0.00011604453902691603, "insult": 0.00017598284466657788, "identity_attack": 0.00013556305202655494}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515987627", "id": 2515987627, "created_at": "2024-12-04T01:51:49Z", "updated_at": "2024-12-04T01:51:49Z", "author_association": "NONE", "body": "Which means the workaround is obviously to make the input schema.... a `TypeAliasType`! \ud83d\ude02 ", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515987627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0008447241270914674, "severe_toxicity": 0.00010610763274598867, "obscene": 0.0001787489018170163, "threat": 0.00011556792742339894, "insult": 0.00018558106967248023, "identity_attack": 0.0001369706296827644}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521068952", "id": 2521068952, "created_at": "2024-12-05T17:59:10Z", "updated_at": "2024-12-05T17:59:10Z", "author_association": "MEMBER", "body": "I think the easiest here would be to just have `json_schema_input_type` core schema as part of the validator core schema (so that the definition is not removed, because anything in the metadata is ignored). Or else, as @thejcannon mentioned we need to recursively inline references, but this means we need to make use of the `WalkCoreSchema` utils which presumably are going to be removed if we go along with Markus' work. @sydney-runkle wdyt?", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521068952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006176431779749691, "severe_toxicity": 0.00012153656280133873, "obscene": 0.00018409921904094517, "threat": 0.00012362824054434896, "insult": 0.00017834694881457835, "identity_attack": 0.00013893150025978684}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2523335135", "id": 2523335135, "created_at": "2024-12-06T14:10:51Z", "updated_at": "2024-12-06T14:10:51Z", "author_association": "MEMBER", "body": "@Viicos, if I understand your point correctly, we'd be migrating this info out of metadata and onto the core schema directly?\r\n\r\nI'm in favor of this approach for now, you know how I dislike our current metadata pattern \ud83d\ude06 \r\n\r\nIf you'd like, I'm happy to take this task on.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2523335135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0005746661918237805, "severe_toxicity": 0.00012562419578898698, "obscene": 0.0001805306237656623, "threat": 0.0001342484902124852, "insult": 0.00017356299213133752, "identity_attack": 0.00014075914805289358}}]}, "27": {"html_url": "https://github.com/pydantic/pydantic/issues/11031", "id": 2713977801, "number": 11031, "title": "\"`Foo` is not fully defined; you should define `T`\" error when using new generic syntax with dataclass", "created_at": "2024-12-03T04:47:01Z", "updated_at": "2024-12-03T04:49:05Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nwhen using the python 3.12 generic syntax with a dataclass, the following error occurs:\r\n\r\n```\r\npydantic.errors.PydanticUserError: `Foo` is not fully defined; you should define `T`, then call `pydantic.dataclasses.rebuild_dataclass(Foo)`.\r\n```\n\n### Example Code\n\n```Python\nfrom __future__ import annotations\r\n\r\nfrom pydantic.dataclasses import dataclass\r\n\r\n\r\n@dataclass\r\nclass Foo[T]:\r\n    value: T\r\n\r\n\r\nprint(Foo(value=1))\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.2\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: C:\\Users\\user\\project\\.venv\\Lib\\site-packages\\pydantic\r\n               python version: 3.13.0 (main, Oct 16 2024, 00:33:24) [MSC v.1929 64 bit (AMD64)]\r\n                     platform: Windows-11-10.0.22621-SP0\r\n             related packages: typing_extensions-4.12.2\r\n                       commit: unknown\n```\n", "author_association": "CONTRIBUTOR", "comments": 1, "state": "open", "user": {"login": "DetachHead", "id": 57028336, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11031/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2513545164", "id": 2513545164, "created_at": "2024-12-03T04:49:04Z", "updated_at": "2024-12-03T04:49:04Z", "author_association": "CONTRIBUTOR", "body": "also happens when a regular dataclass is used as an arbitrary type with a `BaseModel`:\r\n```py\r\nfrom __future__ import annotations\r\n\r\nfrom dataclasses import dataclass\r\n\r\nfrom pydantic import BaseModel\r\n\r\n\r\n@dataclass\r\nclass Foo[T]:\r\n    value: T\r\n\r\n\r\nclass Bar(BaseModel, arbitrary_types_allowed=True):\r\n    bar: Foo[int]\r\n\r\n\r\nprint(Bar(bar=Foo(1)))\r\n```\r\n\r\n```\r\npydantic.errors.PydanticUserError: `Bar` is not fully defined; you should define `T`, then call `Bar.model_rebuild()`.\r\n```", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2513545164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "DetachHead", "id": 57028336, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0014176050899550319, "severe_toxicity": 9.476830018684268e-05, "obscene": 0.00022335480025503784, "threat": 0.00010065889364341274, "insult": 0.00019810788217000663, "identity_attack": 0.00013782826135866344}}]}, "28": {"html_url": "https://github.com/pydantic/pydantic/issues/11026", "id": 2712542742, "number": 11026, "title": "Sydney Runkle's Work: Dec 2nd -> Dec 6th", "created_at": "2024-12-02T16:33:04Z", "updated_at": "2024-12-03T15:45:57Z", "closed_at": null, "body": "This week, I'm planning on:\r\n\r\n- [x] Releasing v2.10.3 with the fixes detailed in https://github.com/pydantic/pydantic/issues\r\n  In particular, this requires me to dig into some url related fixes\r\n- [ ] Get https://github.com/pydantic/pydantic/pull/10846 across the line\r\n- [ ] Continue reviewing @MarkusSintonen's work on perf with schema cleaning - this was deferred while we worked on patch releases\r\n- [ ] Resume reviews for other important new features like `exclude_if`, etc.\r\n- [ ] Plan out v2.11 more concretely with a timeline\r\n- [ ] Documentation PR - I'd like to hold myself accountable to one of these per week, even if it's small\r\n\r\nI'll also be doing a good bit of work on `pydantic-ai`, mostly on the documentation front this week.\r\nI'd also like to further familiarize myself with the API / codebase.\r\n\r\nPRs for the week:\r\n\r\n* https://github.com/pydantic/pydantic/pull/11028\r\n* https://github.com/pydantic/pydantic/pull/11027\r\n* https://github.com/pydantic/pydantic/pull/11035", "author_association": "MEMBER", "comments": 0, "state": "open", "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11026/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "assignees": [{"login": "sydney-runkle", "id": 54324534, "node_id": "MDQ6VXNlcjU0MzI0NTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54324534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sydney-runkle", "html_url": "https://github.com/sydney-runkle", "followers_url": "https://api.github.com/users/sydney-runkle/followers", "following_url": "https://api.github.com/users/sydney-runkle/following{/other_user}", "gists_url": "https://api.github.com/users/sydney-runkle/gists{/gist_id}", "starred_url": "https://api.github.com/users/sydney-runkle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sydney-runkle/subscriptions", "organizations_url": "https://api.github.com/users/sydney-runkle/orgs", "repos_url": "https://api.github.com/users/sydney-runkle/repos", "events_url": "https://api.github.com/users/sydney-runkle/events{/privacy}", "received_events_url": "https://api.github.com/users/sydney-runkle/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "comments_list": []}, "29": {"html_url": "https://github.com/pydantic/pydantic/issues/11025", "id": 2712212995, "number": 11025, "title": "Mypy internal error when subclassing a generic model with a recursive type variable", "created_at": "2024-12-02T14:47:18Z", "updated_at": "2024-12-02T16:17:08Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nWhen using `mypy` with the `pydantic.mypy` plugin and a `pydantic` model that:\r\n\r\n- inherits from a generic model with a `TypeVar` bound to a `BaseModel` subclass,\r\n- has a self-referential type hint (e.g., `Child` referencing itself through `Generic[_T]`).\r\n\r\n`mypy` crashes with the following output:\r\n\r\n```\r\n/home/reznak/Documents/Projects/svglab/svglab/bug.py:17: error: INTERNAL ERROR -- Please try using mypy master on GitHub:\r\nhttps://mypy.readthedocs.io/en/stable/common_issues.html#using-a-development-mypy-build\r\nPlease report a bug at https://github.com/python/mypy/issues\r\nversion: 1.13.0\r\nTraceback (most recent call last):\r\n  File \"mypy/semanal.py\", line 7113, in accept\r\n  File \"mypy/nodes.py\", line 1183, in accept\r\n  File \"mypy/semanal.py\", line 1705, in visit_class_def\r\n  File \"mypy/semanal.py\", line 1898, in analyze_class\r\n  File \"mypy/semanal.py\", line 1945, in analyze_class_body_common\r\n  File \"mypy/semanal.py\", line 2030, in apply_class_plugin_hooks\r\n  File \"/home/reznak/.cache/pypoetry/virtualenvs/svglab-Gw7jsKfD-py3.12/lib/python3.12/site-packages/pydantic/mypy.py\", line 159, in _pydantic_model_class_maker_callback\r\n    transformer.transform()\r\n  File \"/home/reznak/.cache/pypoetry/virtualenvs/svglab-Gw7jsKfD-py3.12/lib/python3.12/site-packages/pydantic/mypy.py\", line 462, in transform\r\n    'fields': {field.name: field.serialize() for field in fields},\r\n                           ^^^^^^^^^^^^^^^^^\r\n  File \"/home/reznak/.cache/pypoetry/virtualenvs/svglab-Gw7jsKfD-py3.12/lib/python3.12/site-packages/pydantic/mypy.py\", line 360, in serialize\r\n    'type': self.type.serialize(),\r\n            ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"mypy/types.py\", line 1498, in serialize\r\n  File \"mypy/types.py\", line 3160, in serialize\r\nAssertionError: Internal error: unresolved placeholder type svglab.bug.Child\r\n/home/reznak/Documents/Projects/svglab/svglab/bug.py:17: : note: use --pdb to drop into pdb\r\n```\r\n\r\nThe validation seems to work correctly at run-time. Removing `BaseModel` from the hierarchy fixes the crash, as does disabling the `pydantic.mypy` plugin or instantiating the type variable with any other (hypothetical) subclass of `Element` other than `Child`.\n\n### Example Code\n\n```Python\nfrom typing import Generic, TypeVar\r\n\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass Element(BaseModel):\r\n    pass\r\n\r\n\r\n_T = TypeVar(\"_T\", bound=Element)\r\n\r\n\r\nclass ElementWithChildren(Element, Generic[_T]):\r\n    children: list[_T] = []\r\n\r\n\r\nclass Child(ElementWithChildren[\"Child\"]):\r\n    pass\r\n\r\n\r\nChild()\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.2\r\npydantic-core version: 2.27.1\r\npydantic-core build: profile=release pgo=false\r\ninstall path: /home/reznak/.cache/pypoetry/virtualenvs/svglab-Gw7jsKfD-py3.12/lib/python3.12/site-packages/pydantic\r\npython version: 3.12.7 (main, Oct  3 2024, 14:05:50) [GCC 13.2.0]\r\nplatform: Linux-6.6.63_1-x86_64-with-glibc2.39\r\nrelated packages: pydantic-extra-types-2.10.0 mypy-1.13.0 typing_extensions-4.12.2\r\ncommit: unknown\n```\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "reznakt", "id": 56887011, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11025/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "30": {"html_url": "https://github.com/pydantic/pydantic/issues/11024", "id": 2711912222, "number": 11024, "title": "v2.10.x: Raises `TypeError: mro() returned a non-class ('PydanticRecursiveRef')`", "created_at": "2024-12-02T13:23:12Z", "updated_at": "2024-12-03T15:03:32Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nAfter accidentally updating a package from 2.7.x to 2.10.x,\r\ngot an error message that I had never seen before.\r\n\r\nI don't know if it's known issue or not,\r\nbut I'm just writing this in the hopes that it will help improve 2.10.x.\r\n(Tested it and worked fine until 2.9.2)\r\n\r\nHave a nice day! \ud83d\udc4d\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/user-ubuntu/projects/~~~/.py\", line 26, in <module>\r\n    T12[int, int](values=[CombineModel[int, int](field_1=1, field_2=2)])\r\n    ~~~^^^^^^^^^^\r\n  File \"/home/user-ubuntu/projects/~~~/.venv/lib/python3.11/site-packages/pydantic/main.py\", line 811, in __class_getitem__\r\n    submodel = _generics.create_generic_submodel(model_name, origin, args, params)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/user-ubuntu/projects/~~~/.venv/lib/python3.11/site-packages/pydantic/_internal/_generics.py\", line 137, in create_generic_submodel\r\n    created_model = meta(\r\n                    ^^^^^\r\n  File \"/home/user-ubuntu/projects/~~~/.venv/lib/python3.11/site-packages/pydantic/_internal/_model_construction.py\", line 137, in __new__\r\n    cls = cast('type[BaseModel]', super().__new__(mcs, cls_name, bases, namespace, **kwargs))\r\n                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<frozen abc>\", line 106, in __new__\r\nTypeError: mro() returned a non-class ('PydanticRecursiveRef')\r\n```\r\n\n\n### Example Code\n\n```Python\nfrom pydantic import BaseModel\r\n\r\nfrom typing import List\r\nfrom typing import TypeVar\r\nfrom typing import Generic\r\n\r\n_T = TypeVar(\"_T\")\r\n\r\nclass GenericBaseModel(BaseModel, Generic[_T]):\r\n    ...\r\n\r\n# \ud83d\ude21 BAD CASE\r\n# pydantic==2.10.2\r\n# pydantic_core==2.27.1\r\n# \ud83d\ude00 GOOD CASE\r\n# pydantic==2.9.2\r\n# pydantic_core==2.23.4\r\nclass EnumerableModel(GenericBaseModel[_T]):\r\n    values: List[_T]\r\n\r\n# \ud83d\ude00 GOOD CASE\r\n# pydantic==2.10.2\r\n# pydantic_core==2.27.1\r\n# \ud83d\ude00 GOOD CASE\r\n# pydantic==2.9.2\r\n# pydantic_core==2.23.4\r\nclass EnumerableModel(BaseModel, Generic[_T]):\r\n    values: List[_T]\r\n\r\n_T1 = TypeVar(\"_T1\")\r\n_T2 = TypeVar(\"_T2\")\r\n\r\nclass CombineModel(BaseModel, Generic[_T1, _T2]):\r\n    field_1: _T1\r\n    field_2: _T2\r\n\r\nclass EnumerableCombineModel(EnumerableModel[CombineModel[_T1, _T2]]):\r\n    ...\r\n\r\nEnumerableCombineModel[int, int]\r\n\r\n# Traceback (most recent call last):\r\n#   File \"/home/user-ubuntu/projects/~~~/.py\", line 29, in <module>\r\n#     EnumerableCombineModel[int, int]\r\n#     ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\r\n#   File \"/home/user-ubuntu/projects/~~~/.venv/lib/python3.11/site-packages/pydantic/main.py\", line 811, in __class_getitem__\r\n#     submodel = _generics.create_generic_submodel(model_name, origin, args, params)\r\n#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n#   File \"/home/user-ubuntu/projects/~~~/.venv/lib/python3.11/site-packages/pydantic/_internal/_generics.py\", line 137, in create_generic_submodel\r\n#     created_model = meta(\r\n#                     ^^^^^\r\n#   File \"/home/user-ubuntu/projects/~~~/.venv/lib/python3.11/site-packages/pydantic/_internal/_model_construction.py\", line 137, in __new__\r\n#     cls = cast('type[BaseModel]', super().__new__(mcs, cls_name, bases, namespace, **kwargs))\r\n#                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n#   File \"<frozen abc>\", line 106, in __new__\r\n# TypeError: mro() returned a non-class ('PydanticRecursiveRef')\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.2\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /home/user-ubuntu/projects/metalicsoft-v1/.venv/lib/python3.11/site-packages/pydantic\r\n               python version: 3.11.7 (main, Dec  8 2023, 18:56:58) [GCC 11.4.0]\r\n                     platform: Linux-5.15.167.4-microsoft-standard-WSL2-x86_64-with-glibc2.35\r\n             related packages: fastapi-0.115.5 typing_extensions-4.12.2 pydantic-settings-2.6.1\r\n                       commit: unknown\n```\n", "author_association": "NONE", "comments": 6, "state": "open", "user": {"login": "kim-youngseop-developer", "id": 105539864, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11024/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2511999282", "id": 2511999282, "created_at": "2024-12-02T16:16:23Z", "updated_at": "2024-12-02T16:16:23Z", "author_association": "MEMBER", "body": "@kim-youngseop-developer,\r\n\r\nThanks for the report.\r\n\r\nThis is definitely something we want to fix in a v2.10.X patch.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2511999282/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0005976315005682409, "severe_toxicity": 0.00012164299550931901, "obscene": 0.0001848899555625394, "threat": 0.00012232262815814465, "insult": 0.00017742019554134458, "identity_attack": 0.0001383750350214541}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2512390051", "id": 2512390051, "created_at": "2024-12-02T18:36:55Z", "updated_at": "2024-12-02T18:36:55Z", "author_association": "MEMBER", "body": "cc @kc0506, I feel this might be related to the mro stuff...", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2512390051/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006560335750691593, "severe_toxicity": 0.00011805060785263777, "obscene": 0.00019056207383982837, "threat": 0.00011545293818926439, "insult": 0.00017304412904195487, "identity_attack": 0.00013587402645498514}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2513868181", "id": 2513868181, "created_at": "2024-12-03T08:36:32Z", "updated_at": "2024-12-03T08:36:32Z", "author_association": "CONTRIBUTOR", "body": "We are also having the same issue with 2.10.x versions. But we are seeing a different regression with the `mro()` where we are accessing the `mro`:\r\n```\r\nderived_from = some_generic_model.mro()\r\nAttributeError: 'PydanticRecursiveRef' object has no attribute 'mro'\r\n```", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2513868181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "MarkusSintonen", "id": 12939780, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007391191902570426, "severe_toxicity": 0.00011237149738008156, "obscene": 0.00018940743757411838, "threat": 0.00011076464579673484, "insult": 0.00017729843966662884, "identity_attack": 0.0001371431426377967}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514526608", "id": 2514526608, "created_at": "2024-12-03T13:13:43Z", "updated_at": "2024-12-03T13:13:43Z", "author_association": "MEMBER", "body": "@MarkusSintonen,\r\n\r\nThanks for the report. Could you provide a full MRO for your use case? Thank you!", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514526608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.000658832723274827, "severe_toxicity": 0.0001152509794337675, "obscene": 0.00017906945140566677, "threat": 0.000120823948236648, "insult": 0.00017686854698695242, "identity_attack": 0.0001330317900283262}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514590471", "id": 2514590471, "created_at": "2024-12-03T13:41:53Z", "updated_at": "2024-12-03T13:41:53Z", "author_association": "CONTRIBUTOR", "body": "@sydney-runkle :\r\n```python\r\nfrom typing import Generic, TypeVar\r\nfrom pydantic import BaseModel\r\nimport pytest\r\n\r\n@pytest.mark.parametrize(\"inner_mro_access\", [True, False])  # Both fail but it used to work\r\ndef test_bug(inner_mro_access: bool):\r\n    T = TypeVar(\"T\")\r\n    C = TypeVar(\"C\")\r\n\r\n    class BaseInner(BaseModel, Generic[T, C]):\r\n        def __class_getitem__(cls, params):\r\n            klass = super().__class_getitem__(params)\r\n            if inner_mro_access:\r\n                klass.mro()\r\n            return klass\r\n\r\n    class BaseOuter(BaseModel, Generic[T, C]):\r\n        field1: BaseInner[T, C]\r\n\r\n    class Inner(BaseInner[int, C], BaseModel, Generic[C]):\r\n        pass\r\n\r\n    class Outer(BaseOuter[int, C], BaseModel, Generic[C]):\r\n        field2: Inner[C]\r\n\r\n    # inner_mro_access=False. Fails: TypeError: mro() returned a non-class ('PydanticRecursiveRef')\r\n    # inner_mro_access=True. Fails: AttributeError: 'PydanticRecursiveRef' object has no attribute 'mro'\r\n    Outer[int]\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514590471/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "MarkusSintonen", "id": 12939780, "site_admin": false}, "comment_sentiments": {"toxicity": 0.001406553783454001, "severe_toxicity": 9.876846888801083e-05, "obscene": 0.00023536999651696533, "threat": 0.00010473096335772425, "insult": 0.00019800683367066085, "identity_attack": 0.0001399762841174379}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514819947", "id": 2514819947, "created_at": "2024-12-03T15:03:31Z", "updated_at": "2024-12-03T15:03:31Z", "author_association": "MEMBER", "body": "Seems like this only shows up with pretty exotic use cases of generics. We certainly want to fix, but this will fall into the scope of v2.10.4", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514819947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006290993187576532, "severe_toxicity": 0.00012068600335624069, "obscene": 0.00017852832388598472, "threat": 0.0001267753541469574, "insult": 0.00017426928388886154, "identity_attack": 0.0001426591188646853}}]}, "31": {"html_url": "https://github.com/pydantic/pydantic/issues/11020", "id": 2710827546, "number": 11020, "title": "Update `WithJsonSchema` documentation", "created_at": "2024-12-02T07:23:40Z", "updated_at": "2024-12-02T07:23:49Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I have searched Google & GitHub for similar requests and couldn't find anything\n- [X] I have read and followed [the docs](https://docs.pydantic.dev) and still think this feature is missing\n\n### Description\n\nSection to be updated: https://docs.pydantic.dev/latest/concepts/json_schema/#withjsonschema-annotation.\r\n\r\nSince https://github.com/pydantic/pydantic/pull/10094, there's no need to use `WithJsonSchema` for validators. So another example should be found and the note removed.\r\n\r\ncrossref https://github.com/pydantic/pydantic/issues/11013.\n\n### Affected Components\n\n- [ ] [Compatibility between releases](https://docs.pydantic.dev/changelog/)\n- [ ] [Data validation/parsing](https://docs.pydantic.dev/concepts/models/#basic-model-usage)\n- [ ] [Data serialization](https://docs.pydantic.dev/concepts/serialization/) - `.model_dump()` and `.model_dump_json()`\n- [ ] [JSON Schema](https://docs.pydantic.dev/concepts/json_schema/)\n- [ ] [Dataclasses](https://docs.pydantic.dev/concepts/dataclasses/)\n- [ ] [Model Config](https://docs.pydantic.dev/concepts/config/)\n- [ ] [Field Types](https://docs.pydantic.dev/api/types/) - adding or changing a particular data type\n- [ ] [Function validation decorator](https://docs.pydantic.dev/concepts/validation_decorator/)\n- [ ] [Generic Models](https://docs.pydantic.dev/concepts/models/#generic-models)\n- [ ] [Other Model behaviour](https://docs.pydantic.dev/concepts/models/) - `model_construct()`, pickling, private attributes, ORM mode\n- [ ] [Plugins](https://docs.pydantic.dev/) and integration with other tools - mypy, FastAPI, python-devtools, Hypothesis, VS Code, PyCharm, etc.", "author_association": "MEMBER", "comments": 0, "state": "open", "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "32": {"html_url": "https://github.com/pydantic/pydantic/pull/11016", "id": 2709923802, "number": 11016, "title": "Add decimal precision constraints to JSON schema", "created_at": "2024-12-01T21:45:13Z", "updated_at": "2024-12-06T08:55:50Z", "closed_at": null, "body": "<!-- Thank you for your contribution! -->\r\n<!-- Unless your change is trivial, please create an issue to discuss the change before creating a PR -->\r\n\r\n## Change Summary\r\n\r\nThis PR added a decimal precision pattern validation to JSON schema generation. The implementation enforces `max_digits` and `decimal_places` constraints by adding a regex pattern. A corresponding unit test was also added to test the changes. \r\n\r\n## Related issue number\r\n\r\nfix #10867 \r\n\r\n## Checklist\r\n\r\n* [x] The pull request title is a good summary of the changes - it will be used in the changelog\r\n* [x] Unit tests for the changes exist\r\n* [x] Tests pass on CI\r\n* [ ] Documentation reflects the changes where applicable\r\n* [x] My PR is ready to review, **please add a comment including the phrase \"please review\" to assign reviewers**\r\n\n\nSelected Reviewer: @sydney-runkle", "author_association": "NONE", "comments": 4, "state": "open", "user": {"login": "KCui0327", "id": 59521762, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [{"login": "sydney-runkle", "id": 54324534, "node_id": "MDQ6VXNlcjU0MzI0NTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54324534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sydney-runkle", "html_url": "https://github.com/sydney-runkle", "followers_url": "https://api.github.com/users/sydney-runkle/followers", "following_url": "https://api.github.com/users/sydney-runkle/following{/other_user}", "gists_url": "https://api.github.com/users/sydney-runkle/gists{/gist_id}", "starred_url": "https://api.github.com/users/sydney-runkle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sydney-runkle/subscriptions", "organizations_url": "https://api.github.com/users/sydney-runkle/orgs", "repos_url": "https://api.github.com/users/sydney-runkle/repos", "events_url": "https://api.github.com/users/sydney-runkle/events{/privacy}", "received_events_url": "https://api.github.com/users/sydney-runkle/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510266086", "id": 2510266086, "created_at": "2024-12-01T21:50:56Z", "updated_at": "2024-12-06T08:52:42Z", "author_association": "NONE", "body": "## [CodSpeed Performance Report](https://codspeed.io/pydantic/pydantic/branches/KCui0327%3Adecimal_constraint)\n\n### Merging #11016 will **not alter performance**\n\n<sub>Comparing <code>KCui0327:decimal_constraint</code> (c159bea) with <code>main</code> (32f405b)</sub>\n\n\n\n### Summary\n\n`\u2705 46` untouched benchmarks  \n\n\n\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510266086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 257293, "client_id": "Iv1.e7febeb3870a36fb", "slug": "codspeed-hq", "node_id": "A_kwHOBvQP3M4AA-0N", "owner": {"login": "CodSpeedHQ", "id": 116658140, "node_id": "O_kgDOBvQP3A", "avatar_url": "https://avatars.githubusercontent.com/u/116658140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodSpeedHQ", "html_url": "https://github.com/CodSpeedHQ", "followers_url": "https://api.github.com/users/CodSpeedHQ/followers", "following_url": "https://api.github.com/users/CodSpeedHQ/following{/other_user}", "gists_url": "https://api.github.com/users/CodSpeedHQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodSpeedHQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodSpeedHQ/subscriptions", "organizations_url": "https://api.github.com/users/CodSpeedHQ/orgs", "repos_url": "https://api.github.com/users/CodSpeedHQ/repos", "events_url": "https://api.github.com/users/CodSpeedHQ/events{/privacy}", "received_events_url": "https://api.github.com/users/CodSpeedHQ/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "CodSpeed HQ", "description": "## What is [CodSpeed](https://codspeed.io)?\r\nCodSpeed is a **continuous benchmarking** platform that allows you to **track** and **compare** the **performance** of your codebase during development.\r\n\r\nIt uses a smart **runtime engine** to measure the performance of your code in an **accurate** and **reproducible** way without creating a huge **runtime overhead**, unlike traditional benchmarks.\r\n\r\nCodSpeed produces detailed **performance reports** helping you **improve** your codebase **performance**, directly **within your repository provider** (Pull Requests comments, Merge checks, ...).\r\n\r\n## How it works\r\n\r\nThe core of the **performance measurement** is done directly within your **CI environment** through the **CodSpeed Action**. Allowing you to **stay the sole owner** of your data and to keep your **codebase private**.\r\n\r\nOnce the performance data is generated, **only the benchmark results** are sent to the CodSpeed servers to be **analyzed**.\r\n\r\nThen, performance reports are **generated** and **published** directly **within your repository provider**.\r\n\r\n## How long does it take to install?\r\n\r\nIf you're **already benchmarking** your codebase, you can plug your **existing benchmarks** to CodSpeed in **less than 5 minutes** since CodSpeed benchmark's API is **compatible** with the most **popular benchmarking frameworks**.\r\n\r\nIf **you haven't any benchmarks yet**, we provide an **intuitive** benchmarking API that allows you to **create your first benchmarks** in a **few minutes**.\r\n", "external_url": "https://codspeed.io", "html_url": "https://github.com/apps/codspeed-hq", "created_at": "2022-11-02T17:17:13Z", "updated_at": "2024-11-26T12:25:51Z", "permissions": {"actions": "read", "checks": "write", "contents": "read", "emails": "read", "members": "read", "metadata": "read", "organization_self_hosted_runners": "write", "pull_requests": "write", "statuses": "read"}, "events": ["organization", "pull_request", "repository", "workflow_job"]}, "user": {"login": "codspeed-hq[bot]", "id": 117304815, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007876780000515282, "severe_toxicity": 0.00010952152661047876, "obscene": 0.00018440349958837032, "threat": 0.00011880677629960701, "insult": 0.00017870306328404695, "identity_attack": 0.00013606034917756915}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510266473", "id": 2510266473, "created_at": "2024-12-01T21:52:14Z", "updated_at": "2024-12-06T08:54:04Z", "author_association": "CONTRIBUTOR", "body": "## Coverage report\n\n\n<img title=\"Coverage for the whole project is 95.79%. Previous coverage rate is not available, cannot report on evolution.\" src=\"https://img.shields.io/badge/Coverage-95%25-orange.svg\"> <img title=\"58.33% of the statement lines added by this PR are covered\" src=\"https://img.shields.io/badge/PR%20Coverage-58%25-red.svg\"><details><summary>Click to see where and how coverage changed</summary><table><thead>\n  <tr><th>File</th><th>Statements</th><th>Missing</th><th>Coverage</th><th>Coverage<br>(new stmts)</th><th>Lines missing</th></tr>\n</thead>\n<tbody><tr>\n<td colspan=\"6\">&nbsp;&nbsp;<b>pydantic</b></td><tr>\n<td>&nbsp;&nbsp;<a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\">json_schema.py</a></td>\n<td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\"><img title=\"This PR adds 1074 statements to pydantic/json_schema.py. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/1.1k-%28%2B1074%29-007ec6.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\"><img title=\"This PR adds 42 statements missing coverage to pydantic/json_schema.py. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/42-%28%2B42%29-red.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\"><img title=\"The coverage rate of pydantic/json_schema.py is 94.36% (1032/1074). The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/94%25-%281.0k/1.1k%29-orange.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\"><img title=\"In this PR, 12 new statements are added to pydantic/json_schema.py, 7 of which are covered (58.33%).\" src=\"https://img.shields.io/badge/58%25-%287/12%29-red.svg\"></a></td><td><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65R712-R720\">712-720</a></td></tbody>\n<tfoot>\n<tr>\n<td><b>Project Total</b></td>\n<td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"This PR adds 9947 statements to the whole project. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/9.9k-%28%2B9947%29-007ec6.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"This PR adds 308 statements missing coverage to the whole project. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/308-%28%2B308%29-red.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"The coverage rate of the whole project is 95.79% (9639/9947). The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/95%25-%289.6k/9.9k%29-orange.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11016/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"In this PR, 12 new statements are added to the whole project, 7 of which are covered (58.33%).\" src=\"https://img.shields.io/badge/58%25-%287/12%29-red.svg\"></a></td><td>&nbsp;</td>\n</tr>\n</tfoot>\n</table>\n\n<sub>\n\nThis report was generated by [python-coverage-comment-action](https://github.com/py-cov-action/python-coverage-comment-action)\n\n</sub>\n</details>\n\n\n\n<!-- This comment was produced by python-coverage-comment-action -->", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510266473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 15368, "client_id": "Iv1.05c79e9ad1f6bdfa", "slug": "github-actions", "node_id": "MDM6QXBwMTUzNjg=", "owner": {"login": "github", "id": 9919, "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github", "html_url": "https://github.com/github", "followers_url": "https://api.github.com/users/github/followers", "following_url": "https://api.github.com/users/github/following{/other_user}", "gists_url": "https://api.github.com/users/github/gists{/gist_id}", "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github/subscriptions", "organizations_url": "https://api.github.com/users/github/orgs", "repos_url": "https://api.github.com/users/github/repos", "events_url": "https://api.github.com/users/github/events{/privacy}", "received_events_url": "https://api.github.com/users/github/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "GitHub Actions", "description": "Automate your workflow from idea to production", "external_url": "https://help.github.com/en/actions", "html_url": "https://github.com/apps/github-actions", "created_at": "2018-07-30T09:30:17Z", "updated_at": "2024-04-10T20:33:16Z", "permissions": {"actions": "write", "administration": "read", "attestations": "write", "checks": "write", "contents": "write", "deployments": "write", "discussions": "write", "issues": "write", "merge_queues": "write", "metadata": "read", "packages": "write", "pages": "write", "pull_requests": "write", "repository_hooks": "write", "repository_projects": "write", "security_events": "write", "statuses": "write", "vulnerability_alerts": "read"}, "events": ["branch_protection_rule", "check_run", "check_suite", "create", "delete", "deployment", "deployment_status", "discussion", "discussion_comment", "fork", "gollum", "issues", "issue_comment", "label", "merge_group", "milestone", "page_build", "project", "project_card", "project_column", "public", "pull_request", "pull_request_review", "pull_request_review_comment", "push", "registry_package", "release", "repository", "repository_dispatch", "status", "watch", "workflow_dispatch", "workflow_run"]}, "user": {"login": "github-actions[bot]", "id": 41898282, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0010796238202601671, "severe_toxicity": 0.000104930491943378, "obscene": 0.00022060614719521254, "threat": 0.00011327055108267814, "insult": 0.0001841675111791119, "identity_attack": 0.0001367202348774299}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510268500", "id": 2510268500, "created_at": "2024-12-01T21:58:35Z", "updated_at": "2024-12-01T21:58:35Z", "author_association": "NONE", "body": "please review (thanks!)", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510268500/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "KCui0327", "id": 59521762, "site_admin": false}, "comment_sentiments": {"toxicity": 0.000565626542083919, "severe_toxicity": 0.00012866032193414867, "obscene": 0.00018705968977883458, "threat": 0.00013088680861983448, "insult": 0.00017479699454270303, "identity_attack": 0.00014079848187975585}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522536070", "id": 2522536070, "created_at": "2024-12-06T08:48:43Z", "updated_at": "2024-12-06T08:48:43Z", "author_association": "NONE", "body": "> Thanks for the PR. A couple remarks on the pattern implementation:\r\n> \r\n>     * Can't we also set a pattern if only `decimal_places` is set?\r\n> \r\n>     * I'm wondering if we should special case leading zeros differently. What we could do is:\r\n>       \r\n>       * in validation, allow arbitrary leading zeros to be specified. Pydantic will not error during validation.\r\n>       * in serialization, only allow a single 0 or `[1-9]` followed by the constrained number of integers.\r\n> \r\n>     * Taking into account what was said above, let's define the pattern as a private constant in this module, and explain it with comments (and then compile with the `re.VERBOSE` flag), e.g:\r\n>       ```python\r\n>        _DECIMAL_PATTERN = r\"\"\"\r\n>        ^-?      # Possible minus sign\r\n>        ...\r\n>        \"\"\"\r\n>       ```\r\n\r\nHi @Viicos, thank you for your feedback! I have address your feedback in the latest commits, please let me know if there's any other changes I should add.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522536070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "KCui0327", "id": 59521762, "site_admin": false}, "comment_sentiments": {"toxicity": 0.000604333181399852, "severe_toxicity": 0.00011987832112936303, "obscene": 0.00018434003868605942, "threat": 0.0001222035934915766, "insult": 0.0001706866460153833, "identity_attack": 0.00013491812569554895}}]}, "33": {"html_url": "https://github.com/pydantic/pydantic/pull/11014", "id": 2709132946, "number": 11014, "title": "Copy `WithJsonSchema` schema to avoid sharing mutated data", "created_at": "2024-12-01T13:00:06Z", "updated_at": "2024-12-01T14:47:31Z", "closed_at": null, "body": "<!-- Thank you for your contribution! -->\r\n<!-- Unless your change is trivial, please create an issue to discuss the change before creating a PR -->\r\n\r\n## Change Summary\r\n\r\nQuick-and-simple. Just `.copy()` the `return self.json_schema` inside of `WithJsonSchema` so that other parts of the pipeline that modify the schema don't modify the shared object.\r\n\r\n## Related issue number\r\n\r\nFix #11013\r\n\r\n## Checklist\r\n\r\n* [X] The pull request title is a good summary of the changes - it will be used in the changelog\r\n* [ ] Unit tests for the changes exist\r\n* [ ] Tests pass on CI\r\n* [X] Documentation reflects the changes where applicable\r\n* [ ] My PR is ready to review, **please add a comment including the phrase \"please review\" to assign reviewers**\r\n\n\nSelected Reviewer: @sydney-runkle", "author_association": "NONE", "comments": 3, "state": "open", "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [{"login": "sydney-runkle", "id": 54324534, "node_id": "MDQ6VXNlcjU0MzI0NTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54324534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sydney-runkle", "html_url": "https://github.com/sydney-runkle", "followers_url": "https://api.github.com/users/sydney-runkle/followers", "following_url": "https://api.github.com/users/sydney-runkle/following{/other_user}", "gists_url": "https://api.github.com/users/sydney-runkle/gists{/gist_id}", "starred_url": "https://api.github.com/users/sydney-runkle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sydney-runkle/subscriptions", "organizations_url": "https://api.github.com/users/sydney-runkle/orgs", "repos_url": "https://api.github.com/users/sydney-runkle/repos", "events_url": "https://api.github.com/users/sydney-runkle/events{/privacy}", "received_events_url": "https://api.github.com/users/sydney-runkle/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2509760512", "id": 2509760512, "created_at": "2024-12-01T13:05:40Z", "updated_at": "2024-12-01T14:37:31Z", "author_association": "NONE", "body": "## [CodSpeed Performance Report](https://codspeed.io/pydantic/pydantic/branches/thejcannon%3Apatch-1)\n\n### Merging #11014 will **not alter performance**\n\n<sub>Comparing <code>thejcannon:patch-1</code> (1da5638) with <code>main</code> (6f31f8f)</sub>\n\n\n\n### Summary\n\n`\u2705 46` untouched benchmarks  \n\n\n\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2509760512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 257293, "client_id": "Iv1.e7febeb3870a36fb", "slug": "codspeed-hq", "node_id": "A_kwHOBvQP3M4AA-0N", "owner": {"login": "CodSpeedHQ", "id": 116658140, "node_id": "O_kgDOBvQP3A", "avatar_url": "https://avatars.githubusercontent.com/u/116658140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodSpeedHQ", "html_url": "https://github.com/CodSpeedHQ", "followers_url": "https://api.github.com/users/CodSpeedHQ/followers", "following_url": "https://api.github.com/users/CodSpeedHQ/following{/other_user}", "gists_url": "https://api.github.com/users/CodSpeedHQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodSpeedHQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodSpeedHQ/subscriptions", "organizations_url": "https://api.github.com/users/CodSpeedHQ/orgs", "repos_url": "https://api.github.com/users/CodSpeedHQ/repos", "events_url": "https://api.github.com/users/CodSpeedHQ/events{/privacy}", "received_events_url": "https://api.github.com/users/CodSpeedHQ/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "CodSpeed HQ", "description": "## What is [CodSpeed](https://codspeed.io)?\r\nCodSpeed is a **continuous benchmarking** platform that allows you to **track** and **compare** the **performance** of your codebase during development.\r\n\r\nIt uses a smart **runtime engine** to measure the performance of your code in an **accurate** and **reproducible** way without creating a huge **runtime overhead**, unlike traditional benchmarks.\r\n\r\nCodSpeed produces detailed **performance reports** helping you **improve** your codebase **performance**, directly **within your repository provider** (Pull Requests comments, Merge checks, ...).\r\n\r\n## How it works\r\n\r\nThe core of the **performance measurement** is done directly within your **CI environment** through the **CodSpeed Action**. Allowing you to **stay the sole owner** of your data and to keep your **codebase private**.\r\n\r\nOnce the performance data is generated, **only the benchmark results** are sent to the CodSpeed servers to be **analyzed**.\r\n\r\nThen, performance reports are **generated** and **published** directly **within your repository provider**.\r\n\r\n## How long does it take to install?\r\n\r\nIf you're **already benchmarking** your codebase, you can plug your **existing benchmarks** to CodSpeed in **less than 5 minutes** since CodSpeed benchmark's API is **compatible** with the most **popular benchmarking frameworks**.\r\n\r\nIf **you haven't any benchmarks yet**, we provide an **intuitive** benchmarking API that allows you to **create your first benchmarks** in a **few minutes**.\r\n", "external_url": "https://codspeed.io", "html_url": "https://github.com/apps/codspeed-hq", "created_at": "2022-11-02T17:17:13Z", "updated_at": "2024-11-26T12:25:51Z", "permissions": {"actions": "read", "checks": "write", "contents": "read", "emails": "read", "members": "read", "metadata": "read", "organization_self_hosted_runners": "write", "pull_requests": "write", "statuses": "read"}, "events": ["organization", "pull_request", "repository", "workflow_job"]}, "user": {"login": "codspeed-hq[bot]", "id": 117304815, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0008054064237512648, "severe_toxicity": 0.00010747257329057902, "obscene": 0.0001865458325482905, "threat": 0.00011347012332407758, "insult": 0.00017775868764147162, "identity_attack": 0.000135861337184906}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2509761866", "id": 2509761866, "created_at": "2024-12-01T13:08:37Z", "updated_at": "2024-12-01T13:08:37Z", "author_association": "CONTRIBUTOR", "body": "## Coverage report\n\n\n<img title=\"Coverage for the whole project is 95.84%. Previous coverage rate is not available, cannot report on evolution.\" src=\"https://img.shields.io/badge/Coverage-95%25-orange.svg\"> <img title=\"100% of the statement lines added by this PR are covered\" src=\"https://img.shields.io/badge/PR%20Coverage-100%25-brightgreen.svg\"><details><summary>Click to see where and how coverage changed</summary><table><thead>\n  <tr><th>File</th><th>Statements</th><th>Missing</th><th>Coverage</th><th>Coverage<br>(new stmts)</th><th>Lines missing</th></tr>\n</thead>\n<tbody><tr>\n<td colspan=\"6\">&nbsp;&nbsp;<b>pydantic</b></td><tr>\n<td>&nbsp;&nbsp;<a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\">json_schema.py</a></td>\n<td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\"><img title=\"This PR adds 1061 statements to pydantic/json_schema.py. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/1.1k-%28%2B1061%29-007ec6.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\"><img title=\"This PR adds 37 statements missing coverage to pydantic/json_schema.py. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/37-%28%2B37%29-red.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\"><img title=\"The coverage rate of pydantic/json_schema.py is 94.82% (1024/1061). The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/94%25-%281.0k/1.1k%29-orange.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-a85df49955cda137dd8914c5c2c662511c672ae6519fbee16e689997e9923c65\"><img title=\"In this PR, 1 new statements are added to pydantic/json_schema.py, 1 of which are covered (100%).\" src=\"https://img.shields.io/badge/100%25-%281/1%29-brightgreen.svg\"></a></td><td></td></tbody>\n<tfoot>\n<tr>\n<td><b>Project Total</b></td>\n<td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"This PR adds 9942 statements to the whole project. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/9.9k-%28%2B9942%29-007ec6.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"This PR adds 305 statements missing coverage to the whole project. The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/305-%28%2B305%29-red.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"The coverage rate of the whole project is 95.84% (9637/9942). The file did not seem to exist on the base branch.\" src=\"https://img.shields.io/badge/95%25-%289.6k/9.9k%29-orange.svg\"></a></td><td align=\"center\"><a href=\"https://github.com/pydantic/pydantic/pull/11014/files#diff-4b0bf2efa3367c0072ac2bf1e234e703dc46b47aaa4fe9d3b01737b1a15752b1\"><img title=\"In this PR, 1 new statements are added to the whole project, 1 of which are covered (100%).\" src=\"https://img.shields.io/badge/100%25-%281/1%29-brightgreen.svg\"></a></td><td>&nbsp;</td>\n</tr>\n</tfoot>\n</table>\n\n<sub>\n\nThis report was generated by [python-coverage-comment-action](https://github.com/py-cov-action/python-coverage-comment-action)\n\n</sub>\n</details>\n\n\n\n<!-- This comment was produced by python-coverage-comment-action -->", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2509761866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": {"id": 15368, "client_id": "Iv1.05c79e9ad1f6bdfa", "slug": "github-actions", "node_id": "MDM6QXBwMTUzNjg=", "owner": {"login": "github", "id": 9919, "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github", "html_url": "https://github.com/github", "followers_url": "https://api.github.com/users/github/followers", "following_url": "https://api.github.com/users/github/following{/other_user}", "gists_url": "https://api.github.com/users/github/gists{/gist_id}", "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github/subscriptions", "organizations_url": "https://api.github.com/users/github/orgs", "repos_url": "https://api.github.com/users/github/repos", "events_url": "https://api.github.com/users/github/events{/privacy}", "received_events_url": "https://api.github.com/users/github/received_events", "type": "Organization", "user_view_type": "public", "site_admin": false}, "name": "GitHub Actions", "description": "Automate your workflow from idea to production", "external_url": "https://help.github.com/en/actions", "html_url": "https://github.com/apps/github-actions", "created_at": "2018-07-30T09:30:17Z", "updated_at": "2024-04-10T20:33:16Z", "permissions": {"actions": "write", "administration": "read", "attestations": "write", "checks": "write", "contents": "write", "deployments": "write", "discussions": "write", "issues": "write", "merge_queues": "write", "metadata": "read", "packages": "write", "pages": "write", "pull_requests": "write", "repository_hooks": "write", "repository_projects": "write", "security_events": "write", "statuses": "write", "vulnerability_alerts": "read"}, "events": ["branch_protection_rule", "check_run", "check_suite", "create", "delete", "deployment", "deployment_status", "discussion", "discussion_comment", "fork", "gollum", "issues", "issue_comment", "label", "merge_group", "milestone", "page_build", "project", "project_card", "project_column", "public", "pull_request", "pull_request_review", "pull_request_review_comment", "push", "registry_package", "release", "repository", "repository_dispatch", "status", "watch", "workflow_dispatch", "workflow_run"]}, "user": {"login": "github-actions[bot]", "id": 41898282, "site_admin": false}, "comment_sentiments": {"toxicity": 0.001093315309844911, "severe_toxicity": 0.00010476942406967282, "obscene": 0.00022164217079989612, "threat": 0.00011356840695952997, "insult": 0.00018471074872650206, "identity_attack": 0.00013668464089278132}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2509800525", "id": 2509800525, "created_at": "2024-12-01T14:47:25Z", "updated_at": "2024-12-01T14:47:25Z", "author_association": "NONE", "body": "please review (and thank you \u2764\ufe0f )", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2509800525/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0005469751777127385, "severe_toxicity": 0.0001319903676630929, "obscene": 0.00018709090363699943, "threat": 0.0001351944956695661, "insult": 0.0001745115441735834, "identity_attack": 0.00014193104289006442}}]}, "34": {"html_url": "https://github.com/pydantic/pydantic/issues/11013", "id": 2709128734, "number": 11013, "title": "`default` added to `Annotated` type when `WithJsonSchema` is used", "created_at": "2024-12-01T12:54:04Z", "updated_at": "2024-12-06T19:05:18Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\n(See example code below)\r\n\r\n(Notice the `{default': True}` in `field2`'s `anyOf`)\r\n\r\nI suspect this has to do with the `WithJsonSchema` not being copied when applying `field1`'s default.\r\n\r\nSwapping the order doesn't alleviate the issue.\n\n### Example Code\n\n```Python\nfrom typing import Annotated\r\nfrom pydantic import Field, BaseModel, WithJsonSchema\r\n\r\nAnnBool = Annotated[\r\n    bool,\r\n    WithJsonSchema({}),\r\n]\r\n\r\nclass Model(BaseModel):\r\n    field1: AnnBool = Field(default=True)\r\n    field2: AnnBool | None = Field(default=None)\r\n\r\n# {\r\n# \u2502   'properties': {'field1': {'default': True, 'title': 'Field1'}, 'field2': {'anyOf':[{'default': True}, {'type': 'null'}], 'default': None, 'title': 'Field2'}},\r\n# \u2502   'title': 'Model',\r\n# \u2502   'type': 'object'\r\n# }\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.0b2\r\n        pydantic-core version: 2.27.0\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /Users/joshcannon/code/shimbboleth/.venv/lib/python3.11/site-packages/pydantic\r\n               python version: 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:37:07) [Clang 15.0.7 ]\r\n                     platform: macOS-14.7.1-arm64-arm-64bit\r\n             related packages: typing_extensions-4.12.2\r\n                       commit: unknown\n```\n", "author_association": "NONE", "comments": 5, "state": "open", "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [{"login": "Viicos", "id": 65306057, "node_id": "MDQ6VXNlcjY1MzA2MDU3", "avatar_url": "https://avatars.githubusercontent.com/u/65306057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Viicos", "html_url": "https://github.com/Viicos", "followers_url": "https://api.github.com/users/Viicos/followers", "following_url": "https://api.github.com/users/Viicos/following{/other_user}", "gists_url": "https://api.github.com/users/Viicos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Viicos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Viicos/subscriptions", "organizations_url": "https://api.github.com/users/Viicos/orgs", "repos_url": "https://api.github.com/users/Viicos/repos", "events_url": "https://api.github.com/users/Viicos/events{/privacy}", "received_events_url": "https://api.github.com/users/Viicos/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510210303", "id": 2510210303, "created_at": "2024-12-01T19:04:06Z", "updated_at": "2024-12-01T19:04:06Z", "author_association": "MEMBER", "body": "Thanks for the report. While we can accept the added `.copy()` call as a quick fix (or perhaps even we should deep copy?), I think the deeper issue is the defined semantics of `WithJsonSchema`. As per [the documentation example](https://docs.pydantic.dev/latest/concepts/json_schema/#withjsonschema-annotation), it is expected for the provided schema to `WithJsonSchema` to \"override\" the whole JSON Schema generation process (that's why you need to specify `'type': 'integer'`).\r\n\r\nHowever, this is not what is happening when using a default value:\r\n\r\n```python\r\nclass Model(BaseModel):\r\n    a: Annotated[int, WithJsonSchema({})] = 1\r\n\r\nModel.model_json_schema()\r\n#> {'properties': {'a': {'default': 1, 'title': 'A'}}, 'title': 'Model', 'type': 'object'}\r\n```\r\n\r\n(same for `'title'`).\r\n\r\nThe reason is that the JSON Schema generation uses the core schema of the model. For fields with default values, the core schema is of type `'default'`, and the \"original\" schema is wrapped under the `'schema'` key:\r\n\r\n```python\r\nModel.__pydantic_core_schema__['schema']['fields']['a']['schema']\r\n#> {'type': 'default', 'schema': {'type': 'int', 'metadata': {'<stripped>'}, 'default': 1}\r\n```\r\n\r\nAnd when generating the corresponding JSON Schema:\r\n\r\nhttps://github.com/pydantic/pydantic/blob/6f31f8f68ef011f84357330186f603ff295312fd/pydantic/json_schema.py#L1096-L1109\r\n\r\nWe first generate the JSON Schema for the inner schema (and because of the `WithJsonSchema` metadata, this will result in the empty `{}`), and then mutate it to provide a default value.\r\n\r\nInstead, the `WithJsonSchema` annotation metadata should probably be special cased, but this breaks our current annotation application logic (cc @sydney-runkle).", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510210303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006957451114431024, "severe_toxicity": 0.00011781760258600116, "obscene": 0.00019929331028833985, "threat": 0.00011454649938968942, "insult": 0.0001723600726108998, "identity_attack": 0.00013817870058119297}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510213947", "id": 2510213947, "created_at": "2024-12-01T19:14:37Z", "updated_at": "2024-12-01T19:14:37Z", "author_association": "NONE", "body": "> We first generate the JSON Schema for the inner schema (and because of the WithJsonSchema metadata, this will result in the empty {}), and then mutate it to provide a default value.\r\n\r\nThat aligned with my understanding of the behavior.\r\n\r\n> it is expected for the provided schema to WithJsonSchema to \"override\" the whole JSON Schema generation process\r\n\r\nMaybe this is just my interpretation, but it feels, to me, like `WithJsonSchema` and `json_schema_extra` are like a \"before\" and \"after\" (respectively) and all the type/default/examples goes in the middle. So just as providing `type` in `json_schema_extra` doesn't do anything, if `WithJsonSchema` had `type` it'd be respected, but if it didn't it'd be filled in.\r\n\r\n(But again, this is my interpretation)\r\n", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510213947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007389512029476464, "severe_toxicity": 0.00011462756083346903, "obscene": 0.00018932907551061362, "threat": 0.00011976154200965539, "insult": 0.0001764876360539347, "identity_attack": 0.0001392838021274656}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510907393", "id": 2510907393, "created_at": "2024-12-02T08:45:41Z", "updated_at": "2024-12-02T08:45:41Z", "author_association": "MEMBER", "body": "> Maybe this is just my interpretation, but it feels, to me, like `WithJsonSchema` and `json_schema_extra` are like a \"before\" and \"after\" (respectively) and all the type/default/examples goes in the middle. So just as providing `type` in `json_schema_extra` doesn't do anything, if `WithJsonSchema` had `type` it'd be respected, but if it didn't it'd be filled in.\r\n\r\nWe might be going this way indeed, as special casing `WithJsonSchema` to override all the JSON Schema gen process is going to be breaking/too hard to implement considering our actual annotation application logic.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2510907393/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Viicos", "id": 65306057, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0007072223233990371, "severe_toxicity": 0.00011649000225588679, "obscene": 0.00019125598191749305, "threat": 0.0001210661357617937, "insult": 0.00017658343131188303, "identity_attack": 0.00013700146519113332}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2512526859", "id": 2512526859, "created_at": "2024-12-02T19:16:22Z", "updated_at": "2024-12-02T19:16:22Z", "author_association": "MEMBER", "body": "Hmm, I think the `copy` approach could make sense here, as I think the maintenance burden of special casing the `WithJsonSchema` might be annoyingly high.\r\n\r\nPerhaps even more contained - can we just avoid mutating the inner json schema when we do schema gen for values with defaults?", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2512526859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006601123604923487, "severe_toxicity": 0.00011628092033788562, "obscene": 0.0001753202814143151, "threat": 0.00011993102816632017, "insult": 0.00018042203737422824, "identity_attack": 0.0001413944992236793}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2523973187", "id": 2523973187, "created_at": "2024-12-06T19:05:16Z", "updated_at": "2024-12-06T19:05:16Z", "author_association": "NONE", "body": "(mine is just mostly a passerby comment, but I wonder if \"don't mutate\" would be feasible in a maintainable fashion with a combo of \"input types declared as immutable types like `Mapping`, and a linter that enforces the requirement)", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2523973187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "thejcannon", "id": 3956745, "site_admin": false}, "comment_sentiments": {"toxicity": 0.000736040179617703, "severe_toxicity": 0.00010935278987744823, "obscene": 0.00017422193195670843, "threat": 0.0001150239331764169, "insult": 0.00018498781719245017, "identity_attack": 0.00013606487482320517}}]}, "35": {"html_url": "https://github.com/pydantic/pydantic/issues/11000", "id": 2704612927, "number": 11000, "title": "Numpy array alias as type regression between 2.9.2 and 2.10.0 (and later)", "created_at": "2024-11-29T10:04:30Z", "updated_at": "2024-12-05T08:10:42Z", "closed_at": null, "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nThe below code builds (and correctly prints np.ndarray[100, np.uint8] as output) in version 2.9.2, but raises an exception in version 2.10.0 and later. Perhaps I should be using a different annotation for pytype, or there is an easier way of doing what I want to do (get the generic parameter at runtime), but this way of doing it used to work but fails now. Any suggestions of using a better method to do this are welcome of course.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\projects\\playground\\main.py\", line 22, in <module>\r\n    x = BaseGeneric[np.ndarray[100, np.uint8]](name=\"x\")\r\n        ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\main.py\", line 806, in __class_getitem__\r\n    submodel = _generics.create_generic_submodel(model_name, origin, args, params)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generics.py\", line 137, in create_generic_submodel\r\n    created_model = meta(\r\n                    ^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_model_construction.py\", line 226, in __new__\r\n    complete_model_class(\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_model_construction.py\", line 658, in complete_model_class\r\n    schema = cls.__get_pydantic_core_schema__(cls, handler)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\main.py\", line 697, in __get_pydantic_core_schema__\r\n    return handler(source)\r\n           ^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_schema_generation_shared.py\", line 84, in __call__\r\n    schema = self._handler(source_type)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 612, in generate_schema\r\n    schema = self._generate_schema_inner(obj)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 881, in _generate_schema_inner\r\n    return self._model_schema(obj)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 693, in _model_schema\r\n    {k: self._generate_md_field_schema(k, v, decorators) for k, v in fields.items()},\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 1073, in _generate_md_field_schema\r\n    common_field = self._common_field_schema(name, field_info, decorators)\r\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 1261, in _common_field_schema\r\n    schema = self._apply_annotations(\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 2051, in _apply_annotations\r\n    schema = get_inner_schema(source_type)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_schema_generation_shared.py\", line 84, in __call__\r\n    schema = self._handler(source_type)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 2126, in new_handler\r\n    schema = metadata_get_schema(source, get_inner_schema)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\functional_validators.py\", line 837, in __get_pydantic_core_schema__\r\n    original_schema = handler(source)\r\n                      ^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_schema_generation_shared.py\", line 84, in __call__\r\n    schema = self._handler(source_type)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 2032, in inner_handler\r\n    schema = self._generate_schema_inner(obj)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 886, in _generate_schema_inner\r\n    return self.match_type(obj)\r\n           ^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 988, in match_type\r\n    return self._match_generic_type(obj, origin)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 1030, in _match_generic_type\r\n    return self._subclass_schema(obj)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\projects\\playground\\venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py\", line 1649, in _subclass_schema\r\n    raise TypeError(f'Expected a class, got {type_param!r}')\r\nTypeError: Expected a class, got numpy.ndarray[100, numpy.uint8]\r\n```\r\n\n\n### Example Code\n\n```Python\nfrom pydantic import BaseModel, SkipValidation, Field\r\nimport numpy as np\r\nimport typing\r\nfrom typing import Generic, TypeVar, Annotated\r\nimport functools\r\n\r\n_T = TypeVar(\"_T\")\r\n\r\n\r\nclass BaseGeneric(BaseModel, Generic[_T]):\r\n    pytype: Annotated[type[_T], SkipValidation, Field(frozen=True, exclude=True)]\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(pytype=self._cls_get_pytype(), **kwargs)\r\n\r\n    @classmethod\r\n    @functools.cache\r\n    def _cls_get_pytype(cls) -> type[_T]:\r\n        return typing.get_args(cls.model_fields[\"pytype\"].annotation)[0]\r\n\r\n\r\nx = BaseGeneric[np.ndarray[100, np.uint8]](name=\"x\")\r\nprint(x.pytype)\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\nWorks on: 2.9.2\r\nFails on: 2.10.0 and 2.10.2 that I tried\n```\n", "author_association": "NONE", "comments": 9, "state": "open", "user": {"login": "DenSinH", "id": 25347040, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/11000/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [{"login": "sydney-runkle", "id": 54324534, "node_id": "MDQ6VXNlcjU0MzI0NTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54324534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sydney-runkle", "html_url": "https://github.com/sydney-runkle", "followers_url": "https://api.github.com/users/sydney-runkle/followers", "following_url": "https://api.github.com/users/sydney-runkle/following{/other_user}", "gists_url": "https://api.github.com/users/sydney-runkle/gists{/gist_id}", "starred_url": "https://api.github.com/users/sydney-runkle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sydney-runkle/subscriptions", "organizations_url": "https://api.github.com/users/sydney-runkle/orgs", "repos_url": "https://api.github.com/users/sydney-runkle/repos", "events_url": "https://api.github.com/users/sydney-runkle/events{/privacy}", "received_events_url": "https://api.github.com/users/sydney-runkle/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "comments_list": [{"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514788060", "id": 2514788060, "created_at": "2024-12-03T14:50:57Z", "updated_at": "2024-12-03T14:50:57Z", "author_association": "MEMBER", "body": "@DenSinH,\r\n\r\nThanks for the report. Honestly, I don't think this was meant to be supported in earlier versions.\r\n\r\nI don't exactly understand what you're going for here - perhaps we could help you figure out another way to get your desired outcome?", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514788060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0005497618112713099, "severe_toxicity": 0.0001287960767513141, "obscene": 0.00018225170788355172, "threat": 0.00013167294673621655, "insult": 0.00017467269208282232, "identity_attack": 0.00014201579324435443}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514801420", "id": 2514801420, "created_at": "2024-12-03T14:56:23Z", "updated_at": "2024-12-03T14:56:23Z", "author_association": "NONE", "body": "Another way would be perfectly fine, I think the way I am doing it is pretty hacky anyway. Basically, I have a generic model, and I am trying to get the generic parameter at runtime (within the constructor, it need not be stored as a field though). It is supposed to be a type (or a GenericAlias like `np.ndarray[1000, float]`). The way I am currently getting the type parameter is that I add a field to my model, of type `type[_T]`, then at runtime, I read out the annotation of this field and retrieve the type from it, assigning it to the corresponding field.\n\nIt doesn't work in the later versions because `np.ndarray[...]` is not a type, but a GenericAlias, and the construction of the submodel fails.\n\nIn short, what I am trying to achieve is this: I have a model inheriting from `Generic[_T]`, and I want to determine the value of `_T` at runtime (within the constructor, it need not be a field necessarily though), for a given instance of my model.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514801420/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "DenSinH", "id": 25347040, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006554183200933039, "severe_toxicity": 0.00012012296792818233, "obscene": 0.0001890464045573026, "threat": 0.00012085770140402019, "insult": 0.00017250311793759465, "identity_attack": 0.00013863467029295862}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514807521", "id": 2514807521, "created_at": "2024-12-03T14:58:48Z", "updated_at": "2024-12-03T14:58:48Z", "author_association": "MEMBER", "body": "> It doesn't work in the later versions because np.ndarray[...] is not a type, but a GenericAlias, and the construction of the submodel fails.\r\n\r\nIndeed, this is what's happening now.\r\n\r\nLooking into alternative solutions for you. Thanks for the explanation!", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514807521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006546488730236888, "severe_toxicity": 0.0001154258570750244, "obscene": 0.0001759209408191964, "threat": 0.00011951501801377162, "insult": 0.00017468584701418877, "identity_attack": 0.00013632539776153862}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514813407", "id": 2514813407, "created_at": "2024-12-03T15:01:02Z", "updated_at": "2024-12-03T15:01:02Z", "author_association": "MEMBER", "body": "How about this?\r\n\r\n```py\r\nfrom pydantic import BaseModel\r\nfrom typing import Generic, TypeVar\r\n\r\n_T = TypeVar(\"_T\")\r\n\r\n\r\nclass BaseGeneric(BaseModel, Generic[_T]):\r\n    field: _T\r\n\r\nx = BaseGeneric[str](field=\"x\")\r\nprint(x.__pydantic_generic_metadata__)\r\n#> {'origin': <class '__main__.BaseGeneric'>, 'args': (<class 'str'>,), 'parameters': ()}\r\n```", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514813407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.000775834487285465, "severe_toxicity": 0.00011078788520535454, "obscene": 0.00019107408297713846, "threat": 0.00011086925951531157, "insult": 0.00017663429025560617, "identity_attack": 0.0001353454135823995}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514818195", "id": 2514818195, "created_at": "2024-12-03T15:02:49Z", "updated_at": "2024-12-03T15:02:49Z", "author_association": "MEMBER", "body": "Going to close this as resolved for now, as I don't think we're going to change the `inspect.isclass` check that you were running into. Happy to continue discussing a solution to your use case, though!", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514818195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006143943755887449, "severe_toxicity": 0.00012312376929912716, "obscene": 0.00017861294327303767, "threat": 0.00012895656982436776, "insult": 0.00017452286556363106, "identity_attack": 0.00014234877016860992}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514864234", "id": 2514864234, "created_at": "2024-12-03T15:20:58Z", "updated_at": "2024-12-03T15:20:58Z", "author_association": "NONE", "body": "This looks like it might work, though it may break with inheritance. For example, I might inherit from `BaseGeneric[bool]` explicitly, and the metadata will not contain any generic parameter. I'm not currently at my laptop so I can't try it but I think that would break, and I do need it for my use case.", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514864234/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "DenSinH", "id": 25347040, "site_admin": false}, "comment_sentiments": {"toxicity": 0.000604889530222863, "severe_toxicity": 0.00012470650835894048, "obscene": 0.00018490353249944746, "threat": 0.0001284167665289715, "insult": 0.00017619339632801712, "identity_attack": 0.00014231483510229737}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514907606", "id": 2514907606, "created_at": "2024-12-03T15:38:05Z", "updated_at": "2024-12-03T15:38:05Z", "author_association": "MEMBER", "body": "cc @dmontagu, you might have a better idea here", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2514907606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0008888879092410207, "severe_toxicity": 0.00010538152855588123, "obscene": 0.00018182436178904027, "threat": 0.00011375200847396627, "insult": 0.00017906501307152212, "identity_attack": 0.00013924438098911196}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515039095", "id": 2515039095, "created_at": "2024-12-03T16:31:33Z", "updated_at": "2024-12-03T16:31:33Z", "author_association": "MEMBER", "body": "Reopening, I think we might reconsider greater support for `type[SomeGenericAlias]`", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515039095/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sydney-runkle", "id": 54324534, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006096581346355379, "severe_toxicity": 0.00012401209096424282, "obscene": 0.00017649286019150168, "threat": 0.00013436849985737354, "insult": 0.00017982230929192156, "identity_attack": 0.00014464899140875787}}, {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2519530374", "id": 2519530374, "created_at": "2024-12-05T08:10:41Z", "updated_at": "2024-12-05T08:10:41Z", "author_association": "NONE", "body": "I was just messing around with it again, something like this does what I want, but ideally, I do not want to edit the `model_config` (or even better: not have the `pytype` field at all)\r\n```python\r\nfrom typing import Generic, TypeVar, Annotated\r\nfrom pydantic import BaseModel, Field, ConfigDict, SkipValidation\r\nimport numpy as np\r\n\r\n_T = TypeVar(\"_T\")\r\n\r\n\r\nclass BaseGeneric(BaseModel, Generic[_T]):\r\n    model_config = ConfigDict(\r\n        arbitrary_types_allowed=True,\r\n    )\r\n\r\n    pytype: Annotated[_T, SkipValidation, Field(default=None, validate_default=False, exclude=True, repr=False, frozen=True)]\r\n\r\n    def get_type(self) -> type[_T]:\r\n        return self.model_fields[\"pytype\"].annotation\r\n\r\n\r\nclass BoolDerived(BaseGeneric[bool]):\r\n    pass\r\n\r\n\r\ntest = BoolDerived()\r\nx = BaseGeneric[np.ndarray[1000, np.uint8]]()\r\nprint(test.get_type())\r\nprint(x.get_type())\r\n```", "reactions": {"url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2519530374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "DenSinH", "id": 25347040, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0011527417227625847, "severe_toxicity": 0.0001024585944833234, "obscene": 0.0002158853894798085, "threat": 0.00010513321467442438, "insult": 0.00018742730026133358, "identity_attack": 0.0001380710891680792}}]}, "36": {"html_url": "https://github.com/pandas-dev/pandas/issues/60515", "id": 2724418032, "number": 60515, "title": "DOC: methods in see also section in the pandas.DataFrame.shape and  pandas.DataFrame.ndim are not hyperlinks", "created_at": "2024-12-07T06:39:22Z", "updated_at": "2024-12-07T06:39:30Z", "closed_at": null, "body": "### Pandas version checks\n\n- [X] I have checked that the issue still exists on the latest versions of the docs on `main` [here](https://pandas.pydata.org/docs/dev/)\n\n\n### Location of the documentation\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.ndim.html\r\n\r\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.shape.html\r\n\n\n### Documentation problem\n\nIn the see also section the ndarray.shape and ndarray.ndim method is listed, but it is not hyperlinks and thus the reader cannot navigate with ease but has to look for them instead.\r\n\n\n### Suggested fix for documentation\n\nAdd numpy.ndarray.shape and numpy.ndarray.ndim in the docstring.\r\n", "author_association": "NONE", "comments": 1, "state": "open", "user": {"login": "Shubhank-Gyawali", "id": 68085066, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524971018", "id": 2524971018, "created_at": "2024-12-07T06:39:29Z", "updated_at": "2024-12-07T06:39:29Z", "author_association": "NONE", "body": "take\r\n", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524971018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Shubhank-Gyawali", "id": 68085066, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0017316780285909772, "severe_toxicity": 0.00010141733946511522, "obscene": 0.0002310213603777811, "threat": 0.00010367215145379305, "insult": 0.00019131143926642835, "identity_attack": 0.00014188962813932449}}]}, "37": {"html_url": "https://github.com/pandas-dev/pandas/pull/60514", "id": 2724322752, "number": 60514, "title": "BUG: Preserve timezone in numpy_dtype for ArrowDtype", "created_at": "2024-12-07T04:13:55Z", "updated_at": "2024-12-07T05:08:50Z", "closed_at": null, "body": "- [x] closes #60237\r\n- [x] [Tests added and passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#writing-tests) if fixing a bug or adding a new feature\r\n* Added tests in pandas/tests/dtypes/test_dtypes.py to ensure numpy_dtype preserves timezone information for ArrowDtype.\r\n- [x] All [code checks passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#pre-commit).\r\n- [x] Added [type annotations](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#type-hints) to new arguments/methods/functions.\r\n* Type annotations are already present in the modified numpy_dtype function.\r\n- [x] Added an entry in the latest `doc/source/whatsnew/vX.X.X.rst` file if fixing a bug or adding a new feature.\r\n* Added a note in the bug fixes section: `- Fixed an issue where .convert_dtypes(dtype_backend=\"pyarrow\") would strip timezone information from timezone-aware PyArrow timestamps. [GH#60237](https://github.com/pandas-dev/pandas/issues/60237)\r\n`\r\n\r\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "Koookadooo", "id": 127896060, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "38": {"html_url": "https://github.com/pandas-dev/pandas/pull/60513", "id": 2724272340, "number": 60513, "title": "DOC: fix SA01 for pandas.arrays.NumpyExtensionArray", "created_at": "2024-12-07T02:28:05Z", "updated_at": "2024-12-07T02:28:05Z", "closed_at": null, "body": "Similar to issue https://github.com/pandas-dev/pandas/issues/59458.\r\n\r\nFixes:\r\n\r\n`-i \"pandas.arrays.NumpyExtensionArray SA01\" \\`", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "karnbirrandhawa", "id": 102620686, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "39": {"html_url": "https://github.com/pandas-dev/pandas/pull/60512", "id": 2724260481, "number": 60512, "title": "DOC: Add hyperlink to ndarray.size in DataFrame.size docstring (#60368)", "created_at": "2024-12-07T02:05:09Z", "updated_at": "2024-12-07T05:56:43Z", "closed_at": null, "body": "- [x] closes #60368 \r\n\r\nThis PR addresses issue #60368 by adding a hyperlink to the \"See Also\" section of the docstring for DataFrame.size.\r\n\r\n- Updated the \"See Also\" section to include a clickable link to `ndarray.size`.\r\n\r\nLet me know if any additional changes are needed!\r\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "johnpaulfeliciano98", "id": 102118062, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "40": {"html_url": "https://github.com/pandas-dev/pandas/pull/60510", "id": 2724025165, "number": 60510, "title": "BUG: Fix float32 precision issues in pd.to_datetime", "created_at": "2024-12-06T22:20:45Z", "updated_at": "2024-12-06T22:27:07Z", "closed_at": null, "body": "- [x] closes #60506(Replace xxxx with the GitHub issue number)\r\n- [x] [Tests added and passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#writing-tests) if fixing a bug or adding a new feature\r\n- [x] All [code checks passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#pre-commit).\r\n- [x] Added an entry in the latest `doc/source/whatsnew/vX.X.X.rst` file if fixing a bug or adding a new feature.\r\n", "author_association": "CONTRIBUTOR", "comments": 0, "state": "open", "user": {"login": "snitish", "id": 7503884, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "41": {"html_url": "https://github.com/pandas-dev/pandas/pull/60509", "id": 2723783267, "number": 60509, "title": "DOC: fix docstrings validation for pandas.core.groupby.DataFrameGroupBy.boxplot", "created_at": "2024-12-06T19:36:02Z", "updated_at": "2024-12-06T20:26:59Z", "closed_at": null, "body": "Part of Issue #60365\r\n\r\nFixed docstring validation for pandas.core.groupby.DataFrameGroupBy.boxplot\r\n\r\nThe following errors were addressed:\r\n\r\n- PR07    Parameter \"grouped\" has no description\r\n- PR07    Parameter \"fontsize\" has no description\r\n- PR07    Parameter \"rot\" has no description\r\n- PR07    Parameter \"grid\" has no description\r\n- PR07    Parameter \"ax\" has no description\r\n- PR07    Parameter \"figsize\" has no description\r\n- RT03    Return value has no description\r\n- RT03    Return value has no description\r\n- SA01    See Also section not found\r\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "jmalp", "id": 75514361, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "42": {"html_url": "https://github.com/pandas-dev/pandas/issues/60508", "id": 2723639037, "number": 60508, "title": "BUG: multi-index on columns with bool level values does not roundtrip through parquet", "created_at": "2024-12-06T18:03:15Z", "updated_at": "2024-12-07T12:48:59Z", "closed_at": null, "body": "### Pandas version checks\n\n- [X] I have checked that this issue has not already been reported.\n\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\n\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\n\n\n### Reproducible Example\n\n```python\nimport pandas as pd\r\n\r\ndf = pd.DataFrame([[1, 2], [4, 5]], columns=pd.MultiIndex.from_tuples([(True, 'B'), (False, 'C')]))\r\ndf.to_parquet('test.parquet', engine='pyarrow')\r\npd.read_parquet('test.parquet', engine='pyarrow') # fails\r\n\r\n# now save out with multi-index on index instead of columns:\r\ndf.T.to_parquet('test.parquet', engine='pyarrow')\r\npd.read_parquet('test.parquet', engine='pyarrow') # succeeds\r\n\r\n# now save out with int instead of bool index:\r\ndf = pd.DataFrame([[1, 2], [4, 5]], columns=pd.MultiIndex.from_tuples([(1, 'B'), (0, 'C')]))\r\ndf.to_parquet('test.parquet', engine='pyarrow')\r\npd.read_parquet('test.parquet', engine='pyarrow') # succeeds\n```\n\n\n### Issue Description\n\nParquet IO with multi-index indices or columns is supported. However, if the multi-index contains a level with bools and if that multi-index is on the columns, then while the parquet can be written with the `pyarrow` engine, it cannot be read back in using `pyarrow`.\r\n\r\nThe traceback I get is below:\r\n<details>\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<python-input-0>\", line 5, in <module>\r\n    pd.read_parquet('test.parquet', engine='pyarrow') # fails\r\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/io/parquet.py\", line 649, in read_parquet\r\n    return impl.read(\r\n           ~~~~~~~~~^\r\n        path,\r\n        ^^^^^\r\n    ...<6 lines>...\r\n        **kwargs,\r\n        ^^^^^^^^^\r\n    )\r\n    ^\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/io/parquet.py\", line 270, in read\r\n    result = arrow_table_to_pandas(\r\n        pa_table,\r\n        dtype_backend=dtype_backend,\r\n        to_pandas_kwargs=to_pandas_kwargs,\r\n    )\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/io/_util.py\", line 86, in arrow_table_to_pandas\r\n    df = table.to_pandas(types_mapper=types_mapper, **to_pandas_kwargs)\r\n  File \"pyarrow/array.pxi\", line 887, in pyarrow.lib._PandasConvertible.to_pandas\r\n  File \"pyarrow/table.pxi\", line 5132, in pyarrow.lib.Table._to_pandas\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pyarrow/pandas_compat.py\", line 790, in table_to_dataframe\r\n    columns = _deserialize_column_index(table, all_columns, column_indexes)\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pyarrow/pandas_compat.py\", line 928, in _deserialize_column_index\r\n    columns = _reconstruct_columns_from_metadata(columns, column_indexes)\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pyarrow/pandas_compat.py\", line 1145, in _reconstruct_columns_from_metadata\r\n    return pd.MultiIndex(new_levels, labels, names=columns.names)\r\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/core/indexes/multi.py\", line 341, in __new__\r\n    new_codes = result._verify_integrity()\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/core/indexes/multi.py\", line 427, in _verify_integrity\r\n    raise ValueError(\r\n        f\"Level values must be unique: {list(level)} on level {i}\"\r\n    )\r\nValueError: Level values must be unique: [True, True] on level 0\r\n```\r\n\r\n</details>\r\n\r\n\r\nFurther note that the `fastparquet` can neither read nor write such dataframes. There are a panoply of different errors on read/write with multi-index with `fastparquet` depending on whether the multi-index is on the index or columns, and whether the index has level names or not. I (or someone) should probably open separate bugs on that...\r\n\r\nNB. the issue repros in a clean environment with only python, pip, pandas (dev), and pyarrow/fastparquet directly installed.\n\n### Expected Behavior\n\nParquet IO should support bool multi-index levels on columns.\n\n### Installed Versions\n\n<details>\r\n\r\n```\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit                : a36c44e129bd2f70c25d5dec89cb2893716bdbf6\r\npython                : 3.13.1\r\npython-bits           : 64\r\nOS                    : Darwin\r\nOS-release            : 23.6.0\r\nVersion               : Darwin Kernel Version 23.6.0: Wed Jul 31 20:50:00 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6031\r\nmachine               : arm64\r\nprocessor             : arm\r\nbyteorder             : little\r\nLC_ALL                : None\r\nLANG                  : en_US.UTF-8\r\nLOCALE                : en_US.UTF-8\r\n\r\npandas                : 3.0.0.dev0+1757.ga36c44e129\r\nnumpy                 : 2.1.3\r\ndateutil              : 2.9.0.post0\r\npip                   : 24.3.1\r\nCython                : None\r\nsphinx                : None\r\nIPython               : None\r\nadbc-driver-postgresql: None\r\nadbc-driver-sqlite    : None\r\nbs4                   : None\r\nblosc                 : None\r\nbottleneck            : None\r\nfastparquet           : 2024.11.0\r\nfsspec                : 2024.10.0\r\nhtml5lib              : None\r\nhypothesis            : None\r\ngcsfs                 : None\r\njinja2                : None\r\nlxml.etree            : None\r\nmatplotlib            : None\r\nnumba                 : None\r\nnumexpr               : None\r\nodfpy                 : None\r\nopenpyxl              : None\r\npsycopg2              : None\r\npymysql               : None\r\npyarrow               : 18.1.0\r\npyreadstat            : None\r\npytest                : None\r\npython-calamine       : None\r\npytz                  : 2024.1\r\npyxlsb                : None\r\ns3fs                  : None\r\nscipy                 : None\r\nsqlalchemy            : None\r\ntables                : None\r\ntabulate              : None\r\nxarray                : None\r\nxlrd                  : None\r\nxlsxwriter            : None\r\nzstandard             : None\r\ntzdata                : 2024.2\r\nqtpy                  : None\r\npyqt5                 : None\r\n```\r\n\r\n</details>\r\n", "author_association": "NONE", "comments": 3, "state": "open", "user": {"login": "zpincus", "id": 174217, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [{"login": "sunlight798", "id": 138234530, "node_id": "U_kgDOCD1Kog", "avatar_url": "https://avatars.githubusercontent.com/u/138234530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunlight798", "html_url": "https://github.com/sunlight798", "followers_url": "https://api.github.com/users/sunlight798/followers", "following_url": "https://api.github.com/users/sunlight798/following{/other_user}", "gists_url": "https://api.github.com/users/sunlight798/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunlight798/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunlight798/subscriptions", "organizations_url": "https://api.github.com/users/sunlight798/orgs", "repos_url": "https://api.github.com/users/sunlight798/repos", "events_url": "https://api.github.com/users/sunlight798/events{/privacy}", "received_events_url": "https://api.github.com/users/sunlight798/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524290823", "id": 2524290823, "created_at": "2024-12-06T22:22:13Z", "updated_at": "2024-12-06T22:22:13Z", "author_association": "NONE", "body": "i would like to contribute ", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524290823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "kevkle", "id": 33009654, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006834277883172035, "severe_toxicity": 0.00012124451313866302, "obscene": 0.00017978371761273593, "threat": 0.00014330932754091918, "insult": 0.00017078238306567073, "identity_attack": 0.00014195797848515213}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525102210", "id": 2525102210, "created_at": "2024-12-07T12:45:51Z", "updated_at": "2024-12-07T12:45:51Z", "author_association": "CONTRIBUTOR", "body": "1. The cause of the problem should be that the type of the index was not correctly marked when reading back with pyarrow, resulting in the inability to convert the index that should have been of bool type into bool type during subsequent type conversion in pandas.\r\n2. Another point is the special aspect when converting the object type to the bool type. Any non-zero and non-empty values will be converted to True of the bool type, which leads to all the indexes shown in the error message being True.", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525102210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sunlight798", "id": 138234530, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0010367650538682938, "severe_toxicity": 9.834246156970039e-05, "obscene": 0.0001777388679329306, "threat": 0.0001069632126018405, "insult": 0.00019337923731654882, "identity_attack": 0.00014183943858370185}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525102949", "id": 2525102949, "created_at": "2024-12-07T12:48:47Z", "updated_at": "2024-12-07T12:48:47Z", "author_association": "CONTRIBUTOR", "body": "take", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525102949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "sunlight798", "id": 138234530, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0017316780285909772, "severe_toxicity": 0.00010141733946511522, "obscene": 0.0002310213603777811, "threat": 0.00010367215145379305, "insult": 0.00019131143926642835, "identity_attack": 0.00014188962813932449}}]}, "43": {"html_url": "https://github.com/pandas-dev/pandas/issues/60506", "id": 2722476905, "number": 60506, "title": "BUG: pandas.to_datetime produces wrong/strange results on 32-bit float data for 6-column format", "created_at": "2024-12-06T09:06:18Z", "updated_at": "2024-12-06T22:19:50Z", "closed_at": null, "body": "### Pandas version checks\n\n- [X] I have checked that this issue has not already been reported.\n\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\n\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\n\n\n### Reproducible Example\n\n```python\nfrom datetime import datetime, UTC\r\nimport pandas as pd\r\n\r\nstart = datetime(2024, 1, 1)\r\nend = datetime(2025, 1, 1)\r\nsamples = 10\r\n\r\n\r\ndf = pd.DataFrame([\r\n    [  2024,  1,  7, 11, 42, 13],\r\n    [  2024,  9, 19, 11, 54, 20],\r\n    [  2024,  9, 17,  1, 22,  0],\r\n    [  2024,  1, 24, 21, 59, 55],\r\n    [  2024,  6, 15, 12, 27, 30],\r\n    [  2024,  9, 26, 23, 58, 26],\r\n    [  2024,  6,  6,  0, 19, 59],\r\n    [  2024,  1,  8,  2,  7, 43],\r\n    [  2024,  2, 16, 16, 20, 13],\r\n    [  2024, 12, 22, 23, 54,  4]])\r\n\r\ndf.columns = ['year', 'month', 'day', 'hour', 'minute', 'second']\r\n\r\n\r\nts = pd.to_datetime(df, utc=True)\r\nts32 = pd.to_datetime(df.astype('float32'), utc=True)\r\nts64 = pd.to_datetime(df.astype('float64'), utc=True)\r\n\r\nprint (ts - ts32)\r\n\r\nassert ts.equals(ts64)\r\nassert ts.equals(ts32)\n```\n\n\n### Issue Description\n\nWhen constructing datetime from 6-column format, and the data is stored at 32-bit floats pandas.to_datetime silently produces strange (off by one day) results. \r\npandas.to_datetime should either produce correct results or throw an Exception. Correct results would be preferred :)\n\n### Expected Behavior\n\nfrom datetime import datetime, UTC\r\nimport pandas as pd\r\n\r\nstart = datetime(2024, 1, 1)\r\nend = datetime(2025, 1, 1)\r\nsamples = 10\r\n\r\n\r\ndf = pd.DataFrame([\r\n    [  2024,  1,  7, 11, 42, 13],\r\n    [  2024,  9, 19, 11, 54, 20],\r\n    [  2024,  9, 17,  1, 22,  0],\r\n    [  2024,  1, 24, 21, 59, 55],\r\n    [  2024,  6, 15, 12, 27, 30],\r\n    [  2024,  9, 26, 23, 58, 26],\r\n    [  2024,  6,  6,  0, 19, 59],\r\n    [  2024,  1,  8,  2,  7, 43],\r\n    [  2024,  2, 16, 16, 20, 13],\r\n    [  2024, 12, 22, 23, 54,  4]])\r\n\r\ndf.columns = ['year', 'month', 'day', 'hour', 'minute', 'second']\r\n\r\n\r\nts = pd.to_datetime(df, utc=True)\r\nts32 = pd.to_datetime(df.astype('float32'), utc=True)\r\nts64 = pd.to_datetime(df.astype('float64'), utc=True)\r\n\r\nprint (ts - ts32)\r\n\r\nassert ts.equals(ts64)\r\nassert ts.equals(ts32)\r\n\n\n### Installed Versions\n\n<details>\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit                : 0691c5cf90477d3503834d983f69350f250a6ff7\r\npython                : 3.12.7\r\npython-bits           : 64\r\nOS                    : Windows\r\nOS-release            : 10\r\nVersion               : 10.0.19045\r\nmachine               : AMD64\r\nprocessor             : Intel64 Family 6 Model 186 Stepping 2, GenuineIntel\r\nbyteorder             : little\r\nLC_ALL                : None\r\nLANG                  : en_US.UTF-8\r\nLOCALE                : English_Denmark.1252\r\n\r\npandas                : 2.2.3\r\nnumpy                 : 2.1.2\r\npytz                  : 2024.2\r\ndateutil              : 2.9.0.post0\r\npip                   : 24.3.1\r\nCython                : None\r\nsphinx                : None\r\nIPython               : 8.28.0\r\nadbc-driver-postgresql: None\r\nadbc-driver-sqlite    : None\r\nbs4                   : None\r\nblosc                 : None\r\nbottleneck            : None\r\ndataframe-api-compat  : None\r\nfastparquet           : None\r\nfsspec                : None\r\nhtml5lib              : None\r\nhypothesis            : None\r\ngcsfs                 : None\r\njinja2                : None\r\nlxml.etree            : None\r\nmatplotlib            : None\r\nnumba                 : None\r\nnumexpr               : None\r\nodfpy                 : None\r\nopenpyxl              : None\r\npandas_gbq            : None\r\npsycopg2              : None\r\npymysql               : None\r\npyarrow               : 17.0.0\r\npyreadstat            : None\r\npytest                : 8.3.3\r\npython-calamine       : None\r\npyxlsb                : None\r\ns3fs                  : None\r\nscipy                 : None\r\nsqlalchemy            : None\r\ntables                : None\r\ntabulate              : None\r\nxarray                : None\r\nxlrd                  : None\r\nxlsxwriter            : None\r\nzstandard             : None\r\ntzdata                : 2024.2\r\nqtpy                  : None\r\npyqt5                 : None\r\n\r\n</details>\r\n", "author_association": "NONE", "comments": 2, "state": "open", "user": {"login": "tblum", "id": 1065685, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [{"login": "snitish", "id": 7503884, "node_id": "MDQ6VXNlcjc1MDM4ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7503884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snitish", "html_url": "https://github.com/snitish", "followers_url": "https://api.github.com/users/snitish/followers", "following_url": "https://api.github.com/users/snitish/following{/other_user}", "gists_url": "https://api.github.com/users/snitish/gists{/gist_id}", "starred_url": "https://api.github.com/users/snitish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snitish/subscriptions", "organizations_url": "https://api.github.com/users/snitish/orgs", "repos_url": "https://api.github.com/users/snitish/repos", "events_url": "https://api.github.com/users/snitish/events{/privacy}", "received_events_url": "https://api.github.com/users/snitish/received_events", "type": "User", "user_view_type": "public", "site_admin": false}], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524288280", "id": 2524288280, "created_at": "2024-12-06T22:19:33Z", "updated_at": "2024-12-06T22:19:33Z", "author_association": "CONTRIBUTOR", "body": "Seems like a float32 precision issue. Will work on a fix.", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524288280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "snitish", "id": 7503884, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006096677388995886, "severe_toxicity": 0.0001217822718899697, "obscene": 0.0001864035875769332, "threat": 0.00012188647815492004, "insult": 0.00017825346731115133, "identity_attack": 0.00013991050946060568}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524288344", "id": 2524288344, "created_at": "2024-12-06T22:19:37Z", "updated_at": "2024-12-06T22:19:37Z", "author_association": "CONTRIBUTOR", "body": "take", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524288344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "snitish", "id": 7503884, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0017316780285909772, "severe_toxicity": 0.00010141733946511522, "obscene": 0.0002310213603777811, "threat": 0.00010367215145379305, "insult": 0.00019131143926642835, "identity_attack": 0.00014188962813932449}}]}, "44": {"html_url": "https://github.com/pandas-dev/pandas/issues/60504", "id": 2722132901, "number": 60504, "title": "BUG:  concatenation is allowing duplicate columns when axis=1", "created_at": "2024-12-06T05:52:50Z", "updated_at": "2024-12-08T03:26:33Z", "closed_at": null, "body": "### Pandas version checks\r\n\r\n- [X] I have checked that this issue has not already been reported.\r\n\r\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\r\n\r\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\r\n\r\n\r\n### Reproducible Example\r\n\r\n```python\r\nimport pandas as pd\r\n\r\ndf1=pd.DataFrame({'a':1,'b':2},index=[0])\r\ndf2=pd.DataFrame({'a':1,'b':2},index=[0])\r\ndf_new=pd.concat([df1,df2],axis=1)\r\n```\r\n\r\n\r\n### Issue Description\r\n\r\nWhen concatenation is done by axis=1 the duplicate columns are added up without raising an error then this will be very confusing as these are not identified as different \r\n\r\n### Expected Behavior\r\n\r\nIf the columns are the same before concatenating then in new df these should be some unique identifier \r\nlet's say: a(1), b(1) like this \r\n\r\n### Installed Versions\r\n\r\n<details>\r\n\r\nReplace this line with the output of pd.show_versions()\r\n\r\n</details>\r\n", "author_association": "NONE", "comments": 7, "state": "open", "user": {"login": "Sakethsreeram7", "id": 107628648, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524292000", "id": 2524292000, "created_at": "2024-12-06T22:23:29Z", "updated_at": "2024-12-06T22:25:14Z", "author_association": "NONE", "body": "i would like to contribute if thats ok for you\r\n\r\nThe question is whether an error should be raised or the columns should be renamed ?\r\n", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524292000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "kevkle", "id": 33009654, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0005586788174696267, "severe_toxicity": 0.000130610162159428, "obscene": 0.00017849089636001736, "threat": 0.00014304733485914767, "insult": 0.00017929052410181612, "identity_attack": 0.00014553526125382632}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525080752", "id": 2525080752, "created_at": "2024-12-07T11:36:52Z", "updated_at": "2024-12-07T11:36:52Z", "author_association": "NONE", "body": "columns should be renamed , Thanks!\r\n", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525080752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "Sakethsreeram7", "id": 107628648, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006025281036272645, "severe_toxicity": 0.00012315019557718188, "obscene": 0.00018233826267533004, "threat": 0.0001335837150691077, "insult": 0.00017702748300507665, "identity_attack": 0.00013955088797956705}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525202468", "id": 2525202468, "created_at": "2024-12-07T15:15:37Z", "updated_at": "2024-12-07T15:15:37Z", "author_association": "NONE", "body": "Hi, in terms of renaming scheme, I assume we would the usual _x and _y  default suffixes that we see in merges ?", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525202468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "quantresearch1", "id": 107650207, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0005974575178697705, "severe_toxicity": 0.00012379563122522086, "obscene": 0.00017727426893543452, "threat": 0.00013302874867804348, "insult": 0.00018203929357696325, "identity_attack": 0.00014082291454542428}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525238024", "id": 2525238024, "created_at": "2024-12-07T16:33:03Z", "updated_at": "2024-12-07T16:33:03Z", "author_association": "CONTRIBUTOR", "body": "This already exists with the `verify_integrity` param. `pd.concat([df1, df2], axis=1, verify_integrity=True)` raises with `ValueError: Indexes have overlapping values: Index(['a', 'b'], dtype='object')`", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525238024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "asishm", "id": 1978117, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006403755978681147, "severe_toxicity": 0.00012070050433976576, "obscene": 0.00019192897889297456, "threat": 0.0001194286669488065, "insult": 0.00017763415235094726, "identity_attack": 0.0001363416522508487}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525248752", "id": 2525248752, "created_at": "2024-12-07T17:10:35Z", "updated_at": "2024-12-07T17:10:50Z", "author_association": "NONE", "body": "But isn't it good if the columns are updated by themselves and not just raise an error ", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525248752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "kevkle", "id": 33009654, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006546585937030613, "severe_toxicity": 0.00011745907249860466, "obscene": 0.00017428837600164115, "threat": 0.00012411926581989974, "insult": 0.00017794710583984852, "identity_attack": 0.00013917640899308026}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525257826", "id": 2525257826, "created_at": "2024-12-07T17:43:53Z", "updated_at": "2024-12-07T17:43:53Z", "author_association": "NONE", "body": "Or that it should be fixed with another parameter directly ?", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525257826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "kevkle", "id": 33009654, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006160244229249656, "severe_toxicity": 0.00012208783300593495, "obscene": 0.00017914766795001924, "threat": 0.00012715319462586194, "insult": 0.00017811465659178793, "identity_attack": 0.00014129206829238683}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525399693", "id": 2525399693, "created_at": "2024-12-08T03:26:32Z", "updated_at": "2024-12-08T03:26:32Z", "author_association": "CONTRIBUTOR", "body": "Seems `join` is more suitable in this case, or you can `DataFrame.add_suffix` before `concat`.", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525399693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "yuanx749", "id": 47032563, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0005896250950172544, "severe_toxicity": 0.0001265251194126904, "obscene": 0.00018497230485081673, "threat": 0.00012959350715391338, "insult": 0.00018500475562177598, "identity_attack": 0.0001429379772162065}}]}, "45": {"html_url": "https://github.com/pandas-dev/pandas/issues/60503", "id": 2721803512, "number": 60503, "title": "ENH: How about let pprint_thing print Real instance according to display.precision", "created_at": "2024-12-06T01:09:26Z", "updated_at": "2024-12-06T01:09:26Z", "closed_at": null, "body": "### Feature Type\n\n- [ ] Adding new functionality to pandas\n\n- [ ] Changing existing functionality in pandas\n\n- [ ] Removing existing functionality in pandas\n\n\n### Problem Description\n\nI use pandas inside ipython. Sometimes I want all float items are printted with 3 digits. But `pd.DataFrame({\"seq\": [[pi] * 5], \"foo\": [pi]})` got displayed like this:\r\n```\r\n                                                 seq    foo\r\n0  [3.141592653589793, 3.141592653589793, 3.14159...  3.142\r\n```\r\ni.e. \"foo\" in 3 digits but items of \"seq\" lots digits.\n\n### Feature Description\n\nI want `pd.DataFrame({\"seq\": [[pi] * 5], \"foo\": [pi]})` as\r\n```\r\n                                   seq    foo\r\n0  [3.142, 3.142, 3.142, 3.142, 3.142]  3.142\r\n```\r\nin  one line and all 5 items shown.\n\n### Alternative Solutions\n\nI tried to define a __str__ method for that sequence, but in like [this issue](https://github.com/pandas-dev/pandas/issues/17695) customized representation method is not called. So I proposed to patch pprint_thing like this:\r\n```\r\ndiff -u /home/renlifeng/ve3/lib/python3.12/site-packages/pandas/io/formats/printing.py.\\~orig\\~ /home/renlifeng/ve3/lib/python3.12/site-packages/pandas/io/formats/printing.py\r\n--- /home/renlifeng/ve3/lib/python3.12/site-packages/pandas/io/formats/printing.py.~orig~\t2024-10-06 06:11:00.000000000 +0800\r\n+++ /home/renlifeng/ve3/lib/python3.12/site-packages/pandas/io/formats/printing.py\t2024-12-04 15:47:37.481159765 +0800\r\n@@ -8,6 +8,10 @@\r\n     Mapping,\r\n     Sequence,\r\n )\r\n+from numbers import (\r\n+    Integral,\r\n+    Real,\r\n+)\r\n import sys\r\n from typing import (\r\n     Any,\r\n@@ -206,7 +210,10 @@\r\n         else:\r\n             escape_chars = escape_chars or ()\r\n \r\n-        result = str(thing)\r\n+        if isinstance(thing, Real) and not isinstance(thing, Integral):\r\n+            result = f\"%.{get_option('display.precision')}f\" % thing\r\n+        else:\r\n+            result = str(thing)\r\n         for c in escape_chars:\r\n             result = result.replace(c, translate[c])\r\n         return result\r\n\r\nDiff finished.  Wed Dec  4 15:48:27 2024\r\n```\n\n### Additional Context\n\nI use pandas inside ipython. Sometimes I want all float items are printted with 3 digits.", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "miba2020", "id": 65517557, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "46": {"html_url": "https://github.com/pandas-dev/pandas/pull/60502", "id": 2721736266, "number": 60502, "title": "DOC: Fix some core.resample.Resampler docstrings", "created_at": "2024-12-06T00:13:44Z", "updated_at": "2024-12-08T06:00:00Z", "closed_at": null, "body": "Similar to issues #59698, #59592, and #59458.\r\n\r\nFixes: \r\n```text\r\n-i \"pandas.core.resample.Resampler.max PR01,RT03,SA01\" \\\r\n-i \"pandas.core.resample.Resampler.mean SA01\" \\\r\n-i \"pandas.core.resample.Resampler.min PR01,RT03,SA01\" \\\r\n-i \"pandas.core.resample.Resampler.prod SA01\" \\\r\n-i \"pandas.core.resample.Resampler.std SA01\" \\\r\n-i \"pandas.core.resample.Resampler.var SA01\" \\\r\n```\r\n\r\nAll docstrings are now only showing ES01 as missing, which according to code_checks.sh line 71, is okay.", "author_association": "NONE", "comments": 1, "state": "open", "user": {"login": "knowltod", "id": 97196662, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525433885", "id": 2525433885, "created_at": "2024-12-08T05:58:34Z", "updated_at": "2024-12-08T05:58:34Z", "author_association": "NONE", "body": "pre-commit.ci autofix", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2525433885/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "knowltod", "id": 97196662, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0013347421772778034, "severe_toxicity": 9.32100010686554e-05, "obscene": 0.00021580615430139005, "threat": 0.00010195239156018943, "insult": 0.0001922089868457988, "identity_attack": 0.00013554016186390072}}]}, "47": {"html_url": "https://github.com/pandas-dev/pandas/pull/60501", "id": 2721588337, "number": 60501, "title": "DOC: Clarify loc and iloc functionality in user_guide/indexing.html", "created_at": "2024-12-05T22:40:32Z", "updated_at": "2024-12-05T22:40:32Z", "closed_at": null, "body": "- [ ] Addresses #47224 \r\n\r\nThis PR fixes the incorrect description of iloc and adds a brief comparison to loc to make the warning more clear:\r\n\r\n\"While loc supports two kinds of boolean indexing, iloc only supports indexing with a boolean array.\"", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "bluestarunderscore", "id": 157440828, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "48": {"html_url": "https://github.com/pandas-dev/pandas/issues/60498", "id": 2720551906, "number": 60498, "title": "BUG: MultiIndex alignment solved for rows but not columns", "created_at": "2024-12-05T14:21:26Z", "updated_at": "2024-12-05T14:21:26Z", "closed_at": null, "body": "### Pandas version checks\n\n- [X] I have checked that this issue has not already been reported.\n\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\n\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\n\n\n### Reproducible Example\n\n```python\nimport pandas as pd\r\nimport numpy as np\r\n\r\n# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n# This part is just to create the example dataframes. It could be more elegant.\r\n\r\nLev1L = [\"1A\", \"1B\"]\r\nLev2L = [\"2A\", \"2B\"]\r\nLev3L = [\"3A\", \"3B\"]\r\nrix1 = pd.MultiIndex.from_product([Lev1L, Lev2L, Lev3L], names=[\"Lev1\", \"Lev2\", \"Lev3\"])\r\nrix2 = pd.MultiIndex.from_product([Lev1L, Lev2L], names=[\"Lev1\", \"Lev2\"])\r\nColL = [\"C1\", \"C2\"]\r\ndf1 = pd.DataFrame(data=100, index=rix1, columns=ColL)\r\ndf2 = pd.DataFrame(data=np.array([[0.1, 0.2], [0.1, 0.2], [0.25, 0.45], [0.25, 0.45]]), index=rix2, columns=ColL)\r\ndf1.columns.name = \"Lev10\"\r\ndf2.columns.name = \"Lev10\"\r\ndf1t = df1.T\r\ndf2t = df2.T\r\n\r\n# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n# ROW alignment .. works\r\n\r\nprint(df1)\r\nprint(df2)\r\ndf3 = df1.mul(df2)\r\nprint(df3)\r\n\r\n# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n# COL alignment .. fails\r\n\r\nprint(df1t)\r\nprint(df2t)\r\ndf3t = df1t.mul(df2t)  #  AssertionError: Length of new_levels (3) must be <= self.nlevels (2)\r\nprint(df3t)\r\n\r\n\"\"\"\r\n\r\n\r\nLev10            C1   C2\r\nLev1 Lev2 Lev3\r\n1A   2A   3A    100  100\r\n          3B    100  100\r\n     2B   3A    100  100\r\n          3B    100  100\r\n1B   2A   3A    100  100\r\n          3B    100  100\r\n     2B   3A    100  100\r\n          3B    100  100\r\n\r\nLev10        C1    C2\r\nLev1 Lev2\r\n1A   2A    0.10  0.20\r\n     2B    0.10  0.20\r\n1B   2A    0.25  0.45\r\n     2B    0.25  0.45\r\n\r\nLev10             C1    C2\r\nLev1 Lev2 Lev3\r\n1A   2A   3A    10.0  20.0\r\n          3B    10.0  20.0\r\n     2B   3A    10.0  20.0\r\n          3B    10.0  20.0\r\n1B   2A   3A    25.0  45.0\r\n          3B    25.0  45.0\r\n     2B   3A    25.0  45.0\r\n          3B    25.0  45.0\r\n\r\n\r\nLev1    1A                  1B\r\nLev2    2A        2B        2A        2B\r\nLev3    3A   3B   3A   3B   3A   3B   3A   3B\r\nLev10\r\nC1     100  100  100  100  100  100  100  100\r\nC2     100  100  100  100  100  100  100  100\r\n\r\nLev1    1A         1B\r\nLev2    2A   2B    2A    2B\r\nLev10\r\nC1     0.1  0.1  0.25  0.25\r\nC2     0.2  0.2  0.45  0.45\r\n\"\"\"\n```\n\n\n### Issue Description\n\nHi the alignment of row MultiIndex was solved with https://github.com/pandas-dev/pandas/issues/54875\r\nbut it would be great if it can work for a column MultiIndex as well. The same assertion error is still given for the 2nd half of my example. Please be patient as this is my first bug report. Much appreciated \r\n\n\n### Expected Behavior\n\nDesired output for 2nd half of script:\r\n```\r\n'''\r\nLev1    1A                  1B\r\nLev2    2A        2B        2A        2B\r\nLev3    3A   3B   3A   3B   3A   3B   3A   3B\r\nLev10\r\nC1      10   10   10   10   25   25   25   25\r\nC2      20   20   20   20   45   45   45   45\r\n'''\r\n```\n\n### Installed Versions\n\n<details>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit                : a36c44e129bd2f70c25d5dec89cb2893716bdbf6\r\npython                : 3.12.6\r\npython-bits           : 64\r\nOS                    : Windows\r\nOS-release            : 11\r\nVersion               : 10.0.22631\r\nmachine               : AMD64\r\nprocessor             : Intel64 Family 6 Model 158 Stepping 10, GenuineIntel\r\nbyteorder             : little\r\nLC_ALL                : None\r\nLANG                  : None\r\nLOCALE                : English_South Africa.1252\r\n\r\npandas                : 3.0.0.dev0+1757.ga36c44e129\r\nnumpy                 : 2.1.3\r\ndateutil              : 2.9.0.post0\r\npip                   : 24.2\r\nCython                : None\r\nsphinx                : None\r\nIPython               : None\r\nadbc-driver-postgresql: None\r\nadbc-driver-sqlite    : None\r\nbs4                   : None\r\nblosc                 : None\r\nbottleneck            : None\r\nfastparquet           : None\r\nfsspec                : None\r\nhtml5lib              : None\r\nhypothesis            : None\r\ngcsfs                 : None\r\njinja2                : None\r\nlxml.etree            : None\r\nmatplotlib            : None\r\nnumba                 : None\r\nnumexpr               : None\r\nodfpy                 : None\r\nopenpyxl              : None\r\npsycopg2              : None\r\npymysql               : None\r\npyarrow               : None\r\npyreadstat            : None\r\npytest                : None\r\npython-calamine       : None\r\npytz                  : 2024.2\r\npyxlsb                : None\r\ns3fs                  : None\r\nscipy                 : None\r\nsqlalchemy            : None\r\ntables                : None\r\ntabulate              : None\r\nxarray                : None\r\nxlrd                  : None\r\nxlsxwriter            : None\r\nzstandard             : None\r\ntzdata                : 2024.2\r\nqtpy                  : None\r\npyqt5                 : None\r\n</details>\r\n", "author_association": "NONE", "comments": 0, "state": "open", "user": {"login": "ZtrevorZ", "id": 22959669, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": []}, "49": {"html_url": "https://github.com/pandas-dev/pandas/issues/60496", "id": 2720361584, "number": 60496, "title": "ENH: astype(object) does not convert numpy strings to str", "created_at": "2024-12-05T13:02:11Z", "updated_at": "2024-12-06T07:53:29Z", "closed_at": null, "body": "### Pandas version checks\n\n- [X] I have checked that this issue has not already been reported.\n\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\n\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\n\n\n### Reproducible Example\n\n```python\nimport pandas\r\nimport numpy \r\n\r\ndf_with_numpy_values = pandas.DataFrame(\r\n    {\r\n        \"col_int\": [numpy.int64(1), numpy.int64(2)],\r\n        \"col_float\": [numpy.float64(1.5), numpy.float64(2.5)],\r\n        \"col_bool\": [numpy.bool_(True), numpy.bool_(False)],\r\n        \"col_str\": [numpy.str_(\"a\"), numpy.str_(\"b\")],\r\n    }\r\n)\r\n\r\ndf_as_object = df_with_numpy_values.astype(object)\r\n\r\nfor column in df_as_object.columns:\r\n    for value in df_as_object[column]:\r\n        assert type(value) in (\r\n            int,\r\n            float,\r\n            str,\r\n            bool,\r\n        ), f\"Value {value} in column {column} is not a Python type, but {type(value)}\"\n```\n\n\n### Issue Description\n\nCalling .astype(object) on a dataframe with numpy values converts the types of the values to the python equivalents, except for numy.str_. \n\n### Expected Behavior\n\nI would expect that values with numpy.str_ would be turned into str.\n\n### Installed Versions\n\n<details>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit                : 0691c5cf90477d3503834d983f69350f250a6ff7\r\npython                : 3.10.12\r\npython-bits           : 64\r\nOS                    : Linux\r\nOS-release            : 5.15.0-126-generic\r\nVersion               : #136-Ubuntu SMP Wed Nov 6 10:38:22 UTC 2024\r\nmachine               : x86_64\r\nprocessor             : x86_64\r\nbyteorder             : little\r\nLC_ALL                : None\r\nLANG                  : en_US.UTF-8\r\nLOCALE                : en_US.UTF-8\r\n\r\npandas                : 2.2.3\r\nnumpy                 : 2.1.3\r\npytz                  : 2024.2\r\ndateutil              : 2.9.0.post0\r\npip                   : 22.0.2\r\nCython                : None\r\nsphinx                : None\r\nIPython               : None\r\nadbc-driver-postgresql: None\r\nadbc-driver-sqlite    : None\r\nbs4                   : None\r\nblosc                 : None\r\nbottleneck            : None\r\ndataframe-api-compat  : None\r\nfastparquet           : None\r\nfsspec                : None\r\nhtml5lib              : None\r\nhypothesis            : None\r\ngcsfs                 : None\r\njinja2                : None\r\nlxml.etree            : None\r\nmatplotlib            : None\r\nnumba                 : None\r\nnumexpr               : None\r\nodfpy                 : None\r\nopenpyxl              : None\r\npandas_gbq            : None\r\npsycopg2              : None\r\npymysql               : None\r\npyarrow               : None\r\npyreadstat            : None\r\npytest                : None\r\npython-calamine       : None\r\npyxlsb                : None\r\ns3fs                  : None\r\nscipy                 : None\r\nsqlalchemy            : None\r\ntables                : None\r\ntabulate              : None\r\nxarray                : None\r\nxlrd                  : None\r\nxlsxwriter            : None\r\nzstandard             : None\r\ntzdata                : 2024.2\r\nqtpy                  : None\r\npyqt5                 : None\r\n\r\n</details>\r\n", "author_association": "NONE", "comments": 2, "state": "open", "user": {"login": "aktobii", "id": 111427745, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2521496366", "id": 2521496366, "created_at": "2024-12-05T21:31:18Z", "updated_at": "2024-12-05T21:31:18Z", "author_association": "MEMBER", "body": "Thanks for the report. pandas does not have any support for NumPy string dtype yet, so these are treated purely as Python objects. That is why without conversion, pandas results in object dtype.\r\n\r\n```python\r\ndf_with_numpy_values = pd.DataFrame(\r\n    {\r\n        \"col_int\": [np.int64(1), np.int64(2)],\r\n        \"col_float\": [np.float64(1.5), np.float64(2.5)],\r\n        \"col_bool\": [np.bool_(True), np.bool_(False)],\r\n        \"col_str\": [np.str_(\"a\"), np.str_(\"b\")],\r\n    }\r\n)\r\nprint(df_with_numpy_values.dtypes)\r\n# col_int        int64\r\n# col_float    float64\r\n# col_bool        bool\r\n# col_str       object\r\n# dtype: object\r\n```\r\n\r\n@jorisvandenbossche @WillAyd - do we have any tracking issues for NumPy string dtype support? I'm not seeing any.\r\n", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2521496366/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "rhshadrach", "id": 45562402, "site_admin": false}, "comment_sentiments": {"toxicity": 0.001158073078840971, "severe_toxicity": 9.941896132659167e-05, "obscene": 0.00021492911037057638, "threat": 0.00010632570774760097, "insult": 0.0001876977039501071, "identity_attack": 0.00013619936362374574}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2521522876", "id": 2521522876, "created_at": "2024-12-05T21:47:36Z", "updated_at": "2024-12-05T21:48:13Z", "author_association": "MEMBER", "body": "@rhshadrach note that this is not about the numpy new string dtype, but about the older unicode string dtype `\"U\"` and its scalars (but an issue about the new numpy string dtype is https://github.com/pandas-dev/pandas/issues/58503)\r\n\r\n> Calling .astype(object) on a dataframe with numpy values converts the types of the values to the python equivalents, except for numy.str_.\r\n\r\nThe issue here is that this column is _already_ object dtype (storing those `np.str_` scalars), as @rhshadrach  showed above, and therefore the `astype(object)` step does nothing.\r\n\r\nWith the upcoming pandas 3.0 (or on main testing with enabling the future option), we will start to infer the numpy scalars as a proper string dtype instead of object dtype, and at that point `astype(object)` will also convert it to python strings:\r\n\r\n```\r\nIn [13]: pd.options.future.infer_string = True\r\n\r\nIn [14]: df_with_numpy_values = pd.DataFrame(\r\n    ...:     {\r\n    ...:         \"col_int\": [np.int64(1), np.int64(2)],\r\n    ...:         \"col_float\": [np.float64(1.5), np.float64(2.5)],\r\n    ...:         \"col_bool\": [np.bool_(True), np.bool_(False)],\r\n    ...:         \"col_str\": [np.str_(\"a\"), np.str_(\"b\")],\r\n    ...:     }\r\n    ...: )\r\n\r\nIn [15]: print(df_with_numpy_values.dtypes)\r\ncol_int        int64\r\ncol_float    float64\r\ncol_bool        bool\r\ncol_str          str\r\ndtype: object\r\n\r\nIn [16]: type(df_with_numpy_values[\"col_str\"].astype(object)[0])\r\nOut[16]: str\r\n```", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2521522876/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "jorisvandenbossche", "id": 1020496, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0011951164342463017, "severe_toxicity": 0.00010377907165093347, "obscene": 0.00022850623645354062, "threat": 0.00010707322508096695, "insult": 0.00018622344941832125, "identity_attack": 0.00013975542970001698}}]}, "50": {"html_url": "https://github.com/pandas-dev/pandas/issues/60495", "id": 2719828853, "number": 60495, "title": "BUG: Building pandas via pip fails in AIX due to use of lower meson version", "created_at": "2024-12-05T09:17:26Z", "updated_at": "2024-12-06T07:12:32Z", "closed_at": null, "body": "### Pandas version checks\r\n\r\n- [X] I have checked that this issue has not already been reported.\r\n\r\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\r\n\r\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\r\n\r\n\r\n### Reproducible Example\r\n\r\n```python\r\nIf someone build master branch of pandas via pip in AIX, then they will receive the error as follows:\r\n\r\n pip3.9 install pandas -v\r\n\r\nmdlist = compiler.get_command_to_archive_shlib()\r\n    File \"/tmp/pip-build-env-y55d21vm/overlay/lib/python3.9/site-packages/mesonbuild/compilers/compilers.py\", line 948, in get_command_to_archive_shlib\r\n      return self.linker.get_command_to_archive_shlib()\r\n  AttributeError: 'NoneType' object has no attribute 'get_command_to_archive_shlib'\r\n  The Meson build system\r\n  Version: 1.2.1\r\n  Source dir: /tmp\r\nFound ninja-1.11.1 at /opt/freeware/bin/ninja\r\n\r\n  Visual Studio environment is needed to run Ninja. It is recommended to use Meson wrapper:\r\n  /tmp/pip-build-env-y55d21vm/overlay/bin/meson compile -C .\r\n\r\n  ERROR: Unhandled python exception\r\n\r\n      This is a Meson bug and should be reported!\r\n  error: subprocess-exited-with-error\r\n  \r\n  Preparing metadata (pyproject.toml) did not run successfully.\r\n  exit code: 2\r\n  \r\n  See above for output.\r\n  \r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\n  full command: /opt/freeware/bin/python3.9 /opt/freeware/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py prepare_metadata_for_build_wheel /tmp/tmpd79b_9px\r\n  cwd: /tmp/pip-install-ihktll3n/pandas_3bab19dae760400388e20f1843d43267\r\n  Preparing metadata (pyproject.toml) ... error\r\nerror: metadata-generation-failed\r\n\r\nEncountered error while generating package metadata.\r\n\r\nSee above for output.\r\n\r\nnote: This is an issue with the package mentioned above, not pip.\r\nhint: See above for details.\r\n```\r\n\r\n\r\n### Issue Description\r\n\r\nThis is a Python exception that happened, which I have fixed [here](https://github.com/mesonbuild/meson/pull/12352)\r\n\r\n### Expected Behavior\r\n\r\npip3.9 install pandas should install pandas in AIX.\r\n\r\nI would kindly request the community to increase the minimum required version to 1.6.0 if possible, and this will build Pandas in AIX and other targets as well. \r\n\r\nI tested with making the change in pyproject.toml from \"meson==1.2.1\" to \"meson==1.6.0\" in AIX and it works.\r\n\r\nRequesting the community to kindly consider this, and I will raise a pull request once you are okay.\r\n\r\n\r\n\r\n", "author_association": "NONE", "comments": 2, "state": "open", "user": {"login": "KamathForAIX", "id": 118170220, "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/60495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "assignees": [], "comments_list": [{"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2520048931", "id": 2520048931, "created_at": "2024-12-05T11:30:08Z", "updated_at": "2024-12-05T11:30:08Z", "author_association": "CONTRIBUTOR", "body": "Thanks for the report. I see that the python version you're trying to build against is 3.9 which has been removed in the main branch in https://github.com/pandas-dev/pandas/pull/58238. Are you able to build pandas with python 3.10+ with meson 1.2.1?", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2520048931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "asishm", "id": 1978117, "site_admin": false}, "comment_sentiments": {"toxicity": 0.0006088379886932671, "severe_toxicity": 0.00011955603986280039, "obscene": 0.00017449173901695758, "threat": 0.00012302660616114736, "insult": 0.0001747001806506887, "identity_attack": 0.00014084386930335313}}, {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2520154743", "id": 2520154743, "created_at": "2024-12-05T12:14:23Z", "updated_at": "2024-12-05T12:14:23Z", "author_association": "NONE", "body": "Hi @asishm Nope. With 3.11 also, we hit the same issue. ", "reactions": {"url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2520154743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "performed_via_github_app": null, "user": {"login": "KamathForAIX", "id": 118170220, "site_admin": false}, "comment_sentiments": {"toxicity": 0.001499748439528048, "severe_toxicity": 9.411411883775145e-05, "obscene": 0.0002399173245066777, "threat": 9.237451740773395e-05, "insult": 0.00019993301248177886, "identity_attack": 0.0001327780628344044}}]}}, "issue_dependency": {"1": {"issue_id": 2725011974, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "2": {"issue_id": 2724919914, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "3": {"issue_id": 2724916564, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "4": {"issue_id": 2724837854, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "5": {"issue_id": 2724698006, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "6": {"issue_id": 2724696132, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "7": {"issue_id": 2724661981, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "8": {"issue_id": 2724454656, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "9": {"issue_id": 2724454232, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "10": {"issue_id": 2724430662, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "11": {"issue_id": 2724644616, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "12": {"issue_id": 2723895504, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "13": {"issue_id": 2722705421, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "14": {"issue_id": 2722537903, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "15": {"issue_id": 2722317263, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "16": {"issue_id": 2721083628, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "17": {"issue_id": 2721036073, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "18": {"issue_id": 2718714973, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "19": {"issue_id": 2716229255, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "20": {"issue_id": 2715943005, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "21": {"issue_id": 2715714364, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "22": {"issue_id": 2715528370, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "23": {"issue_id": 2715463125, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "24": {"issue_id": 2715368758, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "25": {"issue_id": 2715130579, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "26": {"issue_id": 2714969901, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "27": {"issue_id": 2713977801, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "28": {"issue_id": 2712542742, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "29": {"issue_id": 2712212995, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "30": {"issue_id": 2711912222, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "31": {"issue_id": 2710827546, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "32": {"issue_id": 2709923802, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "33": {"issue_id": 2709132946, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "34": {"issue_id": 2709128734, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "35": {"issue_id": 2704612927, "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"}, "36": {"issue_id": 2724418032, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "37": {"issue_id": 2724322752, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "38": {"issue_id": 2724272340, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "39": {"issue_id": 2724260481, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "40": {"issue_id": 2724025165, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "41": {"issue_id": 2723783267, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "42": {"issue_id": 2723639037, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "43": {"issue_id": 2722476905, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "44": {"issue_id": 2722132901, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "45": {"issue_id": 2721803512, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "46": {"issue_id": 2721736266, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "47": {"issue_id": 2721588337, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "48": {"issue_id": 2720551906, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "49": {"issue_id": 2720361584, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}, "50": {"issue_id": 2719828853, "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"}}}