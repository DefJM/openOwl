{
    "dependencies": {
        "1": {
            "package_manager": "pypi",
            "owner": "pydantic",
            "name": "pydantic",
            "version": "2.10.3",
            "id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "2": {
            "package_manager": "pypi",
            "owner": "pandas-dev",
            "name": "pandas",
            "version": "2.2.3",
            "id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        }
    },
    "issues": {
        "1": {
            "html_url": "https://github.com/pydantic/pydantic/pull/11060",
            "id": 2723895504,
            "number": 11060,
            "title": "Rewrite validators documentation",
            "created_at": "2024-12-06T20:46:18Z",
            "updated_at": "2024-12-06T20:57:01Z",
            "closed_at": null,
            "body": "<!-- Thank you for your contribution! -->\r\n<!-- Unless your change is trivial, please create an issue to discuss the change before creating a PR -->\r\n\r\n## Change Summary\r\n\r\n<!-- Please give a short summary of the changes. -->\r\n\r\n## Related issue number\r\n\r\n<!-- WARNING: please use \"fix #123\" style references so the issue is closed when this PR is merged. -->\r\n\r\n## Checklist\r\n\r\n* [ ] The pull request title is a good summary of the changes - it will be used in the changelog\r\n* [ ] Unit tests for the changes exist\r\n* [ ] Tests pass on CI\r\n* [ ] Documentation reflects the changes where applicable\r\n* [ ] My PR is ready to review, **please add a comment including the phrase \"please review\" to assign reviewers**\r\n",
            "author_association": "MEMBER",
            "comments": 2,
            "state": "open",
            "user": {
                "login": "Viicos",
                "id": 65306057,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11060/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2524152511",
                    "id": 2524152511,
                    "created_at": "2024-12-06T20:50:20Z",
                    "updated_at": "2024-12-06T20:52:28Z",
                    "author_association": "NONE",
                    "body": "## Deploying pydantic-docs with &nbsp;<a href=\"https://pages.dev\"><img alt=\"Cloudflare Pages\" src=\"https://user-images.githubusercontent.com/23264/106598434-9e719e00-654f-11eb-9e59-6167043cfa01.png\" width=\"16\"></a> &nbsp;Cloudflare Pages\n\n<table><tr><td><strong>Latest commit:</strong> </td><td>\n<code>0ec2a4c</code>\n</td></tr>\n<tr><td><strong>Status:</strong></td><td>&nbsp;\u2705&nbsp; Deploy successful!</td></tr>\n<tr><td><strong>Preview URL:</strong></td><td>\n<a href='https://97ce1275.pydantic-docs.pages.dev'>https://97ce1275.pydantic-docs.pages.dev</a>\n</td></tr>\n<tr><td><strong>Branch Preview URL:</strong></td><td>\n<a href='https://validators-docs.pydantic-docs.pages.dev'>https://validators-docs.pydantic-docs.pages.dev</a>\n</td></tr>\n</table>\n\n[View logs](https://dash.cloudflare.com/?to=/:account/pages/view/pydantic-docs/97ce1275-6154-4b39-8c4e-bdf0160d9bd3)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2524152511/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": {
                        "id": 85455,
                        "client_id": "Iv1.0879b6ff6c8f7a1a",
                        "slug": "cloudflare-workers-and-pages",
                        "node_id": "MDM6QXBwODU0NTU=",
                        "owner": {
                            "login": "cloudflare",
                            "id": 314135,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjMxNDEzNQ==",
                            "avatar_url": "https://avatars.githubusercontent.com/u/314135?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/cloudflare",
                            "html_url": "https://github.com/cloudflare",
                            "followers_url": "https://api.github.com/users/cloudflare/followers",
                            "following_url": "https://api.github.com/users/cloudflare/following{/other_user}",
                            "gists_url": "https://api.github.com/users/cloudflare/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/cloudflare/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/cloudflare/subscriptions",
                            "organizations_url": "https://api.github.com/users/cloudflare/orgs",
                            "repos_url": "https://api.github.com/users/cloudflare/repos",
                            "events_url": "https://api.github.com/users/cloudflare/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/cloudflare/received_events",
                            "type": "Organization",
                            "user_view_type": "public",
                            "site_admin": false
                        },
                        "name": "Cloudflare Workers and Pages",
                        "description": "",
                        "external_url": "https://cloudflare.com/",
                        "html_url": "https://github.com/apps/cloudflare-workers-and-pages",
                        "created_at": "2020-10-19T20:23:00Z",
                        "updated_at": "2024-09-19T15:15:04Z",
                        "permissions": {
                            "checks": "write",
                            "contents": "read",
                            "deployments": "write",
                            "metadata": "read",
                            "pull_requests": "write"
                        },
                        "events": [
                            "pull_request",
                            "push"
                        ]
                    },
                    "user": {
                        "login": "cloudflare-workers-and-pages[bot]",
                        "id": 73139402,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2524154642",
                    "id": 2524154642,
                    "created_at": "2024-12-06T20:51:53Z",
                    "updated_at": "2024-12-06T20:57:01Z",
                    "author_association": "NONE",
                    "body": "## [CodSpeed Performance Report](https://codspeed.io/pydantic/pydantic/branches/validators-docs)\n\n### Merging #11060 will **not alter performance**\n\n<sub>Comparing <code>validators-docs</code> (0ec2a4c) with <code>main</code> (32f405b)</sub>\n\n\n\n### Summary\n\n`\u2705 46` untouched benchmarks  \n\n\n\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2524154642/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": {
                        "id": 257293,
                        "client_id": "Iv1.e7febeb3870a36fb",
                        "slug": "codspeed-hq",
                        "node_id": "A_kwHOBvQP3M4AA-0N",
                        "owner": {
                            "login": "CodSpeedHQ",
                            "id": 116658140,
                            "node_id": "O_kgDOBvQP3A",
                            "avatar_url": "https://avatars.githubusercontent.com/u/116658140?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/CodSpeedHQ",
                            "html_url": "https://github.com/CodSpeedHQ",
                            "followers_url": "https://api.github.com/users/CodSpeedHQ/followers",
                            "following_url": "https://api.github.com/users/CodSpeedHQ/following{/other_user}",
                            "gists_url": "https://api.github.com/users/CodSpeedHQ/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/CodSpeedHQ/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/CodSpeedHQ/subscriptions",
                            "organizations_url": "https://api.github.com/users/CodSpeedHQ/orgs",
                            "repos_url": "https://api.github.com/users/CodSpeedHQ/repos",
                            "events_url": "https://api.github.com/users/CodSpeedHQ/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/CodSpeedHQ/received_events",
                            "type": "Organization",
                            "user_view_type": "public",
                            "site_admin": false
                        },
                        "name": "CodSpeed HQ",
                        "description": "## What is [CodSpeed](https://codspeed.io)?\r\nCodSpeed is a **continuous benchmarking** platform that allows you to **track** and **compare** the **performance** of your codebase during development.\r\n\r\nIt uses a smart **runtime engine** to measure the performance of your code in an **accurate** and **reproducible** way without creating a huge **runtime overhead**, unlike traditional benchmarks.\r\n\r\nCodSpeed produces detailed **performance reports** helping you **improve** your codebase **performance**, directly **within your repository provider** (Pull Requests comments, Merge checks, ...).\r\n\r\n## How it works\r\n\r\nThe core of the **performance measurement** is done directly within your **CI environment** through the **CodSpeed Action**. Allowing you to **stay the sole owner** of your data and to keep your **codebase private**.\r\n\r\nOnce the performance data is generated, **only the benchmark results** are sent to the CodSpeed servers to be **analyzed**.\r\n\r\nThen, performance reports are **generated** and **published** directly **within your repository provider**.\r\n\r\n## How long does it take to install?\r\n\r\nIf you're **already benchmarking** your codebase, you can plug your **existing benchmarks** to CodSpeed in **less than 5 minutes** since CodSpeed benchmark's API is **compatible** with the most **popular benchmarking frameworks**.\r\n\r\nIf **you haven't any benchmarks yet**, we provide an **intuitive** benchmarking API that allows you to **create your first benchmarks** in a **few minutes**.\r\n",
                        "external_url": "https://codspeed.io",
                        "html_url": "https://github.com/apps/codspeed-hq",
                        "created_at": "2022-11-02T17:17:13Z",
                        "updated_at": "2024-11-26T12:25:51Z",
                        "permissions": {
                            "actions": "read",
                            "checks": "write",
                            "contents": "read",
                            "emails": "read",
                            "members": "read",
                            "metadata": "read",
                            "organization_self_hosted_runners": "write",
                            "pull_requests": "write",
                            "statuses": "read"
                        },
                        "events": [
                            "organization",
                            "pull_request",
                            "repository",
                            "workflow_job"
                        ]
                    },
                    "user": {
                        "login": "codspeed-hq[bot]",
                        "id": 117304815,
                        "site_admin": false
                    }
                }
            ]
        },
        "2": {
            "html_url": "https://github.com/pydantic/pydantic/issues/11058",
            "id": 2722705421,
            "number": 11058,
            "title": "Model docstring/description dropped for generic models",
            "created_at": "2024-12-06T10:55:01Z",
            "updated_at": "2024-12-06T10:59:00Z",
            "closed_at": null,
            "body": "### Initial Checks\r\n\r\n- [X] I confirm that I'm using Pydantic V2\r\n\r\n### Description\r\n\r\nFirst of all, I'm not 100% sure if that is the intended behavior, but it was a surprise to me.\r\n\r\nWhenever a generic model gets an actual type, it suddenly loses its docstring and therefore its `description` attribute in the resulting JSON schema.\r\n\r\nI noticed that the generated OpenAPI specification was missing the documentation of our generic classes.\r\n\r\nThe change could be as easy as adding one line\r\n\r\n```diff\r\n    created_model = meta(\r\n        model_name,\r\n        bases,\r\n        namespace,\r\n        __pydantic_generic_metadata__={\r\n            'origin': origin,\r\n            'args': args,\r\n            'parameters': params,\r\n        },\r\n        __pydantic_reset_parent_namespace__=False,\r\n        **kwds,\r\n    )    \r\n+   created_model.__doc__ = origin.__doc__\r\n\r\n    model_module, called_globally = _get_caller_frame_info(depth=3)\r\n```\r\n\r\nafter the creation of the new model at \r\nhttps://github.com/pydantic/pydantic/blob/32f405bcf6171602ffe754f1fca1681c5ddee96e/pydantic/_internal/_generics.py#L137-L150\r\n\r\n### Example Code\r\n\r\n```Python\r\nfrom pydantic import BaseModel\r\nfrom typing import TypeVar, Generic\r\n\r\nItem = TypeVar(\"Item\")\r\n\r\n\r\nclass Pagination(BaseModel, Generic[Item]):\r\n    \"\"\"Some description\"\"\"\r\n\r\n    page: int\r\n    page_cnt: int\r\n    page_size: int\r\n    items: list[Item]\r\n\r\n\r\nassert \"description\" in Pagination.model_json_schema()\r\nassert \"description\" in Pagination[str].model_json_schema()  # <-- this fails\r\n```\r\n\r\n\r\n### Python, Pydantic & OS Version\r\n\r\n```Text\r\npydantic version: 2.10.3\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: .../.venv/lib/python3.11/site-packages/pydantic\r\n               python version: 3.11.9 (main, Apr  2 2024, 08:25:04) [Clang 15.0.0 (clang-1500.3.9.4)]\r\n                     platform: macOS-14.6.1-arm64-arm-64bit\r\n             related packages: fastapi-0.115.6 pydantic-settings-2.6.1 mypy-1.13.0 pydantic-extra-types-2.10.0 typing_extensions-4.12.2\r\n                       commit: unknown\r\n```\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "flxdot",
                "id": 35657654,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11058/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "3": {
            "html_url": "https://github.com/pydantic/pydantic/issues/11057",
            "id": 2722537903,
            "number": 11057,
            "title": "Punctually allow/forbid extra parameters when disabled by config",
            "created_at": "2024-12-06T09:36:38Z",
            "updated_at": "2024-12-06T16:59:36Z",
            "closed_at": null,
            "body": "### Initial Checks\r\n\r\n- [X] I have searched Google & GitHub for similar requests and couldn't find anything\r\n- [X] I have read and followed [the docs](https://docs.pydantic.dev) and still think this feature is missing\r\n\r\n### Description\r\n\r\nI work on libraries that implement the [SCIM](https://datatracker.ietf.org/doc/html/rfc7644) protocol. The libraries covers the [server implementation](https://scim2-models.readthedocs.io/), [the client implementation](https://scim2-client.readthedocs.io/) and [some compliance tests](https://scim2-tester.readthedocs.io/) of the protocol. All the libraries are based on a [common set of Pydantic models](https://scim2-models.readthedocs.io/).\r\n\r\nDepending on the context, the `extra` parameters might be either needed or unwanted:\r\n- The server or client implementations might want accept payloads from actors which don't precisely respect the norm, and tolerate extra parameters.\r\n- The protocol compliance checker want to strictly respect the norm and forbid extra parameters.\r\n\r\nHowever, once I set `allow` or `extra` in the model configuration, I cannot update the value afterward. I\u00a0would love a way to punctually set an explicit value for `extra` that might be different from the config.\r\n\r\nFor example, adding a new `extra` parameter in `model_validate` that would overwrite the model config value would be a bliss.\r\n\r\nWhat do you think?\r\n\r\n### Affected Components\r\n\r\n- [ ] [Compatibility between releases](https://docs.pydantic.dev/changelog/)\r\n- [X] [Data validation/parsing](https://docs.pydantic.dev/concepts/models/#basic-model-usage)\r\n- [ ] [Data serialization](https://docs.pydantic.dev/concepts/serialization/) - `.model_dump()` and `.model_dump_json()`\r\n- [ ] [JSON Schema](https://docs.pydantic.dev/concepts/json_schema/)\r\n- [ ] [Dataclasses](https://docs.pydantic.dev/concepts/dataclasses/)\r\n- [ ] [Model Config](https://docs.pydantic.dev/concepts/config/)\r\n- [ ] [Field Types](https://docs.pydantic.dev/api/types/) - adding or changing a particular data type\r\n- [ ] [Function validation decorator](https://docs.pydantic.dev/concepts/validation_decorator/)\r\n- [ ] [Generic Models](https://docs.pydantic.dev/concepts/models/#generic-models)\r\n- [ ] [Other Model behaviour](https://docs.pydantic.dev/concepts/models/) - `model_construct()`, pickling, private attributes, ORM mode\r\n- [ ] [Plugins](https://docs.pydantic.dev/) and integration with other tools - mypy, FastAPI, python-devtools, Hypothesis, VS Code, PyCharm, etc.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "azmeuk",
                "id": 60163,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11057/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "4": {
            "html_url": "https://github.com/pydantic/pydantic/issues/11056",
            "id": 2722317263,
            "number": 11056,
            "title": "NameEmail validation fails when the name has a period in it",
            "created_at": "2024-12-06T07:53:05Z",
            "updated_at": "2024-12-07T09:08:48Z",
            "closed_at": null,
            "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nUsing the NameEmail field type, I want to validate a name and email of the form ```Homer J. Simpson <homer@thesimpsons.com>```\r\n\r\nHowever, when I try to validate this, it fails because Pydantic doesn't like the use of the period character to abbreviate the middle name. I would expect this to be valid.\r\n\n\n### Example Code\n\n```Python\nfrom pydantic import BaseModel, NameEmail, ValidationError\r\n\r\n\r\nclass User(BaseModel):\r\n    name_email: NameEmail\r\n\r\n# This works\r\ntry:\r\n    name_email = NameEmail(\r\n        name=\"Homer J. Simpson\",\r\n        email=\"homer@thesimpsons.com\",\r\n    )\r\n    print(f\"{name_email}\")\r\nexcept ValidationError as e:\r\n    print(f\"{e}\")\r\n\r\n# This is a validation error\r\ntry:\r\n    name_email = User.model_validate(\r\n        {\r\n            \"name_email\": \"Homer J. Simpson <homer@thesimpsons.com>\",\r\n        }\r\n    )\r\n    print(f\"{name_email}\")\r\nexcept ValidationError as e:\r\n    print(f\"{e}\")\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.3\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /Users/glynm/.pyenv/versions/3.12.7/envs/mantis-git/lib/python3.12/site-packages/pydantic\r\n               python version: 3.12.7 (main, Oct 17 2024, 10:06:07) [Clang 16.0.0 (clang-1600.0.26.3)]\r\n                     platform: macOS-15.1.1-arm64-arm-64bit\r\n             related packages: mypy-1.13.0 typing_extensions-4.12.2\r\n                       commit: unknown\n```\n",
            "author_association": "NONE",
            "comments": 8,
            "state": "open",
            "user": {
                "login": "glynos",
                "id": 125010,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11056/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522491503",
                    "id": 2522491503,
                    "created_at": "2024-12-06T08:22:46Z",
                    "updated_at": "2024-12-07T08:47:01Z",
                    "author_association": "NONE",
                    "body": "The issue you're facing with Pydantic 2.10.3 is related to a change in behavior for fields marked as Optional or Maybe types when the default value is set to None.\r\n\r\nIn Pydantic 2.x, a stricter validation mechanism was introduced. By default, when you use Field(None), it implies that the field can be None, but the presence of a None value can cause issues when validation is done. The key difference here is that Field(None) now treats the field as required, which is why you're encountering the Field required error.\r\n\r\n\r\nSolution example\r\n`from typing import Optional\r\nimport uvicorn\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel, Field\r\n\r\napp = FastAPI()\r\n\r\nclass Item(BaseModel):\r\n    field: Optional[int] = None  # Use Optional[int] and set default to None\r\n\r\n@app.post(\"/items/\")\r\nasync def create_item(item: Item):\r\n    return item\r\n\r\nuvicorn.run(app)\r\n`\r\n\r\nTo solve the issue and allow the field to be blank or None without raising the validation error, you can make the following adjustment:\r\n\r\nUse Field(default=None) instead of Field(None) to explicitly mark the field as optional without requiring a value.\r\nYou can also use Optional from typing instead of relying on Maybe, since Optional explicitly means the field can either have a value or be None",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522491503/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sangameshbagewadi",
                        "id": 174851408,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522602165",
                    "id": 2522602165,
                    "created_at": "2024-12-06T09:11:30Z",
                    "updated_at": "2024-12-07T08:46:54Z",
                    "author_association": "NONE",
                    "body": "> The issue you're facing with Pydantic 2.10.3 is related to a change in behavior for fields marked as Optional or Maybe types when the default value is set to None.\r\n> \r\n> In Pydantic 2.x, a stricter validation mechanism was introduced. By default, when you use Field(None), it implies that the field can be None, but the presence of a None value can cause issues when validation is done. The key difference here is that Field(None) now treats the field as required, which is why you're encountering the Field required error.\r\n> \r\n> Solution example `from typing import Optional import uvicorn from fastapi import FastAPI from pydantic import BaseModel, Field\r\n> \r\n> app = FastAPI()\r\n> \r\n> class Item(BaseModel): field: Optional[int] = None # Use Optional[int] and set default to None\r\n> \r\n> @app.post(\"/items/\") async def create_item(item: Item): return item\r\n> \r\n> uvicorn.run(app) `\r\n> \r\n> To solve the issue and allow the field to be blank or None without raising the validation error, you can make the following adjustment:\r\n> \r\n> Use Field(default=None) instead of Field(None) to explicitly mark the field as optional without requiring a value. You can also use Optional from typing instead of relying on Maybe, since Optional explicitly means the field can either have a value or be None\r\n\r\nThis has nothing to do with optional values, it's related to a regex in the email validator which explicitly excludes the period character in the display name for NameEmail.",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522602165/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "glynos",
                        "id": 125010,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522755982",
                    "id": 2522755982,
                    "created_at": "2024-12-06T10:22:24Z",
                    "updated_at": "2024-12-07T08:46:43Z",
                    "author_association": "NONE",
                    "body": "You're absolutely correct \u2014 the issue lies in the NameEmail regex validator's strict enforcement of rules for the display name, which excludes the use of a period (.) in certain contexts. Pydantic's NameEmail relies on a strict interpretation of the RFC 5322 standard for email addresses, and its display name validation doesn't account for names with periods used as abbreviations.\r\nTo resolve this, you need to override the default behavior of NameEmail and adjust the regex used for validating the display name.",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522755982/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sangameshbagewadi",
                        "id": 174851408,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522869954",
                    "id": 2522869954,
                    "created_at": "2024-12-06T11:01:19Z",
                    "updated_at": "2024-12-06T11:01:19Z",
                    "author_association": "NONE",
                    "body": "Types are implemented in different styles within Pydantic. \r\n\r\nThe validation only really works in the context of BaseModel, or TypeAdapter. I suspect this is the source of the inconsistency in the two (stylistically) different examples you provided. This is perhaps creating some confusion.\r\n\r\nMore info on TypeAdapter. \r\n\r\nhttps://docs.pydantic.dev/latest/api/type_adapter/\r\n\r\n\r\nTo demonstrate this in the REPL.\r\n\r\n(No validation is occurring here, only assigning of values)\r\n\r\n```bash\r\nIn [12]: from pydantic import NameEmail, PositiveInt\r\n\r\nIn [13]: PositiveInt(-7)\r\nOut[13]: -7\r\n\r\nIn [14]: NameEmail(1, 2)\r\nOut[14]: NameEmail(name=1, email=2)\r\n\r\nIn [15]: NameEmail(PositiveInt(-7), NameEmail(\"a\", \"b\"))\r\nOut[15]: NameEmail(name=-7, email=NameEmail(name='a', email='b'))\r\n```\r\n\r\nI believe the underlying issue can be resolved by quoting the string. \r\n\r\n```bash\r\nIn [19]: name_email = TypeAdapter(NameEmail).validate_python('\"Homer J. Simpson\" <jsimpson@a.com>')\r\n\r\nIn [20]: name_email\r\nOut[20]: NameEmail(name='Homer J. Simpson', email='jsimpson@a.com')\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522869954/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "mpkocher",
                        "id": 868552,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522962588",
                    "id": 2522962588,
                    "created_at": "2024-12-06T11:30:45Z",
                    "updated_at": "2024-12-07T08:42:24Z",
                    "author_association": "NONE",
                    "body": "Thanks for the responses, but perhaps my original example wasn't clear. I don't have an issue with creating a NameEmail with or without a TypeAdapter, but the issue is when I want to validate it from an input string. I don't control the input, so quoting the display name as suggested is not an option. To adapt my original example, you can see there are two different outcomes when I would expect them to behave the same:\r\n\r\n```py\r\nfrom pydantic import BaseModel, NameEmail, ValidationError\r\n\r\n\r\nclass User(BaseModel):\r\n    name_email: NameEmail\r\n\r\n\r\n# This works\r\ntry:\r\n    user = User(\r\n        name_email=NameEmail(\r\n           name=\"Homer J. Simpson\",\r\n            email=\"homer@thesimpsons.com\",\r\n        ),\r\n    )\r\n    print(f\"{user}\")\r\nexcept ValidationError as e:\r\n    print(f\"{e}\")\r\n\r\n# This is a validation error\r\ntry:\r\n    user = User.model_validate(\r\n        {\r\n            \"name_email\": \"Homer J. Simpson <homer@thesimpsons.com>\",\r\n        }\r\n    )\r\n    print(f\"{user}\")\r\nexcept ValidationError as e:\r\n    print(f\"{e}\")\r\n```\r\n\r\nTo respond to @sangameshbagewadi , section 4.1 in the RFC document you cite explicitly states that names with periods in them must be interpreted properly: https://datatracker.ietf.org/doc/html/rfc5322#section-4.1\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522962588/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "glynos",
                        "id": 125010,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2523096948",
                    "id": 2523096948,
                    "created_at": "2024-12-06T12:18:30Z",
                    "updated_at": "2024-12-07T08:46:15Z",
                    "author_association": "NONE",
                    "body": "Try this\r\n\r\n\r\n`from pydantic import BaseModel, ValidationError\r\nfrom pydantic.networks import EmailStr\r\nfrom typing import Any\r\n\r\n\r\nclass CustomNameEmail:\r\n    def __init__(self, name: str, email: str):\r\n        self.name = name\r\n        self.email = email\r\n\r\n    @classmethod\r\n    def validate(cls, value: Any) -> \"CustomNameEmail\":\r\n        if isinstance(value, str):\r\n            try:\r\n                # Split the input into \"name\" and \"email\" parts\r\n                name, email = value.rsplit(\" <\", 1)\r\n                email = email.rstrip(\">\")\r\n                if not email or \"@\" not in email:\r\n                    raise ValueError(\"Invalid email format\")\r\n                # Return a validated CustomNameEmail instance\r\n                return cls(name=name.strip(), email=email.strip())\r\n            except ValueError:\r\n                raise ValueError(f\"Invalid NameEmail format: {value}\")\r\n        raise TypeError(\"Expected a string for NameEmail\")\r\n\r\n    def __repr__(self):\r\n        return f\"{self.name} <{self.email}>\"\r\n\r\n    def __str__(self):\r\n        return self.__repr__()\r\n\r\n\r\nclass User(BaseModel):\r\n    name_email: CustomNameEmail\r\n\r\n    @classmethod\r\n    def model_validate(cls, value: dict):\r\n        # Manually apply validation using CustomNameEmail\r\n        try:\r\n            value['name_email'] = CustomNameEmail.validate(value['name_email'])\r\n        except (ValueError, TypeError) as e:\r\n            raise ValidationError(str(e))\r\n        return cls(**value)\r\n\r\n\r\n# Example Usage\r\n\r\n# This works\r\ntry:\r\n    user = User(\r\n        name_email=CustomNameEmail(\r\n            name=\"Homer J. Simpson\",\r\n            email=\"homer@thesimpsons.com\",\r\n        )\r\n    )\r\n    print(f\"User (manual init): {user}\")\r\nexcept ValidationError as e:\r\n    print(f\"Validation Error: {e}\")\r\n\r\n# This is now consistent\r\ntry:\r\n    user = User.model_validate(\r\n        {\r\n            \"name_email\": \"Homer J. Simpson <homer@thesimpsons.com>\",\r\n        }\r\n    )\r\n    print(f\"User (string input): {user}\")\r\nexcept ValidationError as e:\r\n    print(f\"Validation Error: {e}\")\r\n`",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2523096948/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "sangameshbagewadi",
                        "id": 174851408,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525034163",
                    "id": 2525034163,
                    "created_at": "2024-12-07T08:46:25Z",
                    "updated_at": "2024-12-07T08:46:25Z",
                    "author_association": "MEMBER",
                    "body": "@sangameshbagewadi we appreciate the help but your (AI generated?) answers are irrelevant and poorly formatted. I marked them as off topic, please avoid doing so again.\r\n\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525034163/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Viicos",
                        "id": 65306057,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525043555",
                    "id": 2525043555,
                    "created_at": "2024-12-07T09:08:03Z",
                    "updated_at": "2024-12-07T09:08:48Z",
                    "author_association": "MEMBER",
                    "body": "The `NameEmail` type is a bit confusing, because it is meant to be used as an annotation in a Pydantic context (i.e. as a field type/with `TypeAdapter`).\r\n\r\nHowever, it is instantiable even though no validation is performed on instantiation.\r\n\r\nDoing:\r\n\r\n```python\r\nuser = User(\r\n    name_email=NameEmail(\r\n        name=\"Homer J. Simpson\",\r\n        email=\"homer@thesimpsons.com\",\r\n    ),\r\n)\r\n```\r\n\r\nwill *not* perform any validation, because the validation function (which is **only called during Pydantic validation**, not instantiation) is defined as:\r\n\r\nhttps://github.com/pydantic/pydantic/blob/32f405bcf6171602ffe754f1fca1681c5ddee96e/pydantic/networks.py#L1008-L1013\r\n\r\nwhich is arguably flawed: the `input_value` type hint indicates that validating as a `NameInstance` is supported (because we allow `Self`) but we don't perform any validation here (probably it was assumed here that if it is an instance, it was already validated, perhaps on init or from another model validation).\r\n\r\ncc @sydney-runkle, this is similar to the URL types, we are missing consistency here.\r\n\r\nWhether we should allow period in names or not, from my understanding of https://datatracker.ietf.org/doc/html/rfc5322#section-4 we should. It is an obsolete token, but:\r\n\r\n> they MUST be accepted and parsed by a conformant receiver.",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2525043555/reactions",
                        "total_count": 1,
                        "+1": 1,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Viicos",
                        "id": 65306057,
                        "site_admin": false
                    }
                }
            ]
        },
        "5": {
            "html_url": "https://github.com/pydantic/pydantic/issues/11054",
            "id": 2721083628,
            "number": 11054,
            "title": "populate_by_name not recognized by mypy when set by a non literal",
            "created_at": "2024-12-05T18:07:48Z",
            "updated_at": "2024-12-05T19:37:28Z",
            "closed_at": null,
            "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nDefining `model_config` with non-literal breaks the pydantic mypy integration with `populate_by_name`. \r\n\r\nThis code incorrectly throws an error:\u00a0\r\n```python\r\nfrom pydantic import BaseModel, Field, ConfigDict\r\n\r\ncommon_model_config = ConfigDict(populate_by_name=True)\r\n\r\nclass MyModel(BaseModel):\r\n    model_config = common_model_config\r\n    my_field: int = Field(..., alias=\"my.field\")\r\n\r\nmy_model = MyModel(my_field=1)  # Incorrectly throws mypy: Missing named argument \"my.field\" for \"MyModel\"\r\n```\r\n\r\nThis code works:\r\n```python\r\nfrom pydantic import BaseModel, Field, ConfigDict\r\n\r\nclass MyModel(BaseModel):\r\n    model_config = ConfigDict(populate_by_name=True)\r\n    my_field: int = Field(..., alias=\"my.field\")\r\n\r\nmy_model = MyModel(my_field=1)  # Works as expected\r\n```\r\n\r\nWith the following `mypy.ini`\r\n```ini\r\n[mypy]\r\nplugins = pydantic.mypy\r\n[pydantic-mypy]\r\ninit_typed = True\r\n```\r\n\r\nThis is problematic as I have a lot of models and I want them all to use the same config defined once.\n\n### Example Code\n\n_No response_\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.10.3\r\n        pydantic-core version: 2.27.1\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /home/sbarrett2/tmp/.venv/lib/python3.11/site-packages/pydantic\r\n               python version: 3.11.7 (main, Jan 22 2024, 00:00:00) [GCC 11.4.1 20231218 (Red Hat 11.4.1-3)]\r\n                     platform: Linux-5.14.0-427.el9.x86_64-x86_64-with-glibc2.34\r\n             related packages: typing_extensions-4.12.2 mypy-1.13.0 typing_extensions-4.12.2 mypy-1.13.0\r\n                       commit: unknown\n```\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "BarrettStephen",
                "id": 9559818,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11054/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521117000",
                    "id": 2521117000,
                    "created_at": "2024-12-05T18:24:49Z",
                    "updated_at": "2024-12-05T18:24:49Z",
                    "author_association": "NONE",
                    "body": "This workaround works:\r\n```python\r\nclass MyParent(BaseModel):\r\n    model_config = ConfigDict(populate_by_name=True)\r\n\r\nclass MyModel(MyParent):\r\n    my_field: int = Field(..., alias=\"my.field\")\r\n\r\nmy_model = MyModel(my_field=1)  # Works as expected\r\n```",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521117000/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "BarrettStephen",
                        "id": 9559818,
                        "site_admin": false
                    }
                }
            ]
        },
        "6": {
            "html_url": "https://github.com/pydantic/pydantic/issues/11053",
            "id": 2721036073,
            "number": 11053,
            "title": "Apache24 (mod_wsgi) - server hangs on validation",
            "created_at": "2024-12-05T17:43:10Z",
            "updated_at": "2024-12-06T21:38:20Z",
            "closed_at": null,
            "body": "### Initial Checks\r\n\r\n- [X] I confirm that I'm using Pydantic V2\r\n\r\n### Description\r\n\r\nMinimal reproduction:\r\nhttps://github.com/asaff1/pydantic_mod_wsgi_bug\r\n\r\nI must say it is an extremely weird issue, not sure if it is a pydantic issue or mod_wsgi issue. Still I'd like to understand what is happening.\r\n\r\nI'm running apache24 server on Windows, using mod_wsgi.  I use django + django ninja.\r\n\r\nI have a simple custom field for my endpoint with regex validation\r\n```py\r\nPhoneNumber = Annotated[str, StringConstraints(strip_whitespace=True, pattern=r\"^0\\d\\d-?\\d{7}$\")]\r\n\r\nclass AddPhonePayload(BaseModel):\r\n    phone: PhoneNumber\r\n\r\n    @field_validator(\"phone\")\r\n    @classmethod\r\n    def fix_hyphen(cls, v):\r\n        return v.replace(\"-\", \"\")\r\n```\r\n\r\n```py\r\n@router.post(\"/add_phone\")\r\ndef login_add_phone(request, payload: Form[AddPhonePayload]):\r\n    raise ValueError(\"test\")\r\n    # rest of code.. not relevant\r\n```\r\n\r\nWhen using django `manage.py runserver`, the code works as expected, in this case, it returns server error (500).\r\nBut, when running with apache, this endpoint hangs. Other API endpoints in the app works perfectly. \r\nInitially, I've tried to investigate line by line in the endpoint code, and finally figured that even if the first line is `raise ValueError` as you see, it still hangs in apache. (Browser gets \"Connection reset\" error, no log available in apache access / error logs ).\r\n\r\nNow, the \"solution\" is surprising: in `AddPhonePayload` if I change `phone: PhoneNumber` to `phone: str`, suddenly it works with apache.\r\nAlso, the endpoint hangs on apache only when I enter a **valid** input to the `phone: PhoneNumber` field. If I enter an invalid input (that doesn't pass the regex), I get the \"missing_field\" pydantic error immediately.\r\n\r\nAgain, with `django runserver`, no problems at all!\r\n\r\nHow is this possible? What is happening in pydantic validation under the hood, that causes mod_wsgi + apache to hang (and only with valid input)?\r\n\r\n### Example Code\r\n\r\n_No response_\r\n\r\n### Python, Pydantic & OS Version\r\n\r\n```Text\r\npydantic version: 2.7.1\r\n        pydantic-core version: 2.18.2\r\n          pydantic-core build: profile=release pgo=true\r\n                 install path: C:\\Python39\\Lib\\site-packages\\pydantic\r\n               python version: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]\r\n                     platform: Windows-10-10.0.20348-SP0\r\n             related packages: fastapi-0.115.4 typing_extensions-4.8.0\r\n                       commit: unknown\r\n```\r\n",
            "author_association": "NONE",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "asaff1",
                "id": 18662769,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11053/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521096379",
                    "id": 2521096379,
                    "created_at": "2024-12-05T18:14:26Z",
                    "updated_at": "2024-12-05T18:14:34Z",
                    "author_association": "NONE",
                    "body": "UPDATE: I just tried to rollback pydantic version.\r\nWith this version there is no issue with apache:\r\n```\r\npydantic==2.5.2\r\npydantic_core==2.14.5\r\n```\r\n\r\nWhat was introduced between 2.5.2 and 2.7.1 that can cause this?",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521096379/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asaff1",
                        "id": 18662769,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521302590",
                    "id": 2521302590,
                    "created_at": "2024-12-05T20:12:39Z",
                    "updated_at": "2024-12-05T20:12:39Z",
                    "author_association": "MEMBER",
                    "body": "It will be difficult for use to debug the issue, unless you can provide a repo with clear reproduction steps (I can test on both Linux and Windows).\r\n\r\nI would suggest attaching a debugger or try profiling with [`py-spy`](https://github.com/benfred/py-spy), and see where the code hangs.",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2521302590/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Viicos",
                        "id": 65306057,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522773443",
                    "id": 2522773443,
                    "created_at": "2024-12-06T10:32:25Z",
                    "updated_at": "2024-12-06T10:32:25Z",
                    "author_association": "NONE",
                    "body": "@Viicos \r\nThere you go, I've created a repo with instructions. Please see:\r\nhttps://github.com/asaff1/pydantic_mod_wsgi_bug\r\n\r\nI've tested the bug indeed happens on two Windows machines. You can try different versions of apache, mod-wsgi, I believe that bug will happen anyway. \r\nFrom my experiments, it seems like the issue is when str strip is on. This for some reason cause apache to crash. \r\n\r\nI know it might not strictly be an issue with pydantic, but I'd like to get some insight what is going on there.\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2522773443/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "asaff1",
                        "id": 18662769,
                        "site_admin": false
                    }
                }
            ]
        },
        "7": {
            "html_url": "https://github.com/pydantic/pydantic/issues/11050",
            "id": 2718714973,
            "number": 11050,
            "title": "OpenAPI 3.1.1 Annotated Enumerations support",
            "created_at": "2024-12-04T20:22:27Z",
            "updated_at": "2024-12-04T20:41:31Z",
            "closed_at": null,
            "body": "### Initial Checks\r\n\r\n- [X] I have searched Google & GitHub for similar requests and couldn't find anything\r\n- [X] I have read and followed [the docs](https://docs.pydantic.dev) and still think this feature is missing\r\n\r\n### Description\r\n\r\nIt would be great if `enum.Enum` objects can be represented as a set of annotated values in the UI of API docs.\r\n\r\nPlease, see:\r\n- https://spec.openapis.org/oas/v3.1.1.html#annotated-enumerations\r\n- https://spec.openapis.org/oas/v3.1.1.html#model-with-annotated-enumeration\r\n\r\nAn example of possible coding experience:\r\n```python\r\nimport enum\r\nfrom typing import Annotated\r\nfrom pydantic import json_schema_description, json_schema_title, BaseModel, Field\r\n\r\nclass ColorModel(enum.StrEnum):\r\n  RGB: Annotated[\r\n    str, json_schema_description('Specify colors with the red, green, and blue additive color model'),\r\n    json_schema_title('RGB')\r\n  ] = 'RGB'\r\n  CMYK: Annotated[\r\n    str, json_schema_description('Specify colors with the cyan, magenta, yellow, and black subtractive color model')\r\n  ] = 'CMYK'\r\n\r\nclass Form(BaseModel):\r\n  colorModel: ColorModel = Field(default=ColorModel.RGB, description='Color model')\r\n```\r\n\r\nAn example of sort of matching UI experience (made with https://editor-next.swagger.io/ ):\r\n\r\n![image](https://github.com/user-attachments/assets/64fbf053-c778-4d47-984c-303e2de098f2)\r\n\r\n### Affected Components\r\n\r\n- [ ] [Compatibility between releases](https://docs.pydantic.dev/changelog/)\r\n- [ ] [Data validation/parsing](https://docs.pydantic.dev/concepts/models/#basic-model-usage)\r\n- [ ] [Data serialization](https://docs.pydantic.dev/concepts/serialization/) - `.model_dump()` and `.model_dump_json()`\r\n- [X] [JSON Schema](https://docs.pydantic.dev/concepts/json_schema/)\r\n- [ ] [Dataclasses](https://docs.pydantic.dev/concepts/dataclasses/)\r\n- [ ] [Model Config](https://docs.pydantic.dev/concepts/config/)\r\n- [ ] [Field Types](https://docs.pydantic.dev/api/types/) - adding or changing a particular data type\r\n- [ ] [Function validation decorator](https://docs.pydantic.dev/concepts/validation_decorator/)\r\n- [ ] [Generic Models](https://docs.pydantic.dev/concepts/models/#generic-models)\r\n- [ ] [Other Model behaviour](https://docs.pydantic.dev/concepts/models/) - `model_construct()`, pickling, private attributes, ORM mode\r\n- [ ] [Plugins](https://docs.pydantic.dev/) and integration with other tools - mypy, FastAPI, python-devtools, Hypothesis, VS Code, PyCharm, etc.",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "while0pass",
                "id": 140562,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11050/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "8": {
            "html_url": "https://github.com/pydantic/pydantic/issues/11045",
            "id": 2716229255,
            "number": 11045,
            "title": "Can't acces docs.pydantic.dev",
            "created_at": "2024-12-03T23:43:56Z",
            "updated_at": "2024-12-04T15:42:42Z",
            "closed_at": null,
            "body": "### Initial Checks\n\n- [X] I confirm that I'm using Pydantic V2\n\n### Description\n\nI can't access pydantic docs (as well as accessing logfire dashboard). I believe it's cloudflare, but can't be sure. Both sites simply do not load.\r\n\r\nThis is the output of my  cloudflare trace:\r\n\r\n```\r\nfl=363f207\r\nh=www.cloudflare.com\r\nip=186.151.92.12\r\nts=1733269193.734\r\nvisit_scheme=https\r\nuag=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\ncolo=MIA\r\nsliver=none\r\nhttp=http/3\r\nloc=GT\r\ntls=TLSv1.3\r\nsni=plaintext\r\nwarp=off\r\ngateway=off\r\nrbi=off\r\nkex=X25519MLKEM768\r\n```\r\n\r\n\n\n### Example Code\n\n```Python\nimport pydantic\n```\n\n\n### Python, Pydantic & OS Version\n\n```Text\npydantic version: 2.9.2\r\n        pydantic-core version: 2.23.4\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: /Users/sebas/Dev/vana/vana-pay-mvp/.venv/lib/python3.12/site-packages/pydantic\r\n               python version: 3.12.6 (main, Sep  9 2024, 21:36:32) [Clang 18.1.8 ]\r\n                     platform: macOS-15.1.1-arm64-arm-64bit\r\n             related packages: fastapi-0.115.5 typing_extensions-4.12.2\n```\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "sebasibarguen",
                "id": 291937,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11045/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2517819026",
                    "id": 2517819026,
                    "created_at": "2024-12-04T15:42:41Z",
                    "updated_at": "2024-12-04T15:42:41Z",
                    "author_association": "MEMBER",
                    "body": "Sorry about this, please can you confirm if you're still have issues?",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2517819026/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "samuelcolvin",
                        "id": 4039449,
                        "site_admin": false
                    }
                }
            ]
        },
        "9": {
            "html_url": "https://github.com/pydantic/pydantic/pull/11044",
            "id": 2715943005,
            "number": 11044,
            "title": "WIP: test 3rd party packages",
            "created_at": "2024-12-03T20:44:49Z",
            "updated_at": "2024-12-05T11:04:03Z",
            "closed_at": null,
            "body": "WIP, going to add tests against:\r\n\r\n- `prefect`\r\n- `airflow`\r\n- `fastapi`\r\n- `sqlmodel`\r\n- `langchain`\r\n- https://github.com/openapi-generators/openapi-python-client (inter-dependent models, lots of non straightforward string annotations).\r\n\r\nSeparately, we should move tests with pydantic deps to a daily CI job, like `typing-extensions`\r\n\r\nMaybe more",
            "author_association": "MEMBER",
            "comments": 3,
            "state": "open",
            "user": {
                "login": "sydney-runkle",
                "id": 54324534,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11044/reactions",
                "total_count": 3,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 3,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515522044",
                    "id": 2515522044,
                    "created_at": "2024-12-03T20:48:34Z",
                    "updated_at": "2024-12-03T21:57:48Z",
                    "author_association": "NONE",
                    "body": "## Deploying pydantic-docs with &nbsp;<a href=\"https://pages.dev\"><img alt=\"Cloudflare Pages\" src=\"https://user-images.githubusercontent.com/23264/106598434-9e719e00-654f-11eb-9e59-6167043cfa01.png\" width=\"16\"></a> &nbsp;Cloudflare Pages\n\n<table><tr><td><strong>Latest commit:</strong> </td><td>\n<code>cee8e66</code>\n</td></tr>\n<tr><td><strong>Status:</strong></td><td>&nbsp;\u2705&nbsp; Deploy successful!</td></tr>\n<tr><td><strong>Preview URL:</strong></td><td>\n<a href='https://4d5ac918.pydantic-docs.pages.dev'>https://4d5ac918.pydantic-docs.pages.dev</a>\n</td></tr>\n<tr><td><strong>Branch Preview URL:</strong></td><td>\n<a href='https://testing-expeirment.pydantic-docs.pages.dev'>https://testing-expeirment.pydantic-docs.pages.dev</a>\n</td></tr>\n</table>\n\n[View logs](https://dash.cloudflare.com/?to=/:account/pages/view/pydantic-docs/4d5ac918-b978-4341-808e-4517abe7598c)\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515522044/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": {
                        "id": 85455,
                        "client_id": "Iv1.0879b6ff6c8f7a1a",
                        "slug": "cloudflare-workers-and-pages",
                        "node_id": "MDM6QXBwODU0NTU=",
                        "owner": {
                            "login": "cloudflare",
                            "id": 314135,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjMxNDEzNQ==",
                            "avatar_url": "https://avatars.githubusercontent.com/u/314135?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/cloudflare",
                            "html_url": "https://github.com/cloudflare",
                            "followers_url": "https://api.github.com/users/cloudflare/followers",
                            "following_url": "https://api.github.com/users/cloudflare/following{/other_user}",
                            "gists_url": "https://api.github.com/users/cloudflare/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/cloudflare/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/cloudflare/subscriptions",
                            "organizations_url": "https://api.github.com/users/cloudflare/orgs",
                            "repos_url": "https://api.github.com/users/cloudflare/repos",
                            "events_url": "https://api.github.com/users/cloudflare/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/cloudflare/received_events",
                            "type": "Organization",
                            "user_view_type": "public",
                            "site_admin": false
                        },
                        "name": "Cloudflare Workers and Pages",
                        "description": "",
                        "external_url": "https://cloudflare.com/",
                        "html_url": "https://github.com/apps/cloudflare-workers-and-pages",
                        "created_at": "2020-10-19T20:23:00Z",
                        "updated_at": "2024-09-19T15:15:04Z",
                        "permissions": {
                            "checks": "write",
                            "contents": "read",
                            "deployments": "write",
                            "metadata": "read",
                            "pull_requests": "write"
                        },
                        "events": [
                            "pull_request",
                            "push"
                        ]
                    },
                    "user": {
                        "login": "cloudflare-workers-and-pages[bot]",
                        "id": 73139402,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515524974",
                    "id": 2515524974,
                    "created_at": "2024-12-03T20:50:25Z",
                    "updated_at": "2024-12-03T22:02:34Z",
                    "author_association": "NONE",
                    "body": "## [CodSpeed Performance Report](https://codspeed.io/pydantic/pydantic/branches/testing-expeirment)\n\n### Merging #11044 will **not alter performance**\n\n<sub>Comparing <code>testing-expeirment</code> (cee8e66) with <code>main</code> (3173cf5)</sub>\n\n\n\n### Summary\n\n`\u2705 46` untouched benchmarks  \n\n\n\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515524974/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": {
                        "id": 257293,
                        "client_id": "Iv1.e7febeb3870a36fb",
                        "slug": "codspeed-hq",
                        "node_id": "A_kwHOBvQP3M4AA-0N",
                        "owner": {
                            "login": "CodSpeedHQ",
                            "id": 116658140,
                            "node_id": "O_kgDOBvQP3A",
                            "avatar_url": "https://avatars.githubusercontent.com/u/116658140?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/CodSpeedHQ",
                            "html_url": "https://github.com/CodSpeedHQ",
                            "followers_url": "https://api.github.com/users/CodSpeedHQ/followers",
                            "following_url": "https://api.github.com/users/CodSpeedHQ/following{/other_user}",
                            "gists_url": "https://api.github.com/users/CodSpeedHQ/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/CodSpeedHQ/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/CodSpeedHQ/subscriptions",
                            "organizations_url": "https://api.github.com/users/CodSpeedHQ/orgs",
                            "repos_url": "https://api.github.com/users/CodSpeedHQ/repos",
                            "events_url": "https://api.github.com/users/CodSpeedHQ/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/CodSpeedHQ/received_events",
                            "type": "Organization",
                            "user_view_type": "public",
                            "site_admin": false
                        },
                        "name": "CodSpeed HQ",
                        "description": "## What is [CodSpeed](https://codspeed.io)?\r\nCodSpeed is a **continuous benchmarking** platform that allows you to **track** and **compare** the **performance** of your codebase during development.\r\n\r\nIt uses a smart **runtime engine** to measure the performance of your code in an **accurate** and **reproducible** way without creating a huge **runtime overhead**, unlike traditional benchmarks.\r\n\r\nCodSpeed produces detailed **performance reports** helping you **improve** your codebase **performance**, directly **within your repository provider** (Pull Requests comments, Merge checks, ...).\r\n\r\n## How it works\r\n\r\nThe core of the **performance measurement** is done directly within your **CI environment** through the **CodSpeed Action**. Allowing you to **stay the sole owner** of your data and to keep your **codebase private**.\r\n\r\nOnce the performance data is generated, **only the benchmark results** are sent to the CodSpeed servers to be **analyzed**.\r\n\r\nThen, performance reports are **generated** and **published** directly **within your repository provider**.\r\n\r\n## How long does it take to install?\r\n\r\nIf you're **already benchmarking** your codebase, you can plug your **existing benchmarks** to CodSpeed in **less than 5 minutes** since CodSpeed benchmark's API is **compatible** with the most **popular benchmarking frameworks**.\r\n\r\nIf **you haven't any benchmarks yet**, we provide an **intuitive** benchmarking API that allows you to **create your first benchmarks** in a **few minutes**.\r\n",
                        "external_url": "https://codspeed.io",
                        "html_url": "https://github.com/apps/codspeed-hq",
                        "created_at": "2022-11-02T17:17:13Z",
                        "updated_at": "2024-11-26T12:25:51Z",
                        "permissions": {
                            "actions": "read",
                            "checks": "write",
                            "contents": "read",
                            "emails": "read",
                            "members": "read",
                            "metadata": "read",
                            "organization_self_hosted_runners": "write",
                            "pull_requests": "write",
                            "statuses": "read"
                        },
                        "events": [
                            "organization",
                            "pull_request",
                            "repository",
                            "workflow_job"
                        ]
                    },
                    "user": {
                        "login": "codspeed-hq[bot]",
                        "id": 117304815,
                        "site_admin": false
                    }
                },
                {
                    "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515527231",
                    "id": 2515527231,
                    "created_at": "2024-12-03T20:51:46Z",
                    "updated_at": "2024-12-03T20:51:46Z",
                    "author_association": "CONTRIBUTOR",
                    "body": "## Coverage report\n\n\n<img title=\"Coverage for the whole project is 95.85%. Previous coverage rate is not available, cannot report on evolution.\" src=\"https://img.shields.io/badge/Coverage-95%25-orange.svg\"> <img title=\"100% of the statement lines added by this PR are covered\" src=\"https://img.shields.io/badge/PR%20Coverage-100%25-brightgreen.svg\">\n\n_This PR does not seem to contain any modification to coverable code._\n\n<!-- This comment was produced by python-coverage-comment-action -->",
                    "reactions": {
                        "url": "https://api.github.com/repos/pydantic/pydantic/issues/comments/2515527231/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": {
                        "id": 15368,
                        "client_id": "Iv1.05c79e9ad1f6bdfa",
                        "slug": "github-actions",
                        "node_id": "MDM6QXBwMTUzNjg=",
                        "owner": {
                            "login": "github",
                            "id": 9919,
                            "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=",
                            "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4",
                            "gravatar_id": "",
                            "url": "https://api.github.com/users/github",
                            "html_url": "https://github.com/github",
                            "followers_url": "https://api.github.com/users/github/followers",
                            "following_url": "https://api.github.com/users/github/following{/other_user}",
                            "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
                            "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
                            "subscriptions_url": "https://api.github.com/users/github/subscriptions",
                            "organizations_url": "https://api.github.com/users/github/orgs",
                            "repos_url": "https://api.github.com/users/github/repos",
                            "events_url": "https://api.github.com/users/github/events{/privacy}",
                            "received_events_url": "https://api.github.com/users/github/received_events",
                            "type": "Organization",
                            "user_view_type": "public",
                            "site_admin": false
                        },
                        "name": "GitHub Actions",
                        "description": "Automate your workflow from idea to production",
                        "external_url": "https://help.github.com/en/actions",
                        "html_url": "https://github.com/apps/github-actions",
                        "created_at": "2018-07-30T09:30:17Z",
                        "updated_at": "2024-04-10T20:33:16Z",
                        "permissions": {
                            "actions": "write",
                            "administration": "read",
                            "attestations": "write",
                            "checks": "write",
                            "contents": "write",
                            "deployments": "write",
                            "discussions": "write",
                            "issues": "write",
                            "merge_queues": "write",
                            "metadata": "read",
                            "packages": "write",
                            "pages": "write",
                            "pull_requests": "write",
                            "repository_hooks": "write",
                            "repository_projects": "write",
                            "security_events": "write",
                            "statuses": "write",
                            "vulnerability_alerts": "read"
                        },
                        "events": [
                            "branch_protection_rule",
                            "check_run",
                            "check_suite",
                            "create",
                            "delete",
                            "deployment",
                            "deployment_status",
                            "discussion",
                            "discussion_comment",
                            "fork",
                            "gollum",
                            "issues",
                            "issue_comment",
                            "label",
                            "merge_group",
                            "milestone",
                            "page_build",
                            "project",
                            "project_card",
                            "project_column",
                            "public",
                            "pull_request",
                            "pull_request_review",
                            "pull_request_review_comment",
                            "push",
                            "registry_package",
                            "release",
                            "repository",
                            "repository_dispatch",
                            "status",
                            "watch",
                            "workflow_dispatch",
                            "workflow_run"
                        ]
                    },
                    "user": {
                        "login": "github-actions[bot]",
                        "id": 41898282,
                        "site_admin": false
                    }
                }
            ]
        },
        "10": {
            "html_url": "https://github.com/pydantic/pydantic/issues/11043",
            "id": 2715714364,
            "number": 11043,
            "title": "Poor error messages when validating a discriminated Union of a \"type statement\". ",
            "created_at": "2024-12-03T18:20:40Z",
            "updated_at": "2024-12-03T18:42:57Z",
            "closed_at": null,
            "body": "### Initial Checks\r\n\r\n- [X] I confirm that I'm using Pydantic V2\r\n\r\n### Description\r\n\r\nWhen validating a discriminated Union of a \"type statement\", the errors are **far** worse than when not using a \"type statement\", making it very difficult to understand why the value failed validation.\r\n\r\nIt seems like `pydantic` is duplicating/nesting the `type`, since the (undesirable) output contains \"`tagged-union[union[A,B],union[A,B]]`\", rather than \"`tagged-union[A,B]`\" (as found in the output when not using a type statement). Additionally, we see `A.A.extra_field` instead of `A.extra_field`.\r\n\r\nPossibly related to https://github.com/pydantic/pydantic/issues/6352.\r\n\r\n### Example Code\r\n\r\n```py3\r\nfrom typing import Annotated, Literal\r\n\r\nimport pydantic\r\n\r\n\r\nclass _Base(pydantic.BaseModel):\r\n    model_config = pydantic.ConfigDict(extra=\"forbid\")\r\n\r\nclass A(_Base):\r\n    type: Literal[\"A\"] = \"A\"\r\n    val: int\r\n\r\nclass B(_Base):\r\n    type: Literal[\"B\"] = \"B\"\r\n    val: str\r\n\r\ntype _U = A | B\r\nU = Annotated[_U, pydantic.Field(discriminator=\"type\")]\r\nU_ADAPTER = pydantic.TypeAdapter[U](U)\r\n\r\nU_ADAPTER.validate_python({\"type\": \"A\", \"val\": 1, \"extra_field\": \"oops!\"})\r\n```\r\n\r\n\r\nOutput:\r\n\r\n```log\r\nTraceback (most recent call last):\r\n  File \"<REDACTED_PATH>/pydantic_playground.py\", line 23, in <module>\r\n    U_ADAPTER.validate_python({\"type\": \"A\", \"val\": 1, \"extra_field\": \"oops!\"})\r\n  File \"<REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic/type_adapter.py\", line 144, in wrapped\r\n    return func(self, *args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic/type_adapter.py\", line 375, in validate_python\r\n    return self.validator.validate_python(object, strict=strict, from_attributes=from_attributes, context=context)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\npydantic_core._pydantic_core.ValidationError: 4 validation errors for tagged-union[union[A,B],union[A,B]]\r\nA.A.extra_field\r\n  Extra inputs are not permitted [type=extra_forbidden, input_value='oops!', input_type=str]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden\r\nA.B.type\r\n  Input should be 'B' [type=literal_error, input_value='A', input_type=str]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error\r\nA.B.val\r\n  Input should be a valid string [type=string_type, input_value=1, input_type=int]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type\r\nA.B.extra_field\r\n  Extra inputs are not permitted [type=extra_forbidden, input_value='oops!', input_type=str]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/extra_forbid\r\n```\r\n\r\nReplacing `type _U = A | B` with `_U = A | B`, the error is much improved:\r\n\r\n```log\r\nTraceback (most recent call last):\r\n  File \"<REDACTED_PATH>/pydantic_playground.py\", line 21, in <module>\r\n    U_ADAPTER.validate_python({\"type\": \"A\", \"val\": 1, \"extra_field\": \"oops!\"})\r\n  File \"<REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic/type_adapter.py\", line 144, in wrapped\r\n    return func(self, *args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic/type_adapter.py\", line 375, in validate_python\r\n    return self.validator.validate_python(object, strict=strict, from_attributes=from_attributes, context=context)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\npydantic_core._pydantic_core.ValidationError: 1 validation error for tagged-union[A,B]\r\nA.extra_field\r\n  Extra inputs are not permitted [type=extra_forbidden, input_value='oops!', input_type=str]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden\r\n```\r\n\r\n\r\n### Python, Pydantic & OS Version\r\n\r\n```Text\r\n             pydantic version: 2.9.0\r\n        pydantic-core version: 2.23.2\r\n          pydantic-core build: profile=release pgo=false\r\n                 install path: <REDACTED_PATH>/.venv/lib/python3.12/site-packages/pydantic\r\n               python version: 3.12.7 (main, Oct  2 2024, 16:35:10) [Clang 18.1.8 ]\r\n                     platform: Linux-5.4.0-131-generic-x86_64-with-glibc2.31\r\n             related packages: fastapi-0.115.2 mypy-1.13.0 typing_extensions-4.12.2\r\n                       commit: unknown\r\n```\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "cj81499",
                "id": 9152032,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pydantic/pydantic/issues/11043/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "11": {
            "html_url": "https://github.com/pandas-dev/pandas/pull/60518",
            "id": 2724454656,
            "number": 60518,
            "title": "updated v to conv_val in that function",
            "created_at": "2024-12-07T07:59:42Z",
            "updated_at": "2024-12-07T07:59:42Z",
            "closed_at": null,
            "body": "- [ ] closes #60517 (Replace xxxx with the GitHub issue number)\r\nno issues arose with change-\r\nissue addressed with no problems in functionality",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "migelogali",
                "id": 107483586,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60518/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "12": {
            "html_url": "https://github.com/pandas-dev/pandas/issues/60517",
            "id": 2724454232,
            "number": 60517,
            "title": "DOC: Convert v to conv_val in function for pytables.py",
            "created_at": "2024-12-07T07:58:29Z",
            "updated_at": "2024-12-07T07:58:48Z",
            "closed_at": null,
            "body": "### Pandas version checks\n\n- [X] I have checked that the issue still exists on the latest versions of the docs on `main` [here](https://pandas.pydata.org/docs/dev/)\n\n\n### Location of the documentation\n\npandas\\pandas\\core\\computation\\pytables.py\n\n### Documentation problem\n\nMany instances of just v in this function. Wanted to clarify throughout\n\n### Suggested fix for documentation\n\nChange v to conv_val",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "migelogali",
                "id": 107483586,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60517/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [
                {
                    "login": "migelogali",
                    "id": 107483586,
                    "node_id": "U_kgDOBmgRwg",
                    "avatar_url": "https://avatars.githubusercontent.com/u/107483586?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/migelogali",
                    "html_url": "https://github.com/migelogali",
                    "followers_url": "https://api.github.com/users/migelogali/followers",
                    "following_url": "https://api.github.com/users/migelogali/following{/other_user}",
                    "gists_url": "https://api.github.com/users/migelogali/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/migelogali/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/migelogali/subscriptions",
                    "organizations_url": "https://api.github.com/users/migelogali/orgs",
                    "repos_url": "https://api.github.com/users/migelogali/repos",
                    "events_url": "https://api.github.com/users/migelogali/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/migelogali/received_events",
                    "type": "User",
                    "user_view_type": "public",
                    "site_admin": false
                }
            ],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524995813",
                    "id": 2524995813,
                    "created_at": "2024-12-07T07:58:37Z",
                    "updated_at": "2024-12-07T07:58:37Z",
                    "author_association": "NONE",
                    "body": "take",
                    "reactions": {
                        "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524995813/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "migelogali",
                        "id": 107483586,
                        "site_admin": false
                    }
                }
            ]
        },
        "13": {
            "html_url": "https://github.com/pandas-dev/pandas/pull/60516",
            "id": 2724430662,
            "number": 60516,
            "title": "Added numpy project to ndarray shape and ndim to fix hyperlink",
            "created_at": "2024-12-07T07:02:31Z",
            "updated_at": "2024-12-07T07:02:31Z",
            "closed_at": null,
            "body": "- [X] closes #60515 \r\n\r\nUpdated the \"See Also\" section for ndarray.shape and ndarray.ndim to allow the hyperlinks to work.\r\nLet me know if any additional changes are needed!\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Shubhank-Gyawali",
                "id": 68085066,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60516/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "14": {
            "html_url": "https://github.com/pandas-dev/pandas/issues/60515",
            "id": 2724418032,
            "number": 60515,
            "title": "DOC: methods in see also section in the pandas.DataFrame.shape and  pandas.DataFrame.ndim are not hyperlinks",
            "created_at": "2024-12-07T06:39:22Z",
            "updated_at": "2024-12-07T06:39:30Z",
            "closed_at": null,
            "body": "### Pandas version checks\n\n- [X] I have checked that the issue still exists on the latest versions of the docs on `main` [here](https://pandas.pydata.org/docs/dev/)\n\n\n### Location of the documentation\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.ndim.html\r\n\r\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.shape.html\r\n\n\n### Documentation problem\n\nIn the see also section the ndarray.shape and ndarray.ndim method is listed, but it is not hyperlinks and thus the reader cannot navigate with ease but has to look for them instead.\r\n\n\n### Suggested fix for documentation\n\nAdd numpy.ndarray.shape and numpy.ndarray.ndim in the docstring.\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "Shubhank-Gyawali",
                "id": 68085066,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60515/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524971018",
                    "id": 2524971018,
                    "created_at": "2024-12-07T06:39:29Z",
                    "updated_at": "2024-12-07T06:39:29Z",
                    "author_association": "NONE",
                    "body": "take\r\n",
                    "reactions": {
                        "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524971018/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "Shubhank-Gyawali",
                        "id": 68085066,
                        "site_admin": false
                    }
                }
            ]
        },
        "15": {
            "html_url": "https://github.com/pandas-dev/pandas/pull/60514",
            "id": 2724322752,
            "number": 60514,
            "title": "BUG: Preserve timezone in numpy_dtype for ArrowDtype",
            "created_at": "2024-12-07T04:13:55Z",
            "updated_at": "2024-12-07T05:08:50Z",
            "closed_at": null,
            "body": "- [x] closes #60237\r\n- [x] [Tests added and passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#writing-tests) if fixing a bug or adding a new feature\r\n* Added tests in pandas/tests/dtypes/test_dtypes.py to ensure numpy_dtype preserves timezone information for ArrowDtype.\r\n- [x] All [code checks passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#pre-commit).\r\n- [x] Added [type annotations](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#type-hints) to new arguments/methods/functions.\r\n* Type annotations are already present in the modified numpy_dtype function.\r\n- [x] Added an entry in the latest `doc/source/whatsnew/vX.X.X.rst` file if fixing a bug or adding a new feature.\r\n* Added a note in the bug fixes section: `- Fixed an issue where .convert_dtypes(dtype_backend=\"pyarrow\") would strip timezone information from timezone-aware PyArrow timestamps. [GH#60237](https://github.com/pandas-dev/pandas/issues/60237)\r\n`\r\n\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "Koookadooo",
                "id": 127896060,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60514/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "16": {
            "html_url": "https://github.com/pandas-dev/pandas/pull/60513",
            "id": 2724272340,
            "number": 60513,
            "title": "DOC: fix SA01 for pandas.arrays.NumpyExtensionArray",
            "created_at": "2024-12-07T02:28:05Z",
            "updated_at": "2024-12-07T02:28:05Z",
            "closed_at": null,
            "body": "Similar to issue https://github.com/pandas-dev/pandas/issues/59458.\r\n\r\nFixes:\r\n\r\n`-i \"pandas.arrays.NumpyExtensionArray SA01\" \\`",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "karnbirrandhawa",
                "id": 102620686,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60513/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "17": {
            "html_url": "https://github.com/pandas-dev/pandas/pull/60512",
            "id": 2724260481,
            "number": 60512,
            "title": "DOC: Add hyperlink to ndarray.size in DataFrame.size docstring (#60368)",
            "created_at": "2024-12-07T02:05:09Z",
            "updated_at": "2024-12-07T05:56:43Z",
            "closed_at": null,
            "body": "- [x] closes #60368 \r\n\r\nThis PR addresses issue #60368 by adding a hyperlink to the \"See Also\" section of the docstring for DataFrame.size.\r\n\r\n- Updated the \"See Also\" section to include a clickable link to `ndarray.size`.\r\n\r\nLet me know if any additional changes are needed!\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "johnpaulfeliciano98",
                "id": 102118062,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60512/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "18": {
            "html_url": "https://github.com/pandas-dev/pandas/pull/60510",
            "id": 2724025165,
            "number": 60510,
            "title": "BUG: Fix float32 precision issues in pd.to_datetime",
            "created_at": "2024-12-06T22:20:45Z",
            "updated_at": "2024-12-06T22:27:07Z",
            "closed_at": null,
            "body": "- [x] closes #60506(Replace xxxx with the GitHub issue number)\r\n- [x] [Tests added and passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#writing-tests) if fixing a bug or adding a new feature\r\n- [x] All [code checks passed](https://pandas.pydata.org/pandas-docs/dev/development/contributing_codebase.html#pre-commit).\r\n- [x] Added an entry in the latest `doc/source/whatsnew/vX.X.X.rst` file if fixing a bug or adding a new feature.\r\n",
            "author_association": "CONTRIBUTOR",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "snitish",
                "id": 7503884,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60510/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "19": {
            "html_url": "https://github.com/pandas-dev/pandas/pull/60509",
            "id": 2723783267,
            "number": 60509,
            "title": "DOC: fix docstrings validation for pandas.core.groupby.DataFrameGroupBy.boxplot",
            "created_at": "2024-12-06T19:36:02Z",
            "updated_at": "2024-12-06T20:26:59Z",
            "closed_at": null,
            "body": "Part of Issue #60365\r\n\r\nFixed docstring validation for pandas.core.groupby.DataFrameGroupBy.boxplot\r\n\r\nThe following errors were addressed:\r\n\r\n- PR07    Parameter \"grouped\" has no description\r\n- PR07    Parameter \"fontsize\" has no description\r\n- PR07    Parameter \"rot\" has no description\r\n- PR07    Parameter \"grid\" has no description\r\n- PR07    Parameter \"ax\" has no description\r\n- PR07    Parameter \"figsize\" has no description\r\n- RT03    Return value has no description\r\n- RT03    Return value has no description\r\n- SA01    See Also section not found\r\n",
            "author_association": "NONE",
            "comments": 0,
            "state": "open",
            "user": {
                "login": "jmalp",
                "id": 75514361,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60509/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": []
        },
        "20": {
            "html_url": "https://github.com/pandas-dev/pandas/issues/60508",
            "id": 2723639037,
            "number": 60508,
            "title": "BUG: multi-index on columns with bool level values does not roundtrip through parquet",
            "created_at": "2024-12-06T18:03:15Z",
            "updated_at": "2024-12-06T22:22:14Z",
            "closed_at": null,
            "body": "### Pandas version checks\n\n- [X] I have checked that this issue has not already been reported.\n\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\n\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\n\n\n### Reproducible Example\n\n```python\nimport pandas as pd\r\n\r\ndf = pd.DataFrame([[1, 2], [4, 5]], columns=pd.MultiIndex.from_tuples([(True, 'B'), (False, 'C')]))\r\ndf.to_parquet('test.parquet', engine='pyarrow')\r\npd.read_parquet('test.parquet', engine='pyarrow') # fails\r\n\r\n# now save out with multi-index on index instead of columns:\r\ndf.T.to_parquet('test.parquet', engine='pyarrow')\r\npd.read_parquet('test.parquet', engine='pyarrow') # succeeds\r\n\r\n# now save out with int instead of bool index:\r\ndf = pd.DataFrame([[1, 2], [4, 5]], columns=pd.MultiIndex.from_tuples([(1, 'B'), (0, 'C')]))\r\ndf.to_parquet('test.parquet', engine='pyarrow')\r\npd.read_parquet('test.parquet', engine='pyarrow') # succeeds\n```\n\n\n### Issue Description\n\nParquet IO with multi-index indices or columns is supported. However, if the multi-index contains a level with bools and if that multi-index is on the columns, then while the parquet can be written with the `pyarrow` engine, it cannot be read back in using `pyarrow`.\r\n\r\nThe traceback I get is below:\r\n<details>\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<python-input-0>\", line 5, in <module>\r\n    pd.read_parquet('test.parquet', engine='pyarrow') # fails\r\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/io/parquet.py\", line 649, in read_parquet\r\n    return impl.read(\r\n           ~~~~~~~~~^\r\n        path,\r\n        ^^^^^\r\n    ...<6 lines>...\r\n        **kwargs,\r\n        ^^^^^^^^^\r\n    )\r\n    ^\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/io/parquet.py\", line 270, in read\r\n    result = arrow_table_to_pandas(\r\n        pa_table,\r\n        dtype_backend=dtype_backend,\r\n        to_pandas_kwargs=to_pandas_kwargs,\r\n    )\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/io/_util.py\", line 86, in arrow_table_to_pandas\r\n    df = table.to_pandas(types_mapper=types_mapper, **to_pandas_kwargs)\r\n  File \"pyarrow/array.pxi\", line 887, in pyarrow.lib._PandasConvertible.to_pandas\r\n  File \"pyarrow/table.pxi\", line 5132, in pyarrow.lib.Table._to_pandas\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pyarrow/pandas_compat.py\", line 790, in table_to_dataframe\r\n    columns = _deserialize_column_index(table, all_columns, column_indexes)\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pyarrow/pandas_compat.py\", line 928, in _deserialize_column_index\r\n    columns = _reconstruct_columns_from_metadata(columns, column_indexes)\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pyarrow/pandas_compat.py\", line 1145, in _reconstruct_columns_from_metadata\r\n    return pd.MultiIndex(new_levels, labels, names=columns.names)\r\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/core/indexes/multi.py\", line 341, in __new__\r\n    new_codes = result._verify_integrity()\r\n  File \"/Users/zpincus/Documents/Research/Hexagon/pandas-test/.pixi/envs/default/lib/python3.13/site-packages/pandas/core/indexes/multi.py\", line 427, in _verify_integrity\r\n    raise ValueError(\r\n        f\"Level values must be unique: {list(level)} on level {i}\"\r\n    )\r\nValueError: Level values must be unique: [True, True] on level 0\r\n```\r\n\r\n</details>\r\n\r\n\r\nFurther note that the `fastparquet` can neither read nor write such dataframes. There are a panoply of different errors on read/write with multi-index with `fastparquet` depending on whether the multi-index is on the index or columns, and whether the index has level names or not. I (or someone) should probably open separate bugs on that...\r\n\r\nNB. the issue repros in a clean environment with only python, pip, pandas (dev), and pyarrow/fastparquet directly installed.\n\n### Expected Behavior\n\nParquet IO should support bool multi-index levels on columns.\n\n### Installed Versions\n\n<details>\r\n\r\n```\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit                : a36c44e129bd2f70c25d5dec89cb2893716bdbf6\r\npython                : 3.13.1\r\npython-bits           : 64\r\nOS                    : Darwin\r\nOS-release            : 23.6.0\r\nVersion               : Darwin Kernel Version 23.6.0: Wed Jul 31 20:50:00 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6031\r\nmachine               : arm64\r\nprocessor             : arm\r\nbyteorder             : little\r\nLC_ALL                : None\r\nLANG                  : en_US.UTF-8\r\nLOCALE                : en_US.UTF-8\r\n\r\npandas                : 3.0.0.dev0+1757.ga36c44e129\r\nnumpy                 : 2.1.3\r\ndateutil              : 2.9.0.post0\r\npip                   : 24.3.1\r\nCython                : None\r\nsphinx                : None\r\nIPython               : None\r\nadbc-driver-postgresql: None\r\nadbc-driver-sqlite    : None\r\nbs4                   : None\r\nblosc                 : None\r\nbottleneck            : None\r\nfastparquet           : 2024.11.0\r\nfsspec                : 2024.10.0\r\nhtml5lib              : None\r\nhypothesis            : None\r\ngcsfs                 : None\r\njinja2                : None\r\nlxml.etree            : None\r\nmatplotlib            : None\r\nnumba                 : None\r\nnumexpr               : None\r\nodfpy                 : None\r\nopenpyxl              : None\r\npsycopg2              : None\r\npymysql               : None\r\npyarrow               : 18.1.0\r\npyreadstat            : None\r\npytest                : None\r\npython-calamine       : None\r\npytz                  : 2024.1\r\npyxlsb                : None\r\ns3fs                  : None\r\nscipy                 : None\r\nsqlalchemy            : None\r\ntables                : None\r\ntabulate              : None\r\nxarray                : None\r\nxlrd                  : None\r\nxlsxwriter            : None\r\nzstandard             : None\r\ntzdata                : 2024.2\r\nqtpy                  : None\r\npyqt5                 : None\r\n```\r\n\r\n</details>\r\n",
            "author_association": "NONE",
            "comments": 1,
            "state": "open",
            "user": {
                "login": "zpincus",
                "id": 174217,
                "site_admin": false
            },
            "reactions": {
                "url": "https://api.github.com/repos/pandas-dev/pandas/issues/60508/reactions",
                "total_count": 0,
                "+1": 0,
                "-1": 0,
                "laugh": 0,
                "hooray": 0,
                "confused": 0,
                "heart": 0,
                "rocket": 0,
                "eyes": 0
            },
            "assignees": [],
            "comments_details": [
                {
                    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524290823",
                    "id": 2524290823,
                    "created_at": "2024-12-06T22:22:13Z",
                    "updated_at": "2024-12-06T22:22:13Z",
                    "author_association": "NONE",
                    "body": "i would like to contribute ",
                    "reactions": {
                        "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/2524290823/reactions",
                        "total_count": 0,
                        "+1": 0,
                        "-1": 0,
                        "laugh": 0,
                        "hooray": 0,
                        "confused": 0,
                        "heart": 0,
                        "rocket": 0,
                        "eyes": 0
                    },
                    "performed_via_github_app": null,
                    "user": {
                        "login": "kevkle",
                        "id": 33009654,
                        "site_admin": false
                    }
                }
            ]
        }
    },
    "issue_dependency": {
        "1": {
            "issue_id": 2723895504,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "2": {
            "issue_id": 2722705421,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "3": {
            "issue_id": 2722537903,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "4": {
            "issue_id": 2722317263,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "5": {
            "issue_id": 2721083628,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "6": {
            "issue_id": 2721036073,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "7": {
            "issue_id": 2718714973,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "8": {
            "issue_id": 2716229255,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "9": {
            "issue_id": 2715943005,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "10": {
            "issue_id": 2715714364,
            "dependency_id": "8266eef7e42be20168720a0bd4a00c6d32d4b8b4dba991a16f4d93f92d37f752"
        },
        "11": {
            "issue_id": 2724454656,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "12": {
            "issue_id": 2724454232,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "13": {
            "issue_id": 2724430662,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "14": {
            "issue_id": 2724418032,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "15": {
            "issue_id": 2724322752,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "16": {
            "issue_id": 2724272340,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "17": {
            "issue_id": 2724260481,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "18": {
            "issue_id": 2724025165,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "19": {
            "issue_id": 2723783267,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        },
        "20": {
            "issue_id": 2723639037,
            "dependency_id": "e9d54701e0c44d6ba25b842bc99323c6804eaddb0095b8d82de45d53b17b9da4"
        }
    }
}