[
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6793",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6793/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6793/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6793/events",
    "html_url": "https://github.com/psf/requests/issues/6793",
    "id": 2488949689,
    "node_id": "I_kwDOABTKOs6UWlu5",
    "number": 6793,
    "title": "Cannot close the proxy",
    "user": {
      "login": "invisifire",
      "id": 59678894,
      "node_id": "MDQ6VXNlcjU5Njc4ODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/59678894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/invisifire",
      "html_url": "https://github.com/invisifire",
      "followers_url": "https://api.github.com/users/invisifire/followers",
      "following_url": "https://api.github.com/users/invisifire/following{/other_user}",
      "gists_url": "https://api.github.com/users/invisifire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/invisifire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/invisifire/subscriptions",
      "organizations_url": "https://api.github.com/users/invisifire/orgs",
      "repos_url": "https://api.github.com/users/invisifire/repos",
      "events_url": "https://api.github.com/users/invisifire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/invisifire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-08-27T10:37:43Z",
    "updated_at": "2024-08-27T10:37:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\nIn windows pycharm jupyterlab when i open windows system proxy requests will use the proxy i set on windows system.\r\nbut cannot close this proxy direct to the internet . I try  \r\n```python\r\nresponse = requests.post(url, headers=headers, json=data, proxies=None)\r\nresponse = requests.post(url, headers=headers, json=data, proxies={})\r\nresponse = requests.post(url, headers=headers, json=data, proxies=\"\")\r\n```\r\ncan't work\r\n## Expected Result\r\n\r\ndon't use proxy I set on windows\r\n<!-- What you expected. -->\r\n## Actual Result\r\nI can check this connection on clash\r\n<!-- What happened instead. -->\r\n\r\n## Reproduction Steps\r\nwindows  requests                  2.31.0\r\nuse pycharm and jupyter\r\n```python\r\nimport requests\r\nresponse = requests.post(url, headers=headers, json=data, proxies=None)# I try None {} \"\" []\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"41.0.7\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"300000c0\",\r\n    \"version\": \"23.2.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"300000c0\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.18\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6793/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6791",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6791/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6791/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6791/events",
    "html_url": "https://github.com/psf/requests/pull/6791",
    "id": 2467952666,
    "node_id": "PR_kwDOABTKOs54dkRv",
    "number": 6791,
    "title": "Do not load ssl context during import",
    "user": {
      "login": "holmanb",
      "id": 16310367,
      "node_id": "MDQ6VXNlcjE2MzEwMzY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16310367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holmanb",
      "html_url": "https://github.com/holmanb",
      "followers_url": "https://api.github.com/users/holmanb/followers",
      "following_url": "https://api.github.com/users/holmanb/following{/other_user}",
      "gists_url": "https://api.github.com/users/holmanb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holmanb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holmanb/subscriptions",
      "organizations_url": "https://api.github.com/users/holmanb/orgs",
      "repos_url": "https://api.github.com/users/holmanb/repos",
      "events_url": "https://api.github.com/users/holmanb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holmanb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-08-15T12:25:52Z",
    "updated_at": "2024-08-15T12:25:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6791",
      "html_url": "https://github.com/psf/requests/pull/6791",
      "diff_url": "https://github.com/psf/requests/pull/6791.diff",
      "patch_url": "https://github.com/psf/requests/pull/6791.patch",
      "merged_at": null
    },
    "body": "Possible fix for https://github.com/psf/requests/issues/6790.\r\n\r\nThis removes the ssl context load from the import path, and instead caches the context the first time that it is requested.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6791/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6790",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6790/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6790/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6790/events",
    "html_url": "https://github.com/psf/requests/issues/6790",
    "id": 2467944147,
    "node_id": "I_kwDOABTKOs6TGdbT",
    "number": 6790,
    "title": "Import time regression",
    "user": {
      "login": "holmanb",
      "id": 16310367,
      "node_id": "MDQ6VXNlcjE2MzEwMzY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16310367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holmanb",
      "html_url": "https://github.com/holmanb",
      "followers_url": "https://api.github.com/users/holmanb/followers",
      "following_url": "https://api.github.com/users/holmanb/following{/other_user}",
      "gists_url": "https://api.github.com/users/holmanb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holmanb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holmanb/subscriptions",
      "organizations_url": "https://api.github.com/users/holmanb/orgs",
      "repos_url": "https://api.github.com/users/holmanb/repos",
      "events_url": "https://api.github.com/users/holmanb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holmanb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-08-15T12:19:37Z",
    "updated_at": "2024-08-15T12:28:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\nBetween 2.31.0 and 2.32.3, import time increased by ~25%. This appears to have been caused by https://github.com/psf/requests/pull/6667, which changed the expensive `load_verify_locations()` to run at import time (in 2.32.0).\r\n\r\n## Reproduction Steps\r\n\r\nCompare import time of versions with:\r\n```bash\r\n$ python3 -X importtime -c 'import requests' 2> requests_import.log\r\n$ tuna requests_import.log\r\n```\r\n\r\n2.31.0\r\n\r\n![image](https://github.com/user-attachments/assets/65d11607-6342-406e-8d59-4d8c934b05cb)\r\n\r\n\r\n2.32.3:\r\n\r\n![image](https://github.com/user-attachments/assets/55d79382-daf2-45e0-8e6c-fcc080683fc6)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6790/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6790/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6785",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6785/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6785/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6785/events",
    "html_url": "https://github.com/psf/requests/pull/6785",
    "id": 2453668217,
    "node_id": "PR_kwDOABTKOs53uRNY",
    "number": 6785,
    "title": "Update conf.py to fix roman year",
    "user": {
      "login": "nothingface0",
      "id": 8612771,
      "node_id": "MDQ6VXNlcjg2MTI3NzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8612771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nothingface0",
      "html_url": "https://github.com/nothingface0",
      "followers_url": "https://api.github.com/users/nothingface0/followers",
      "following_url": "https://api.github.com/users/nothingface0/following{/other_user}",
      "gists_url": "https://api.github.com/users/nothingface0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nothingface0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nothingface0/subscriptions",
      "organizations_url": "https://api.github.com/users/nothingface0/orgs",
      "repos_url": "https://api.github.com/users/nothingface0/repos",
      "events_url": "https://api.github.com/users/nothingface0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nothingface0/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-08-07T14:41:34Z",
    "updated_at": "2024-08-08T17:50:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6785",
      "html_url": "https://github.com/psf/requests/pull/6785",
      "diff_url": "https://github.com/psf/requests/pull/6785.diff",
      "patch_url": "https://github.com/psf/requests/pull/6785.patch",
      "merged_at": null
    },
    "body": "Very minor fix, which did however catch my eye: Fix for the invalid roman year in the documentation footer.\r\n\r\nSame as #6389, which seems to be closed. \r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6785/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6784",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6784/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6784/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6784/events",
    "html_url": "https://github.com/psf/requests/issues/6784",
    "id": 2447794874,
    "node_id": "I_kwDOABTKOs6R5mK6",
    "number": 6784,
    "title": "Multiple path separators causes bad requests ",
    "user": {
      "login": "martin-pil",
      "id": 58504806,
      "node_id": "MDQ6VXNlcjU4NTA0ODA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/58504806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martin-pil",
      "html_url": "https://github.com/martin-pil",
      "followers_url": "https://api.github.com/users/martin-pil/followers",
      "following_url": "https://api.github.com/users/martin-pil/following{/other_user}",
      "gists_url": "https://api.github.com/users/martin-pil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martin-pil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martin-pil/subscriptions",
      "organizations_url": "https://api.github.com/users/martin-pil/orgs",
      "repos_url": "https://api.github.com/users/martin-pil/repos",
      "events_url": "https://api.github.com/users/martin-pil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martin-pil/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-08-05T07:15:00Z",
    "updated_at": "2024-08-05T07:16:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\nI'm assuming that change in https://github.com/psf/requests/pull/6644 is the cause of this changed behavior that operations with // in path fails. It seems to be related to Authentication as it is the only thing I could find that does not get trimmed by the change in 6644.\r\n\r\n## Expected Result\r\n\r\nSimilar behavior as before 2.32.0\r\n\r\n## Actual Result\r\n\r\nRequest captured by wireshark, note that this is the second request as the first got a 401\r\n\r\nHypertext Transfer Protocol\r\n    POST /axis-cgi/capturemode.cgi HTTP/1.1\\r\\n\r\n    Host: 192.168.0.1\\r\\n\r\n    User-Agent: python-requests/2.32.3\\r\\n\r\n    Accept-Encoding: gzip, deflate, zstd\\r\\n\r\n    Accept: */*\\r\\n\r\n    Connection: keep-alive\\r\\n\r\n    Content-Length: 50\\r\\n\r\n     [truncated]Authorization: Digest username=\"root\", realm=\"AXIS_B8A44F45D62F\", nonce=\"UKH3vekeBgA=2b0d57c2d8b8eb15307576e30309cb7b23a2304c\", uri=\"//axis-cgi/capturemode.cgi\", response=\"0a51943f746a0d88c6574f662b457a9c\", algorithm=\"MD5\", qo\r\n         username=\"root\"\r\n         realm=\"AXIS_B8A44F45D62F\"\r\n         nonce=\"UKH3vekeBgA=2b0d57c2d8b8eb15307576e30309cb7b23a2304c\"\r\n         uri=\"//axis-cgi/capturemode.cgi\"\r\n         response=\"0a51943f746a0d88c6574f662b457a9c\"\r\n         algorithm=\"MD5\"\r\n         qop=\"auth\"\r\n         nc=00000001\r\n    \\r\\n\r\n    [Full request URI: http://172.26.21.128/axis-cgi/capturemode.cgi]\r\n    [HTTP request 2/2]\r\n    [Prev request in frame: 10]\r\n    [Response in frame: 19]\r\n    File Data: 50 bytes\r\n    Data (50 bytes)\r\n\r\nResponse:\r\nHypertext Transfer Protocol\r\n    HTTP/1.1 400 Bad Request\\r\\n\r\n    Date: Mon, 05 Aug 2024 06:25:23 GMT\\r\\n\r\n    Server: Apache/2.4.58 (Unix) OpenSSL/3.0.13\\r\\n\r\n    X-Content-Type-Options: nosniff\\r\\n\r\n    X-Frame-Options: SAMEORIGIN\\r\\n\r\n    X-XSS-Protection: 1; mode=block\\r\\n\r\n     [truncated]Content-Security-Policy: default-src 'self'; frame-ancestors 'self'; connect-src 'self' https://*.google-analytics.com https://*.analytics.google.com https://*.googletagmanager.com https://*.axis.com mediastream: blob:; script\r\n    Content-Length: 226\\r\\n\r\n    Connection: close\\r\\n\r\n    Content-Type: text/html; charset=iso-8859-1\\r\\n\r\n    \\r\\n\r\n    [HTTP response 2/2]\r\n    [Time since request: 0.001411000 seconds]\r\n    [Prev request in frame: 10]\r\n    [Prev response in frame: 13]\r\n    [Request in frame: 16]\r\n    [Request URI: http://192.168.0.1/axis-cgi/capturemode.cgi]\r\n    File Data: 226 bytes\r\n\r\n## Reproduction Steps\r\nThis was run at a axis camera\r\n\r\n```python\r\nimport requests\r\n\r\nurl = \"http://192.168.01//axis-cgi/capturemode.cgi\"\r\nbody = {\r\n            \"apiVersion\": \"1.0\",\r\n            \"method\": \"getCaptureModes\"}\r\n\r\nauth = requests.auth.HTTPDigestAuth(\"root\", \"pass\")\r\nresponse = requests.post(url=url, data=json.dumps(body),\r\n                                              auth=auth, proxies=dict(http=None, https=None))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"42.0.8\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.1.0-21-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"30200020\",\r\n    \"version\": \"24.1.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"300000b0\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6784/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6782",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6782/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6782/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6782/events",
    "html_url": "https://github.com/psf/requests/issues/6782",
    "id": 2445493555,
    "node_id": "I_kwDOABTKOs6Rw0Uz",
    "number": 6782,
    "title": "Doc: missing example",
    "user": {
      "login": "nixilb",
      "id": 64604304,
      "node_id": "MDQ6VXNlcjY0NjA0MzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/64604304?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nixilb",
      "html_url": "https://github.com/nixilb",
      "followers_url": "https://api.github.com/users/nixilb/followers",
      "following_url": "https://api.github.com/users/nixilb/following{/other_user}",
      "gists_url": "https://api.github.com/users/nixilb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nixilb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nixilb/subscriptions",
      "organizations_url": "https://api.github.com/users/nixilb/orgs",
      "repos_url": "https://api.github.com/users/nixilb/repos",
      "events_url": "https://api.github.com/users/nixilb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nixilb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-08-02T17:55:53Z",
    "updated_at": "2024-08-03T07:13:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Looking at quickstart: a copy paste example that just works with status error magagement, is missing.\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6782/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6777",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6777/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6777/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6777/events",
    "html_url": "https://github.com/psf/requests/issues/6777",
    "id": 2439802444,
    "node_id": "I_kwDOABTKOs6RbG5M",
    "number": 6777,
    "title": "What should be Overwritten to ignore all verification in a custom adapter? ",
    "user": {
      "login": "achapkowski",
      "id": 5131271,
      "node_id": "MDQ6VXNlcjUxMzEyNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5131271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achapkowski",
      "html_url": "https://github.com/achapkowski",
      "followers_url": "https://api.github.com/users/achapkowski/followers",
      "following_url": "https://api.github.com/users/achapkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/achapkowski/orgs",
      "repos_url": "https://api.github.com/users/achapkowski/repos",
      "events_url": "https://api.github.com/users/achapkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achapkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-07-31T11:21:38Z",
    "updated_at": "2024-07-31T18:11:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hello,\r\n\r\nI wish to use a custom adapter that I can use to access servers with old and expired certificates so I can automate the updating of the SSL certs.  The doc isn't really clear, so I consider this a bug. \r\n\r\nI have the following:\r\n\r\n```\r\n###########################################################################\r\nclass TruststoreAdapter(HTTPAdapter):\r\n    \"\"\"An adapter for requests.  This supplies the a custom ssl_context to a set of requests.\"\"\"\r\n\r\n    custom_context: truststore.SSLContext | ssl.SSLContext = None\r\n\r\n    def __init__(\r\n        self,\r\n        pool_connections=DEFAULT_POOLSIZE,\r\n        pool_maxsize=DEFAULT_POOLSIZE,\r\n        max_retries=DEFAULT_RETRIES,\r\n        pool_block=DEFAULT_POOLBLOCK,\r\n        ssl_context: truststore.SSLContext | ssl.SSLContext | None = None,\r\n    ):\r\n        self.custom_context = ssl_context\r\n\r\n        super().__init__(\r\n            pool_connections=pool_connections,\r\n            pool_maxsize=pool_maxsize,\r\n            max_retries=max_retries,\r\n            pool_block=pool_block,\r\n        )\r\n\r\n    # ---------------------------------------------------------------------\r\n    def __str__(self) -> str:\r\n        return f\"< {self.__class__.__name__} >\"\r\n\r\n    # ---------------------------------------------------------------------\r\n    def __repr__(self) -> str:\r\n        return f\"< {self.__class__.__name__} >\"\r\n\r\n    # ---------------------------------------------------------------------\r\n    def init_poolmanager(self, connections, maxsize, block=False):\r\n        ctx = self.custom_context\r\n        return super().init_poolmanager(connections, maxsize, block, ssl_context=ctx)\r\n```\r\n\r\nWhere the SSL Context is defined as:\r\n\r\n```\r\nssl_context: truststore.SSLContext = truststore.SSLContext()\r\nssl_context.check_hostname = False\r\nssl_context.verify_mode = 0 # No check\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6777/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6773",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6773/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6773/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6773/events",
    "html_url": "https://github.com/psf/requests/pull/6773",
    "id": 2433915924,
    "node_id": "PR_kwDOABTKOs52qqDN",
    "number": 6773,
    "title": "Clarify error description in cloning instructions",
    "user": {
      "login": "anodo123",
      "id": 40581230,
      "node_id": "MDQ6VXNlcjQwNTgxMjMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/40581230?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anodo123",
      "html_url": "https://github.com/anodo123",
      "followers_url": "https://api.github.com/users/anodo123/followers",
      "following_url": "https://api.github.com/users/anodo123/following{/other_user}",
      "gists_url": "https://api.github.com/users/anodo123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anodo123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anodo123/subscriptions",
      "organizations_url": "https://api.github.com/users/anodo123/orgs",
      "repos_url": "https://api.github.com/users/anodo123/repos",
      "events_url": "https://api.github.com/users/anodo123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anodo123/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-07-28T12:46:52Z",
    "updated_at": "2024-07-28T12:46:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6773",
      "html_url": "https://github.com/psf/requests/pull/6773",
      "diff_url": "https://github.com/psf/requests/pull/6773.diff",
      "patch_url": "https://github.com/psf/requests/pull/6773.patch",
      "merged_at": null
    },
    "body": "This clarifies the error description in the 'Cloning the repository' section of the README. The current wording mentions 'an error about a bad commit', which is somewhat vague. I've updated it to 'an error about a bad commit timestamp', which more accurately describes the nature of the error referenced in issue #2690. This small change improves the clarity of the documentation, helping users better understand the potential issue they might encounter when cloning the repository and why they need to use the specified Git flag.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6773/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6772",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6772/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6772/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6772/events",
    "html_url": "https://github.com/psf/requests/pull/6772",
    "id": 2431274058,
    "node_id": "PR_kwDOABTKOs52h5mG",
    "number": 6772,
    "title": "chore(charset issue): Resolution for issue 6102 ",
    "user": {
      "login": "kalingth",
      "id": 75703762,
      "node_id": "MDQ6VXNlcjc1NzAzNzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/75703762?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kalingth",
      "html_url": "https://github.com/kalingth",
      "followers_url": "https://api.github.com/users/kalingth/followers",
      "following_url": "https://api.github.com/users/kalingth/following{/other_user}",
      "gists_url": "https://api.github.com/users/kalingth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kalingth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kalingth/subscriptions",
      "organizations_url": "https://api.github.com/users/kalingth/orgs",
      "repos_url": "https://api.github.com/users/kalingth/repos",
      "events_url": "https://api.github.com/users/kalingth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kalingth/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-07-26T02:07:05Z",
    "updated_at": "2024-07-26T04:26:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6772",
      "html_url": "https://github.com/psf/requests/pull/6772",
      "diff_url": "https://github.com/psf/requests/pull/6772.diff",
      "patch_url": "https://github.com/psf/requests/pull/6772.patch",
      "merged_at": null
    },
    "body": "Resolution for the issue https://github.com/psf/requests/issues/6102\r\n\r\nNow, If a username and password are passed already encoded, they will not be affected by being expected as a string. In this case, the function will encode the string-formatted attributes into bytes using the latin-1 charset by default due to convention.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6772/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6770",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6770/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6770/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6770/events",
    "html_url": "https://github.com/psf/requests/pull/6770",
    "id": 2428863569,
    "node_id": "PR_kwDOABTKOs52aMBL",
    "number": 6770,
    "title": "Header-based auth class",
    "user": {
      "login": "vilhelmen",
      "id": 5308250,
      "node_id": "MDQ6VXNlcjUzMDgyNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5308250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vilhelmen",
      "html_url": "https://github.com/vilhelmen",
      "followers_url": "https://api.github.com/users/vilhelmen/followers",
      "following_url": "https://api.github.com/users/vilhelmen/following{/other_user}",
      "gists_url": "https://api.github.com/users/vilhelmen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vilhelmen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vilhelmen/subscriptions",
      "organizations_url": "https://api.github.com/users/vilhelmen/orgs",
      "repos_url": "https://api.github.com/users/vilhelmen/repos",
      "events_url": "https://api.github.com/users/vilhelmen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vilhelmen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-07-25T02:59:15Z",
    "updated_at": "2024-07-25T02:59:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6770",
      "html_url": "https://github.com/psf/requests/pull/6770",
      "diff_url": "https://github.com/psf/requests/pull/6770.diff",
      "patch_url": "https://github.com/psf/requests/pull/6770.patch",
      "merged_at": null
    },
    "body": "This adds a short and simple header-based auth backend (and tests!). This allows greater flexibility in auth mechanisms out of the box.\r\n\r\nFor example, I'm working on on an internal library to interface with OGC services and three providers use three different auth mechanisms. Being able to consolidate this via the auth parameter seems like the correct solution.\r\n\r\nIt's worth noting that because of when this executes, auth objects override the headers provided both by the session and request call. This has been appropriately documented, and I don't believe any other option would be preferable.\r\n\r\nLooks like someone proposed this in 2018 (#4823) but was rejected because of a feature freeze at the time.\r\n\r\nIf this is acceptable, would the team be interested in something similar like HTTPParamAuth that uses a dict of parameters in a similar fashion? Going back to my library example, one provider uses oauth, which requests supports, one uses headers, and one uses a custom api key parameter. Totally willing to add it to this PR if it simplifies approval :)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6770/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6767",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6767/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6767/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6767/events",
    "html_url": "https://github.com/psf/requests/pull/6767",
    "id": 2417032156,
    "node_id": "PR_kwDOABTKOs51z-s-",
    "number": 6767,
    "title": "Revert caching a default SSLContext",
    "user": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-07-18T18:00:33Z",
    "updated_at": "2024-07-18T18:02:54Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": true,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6767",
      "html_url": "https://github.com/psf/requests/pull/6767",
      "diff_url": "https://github.com/psf/requests/pull/6767.diff",
      "patch_url": "https://github.com/psf/requests/pull/6767.patch",
      "merged_at": null
    },
    "body": "This PR reverts the changes from #6667 to the previous behavior. Due to the number of edge cases and concurrency issues we've encountered with this change, we've decided the benefit doesn't currently outweigh the pain to existing infrastructure. We've iterated on a few tries to keep this functionality in place, but are still receiving reports of novel issues with this behavior.\r\n\r\nWe may be able to revisit this in a later version of Requests but we'll need a much more comprehensive test plan.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6767/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6764",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6764/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6764/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6764/events",
    "html_url": "https://github.com/psf/requests/issues/6764",
    "id": 2396860900,
    "node_id": "I_kwDOABTKOs6O3THk",
    "number": 6764,
    "title": "permission denied regression reading extracted certs with multiple users",
    "user": {
      "login": "jmelahman",
      "id": 23436978,
      "node_id": "MDQ6VXNlcjIzNDM2OTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23436978?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmelahman",
      "html_url": "https://github.com/jmelahman",
      "followers_url": "https://api.github.com/users/jmelahman/followers",
      "following_url": "https://api.github.com/users/jmelahman/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmelahman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmelahman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmelahman/subscriptions",
      "organizations_url": "https://api.github.com/users/jmelahman/orgs",
      "repos_url": "https://api.github.com/users/jmelahman/repos",
      "events_url": "https://api.github.com/users/jmelahman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmelahman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-07-09T00:54:35Z",
    "updated_at": "2024-07-09T01:43:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "If it is necessary to [extract the certs from a zip file](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/src/requests/utils.py#L296-L302), they'll be written to somewhere like `/tmp/cacert.pem`. This is problematic for subsequent users who may not have have permission to access this `/tmp/cacert.pem`\r\n\r\nSeems related to https://github.com/psf/requests/pull/6667\r\n\r\nNote, this issue was not present with version `2.31.0`\r\n\r\n## Expected Result\r\ntwo users should be able to extract zipped certs on the same filesystem without issue \r\n\r\n## Actual Result\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.9/runpy.py\", line 197, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/usr/lib/python3.9/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/jamison/.../__main__.py\", line 83, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/..., line 22, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/..., line 13, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/.../pypi__39__requests_2_32_2/requests/__init__.py\", line 164, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/.../pypi__39__requests_2_32_2/requests/api.py\", line 11, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/.../pypi__39__requests_2_32_2/requests/sessions.py\", line 15, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 627, in _load_backward_compatible\r\n  File \"<frozen zipimport>\", line 259, in load_module\r\n  File \"/home/jamison/.../pypi__39__requests_2_32_2/requests/adapters.py\", line 77, in <module>\r\nPermissionError: [Errno 13] Permission denied\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```shell\r\ntouch /tmp/test_utils.py\r\nchown root:root /tmp/test_utils.py\r\npython -m pytest test/test_utils.py\r\n```\r\n\r\nThe full end-to-end steps are a bit involved. A,\r\n`__main__,py`\r\n```\r\nimport requests\r\n```\r\nas a standalone zip executable is enough to repro (though I haven't been able to repro with executables that unarchive themselves such as `zipapp` -- in this case, we're using something similar to google's [subpar](https://github.com/google/subpar)).\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.12.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.6.32-1-lts\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30300000\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6764/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6764/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6750",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6750/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6750/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6750/events",
    "html_url": "https://github.com/psf/requests/pull/6750",
    "id": 2370269383,
    "node_id": "PR_kwDOABTKOs5zXnNH",
    "number": 6750,
    "title": "catch FileNotFoundError if there aren't any certificates",
    "user": {
      "login": "eaglegai",
      "id": 31752768,
      "node_id": "MDQ6VXNlcjMxNzUyNzY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31752768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eaglegai",
      "html_url": "https://github.com/eaglegai",
      "followers_url": "https://api.github.com/users/eaglegai/followers",
      "following_url": "https://api.github.com/users/eaglegai/following{/other_user}",
      "gists_url": "https://api.github.com/users/eaglegai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eaglegai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eaglegai/subscriptions",
      "organizations_url": "https://api.github.com/users/eaglegai/orgs",
      "repos_url": "https://api.github.com/users/eaglegai/repos",
      "events_url": "https://api.github.com/users/eaglegai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eaglegai/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-06-24T13:32:09Z",
    "updated_at": "2024-08-12T07:55:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6750",
      "html_url": "https://github.com/psf/requests/pull/6750",
      "diff_url": "https://github.com/psf/requests/pull/6750.diff",
      "patch_url": "https://github.com/psf/requests/pull/6750.patch",
      "merged_at": null
    },
    "body": "fix https://github.com/psf/requests/issues/6749",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6750/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6749",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6749/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6749/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6749/events",
    "html_url": "https://github.com/psf/requests/issues/6749",
    "id": 2370262817,
    "node_id": "I_kwDOABTKOs6NR1ch",
    "number": 6749,
    "title": "catch FileNotFoundError if there aren't any certificates",
    "user": {
      "login": "eaglegai",
      "id": 31752768,
      "node_id": "MDQ6VXNlcjMxNzUyNzY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31752768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eaglegai",
      "html_url": "https://github.com/eaglegai",
      "followers_url": "https://api.github.com/users/eaglegai/followers",
      "following_url": "https://api.github.com/users/eaglegai/following{/other_user}",
      "gists_url": "https://api.github.com/users/eaglegai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eaglegai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eaglegai/subscriptions",
      "organizations_url": "https://api.github.com/users/eaglegai/orgs",
      "repos_url": "https://api.github.com/users/eaglegai/repos",
      "events_url": "https://api.github.com/users/eaglegai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eaglegai/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 136589914,
        "node_id": "MDU6TGFiZWwxMzY1ODk5MTQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Needs%20Info",
        "name": "Needs Info",
        "color": "e11d21",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-06-24T13:29:04Z",
    "updated_at": "2024-07-03T15:00:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\nI set verify to False, but it still need cerfiticate.\r\nAs we have catched ImportError, why not catch FileNotFoundError together?\r\n## Expected Result\r\nwon't Traceback\r\n<!-- What you expected. -->\r\n\r\n## Actual Result\r\n```\r\n[root@localhost requests]# ./test-requests.py\r\nTraceback (most recent call last):\r\n  File \"/root/test/requests/./test-requests.py\", line 2, in <module>\r\n    import requests\r\n  File \"/usr/lib/python3.9/site-packages/requests/__init__.py\", line 136, in <module>\r\n    from .api import request, get, head, post, patch, put, delete, options\r\n  File \"/usr/lib/python3.9/site-packages/requests/api.py\", line 13, in <module>\r\n    from . import sessions\r\n  File \"/usr/lib/python3.9/site-packages/requests/sessions.py\", line 28, in <module>\r\n    from .adapters import HTTPAdapter\r\n  File \"/usr/lib/python3.9/site-packages/requests/adapters.py\", line 65, in <module>\r\n    _preloaded_ssl_context.load_verify_locations(\r\nFileNotFoundError: [Errno 2] No such file or directory\r\n```\r\n<!-- What happened instead. -->\r\n\r\n## Reproduction Steps\r\n```\r\n#!/usr/bin/python3\r\nimport requests\r\nr = requests.get(\"http://127.0.0.1\",verify=False)\r\nprint(r.text)\r\n```\r\n\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6749/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6749/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6738",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6738/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6738/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6738/events",
    "html_url": "https://github.com/psf/requests/issues/6738",
    "id": 2347707641,
    "node_id": "I_kwDOABTKOs6L7yz5",
    "number": 6738,
    "title": "requests.utils. atomic_open does not respect umask",
    "user": {
      "login": "austinzh",
      "id": 8947557,
      "node_id": "MDQ6VXNlcjg5NDc1NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8947557?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/austinzh",
      "html_url": "https://github.com/austinzh",
      "followers_url": "https://api.github.com/users/austinzh/followers",
      "following_url": "https://api.github.com/users/austinzh/following{/other_user}",
      "gists_url": "https://api.github.com/users/austinzh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/austinzh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/austinzh/subscriptions",
      "organizations_url": "https://api.github.com/users/austinzh/orgs",
      "repos_url": "https://api.github.com/users/austinzh/repos",
      "events_url": "https://api.github.com/users/austinzh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/austinzh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      },
      {
        "id": 162780722,
        "node_id": "MDU6TGFiZWwxNjI3ODA3MjI=",
        "url": "https://api.github.com/repos/psf/requests/labels/Question/Not%20a%20bug",
        "name": "Question/Not a bug",
        "color": "777777",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-06-12T03:13:01Z",
    "updated_at": "2024-09-01T17:03:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Create a new file using requests.utils. atomic_open with umask set to 0o000\r\n\r\n## Expected Result\r\n0o777\r\n\r\n## Actual Result\r\n0o600\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\n\r\nimport os\r\nimport requests.utils\r\n\r\nos.umask(0o000)\r\n\r\nwith requests.utils.atomic_open('example.txt') as f:\r\n    f.write(b'Hello, world!')\r\n\r\nfile_stat = os.stat('example.txt')\r\nprint(oct(file_stat.st_mode & 0o777))\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.2.0-1016-aws\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6738/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6735",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6735/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6735/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6735/events",
    "html_url": "https://github.com/psf/requests/issues/6735",
    "id": 2338910221,
    "node_id": "I_kwDOABTKOs6LaPAN",
    "number": 6735,
    "title": "requests 2.32.3 with IPv6 link local address fails with error: [Errno -2] Name or service not known",
    "user": {
      "login": "pytech66",
      "id": 171971141,
      "node_id": "U_kgDOCkASRQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/171971141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pytech66",
      "html_url": "https://github.com/pytech66",
      "followers_url": "https://api.github.com/users/pytech66/followers",
      "following_url": "https://api.github.com/users/pytech66/following{/other_user}",
      "gists_url": "https://api.github.com/users/pytech66/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pytech66/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pytech66/subscriptions",
      "organizations_url": "https://api.github.com/users/pytech66/orgs",
      "repos_url": "https://api.github.com/users/pytech66/repos",
      "events_url": "https://api.github.com/users/pytech66/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pytech66/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-06-06T18:29:52Z",
    "updated_at": "2024-06-27T08:52:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When using an IPv6 link local address with requests > v2.31.0, seeing an error `[Errno -2] Name or service not known`. The same works with requests 2.31.0.\r\nurllib3 2.2.1 also works successfully with IPv6 link local address .\r\n\r\n### urllib3 2.2.1 with IPv6 link local address\r\n```\r\n>>> import urllib3\r\n>>> http = urllib3.PoolManager(cert_reqs='CERT_NONE')\r\n>>> res = http.request(\"GET\", \"https://[fe80::5eed:8cff:fe00:0da4%ens192]/redfish/v1\")\r\n/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py:1103: InsecureRequestWarning: Unverified HTTPS request is being made to host 'fe80::5eed:8cff:fe00:0da4%ens192'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings\r\n  warnings.warn(\r\n>>> res.status\r\n200\r\n```\r\n\r\n### requests 2.31.0 with IPv6 link local address\r\n```\r\n>>> import requests\r\n>>> res = requests.get(\"https://[fe80::5eed:8cff:fe00:0da4%ens192]/redfish/v1\", verify=False)\r\n>>> res.status_code\r\n200\r\n```\r\n\r\n## Expected Result\r\n\r\nSuccessful connection with versions 2.32.x\r\n\r\n## Actual Result\r\n\r\n```\r\n>>> import requests\r\n>>> res = requests.get(\"https://[fe80::5eed:8cff:fe00:0da4%ens192]/redfish/v1\", verify=False)\r\nTraceback (most recent call last):\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connection.py\", line 198, in _new_conn\r\n    sock = connection.create_connection(\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/util/connection.py\", line 60, in create_connection\r\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\r\n  File \"/usr/lib/python3.10/socket.py\", line 955, in getaddrinfo\r\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\r\nsocket.gaierror: [Errno -2] Name or service not known\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 793, in urlopen\r\n    response = self._make_request(\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 491, in _make_request\r\n    raise new_e\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 467, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 1099, in _validate_conn\r\n    conn.connect()\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connection.py\", line 616, in connect\r\n    self.sock = sock = self._new_conn()\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connection.py\", line 205, in _new_conn\r\n    raise NameResolutionError(self.host, self, e) from e\r\nurllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x716b63d403d0>: Failed to resolve 'fe80::5eed:8cf00:0da4%25ens192' ([Errno -2] Name or service not known)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/adapters.py\", line 667, in send\r\n    resp = conn.urlopen(\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 847, in urlopen\r\n    retries = retries.increment(\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/urllib3/util/retry.py\", line 515, in increment\r\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='fe80::5eed:8cff:fe00:0da4%25ens192', port=443): Max retries exceeded with urredfish/v1 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x716b63d403d0>: Failed to resolve 'fe80::5eed::fe00:0da4%25ens192' ([Errno -2] Name or service not known)\"))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/api.py\", line 73, in get\r\n    return request(\"get\", url, params=params, **kwargs)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/api.py\", line 59, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/sessions.py\", line 589, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/sessions.py\", line 703, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/root/new-requests/venv/lib/python3.10/site-packages/requests/adapters.py\", line 700, in send\r\n    raise ConnectionError(e, request=request)\r\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='fe80::5eed:8cff:fe00:0da4%25ens192', port=443): Max retries exceeded with: /redfish/v1 (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x716b63d403d0>: Failed to resolve 'fe80::5ecff:fe00:0da4%25ens192' ([Errno -2] Name or service not known)\"))\r\n```\r\n\r\n\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nres = requests.get(\"https://[fe80::5eed:8cff:fe00:0da4%ens192]/redfish/v1\", verify=False)\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.12\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.5.0-27-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6735/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6734",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6734/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6734/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6734/events",
    "html_url": "https://github.com/psf/requests/issues/6734",
    "id": 2333148611,
    "node_id": "I_kwDOABTKOs6LEQXD",
    "number": 6734,
    "title": "requests 2.32.3 & urllib3 1.26.18 issue with unicode put",
    "user": {
      "login": "frenzymadness",
      "id": 5688939,
      "node_id": "MDQ6VXNlcjU2ODg5Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5688939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frenzymadness",
      "html_url": "https://github.com/frenzymadness",
      "followers_url": "https://api.github.com/users/frenzymadness/followers",
      "following_url": "https://api.github.com/users/frenzymadness/following{/other_user}",
      "gists_url": "https://api.github.com/users/frenzymadness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frenzymadness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frenzymadness/subscriptions",
      "organizations_url": "https://api.github.com/users/frenzymadness/orgs",
      "repos_url": "https://api.github.com/users/frenzymadness/repos",
      "events_url": "https://api.github.com/users/frenzymadness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frenzymadness/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2024-06-04T10:23:23Z",
    "updated_at": "2024-07-02T01:23:12Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I'm building requests 2.32.3 in Fedora Linux and I have a problem with `test_unicode_header_name` - the test hangs.\r\n\r\nIt's reproducible - when I use urllib3 at least 2.0.2, the code works fine, with urllib3 1.26.18, it hangs waiting for a response.\r\n\r\n## Expected Result\r\n\r\nOlder urllib3 is still allowed (`urllib3>=1.21.1,<3`) so it should work.\r\n\r\n## Actual Result\r\n\r\nThe call to `requests.put` hangs and if killed, the stacktrace is:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/home/lbalhar/Software/requests/src/requests/api.py\", line 130, in put\r\n    return request(\"put\", url, data=data, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/Software/requests/src/requests/api.py\", line 59, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/Software/requests/src/requests/sessions.py\", line 589, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/Software/requests/src/requests/sessions.py\", line 703, in send\r\n    r = adapter.send(request, **kwargs)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/Software/requests/src/requests/adapters.py\", line 667, in send\r\n    resp = conn.urlopen(\r\n           ^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/.virtualenvs/requests/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 715, in urlopen\r\n    httplib_response = self._make_request(\r\n                       ^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/lbalhar/.virtualenvs/requests/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 467, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/home/lbalhar/.virtualenvs/requests/lib/python3.12/site-packages/urllib3/connectionpool.py\", line 462, in _make_request\r\n    httplib_response = conn.getresponse()\r\n                       ^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.12/http/client.py\", line 1428, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib64/python3.12/http/client.py\", line 331, in begin\r\n    version, status, reason = self._read_status()\r\n                              ^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.12/http/client.py\", line 292, in _read_status\r\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.12/socket.py\", line 707, in readinto\r\n    return self._sock.recv_into(b)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^\r\nKeyboardInterrupt\r\n```\r\n\r\n## Reproduction Steps\r\n\r\nStart httpbin instance, install urllib3<2 and then:\r\n\r\n```python\r\nimport requests\r\nrequests.put(\"http://127.0.0.1:8080/put\", headers={\"Content-Type\": \"application/octet-stream\"}, data=\"\\xff\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.12.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.8.10-300.fc40.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30200010\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.18\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6734/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6731",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6731/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6731/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6731/events",
    "html_url": "https://github.com/psf/requests/pull/6731",
    "id": 2328435863,
    "node_id": "PR_kwDOABTKOs5xKLfz",
    "number": 6731,
    "title": "Address certificate loading regression",
    "user": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-05-31T19:05:10Z",
    "updated_at": "2024-09-04T12:09:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": true,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6731",
      "html_url": "https://github.com/psf/requests/pull/6731",
      "diff_url": "https://github.com/psf/requests/pull/6731.diff",
      "patch_url": "https://github.com/psf/requests/pull/6731.patch",
      "merged_at": null
    },
    "body": "## Overview\r\nThis PR is intended to address two distinct issues introduced with the default cert optimizations originally introduced in 2.32.0. While we continue to refine the settings considered when opting into our optimized context, we'll no longer use the new default if any custom cert values are supplied. This addresses the concurrency issues raised in #6726.\r\n\r\nThe second piece of this will be ensuring that when opting out of the default SSLContext, we're still supplying to the default CA Cert bundle correctly. This addresses the problems noticed in https://github.com/psf/requests/pull/6710#issuecomment-2137802782 and #6730.\r\n\r\n## Considerations\r\n\r\nWe're now duplicating a decent chunk of the [logic from cert_verify](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/src/requests/adapters.py#L324-L357) inside [_urllib3_request_context](https://github.com/psf/requests/blob/0e322af87745eff34caffe4df68456ebc20d9068/src/requests/adapters.py#L115-L128) but without our validation exceptions. That's a potential vector for behavioral shifts in the future. We _could_ consolidate some of this behavior in one place but it's going to require constructing a dict and using `setattr` on our `conn` in `cert_verify` while setting `pool_kwargs` in `_urllib3_request_context`. I started writing that up but it feels clunky. This is probably going to be a tradeoff of risking drift like we have with Session settings and binding the two behaviors together too tightly.\r\n\r\n## Testing\r\nI'd like to codify the issues we've encountered through the whole 2.32.x saga in tests to hopefully avoid this in the future. Doing it cleanly without relying on external endpoints is proving to be a bit more involved than I'd like. I think we can harness some of the infrastructure added in #6662, but I haven't had a chance to really dig into that.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6731/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6731/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6730",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6730/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6730/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6730/events",
    "html_url": "https://github.com/psf/requests/issues/6730",
    "id": 2327497338,
    "node_id": "I_kwDOABTKOs6Kusp6",
    "number": 6730,
    "title": "Certificate loading regression with HTTPAdapters in 2.32.3",
    "user": {
      "login": "ricellis",
      "id": 10698320,
      "node_id": "MDQ6VXNlcjEwNjk4MzIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/10698320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricellis",
      "html_url": "https://github.com/ricellis",
      "followers_url": "https://api.github.com/users/ricellis/followers",
      "following_url": "https://api.github.com/users/ricellis/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricellis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricellis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricellis/subscriptions",
      "organizations_url": "https://api.github.com/users/ricellis/orgs",
      "repos_url": "https://api.github.com/users/ricellis/repos",
      "events_url": "https://api.github.com/users/ricellis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricellis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2024-05-31T10:26:46Z",
    "updated_at": "2024-07-12T22:11:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\n\r\nIt appears that in version `2.32.3` default certificates are no longer loaded for custom `HTTPAdapter` contexts when they were previously.\r\n\r\nI guess this might be a duplicate/related to https://github.com/psf/requests/issues/6726#issuecomment-2138406456.\r\nAlso related to https://github.com/psf/requests/pull/6710#issuecomment-2137802782 - adding `load_default_certs()` resolves the issue, but this wasn't required in previous versions and thus makes upgrading to `2.32.3` breaking.\r\n\r\n## Expected Result\r\n\r\n<!-- What you expected. -->\r\n\r\nWith the code below using `requests` version `2.32.2` I get the URL content with no error.\r\n\r\n## Actual Result\r\n\r\n<!-- What happened instead. -->\r\n\r\nUsing `2.32.3` I get:\r\n```\r\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='raw.githubusercontent.com', port=443): Max retries exceeded with url: /psf/requests/main/MANIFEST.in (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1006)')))\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport ssl\r\nfrom requests.adapters import HTTPAdapter, DEFAULT_POOLBLOCK\r\nfrom urllib3.util.ssl_ import create_urllib3_context\r\n\r\n# adapted from https://github.com/IBM/python-sdk-core/blob/1c207385de627df5d12fd0a0ebd04717ce5bb29d/ibm_cloud_sdk_core/utils.py#L34\r\nclass SSLHTTPAdapter(HTTPAdapter):\r\n    \"\"\"Wraps the original HTTP adapter and adds additional SSL context.\"\"\"\r\n\r\n    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):\r\n        \"\"\"Create and use custom SSL configuration.\"\"\"\r\n\r\n        ssl_context = create_urllib3_context()\r\n        ssl_context.minimum_version = ssl.TLSVersion.TLSv1_2\r\n        # ssl_context.load_default_certs() # Adding this resolves the certificate issue but it was not required before\r\n\r\n        super().init_poolmanager(connections, maxsize, block, ssl_context=ssl_context, **pool_kwargs)\r\n\r\nsession = requests.Session()\r\nhttp_adapter = SSLHTTPAdapter()\r\nsession.mount('https://', http_adapter)\r\n\r\nprint(session.get(url='https://raw.githubusercontent.com/psf/requests/main/MANIFEST.in').text)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.2.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"23.5.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30300000\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6730/reactions",
      "total_count": 15,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6730/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6726",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6726/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6726/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6726/events",
    "html_url": "https://github.com/psf/requests/issues/6726",
    "id": 2324074364,
    "node_id": "I_kwDOABTKOs6Kho98",
    "number": 6726,
    "title": "Multiple concurrent client certs broken with v2.32.3",
    "user": {
      "login": "jeffreytolar",
      "id": 26555408,
      "node_id": "MDQ6VXNlcjI2NTU1NDA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/26555408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffreytolar",
      "html_url": "https://github.com/jeffreytolar",
      "followers_url": "https://api.github.com/users/jeffreytolar/followers",
      "following_url": "https://api.github.com/users/jeffreytolar/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffreytolar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffreytolar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffreytolar/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffreytolar/orgs",
      "repos_url": "https://api.github.com/users/jeffreytolar/repos",
      "events_url": "https://api.github.com/users/jeffreytolar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffreytolar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2024-05-29T19:20:08Z",
    "updated_at": "2024-09-05T12:55:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "We use `requests` with multiple mTLS client certificates - each certificate is signed by the same CA, but they have different subjects - each subject has different permissions. Each distinct client cert is used by a different `requests.Session`\r\nAdditionally, we make use of `ThreadPoolExecutor` to make many requests in parallel.\r\nWhen client certs are in use, urllib3 will [load the cert into the SSL context](https://github.com/urllib3/urllib3/blob/b07a669bd970d69847801148286b726f0570b625/src/urllib3/util/ssl_.py#L454-L458), which, with concurrent requests, will cause the shared SSL context to get modified while it's in use.\r\n\r\nThe reproducer actually fails with an exception - when we first encountered this, we were seeing the wrong certs get used. (That was with different versions of python and openssl, however, and as mentioned above, they're all signed by the same CA, unlike the reproducer)\r\n\r\n\r\n## Expected Result\r\n\r\nThe reproducer below, when run with `requests-2.31.0`:\r\n```\r\n$ ./bin/python3 test.py\r\n/tmp/py/test.py:24: DeprecationWarning: X509Extension support in pyOpenSSL is deprecated. You should use the APIs in cryptography.\r\n  crypto.X509Extension(b\"subjectAltName\", False, b\"DNS:localhost, IP:127.0.0.1\")\r\n/tmp/py/test.py:50: DeprecationWarning: ssl.PROTOCOL_TLSv1_2 is deprecated\r\n  self.ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\r\nServer started on port 8443...\r\n  OK client2: CN: client2 / URL: /client2\r\n  OK client3: CN: client3 / URL: /client3\r\n  OK client1: CN: client1 / URL: /client1\r\n```\r\n\r\n## Actual Result\r\n\r\nWhen run with `requests-2.32.3`:\r\n```\r\n$ ./bin/python3 test.py\r\n/tmp/py/test.py:24: DeprecationWarning: X509Extension support in pyOpenSSL is deprecated. You should use the APIs in cryptography.\r\n  crypto.X509Extension(b\"subjectAltName\", False, b\"DNS:localhost, IP:127.0.0.1\")\r\n/tmp/py/test.py:50: DeprecationWarning: ssl.PROTOCOL_TLSv1_2 is deprecated\r\n  self.ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\r\nServer started on port 8443...\r\nFAIL client1: HTTPSConnectionPool(host='127.0.0.1', port=8443): Max retries exceeded with url: /client1 (Caused by SSLError(SSLError(116, '[X509: KEY_VALUES_MISMATCH] key values mismatch (_ssl.c:3926)')))\r\nFAIL client3: HTTPSConnectionPool(host='127.0.0.1', port=8443): Max retries exceeded with url: /client3 (Caused by SSLError(SSLError(116, '[X509: KEY_VALUES_MISMATCH] key values mismatch (_ssl.c:3926)')))\r\n  OK client2: CN: client2 / URL: /client2\r\n```\r\n\r\n## Reproduction Steps\r\n\r\nGist: https://gist.github.com/jeffreytolar/ea05b3092df12dc6e5b518e58e6821ad ; this generates a few sets of key/certs, hackily sets the default CA bundle, and then makes a few concurrent requests, each using a distinct client cert.\r\n\r\nWith:\r\n```\r\n$ pip freeze\r\ncertifi==2024.2.2\r\ncffi==1.16.0\r\ncharset-normalizer==3.3.2\r\ncryptography==42.0.7\r\nidna==3.7\r\npycparser==2.22\r\npyOpenSSL==24.1.0\r\nrequests==2.32.3\r\nurllib3==2.2.1\r\n```\r\n(top level dependencies are `pyOpenSSL` and `requests`)\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"42.0.7\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.8\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.15.0-105-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"30200010\",\r\n    \"version\": \"24.1.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"300000d0\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6726/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6726/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6722",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6722/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6722/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6722/events",
    "html_url": "https://github.com/psf/requests/issues/6722",
    "id": 2316526442,
    "node_id": "I_kwDOABTKOs6KE2Nq",
    "number": 6722,
    "title": "Enhance Error Messaging for Connection Failures",
    "user": {
      "login": "craetona",
      "id": 102687650,
      "node_id": "U_kgDOBh7jog",
      "avatar_url": "https://avatars.githubusercontent.com/u/102687650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/craetona",
      "html_url": "https://github.com/craetona",
      "followers_url": "https://api.github.com/users/craetona/followers",
      "following_url": "https://api.github.com/users/craetona/following{/other_user}",
      "gists_url": "https://api.github.com/users/craetona/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/craetona/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/craetona/subscriptions",
      "organizations_url": "https://api.github.com/users/craetona/orgs",
      "repos_url": "https://api.github.com/users/craetona/repos",
      "events_url": "https://api.github.com/users/craetona/events{/privacy}",
      "received_events_url": "https://api.github.com/users/craetona/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-05-25T01:06:34Z",
    "updated_at": "2024-09-07T21:34:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When making an HTTP request using the requests library, I encountered a connection failure. The error message provided was not very clear or actionable, especially for someone new to the library. Enhancing these error messages to provide more detailed and actionable information would significantly improve the developer experience.\r\n\r\n## Expected Result\r\n\r\nI expected the error message to include more detailed information about the potential causes of the connection failure and suggestions for troubleshooting steps.\r\n\r\n## Actual Result\r\n\r\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='osudle.com', port=443): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x000001A9F6DB93C0>: Failed to establish a new connection: [WinError 10051] A socket operation was related to an unavailable network'))\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nr = requests.get(\"http://osudle.com', timeout=20)\r\n\r\nprint(r.status_code)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\npython -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.2\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.18\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6722/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6722/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6720",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6720/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6720/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6720/events",
    "html_url": "https://github.com/psf/requests/pull/6720",
    "id": 2313635571,
    "node_id": "PR_kwDOABTKOs5wXrSG",
    "number": 6720,
    "title": "Start testing on 3.13 beta",
    "user": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2024-05-23T19:02:21Z",
    "updated_at": "2024-08-08T08:58:38Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": true,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6720",
      "html_url": "https://github.com/psf/requests/pull/6720",
      "diff_url": "https://github.com/psf/requests/pull/6720.diff",
      "patch_url": "https://github.com/psf/requests/pull/6720.patch",
      "merged_at": null
    },
    "body": "It looks like we're currently blocked on wheels for a few testing dependencies so this isn't mergable currently but we'll use this PR to monitor upstream support from other projects. Once those blockers are moved, we can merge this into our CI to prepare for the upcoming release candidates.\r\n\r\nCurrently it looks like `flsgger` and `greenlet` are having issues from httpbin. I think we have an open proposal/request to make `flsgger` optional which seems fine. `greenlet` currently has a proposed patch from Victor Stinner so I would assume that's resolved sooner than later.",
    "closed_by": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6720/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6720/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6718",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6718/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6718/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6718/events",
    "html_url": "https://github.com/psf/requests/pull/6718",
    "id": 2312650768,
    "node_id": "PR_kwDOABTKOs5wUSDJ",
    "number": 6718,
    "title": "grammar fixes",
    "user": {
      "login": "domx4q",
      "id": 39739545,
      "node_id": "MDQ6VXNlcjM5NzM5NTQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/39739545?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domx4q",
      "html_url": "https://github.com/domx4q",
      "followers_url": "https://api.github.com/users/domx4q/followers",
      "following_url": "https://api.github.com/users/domx4q/following{/other_user}",
      "gists_url": "https://api.github.com/users/domx4q/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domx4q/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domx4q/subscriptions",
      "organizations_url": "https://api.github.com/users/domx4q/orgs",
      "repos_url": "https://api.github.com/users/domx4q/repos",
      "events_url": "https://api.github.com/users/domx4q/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domx4q/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-23T11:19:51Z",
    "updated_at": "2024-05-23T11:19:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6718",
      "html_url": "https://github.com/psf/requests/pull/6718",
      "diff_url": "https://github.com/psf/requests/pull/6718.diff",
      "patch_url": "https://github.com/psf/requests/pull/6718.patch",
      "merged_at": null
    },
    "body": "This pull request contains a few grammatical corrections. The changes aim to improve the clarity and readability of the documentation and comments within the code.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6718/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6711",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6711/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6711/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6711/events",
    "html_url": "https://github.com/psf/requests/issues/6711",
    "id": 2308638504,
    "node_id": "I_kwDOABTKOs6Jmwco",
    "number": 6711,
    "title": "breaking aws s3 usage with requests 2.32.0",
    "user": {
      "login": "kristianelliott80",
      "id": 34159454,
      "node_id": "MDQ6VXNlcjM0MTU5NDU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34159454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kristianelliott80",
      "html_url": "https://github.com/kristianelliott80",
      "followers_url": "https://api.github.com/users/kristianelliott80/followers",
      "following_url": "https://api.github.com/users/kristianelliott80/following{/other_user}",
      "gists_url": "https://api.github.com/users/kristianelliott80/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kristianelliott80/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kristianelliott80/subscriptions",
      "organizations_url": "https://api.github.com/users/kristianelliott80/orgs",
      "repos_url": "https://api.github.com/users/kristianelliott80/repos",
      "events_url": "https://api.github.com/users/kristianelliott80/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kristianelliott80/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 13,
    "created_at": "2024-05-21T16:04:59Z",
    "updated_at": "2024-07-03T10:36:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "requests 2.32.0 introduced a change https://github.com/psf/requests/pull/6644 that strips double /. \r\n\r\nThis has introduced an issue where generated presigned urls for s3 keys that start with a / can no longer be used. requests now strips that second / meaning that the key is modified and the signature does not match resulting in 403 errors. We can adjust to remove the leading / in our keys but this may be affecting other users or use cases\r\n\r\n## Expected Result\r\n\r\nTo be able to use presigned_urls for s3 keys with leading \"/\"\r\n\r\n## Actual Result\r\n\r\nURL that was passed was modified resulting in a 403 error response from aws\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport boto3\r\ns3 = boto3.client('s3')\r\nbucket = \"bucket\"\r\nkey = \"/key_with_leading_slash.txt\"\r\npresigned_url = s3.generate_presigned_url(\"get_object\", Params={'Bucket': bucket, 'Key': key})\r\nrequests.get(presigned_url)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.1.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.32.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.15\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6711/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6711/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6709",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6709/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6709/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6709/events",
    "html_url": "https://github.com/psf/requests/pull/6709",
    "id": 2308104459,
    "node_id": "PR_kwDOABTKOs5wErz-",
    "number": 6709,
    "title": "Add default timeout",
    "user": {
      "login": "sigmavirus24",
      "id": 240830,
      "node_id": "MDQ6VXNlcjI0MDgzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigmavirus24",
      "html_url": "https://github.com/sigmavirus24",
      "followers_url": "https://api.github.com/users/sigmavirus24/followers",
      "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
      "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
      "repos_url": "https://api.github.com/users/sigmavirus24/repos",
      "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/35",
      "html_url": "https://github.com/psf/requests/milestone/35",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/35/labels",
      "id": 11076316,
      "node_id": "MI_kwDOABTKOs4AqQLc",
      "number": 35,
      "title": "2.33.0",
      "description": "",
      "creator": {
        "login": "nateprewitt",
        "id": 5271761,
        "node_id": "MDQ6VXNlcjUyNzE3NjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nateprewitt",
        "html_url": "https://github.com/nateprewitt",
        "followers_url": "https://api.github.com/users/nateprewitt/followers",
        "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
        "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
        "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
        "repos_url": "https://api.github.com/users/nateprewitt/repos",
        "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 3,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2024-05-20T14:16:54Z",
      "updated_at": "2024-05-21T12:26:27Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2024-05-21T11:46:58Z",
    "updated_at": "2024-05-21T19:01:36Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6709",
      "html_url": "https://github.com/psf/requests/pull/6709",
      "diff_url": "https://github.com/psf/requests/pull/6709.diff",
      "patch_url": "https://github.com/psf/requests/pull/6709.patch",
      "merged_at": null
    },
    "body": "This adds a default connect and read timeout value for all usage of Requests. This is to solve a long-standing issue where some systems do not have a sufficiently low default value.\r\n\r\nPersonally, I'd want these values to be much lower, but a 10 second connection timeout and a 30 second read timeout seem like they should be enough to avoid problems for the edge cases of users while also not being so large that they're basically ineffective.\r\n\r\nCloses #3070",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6709/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6709/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6696",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6696/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6696/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6696/events",
    "html_url": "https://github.com/psf/requests/pull/6696",
    "id": 2285865468,
    "node_id": "PR_kwDOABTKOs5u5SRG",
    "number": 6696,
    "title": "Docs update: warn that Session.verify is ignored if REQUESTS_CA_BUNDLE is set",
    "user": {
      "login": "StefanKopieczek",
      "id": 1242316,
      "node_id": "MDQ6VXNlcjEyNDIzMTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1242316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StefanKopieczek",
      "html_url": "https://github.com/StefanKopieczek",
      "followers_url": "https://api.github.com/users/StefanKopieczek/followers",
      "following_url": "https://api.github.com/users/StefanKopieczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/StefanKopieczek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StefanKopieczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StefanKopieczek/subscriptions",
      "organizations_url": "https://api.github.com/users/StefanKopieczek/orgs",
      "repos_url": "https://api.github.com/users/StefanKopieczek/repos",
      "events_url": "https://api.github.com/users/StefanKopieczek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StefanKopieczek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-08T15:21:43Z",
    "updated_at": "2024-05-08T16:28:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6696",
      "html_url": "https://github.com/psf/requests/pull/6696",
      "diff_url": "https://github.com/psf/requests/pull/6696.diff",
      "patch_url": "https://github.com/psf/requests/pull/6696.patch",
      "merged_at": null
    },
    "body": "Issue #3829 tracks that Session.verify is ignored whenever `REQUESTS_CA_BUNDLES` or `CURL_CA_BUNDLES` is set. The underlying behavior will apparently be changed in 3.x, but in the meantime it would be helpful to call out the behavior in the docs to avoid catching people out (the issue has been locked due to a large number of comments).\r\n\r\nI'm happy to rework this PR as needed, but it'd be great to get something in the docs about this in one form or another to help prevent people hitting this.\r\n\r\nThanks in advance for your thoughts!\r\n\r\n---\r\n\r\n## Change Details\r\n\r\n* Added a `warning::` callout to the relevant section of the docs.\r\n\r\n## Alternate Approaches Considered\r\n\r\nI initially wrote out a longer section detailing the semantics for how the various options interact \u2014 but all the other interactions are very intuitive, so this felt like overkill. Let me know if you'd prefer that approach.\r\n\r\nThis section of the docs is also a bit callout heavy, so I'm happy to inline the text rather than put it in a callout, if you prefer.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6696/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6693",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6693/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6693/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6693/events",
    "html_url": "https://github.com/psf/requests/pull/6693",
    "id": 2281336920,
    "node_id": "PR_kwDOABTKOs5uqUZp",
    "number": 6693,
    "title": "fix: enviroment variable PYTHONHTTPSVERIFY isn't take in consideration on https requests.",
    "user": {
      "login": "alvieirajr",
      "id": 5341637,
      "node_id": "MDQ6VXNlcjUzNDE2Mzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5341637?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alvieirajr",
      "html_url": "https://github.com/alvieirajr",
      "followers_url": "https://api.github.com/users/alvieirajr/followers",
      "following_url": "https://api.github.com/users/alvieirajr/following{/other_user}",
      "gists_url": "https://api.github.com/users/alvieirajr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alvieirajr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alvieirajr/subscriptions",
      "organizations_url": "https://api.github.com/users/alvieirajr/orgs",
      "repos_url": "https://api.github.com/users/alvieirajr/repos",
      "events_url": "https://api.github.com/users/alvieirajr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alvieirajr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-05-06T17:06:09Z",
    "updated_at": "2024-05-07T01:59:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6693",
      "html_url": "https://github.com/psf/requests/pull/6693",
      "diff_url": "https://github.com/psf/requests/pull/6693.diff",
      "patch_url": "https://github.com/psf/requests/pull/6693.patch",
      "merged_at": null
    },
    "body": "In case of the ssl certificate of destination host has expired isn't possible to ignore the cert validation using env PYTHONHTTPSVERIFY=0.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6693/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6675",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6675/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6675/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6675/events",
    "html_url": "https://github.com/psf/requests/pull/6675",
    "id": 2210123960,
    "node_id": "PR_kwDOABTKOs5q5GcK",
    "number": 6675,
    "title": "Fix utils functions with invalid ip/cidr inputs",
    "user": {
      "login": "vcapparelli",
      "id": 125774763,
      "node_id": "U_kgDOB38rqw",
      "avatar_url": "https://avatars.githubusercontent.com/u/125774763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vcapparelli",
      "html_url": "https://github.com/vcapparelli",
      "followers_url": "https://api.github.com/users/vcapparelli/followers",
      "following_url": "https://api.github.com/users/vcapparelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/vcapparelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vcapparelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vcapparelli/subscriptions",
      "organizations_url": "https://api.github.com/users/vcapparelli/orgs",
      "repos_url": "https://api.github.com/users/vcapparelli/repos",
      "events_url": "https://api.github.com/users/vcapparelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vcapparelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-03-27T08:03:45Z",
    "updated_at": "2024-04-18T10:09:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6675",
      "html_url": "https://github.com/psf/requests/pull/6675",
      "diff_url": "https://github.com/psf/requests/pull/6675.diff",
      "patch_url": "https://github.com/psf/requests/pull/6675.patch",
      "merged_at": null
    },
    "body": "- add test cases reported in #5131\r\n- fix utils functions `address_in_network`, `is_ipv4_address` and `is_valid_cidr`\r\n- replace socket with `ipaddress` module\r\n- prepare ipv6 support\r\n\r\nFixes #5131",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6675/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6659",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6659/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6659/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6659/events",
    "html_url": "https://github.com/psf/requests/pull/6659",
    "id": 2176501923,
    "node_id": "PR_kwDOABTKOs5pG2lO",
    "number": 6659,
    "title": "get_encoding_from_headers fails if charset name not specified #6646",
    "user": {
      "login": "alain-khalil",
      "id": 66105100,
      "node_id": "MDQ6VXNlcjY2MTA1MTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/66105100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alain-khalil",
      "html_url": "https://github.com/alain-khalil",
      "followers_url": "https://api.github.com/users/alain-khalil/followers",
      "following_url": "https://api.github.com/users/alain-khalil/following{/other_user}",
      "gists_url": "https://api.github.com/users/alain-khalil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alain-khalil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alain-khalil/subscriptions",
      "organizations_url": "https://api.github.com/users/alain-khalil/orgs",
      "repos_url": "https://api.github.com/users/alain-khalil/repos",
      "events_url": "https://api.github.com/users/alain-khalil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alain-khalil/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-03-08T17:49:05Z",
    "updated_at": "2024-03-08T20:32:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6659",
      "html_url": "https://github.com/psf/requests/pull/6659",
      "diff_url": "https://github.com/psf/requests/pull/6659.diff",
      "patch_url": "https://github.com/psf/requests/pull/6659.patch",
      "merged_at": null
    },
    "body": null,
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6659/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6653",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6653/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6653/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6653/events",
    "html_url": "https://github.com/psf/requests/issues/6653",
    "id": 2157769336,
    "node_id": "I_kwDOABTKOs6AnPJ4",
    "number": 6653,
    "title": "Document which exceptions request() might raise",
    "user": {
      "login": "mjperrone",
      "id": 3848371,
      "node_id": "MDQ6VXNlcjM4NDgzNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3848371?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjperrone",
      "html_url": "https://github.com/mjperrone",
      "followers_url": "https://api.github.com/users/mjperrone/followers",
      "following_url": "https://api.github.com/users/mjperrone/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjperrone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjperrone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjperrone/subscriptions",
      "organizations_url": "https://api.github.com/users/mjperrone/orgs",
      "repos_url": "https://api.github.com/users/mjperrone/repos",
      "events_url": "https://api.github.com/users/mjperrone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjperrone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2024-02-27T23:09:53Z",
    "updated_at": "2024-06-07T14:14:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Ask to document which exceptions request() might raise\r\n\r\nI notice that the .[json function documents that it might raise](https://requests.readthedocs.io/en/latest/api/#requests.Response.json)  a `JSONDecodeError`.  This is very helpful for writing comprehensive error handling code around requests. I'm asking for that to be done for [the main interface](https://requests.readthedocs.io/en/latest/api/#main-interface) as well.\r\n\r\nWhile [a list of exceptions](https://requests.readthedocs.io/en/latest/api/#exceptions) is provided in the documentation, it is not clear which exceptions will be returned by which methods. For example I don't think `JSONDecodeError` can be raised by `.get`. I tried to read the requests code to get a sense of which might be thrown from it, but it is a little challenging to follow as a first time reader.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6653/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6651",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6651/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6651/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6651/events",
    "html_url": "https://github.com/psf/requests/pull/6651",
    "id": 2156727937,
    "node_id": "PR_kwDOABTKOs5oDW1m",
    "number": 6651,
    "title": "Add test coverage for api.py",
    "user": {
      "login": "jschfflr",
      "id": 4992440,
      "node_id": "MDQ6VXNlcjQ5OTI0NDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4992440?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschfflr",
      "html_url": "https://github.com/jschfflr",
      "followers_url": "https://api.github.com/users/jschfflr/followers",
      "following_url": "https://api.github.com/users/jschfflr/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschfflr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschfflr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschfflr/subscriptions",
      "organizations_url": "https://api.github.com/users/jschfflr/orgs",
      "repos_url": "https://api.github.com/users/jschfflr/repos",
      "events_url": "https://api.github.com/users/jschfflr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschfflr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-02-27T14:22:03Z",
    "updated_at": "2024-02-28T00:21:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6651",
      "html_url": "https://github.com/psf/requests/pull/6651",
      "diff_url": "https://github.com/psf/requests/pull/6651.diff",
      "patch_url": "https://github.com/psf/requests/pull/6651.patch",
      "merged_at": null
    },
    "body": "This change adds tests for the highlevel api that exposes the http methods directly.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6651/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6649",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6649/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6649/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6649/events",
    "html_url": "https://github.com/psf/requests/pull/6649",
    "id": 2152354747,
    "node_id": "PR_kwDOABTKOs5n0ndl",
    "number": 6649,
    "title": "Measure and report test coverage",
    "user": {
      "login": "sigmavirus24",
      "id": 240830,
      "node_id": "MDQ6VXNlcjI0MDgzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigmavirus24",
      "html_url": "https://github.com/sigmavirus24",
      "followers_url": "https://api.github.com/users/sigmavirus24/followers",
      "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
      "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
      "repos_url": "https://api.github.com/users/sigmavirus24/repos",
      "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2024-02-24T15:08:47Z",
    "updated_at": "2024-03-14T19:57:28Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6649",
      "html_url": "https://github.com/psf/requests/pull/6649",
      "diff_url": "https://github.com/psf/requests/pull/6649.diff",
      "patch_url": "https://github.com/psf/requests/pull/6649.patch",
      "merged_at": null
    },
    "body": "This runs pytest within coverage, enables pytest-xdist to improve test run times, and reports the coverage on GitHub Actions for us.\r\n\r\nThis also ensures that the parallel mode coverage files are ignored and adds things to pytest configuration to make tox command simpler",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6649/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6647",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6647/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6647/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6647/events",
    "html_url": "https://github.com/psf/requests/issues/6647",
    "id": 2150619043,
    "node_id": "I_kwDOABTKOs6AL9ej",
    "number": 6647,
    "title": "Wrong CA Certificates used in requests.Session.send",
    "user": {
      "login": "sunnstix",
      "id": 25157310,
      "node_id": "MDQ6VXNlcjI1MTU3MzEw",
      "avatar_url": "https://avatars.githubusercontent.com/u/25157310?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sunnstix",
      "html_url": "https://github.com/sunnstix",
      "followers_url": "https://api.github.com/users/sunnstix/followers",
      "following_url": "https://api.github.com/users/sunnstix/following{/other_user}",
      "gists_url": "https://api.github.com/users/sunnstix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sunnstix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sunnstix/subscriptions",
      "organizations_url": "https://api.github.com/users/sunnstix/orgs",
      "repos_url": "https://api.github.com/users/sunnstix/repos",
      "events_url": "https://api.github.com/users/sunnstix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sunnstix/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-02-23T08:35:00Z",
    "updated_at": "2024-05-30T21:11:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Bug in requests.sessions.py:\r\n\r\nhttps://github.com/psf/requests/blob/b8be93a721792deeadd2f498b8f77cf610e7765f/src/requests/sessions.py#L579-L589\r\n\r\nsession.merge_environment_settings is called in session.request and not in session.send which means if users want to build their own prepared requests (see example below), the correct certificates file will not be used unless explicitly passed to send.\r\n\r\nI believe these environment settings should be updated in session.send instead.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport os\r\nimport requests\r\n\r\n# Set CA certificates file to custom local file\r\nos.environ[\"REQUESTS_CA_BUNDLE\"] = \"/etc/ssl/certs/ca-certificates.crt\"\r\n\r\n# Create request object\r\nreq = requests.Request(\r\n    method=\"GET\", # any method\r\n    url=\"https://www.example_site.mydomain.com/path\" # any url for which the default cert file does not have a cert for\r\n)\r\n\r\nwith requests.Session() as s:\r\n    respA = s.request( # Success: will use CA certificates from REQUESTS_CA_BUNDLE\r\n        method=req.method,\r\n        url=req.url\r\n    )\r\n    assert respA.status_code == 200\r\n    \r\nwith requests.Session() as s:\r\n    respB = s.send( # Success: will use CA certificates from REQUESTS_CA_BUNDLE if explicitly specified\r\n        request=req.prepare(), verify=os.environ[\"REQUESTS_CA_BUNDLE\"]\r\n    )\r\n    \r\n    assert respB.status_code == 200\r\n    \r\nwith requests.Session() as s:\r\n    respC = s.send( # Error: Will try to use default CA certificates instead of those specified by REQUESTS_CA_BUNDLE\r\n        request=req.prepare() \r\n    )\r\n    \r\n    assert respC.status_code == 200\r\n```\r\n\r\n## Expected Result\r\n\r\nNo output\r\n\r\n## Actual Result\r\n\r\n```\r\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='https://www.example_site.mydomain.com/path', port=443): Max retries exceeded with url: /path (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)')))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.3.2\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.0-150-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.2.1\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6647/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6647/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6646",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6646/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6646/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6646/events",
    "html_url": "https://github.com/psf/requests/issues/6646",
    "id": 2150140274,
    "node_id": "I_kwDOABTKOs6AKIly",
    "number": 6646,
    "title": "`get_encoding_from_headers` fails if charset name not specified",
    "user": {
      "login": "batterseapower",
      "id": 18488,
      "node_id": "MDQ6VXNlcjE4NDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/18488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/batterseapower",
      "html_url": "https://github.com/batterseapower",
      "followers_url": "https://api.github.com/users/batterseapower/followers",
      "following_url": "https://api.github.com/users/batterseapower/following{/other_user}",
      "gists_url": "https://api.github.com/users/batterseapower/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/batterseapower/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/batterseapower/subscriptions",
      "organizations_url": "https://api.github.com/users/batterseapower/orgs",
      "repos_url": "https://api.github.com/users/batterseapower/repos",
      "events_url": "https://api.github.com/users/batterseapower/events{/privacy}",
      "received_events_url": "https://api.github.com/users/batterseapower/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-02-22T23:56:00Z",
    "updated_at": "2024-09-01T04:23:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`requests.utils.get_encoding_from_headers` assumes that the charset parameter always specifies a name. In very rare cases a server can send a malformed content-type header which does not specify a name. In these cases, requests should probably just treat it as if no charset had been specified.\r\n\r\n## Expected Result\r\n\r\n`requests.utils.get_encoding_from_headers({'content-type': 'text/html; charset'}) == 'ISO-8859-1'`\r\n\r\n## Actual Result\r\n\r\n```\r\nFile ~/opt/anaconda3/2023.03/envs/mamba/envs/py3/lib/python3.9/site-packages/requests/utils.py:553, in get_encoding_from_headers(headers)\r\n    550 content_type, params = _parse_content_type_header(content_type)\r\n    552 if \"charset\" in params:\r\n--> 553     return params[\"charset\"].strip(\"'\\\"\")\r\n    555 if \"text\" in content_type:\r\n    556     return \"ISO-8859-1\"\r\n\r\nAttributeError: 'bool' object has no attribute 'strip'\r\n```\r\n\r\n## System Information\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"41.0.3\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.15\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.14.0-284.11.1.el9_2.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010116f\",\r\n    \"version\": \"23.2.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010117f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.18\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6646/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6582",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6582/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6582/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6582/events",
    "html_url": "https://github.com/psf/requests/issues/6582",
    "id": 2008770091,
    "node_id": "I_kwDOABTKOs53u2Yr",
    "number": 6582,
    "title": "\"Recommended Packages and Extensions\" page asyncio recommendations are outdated",
    "user": {
      "login": "ngie-eign",
      "id": 1574099,
      "node_id": "MDQ6VXNlcjE1NzQwOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1574099?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ngie-eign",
      "html_url": "https://github.com/ngie-eign",
      "followers_url": "https://api.github.com/users/ngie-eign/followers",
      "following_url": "https://api.github.com/users/ngie-eign/following{/other_user}",
      "gists_url": "https://api.github.com/users/ngie-eign/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ngie-eign/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ngie-eign/subscriptions",
      "organizations_url": "https://api.github.com/users/ngie-eign/orgs",
      "repos_url": "https://api.github.com/users/ngie-eign/repos",
      "events_url": "https://api.github.com/users/ngie-eign/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ngie-eign/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-11-23T20:41:53Z",
    "updated_at": "2023-12-28T02:07:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "While looking for an asyncio compatible recommendation for requests, I stumbled on the [documentation](https://requests.readthedocs.io/en/latest/community/recommended/) provided by the project. It recommends Request-Threads, which does not seem to be actively developed (no new changes/releases in the past 5 years). txrequests is an alternative Twisted-based package that seems to be more recommended these days: https://pypi.org/project/txrequests/ .\r\n\r\nMoreover, requests.Async is not mentioned; this support was moved to https://pypi.org/project/gevent-requests/ (mentioned in History.md). [1]\r\n\r\n1. Note to other readers: gevent-requests is the library that requires gevent/greenlet and achieves asynchronous processing via green threads: it doesn't achieve this via native python asyncio coroutines.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6582/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6578",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6578/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6578/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6578/events",
    "html_url": "https://github.com/psf/requests/issues/6578",
    "id": 2000644097,
    "node_id": "I_kwDOABTKOs53P2gB",
    "number": 6578,
    "title": "Weird behaviour with https and proxy authentication",
    "user": {
      "login": "pelfex",
      "id": 121585704,
      "node_id": "U_kgDOBz9AKA",
      "avatar_url": "https://avatars.githubusercontent.com/u/121585704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pelfex",
      "html_url": "https://github.com/pelfex",
      "followers_url": "https://api.github.com/users/pelfex/followers",
      "following_url": "https://api.github.com/users/pelfex/following{/other_user}",
      "gists_url": "https://api.github.com/users/pelfex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pelfex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pelfex/subscriptions",
      "organizations_url": "https://api.github.com/users/pelfex/orgs",
      "repos_url": "https://api.github.com/users/pelfex/repos",
      "events_url": "https://api.github.com/users/pelfex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pelfex/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2023-11-19T00:56:06Z",
    "updated_at": "2023-11-24T08:05:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\n\r\nrequests.get is getting weird with some combinations of dictionary keys and proxy authentication.\r\n\r\n## Expected Result\r\n```python\r\nprint(requests.get('https://google.com', proxies={\"https\" : 'https://user:pass@ip:port'}))\r\n```\r\nOutput:\r\n`<Response [200]>`\r\n<!-- What you expected. -->\r\n\r\n## Actual Result\r\nDoesn't run? (Maybe timeout)\r\nBut it somehow fixes itself with these changes\r\n```python\r\nprint(requests.get('https://google.com', proxies={\"http\" : 'http://user:pass@ip:port'}))\r\n```\r\n\r\nOutput:\r\n`<Response [200]>`\r\n<!-- What happened instead. -->\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nprint(requests.get('https://google.com', proxies={\"https\" : 'https://user:pass@ip:port'}))\r\n\r\nprint(requests.get('https://google.com', proxies={\"http\" : 'http://user:pass@ip:port'}))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.11\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010114f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n````\r\n    $ python --version\r\n    Python 3.10.11\r\n\r\n\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": {
      "login": "pelfex",
      "id": 121585704,
      "node_id": "U_kgDOBz9AKA",
      "avatar_url": "https://avatars.githubusercontent.com/u/121585704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pelfex",
      "html_url": "https://github.com/pelfex",
      "followers_url": "https://api.github.com/users/pelfex/followers",
      "following_url": "https://api.github.com/users/pelfex/following{/other_user}",
      "gists_url": "https://api.github.com/users/pelfex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pelfex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pelfex/subscriptions",
      "organizations_url": "https://api.github.com/users/pelfex/orgs",
      "repos_url": "https://api.github.com/users/pelfex/repos",
      "events_url": "https://api.github.com/users/pelfex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pelfex/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6578/timeline",
    "performed_via_github_app": null,
    "state_reason": "reopened"
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6570",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6570/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6570/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6570/events",
    "html_url": "https://github.com/psf/requests/pull/6570",
    "id": 1988368738,
    "node_id": "PR_kwDOABTKOs5fLmp8",
    "number": 6570,
    "title": "Document that Response.iter_lines is broken and should be avoided",
    "user": {
      "login": "bemoody",
      "id": 7748246,
      "node_id": "MDQ6VXNlcjc3NDgyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7748246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bemoody",
      "html_url": "https://github.com/bemoody",
      "followers_url": "https://api.github.com/users/bemoody/followers",
      "following_url": "https://api.github.com/users/bemoody/following{/other_user}",
      "gists_url": "https://api.github.com/users/bemoody/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bemoody/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bemoody/subscriptions",
      "organizations_url": "https://api.github.com/users/bemoody/orgs",
      "repos_url": "https://api.github.com/users/bemoody/repos",
      "events_url": "https://api.github.com/users/bemoody/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bemoody/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-11-10T20:48:59Z",
    "updated_at": "2023-12-05T08:34:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6570",
      "html_url": "https://github.com/psf/requests/pull/6570",
      "diff_url": "https://github.com/psf/requests/pull/6570.diff",
      "patch_url": "https://github.com/psf/requests/pull/6570.patch",
      "merged_at": null
    },
    "body": "The `Response.iter_lines` method is seriously broken (it inserts fake blank lines in unpredictable places.)\n\nThe earliest report of this I've found is pull #2431 (January 2015).\n\nThe behavior was apparently fixed in the 3.0.0 branch, by pulls #3923 and #3984.  (I think #3923 fixes the `delimiter!=None` case and #3984 fixes the `delimiter=None` case.  But I haven't tested it.)\n\nThe problem was raised again in issues #3980, #4121, and #5540.\n\nPull #4629 attempted to partially fix the issue in the master branch, and was rejected.\n\nPersonally, I am skeptical that there is any benefit in preserving this broken behavior.  But folks who know better than I do have said that it needs to be maintained.\n\nAs long as this *isn't* fixed, people using the library should be informed that method is broken and they shouldn't use it.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6570/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6568",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6568/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6568/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6568/events",
    "html_url": "https://github.com/psf/requests/pull/6568",
    "id": 1978580987,
    "node_id": "PR_kwDOABTKOs5eqIcI",
    "number": 6568,
    "title": "Bug/6294 zero bytes files are chunked",
    "user": {
      "login": "eivindt",
      "id": 1540378,
      "node_id": "MDQ6VXNlcjE1NDAzNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1540378?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eivindt",
      "html_url": "https://github.com/eivindt",
      "followers_url": "https://api.github.com/users/eivindt/followers",
      "following_url": "https://api.github.com/users/eivindt/following{/other_user}",
      "gists_url": "https://api.github.com/users/eivindt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eivindt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eivindt/subscriptions",
      "organizations_url": "https://api.github.com/users/eivindt/orgs",
      "repos_url": "https://api.github.com/users/eivindt/repos",
      "events_url": "https://api.github.com/users/eivindt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eivindt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/35",
      "html_url": "https://github.com/psf/requests/milestone/35",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/35/labels",
      "id": 11076316,
      "node_id": "MI_kwDOABTKOs4AqQLc",
      "number": 35,
      "title": "2.33.0",
      "description": "",
      "creator": {
        "login": "nateprewitt",
        "id": 5271761,
        "node_id": "MDQ6VXNlcjUyNzE3NjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nateprewitt",
        "html_url": "https://github.com/nateprewitt",
        "followers_url": "https://api.github.com/users/nateprewitt/followers",
        "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
        "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
        "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
        "repos_url": "https://api.github.com/users/nateprewitt/repos",
        "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 3,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2024-05-20T14:16:54Z",
      "updated_at": "2024-05-21T12:26:27Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 4,
    "created_at": "2023-11-06T08:35:26Z",
    "updated_at": "2024-05-20T14:17:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6568",
      "html_url": "https://github.com/psf/requests/pull/6568",
      "diff_url": "https://github.com/psf/requests/pull/6568.diff",
      "patch_url": "https://github.com/psf/requests/pull/6568.patch",
      "merged_at": null
    },
    "body": "See bug #6294 for original bug report.\r\n\r\nThis PR provides a possible fix for this, reverting the change in #2896.\r\n\r\nThe change in #2896 definitely causes some bad side effects, since not all web servers handle \"chunked\" transfer encoding (i.e. some don't handle it, some don't handle it well).\r\n\r\n### Problem demonstration\r\n\r\nGiven a simple bottle application:\r\n```python\r\nfrom bottle import run, put, request, default_app\r\n\r\napp = default_app()\r\n\r\n@app.put(\"/\")\r\ndef receive_file():\r\n    upload = request.body.read()\r\n    for head, val in request.headers.items():\r\n        print(\"%-30s:\\t%s\" % (head, val))\r\n    clength = request.headers.get(\"Content-Length\", \"not-set\")\r\n    cencoding = request.headers.get(\"Transfer-Encoding\", \"not-set\")\r\n    return { 'size': len(upload), 'content-length': clength, 'transfer-encoding': cencoding }\r\n\r\nif __name__ == '__main__':\r\n    app.run(host='localhost', port=8880)\r\n```\r\n\r\nAnd a simple requests script:\r\n```python\r\nimport requests\r\nimport io\r\nempty_obj = io.BytesIO(b'')\r\nresp = requests.put('http://localhost:8880/', data=empty_obj)\r\nprint(resp.status_code)\r\nif resp.status_code == 200:\r\n    print(resp.json())\r\n```\r\n\r\n## Working Scenario\r\n\r\n```\r\n$ python server.py\r\nBottle v0.12.25 server starting up (using WSGIRefServer())...\r\nListening on http://localhost:8880/\r\nHit Ctrl-C to quit.\r\n\r\nContent-Length                :\t\r\nContent-Type                  :\ttext/plain\r\nHost                          :\tlocalhost:8880\r\nUser-Agent                    :\tpython-requests/2.31.0\r\nAccept-Encoding               :\tgzip, deflate, br\r\nAccept                        :\t*/*\r\nConnection                    :\tkeep-alive\r\nTransfer-Encoding             :\tchunked\r\n127.0.0.1 - - [03/Nov/2023 15:51:51] \"PUT / HTTP/1.1\" 200 65\r\n```\r\nTest script output:\r\n```\r\n200\r\n{'size': 0, 'content-length': '', 'transfer-encoding': 'chunked'}\r\n```\r\n\r\n## Failing Scenario\r\n```\r\n$ gunicorn -b localhost:8880 server:app\r\n[2023-11-03 15:52:05 +0100] [1326049] [INFO] Starting gunicorn 21.2.0\r\n[2023-11-03 15:52:05 +0100] [1326049] [INFO] Listening at: http://127.0.0.1:8880 (1326049)\r\n[2023-11-03 15:52:05 +0100] [1326049] [INFO] Using worker: sync\r\n[2023-11-03 15:52:05 +0100] [1326050] [INFO] Booting worker with pid: 1326050\r\n```\r\nTest script output:\r\n```\r\n400\r\n```\r\n\r\n### The Original Issue\r\n\r\nThe change causing this problem in the first place was due to failing to upload data read from a subprocess pipe.\r\n\r\nThis patch adds a check to `super_len` that avoids returning length 0 for file handles that are not regular files.",
    "closed_by": {
      "login": "sigmavirus24",
      "id": 240830,
      "node_id": "MDQ6VXNlcjI0MDgzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigmavirus24",
      "html_url": "https://github.com/sigmavirus24",
      "followers_url": "https://api.github.com/users/sigmavirus24/followers",
      "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
      "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
      "repos_url": "https://api.github.com/users/sigmavirus24/repos",
      "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6568/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6565",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6565/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6565/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6565/events",
    "html_url": "https://github.com/psf/requests/issues/6565",
    "id": 1971661689,
    "node_id": "I_kwDOABTKOs51hSt5",
    "number": 6565,
    "title": "CA-certs bundles and requests.certs.where - Improved documentation",
    "user": {
      "login": "velle",
      "id": 4488298,
      "node_id": "MDQ6VXNlcjQ0ODgyOTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4488298?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/velle",
      "html_url": "https://github.com/velle",
      "followers_url": "https://api.github.com/users/velle/followers",
      "following_url": "https://api.github.com/users/velle/following{/other_user}",
      "gists_url": "https://api.github.com/users/velle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/velle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/velle/subscriptions",
      "organizations_url": "https://api.github.com/users/velle/orgs",
      "repos_url": "https://api.github.com/users/velle/repos",
      "events_url": "https://api.github.com/users/velle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/velle/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-11-01T04:09:52Z",
    "updated_at": "2023-11-01T04:17:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I initially thought `requests.certs.where` (as well as `certifi.where`) returned the location of the cacert file _actually_ being used, and I could use it to verify that the correct file was loaded. I am not the only one to make this mistake: https://stackoverflow.com/a/42982144/735070.\r\n![Screenshot from 2023-11-01 05-05-56](https://github.com/psf/requests/assets/4488298/1ce95ea1-958a-445a-9792-e2aa9b53bbd3)\r\n\r\nI have realized though, that it simply return the path of the bundled cacert file that comes included with the library.\r\n\r\n### Demonstration of this behavior:\r\n\r\n    #test.py\r\n    import requests, certifi,os\r\n    print('os.environ.get(\"REQUESTS_CA_BUNDLE\") -> ',repr(os.environ.get(\"REQUESTS_CA_BUNDLE\")))\r\n    print('os.environ.get(\"CURL_CA_BUNDLE\")     -> ',repr(os.environ.get(\"CURL_CA_BUNDLE\")))\r\n    print('requests.cert.where())               -> ',repr(requests.certs.where()))\r\n    print('certifi.where())                     -> ',repr(certifi.where()))\r\n\r\nRunning test.py in shell with REQUESTS_CA_BUNDLE set:\r\n\r\n    $ REQUESTS_CA_BUNDLE=/home/jdoe/catest/my_cacert.pem python test.py\r\n    os.environ.get(\"REQUESTS_CA_BUNDLE\") ->  '/home/jdoe/catest/my_cacert.pem'\r\n    os.environ.get(\"CURL_CA_BUNDLE\")     ->  None\r\n    requests.cert.where())               ->  '/home/jdoe/.local/lib/python3.10/site-packages/certifi/cacert.pem'\r\n    certifi.where())                     ->  '/home/jdoe/.local/lib/python3.10/site-packages/certifi/cacert.pem'\r\n\r\n### Improve documentation - requests.certs.where-function\r\n\r\nCurrently `requests.certs.where.__doc__` returns null. How about\r\n\r\n_returns the path of the CA-certs bundle that is included with the requests package, ie not necessarily the bundle actually being used._\r\n\r\n### Improve documentation - How is CA-bundle chosen\r\n\r\nMaybe the simplest way of making this clear is to add a section with a list or decision tree that shows which file (if any) will be used as CA-certs bundle.\r\n\r\n\r\n### Add some way of getting the bundle _actually_ being used\r\n\r\nIn my case a static function, `requests.cacerts_loaded()`. I realize this may return a file different from the one being used, if the user specifies `verify` (and maybe its possible to change in other ways too). \r\n\r\n### Demonstration run on\r\n\r\n- certifi version: 2023.05.07\r\n- requests version: 2.25.1\r\n- Python 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6565/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6565/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6561",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6561/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6561/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6561/events",
    "html_url": "https://github.com/psf/requests/pull/6561",
    "id": 1966661607,
    "node_id": "PR_kwDOABTKOs5eCEdk",
    "number": 6561,
    "title": "url param gets added when empty param is passed",
    "user": {
      "login": "amkarn258",
      "id": 55189266,
      "node_id": "MDQ6VXNlcjU1MTg5MjY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/55189266?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amkarn258",
      "html_url": "https://github.com/amkarn258",
      "followers_url": "https://api.github.com/users/amkarn258/followers",
      "following_url": "https://api.github.com/users/amkarn258/following{/other_user}",
      "gists_url": "https://api.github.com/users/amkarn258/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amkarn258/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amkarn258/subscriptions",
      "organizations_url": "https://api.github.com/users/amkarn258/orgs",
      "repos_url": "https://api.github.com/users/amkarn258/repos",
      "events_url": "https://api.github.com/users/amkarn258/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amkarn258/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-10-28T16:41:07Z",
    "updated_at": "2023-12-05T08:36:07Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6561",
      "html_url": "https://github.com/psf/requests/pull/6561",
      "diff_url": "https://github.com/psf/requests/pull/6561.diff",
      "patch_url": "https://github.com/psf/requests/pull/6561.patch",
      "merged_at": null
    },
    "body": "Have added the fix for the issue mentioned here - https://github.com/psf/requests/issues/6557\r\n\r\nSince empty lists, dicts, tuples aren't of none type they should be added in the url string. ",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6561/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6557",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6557/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6557/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6557/events",
    "html_url": "https://github.com/psf/requests/issues/6557",
    "id": 1960808790,
    "node_id": "I_kwDOABTKOs5035FW",
    "number": 6557,
    "title": "URL parameter is added when the value is an empty string but not when it is an empty list",
    "user": {
      "login": "Lalee10",
      "id": 38792700,
      "node_id": "MDQ6VXNlcjM4NzkyNzAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/38792700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lalee10",
      "html_url": "https://github.com/Lalee10",
      "followers_url": "https://api.github.com/users/Lalee10/followers",
      "following_url": "https://api.github.com/users/Lalee10/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lalee10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lalee10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lalee10/subscriptions",
      "organizations_url": "https://api.github.com/users/Lalee10/orgs",
      "repos_url": "https://api.github.com/users/Lalee10/repos",
      "events_url": "https://api.github.com/users/Lalee10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lalee10/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2023-10-25T08:11:38Z",
    "updated_at": "2023-11-16T11:25:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\nBoth an empty string `''` and an empty list `[]` are not of NoneType and are considered a falsy value and therefore should behave the same when being added as a URL parameter. But in requests when passing an empty string `''` as a parameter value the final URL contains the parameter but not when an empty list `[]` is passed as the value.\r\n\r\n## Expected Result\r\nWhen passing an empty list as parameter value, the final URL **should contain** the parameter.\r\n\r\n<!-- What you expected. -->\r\n\r\n## Actual Result\r\nWhen passing an empty list as parameter value, the final URL **does not contain** the parameter.\r\n\r\n<!-- What happened instead. -->\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nbase_url = 'https://jsonplaceholder.typicode.com/todos'\r\n\r\nparams = {'_limit': 5, 'id__in': ''}\r\nresponse = requests.get(base_url, params)\r\nprint(response.request.url)\r\n# Output: https://jsonplaceholder.typicode.com/todos?_limit=5&id__in=\r\n\r\nparams = {'_limit': 5, 'id__in': []}\r\nresponse = requests.get(base_url, params)\r\nprint(response.request.url)\r\n# Output: https://jsonplaceholder.typicode.com/todos?_limit=5\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.11\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"22.6.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.2\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010115f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.15\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6557/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6557/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6553",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6553/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6553/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6553/events",
    "html_url": "https://github.com/psf/requests/pull/6553",
    "id": 1949696623,
    "node_id": "PR_kwDOABTKOs5dI45y",
    "number": 6553,
    "title": "docs(socks): same block as other sections",
    "user": {
      "login": "magsen",
      "id": 28842337,
      "node_id": "MDQ6VXNlcjI4ODQyMzM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/28842337?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/magsen",
      "html_url": "https://github.com/magsen",
      "followers_url": "https://api.github.com/users/magsen/followers",
      "following_url": "https://api.github.com/users/magsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/magsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/magsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/magsen/subscriptions",
      "organizations_url": "https://api.github.com/users/magsen/orgs",
      "repos_url": "https://api.github.com/users/magsen/repos",
      "events_url": "https://api.github.com/users/magsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/magsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2023-10-18T13:00:02Z",
    "updated_at": "2023-10-18T19:07:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6553",
      "html_url": "https://github.com/psf/requests/pull/6553",
      "diff_url": "https://github.com/psf/requests/pull/6553.diff",
      "patch_url": "https://github.com/psf/requests/pull/6553.patch",
      "merged_at": null
    },
    "body": "strange formatting:\r\nhttps://docs.python-requests.org/en/latest/user/advanced/#socks",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6553/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6553/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6529",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6529/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6529/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6529/events",
    "html_url": "https://github.com/psf/requests/pull/6529",
    "id": 1896100712,
    "node_id": "PR_kwDOABTKOs5aUXU_",
    "number": 6529,
    "title": "Update models.Response.json docstring to be clearer",
    "user": {
      "login": "anupam-arista",
      "id": 118899211,
      "node_id": "U_kgDOBxZCCw",
      "avatar_url": "https://avatars.githubusercontent.com/u/118899211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anupam-arista",
      "html_url": "https://github.com/anupam-arista",
      "followers_url": "https://api.github.com/users/anupam-arista/followers",
      "following_url": "https://api.github.com/users/anupam-arista/following{/other_user}",
      "gists_url": "https://api.github.com/users/anupam-arista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anupam-arista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anupam-arista/subscriptions",
      "organizations_url": "https://api.github.com/users/anupam-arista/orgs",
      "repos_url": "https://api.github.com/users/anupam-arista/repos",
      "events_url": "https://api.github.com/users/anupam-arista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anupam-arista/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-09-14T09:01:07Z",
    "updated_at": "2024-07-01T05:16:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6529",
      "html_url": "https://github.com/psf/requests/pull/6529",
      "diff_url": "https://github.com/psf/requests/pull/6529.diff",
      "patch_url": "https://github.com/psf/requests/pull/6529.patch",
      "merged_at": null
    },
    "body": null,
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6529/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6523",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6523/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6523/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6523/events",
    "html_url": "https://github.com/psf/requests/pull/6523",
    "id": 1888745855,
    "node_id": "PR_kwDOABTKOs5Z7vtH",
    "number": 6523,
    "title": "Pass response_kw to HTTPConnectionPool through HTTPAdapter.send",
    "user": {
      "login": "joren485",
      "id": 7031489,
      "node_id": "MDQ6VXNlcjcwMzE0ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7031489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joren485",
      "html_url": "https://github.com/joren485",
      "followers_url": "https://api.github.com/users/joren485/followers",
      "following_url": "https://api.github.com/users/joren485/following{/other_user}",
      "gists_url": "https://api.github.com/users/joren485/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joren485/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joren485/subscriptions",
      "organizations_url": "https://api.github.com/users/joren485/orgs",
      "repos_url": "https://api.github.com/users/joren485/repos",
      "events_url": "https://api.github.com/users/joren485/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joren485/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2023-09-09T13:36:06Z",
    "updated_at": "2023-09-16T12:02:39Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6523",
      "html_url": "https://github.com/psf/requests/pull/6523",
      "diff_url": "https://github.com/psf/requests/pull/6523.diff",
      "patch_url": "https://github.com/psf/requests/pull/6523.patch",
      "merged_at": null
    },
    "body": "### Summary\r\nThis PR adds kwargs arguments to `HTTPAdapter.send`, which it passes to `HTTPConnectionPool.urlopen` in urllib3.\r\n\r\n### Description\r\nAs discussed in #4956, urrllib3 recently changed the default value of `enforce_content_length` from `False` to `True`. The new default seems like a sane choice, but in some use cases the `Content-Length` header should not be enforced. To change the default behavior, urllib3 allows application code to set the `enforce_content_length` argument. As far as I know, `requests` does not have a way to pass this argument to urllib3.\r\n\r\nThe `HTTPConnectionPool.urlopen` method in urllib3 has the `**response_kw` kwargs argument to pass extra arguments down to the response parser. This PR adds a similar to argument to `HTTPAdapter.send`.\r\n\r\nWith this PR, users can override the `HTTPAdapter.send` method to pass extra arguments to `HTTPConnectionPool.urlopen`. For example, this enables users to explicitly set the `enforce_content_length`.\r\n\r\n### Example\r\n```Python\r\nimport requests\r\n\r\nfrom requests.adapters import HTTPAdapter\r\n\r\nclass EnforceContentLengthAdapter(HTTPAdapter):\r\n    def send(self, *args, **kwargs):\r\n        kwargs[\"enforce_content_length\"] = False\r\n        return super().send(*args, **kwargs)\r\n\r\ns = requests.Session()\r\ns.mount(\"http://\", EnforceContentLengthAdapter())\r\ns.mount(\"https://\", EnforceContentLengthAdapter())\r\n\r\nr = s.get(\"http://localhost:8080/\")\r\nprint(r.raw.enforce_content_length) # Returns False\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6523/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6512",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6512/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6512/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6512/events",
    "html_url": "https://github.com/psf/requests/issues/6512",
    "id": 1863874236,
    "node_id": "I_kwDOABTKOs5vGHa8",
    "number": 6512,
    "title": "Requests are not retried when received body length is shorter than Content-Length",
    "user": {
      "login": "zweger",
      "id": 15678442,
      "node_id": "MDQ6VXNlcjE1Njc4NDQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15678442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zweger",
      "html_url": "https://github.com/zweger",
      "followers_url": "https://api.github.com/users/zweger/followers",
      "following_url": "https://api.github.com/users/zweger/following{/other_user}",
      "gists_url": "https://api.github.com/users/zweger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zweger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zweger/subscriptions",
      "organizations_url": "https://api.github.com/users/zweger/orgs",
      "repos_url": "https://api.github.com/users/zweger/repos",
      "events_url": "https://api.github.com/users/zweger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zweger/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2023-08-23T19:11:31Z",
    "updated_at": "2024-07-01T16:42:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When a server sends less bytes than indicated by Content-Length, we get a ChunkedEncodingError instead of retrying the request.\r\n\r\nurllib3 supports retrying requests in this situation by setting `preload_content=True`. When a user specifies `stream=True`, obviously, all bets are off: the response cannot be preloaded and therefore the request cannot be retried. However, even when `stream=False`, the response is still not preloaded and therefore the urllib3 retry mechanism in this situation is bypassed.\r\n\r\n---\r\n\r\nAs a background to this issue, I've been investigating rare failures in my CI builds during `pip install`. I believe this issue to be the proximate cause: pip makes some requests to PyPI, with `stream=False` and retries configured but still fails. \r\n\r\nIn the current version of pip (which has an out of date urllib3 package), pip falls victim to https://github.com/psf/requests/issues/4956 and fails to parse the PyPI metadata with a `JSONDecodeError`. Upgrading pip's urllib3 version results in a `ChunkedEncodingError` as below.\r\n\r\n## Expected Result\r\n\r\nThe request is retried according to the specified retry policy.\r\n\r\n## Actual Result\r\n\r\n`requests.exceptions.ChunkedEncodingError: ('Connection broken: IncompleteRead(10 bytes read, 26227 more expected)', IncompleteRead(10 bytes read, 26227 more expected))`\r\n\r\nBecause the response is not preloaded, urllib3 cannot retry the request, and requests has no retry functionality of its own.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\n\r\ns = requests.Session()\r\ns.mount(\"http://\", HTTPAdapter(max_retries=5))\r\n\r\nr = s.get('http://127.0.0.1:5000/test', stream=False)\r\n```\r\n\r\nI'm using an intentionally broken local server for testing. See [here](https://github.com/psf/requests/issues/4956#issuecomment-573325001) for an example.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.2.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.4.11-100.fc37.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.31.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000090\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.0.4\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\n## Proposed Patch\r\n\r\nI have a proposed patch which I believe fixes this problem. Unfortunately, my patch breaks a bunch of the tests (and probably also breaks backwards compatibility, in particular, this patch causes requests to start leaking urllib3 exceptions). On the off chance it's useful in coming up with a proper fix, here it is:\r\n\r\n```\r\ndiff --git a/src/requests/adapters.py b/src/requests/adapters.py\r\nindex eb240fa9..ce01c2a5 100644\r\n--- a/src/requests/adapters.py\r\n+++ b/src/requests/adapters.py\r\n@@ -489,8 +489,8 @@ class HTTPAdapter(BaseAdapter):\r\n                 headers=request.headers,\r\n                 redirect=False,\r\n                 assert_same_host=False,\r\n-                preload_content=False,\r\n-                decode_content=False,\r\n+                preload_content=not stream,\r\n+                decode_content=not stream,\r\n                 retries=self.max_retries,\r\n                 timeout=timeout,\r\n                 chunked=chunked,\r\ndiff --git a/src/requests/models.py b/src/requests/models.py\r\nindex 44556394..f43f1bf8 100644\r\n--- a/src/requests/models.py\r\n+++ b/src/requests/models.py\r\n@@ -893,6 +893,8 @@ class Response:\r\n \r\n             if self.status_code == 0 or self.raw is None:\r\n                 self._content = None\r\n+            elif getattr(self.raw, \"data\", None) is not None:\r\n+                self._content = self.raw.data\r\n             else:\r\n                 self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\r\n \r\ndiff --git a/tests/test_lowlevel.py b/tests/test_lowlevel.py\r\nindex 859d07e8..39a1175e 100644\r\n--- a/tests/test_lowlevel.py\r\n+++ b/tests/test_lowlevel.py\r\n@@ -4,6 +4,7 @@ import pytest\r\n from tests.testserver.server import Server, consume_socket_content\r\n \r\n import requests\r\n+from requests.adapters import HTTPAdapter\r\n from requests.compat import JSONDecodeError\r\n \r\n from .utils import override_environ\r\n@@ -426,3 +427,33 @@ def test_json_decode_compatibility_for_alt_utf_encodings():\r\n     assert isinstance(excinfo.value, requests.exceptions.RequestException)\r\n     assert isinstance(excinfo.value, JSONDecodeError)\r\n     assert r.text not in str(excinfo.value)\r\n+\r\n+\r\n+def test_retry_truncated_response():\r\n+    data = b\"truncated before retry\"\r\n+    response_lengths = [len(data), 9]\r\n+\r\n+    def retry_handler(sock):\r\n+        request_content = consume_socket_content(sock, timeout=0.5)\r\n+\r\n+        response = (\r\n+            b\"HTTP/1.1 200 OK\\r\\n\"\r\n+            b\"Content-Length: %d\\r\\n\\r\\n\"\r\n+            b\"%s\"\r\n+        ) % (len(data), data[:response_lengths.pop()])\r\n+        sock.send(response)\r\n+\r\n+        return request_content\r\n+\r\n+    close_server = threading.Event()\r\n+    server = Server(retry_handler, wait_to_close_event=close_server, requests_to_handle=2)\r\n+\r\n+    s = requests.Session()\r\n+    s.mount(\"http://\", HTTPAdapter(max_retries=2))\r\n+\r\n+    with server as (host, port):\r\n+        url = f\"http://{host}:{port}/\"\r\n+        r = s.get(url, stream=False)\r\n+        assert r.status_code == 200\r\n+        assert r.content == data\r\n+        close_server.set()\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6512/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6512/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6504",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6504/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6504/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6504/events",
    "html_url": "https://github.com/psf/requests/pull/6504",
    "id": 1848697407,
    "node_id": "PR_kwDOABTKOs5X00Ig",
    "number": 6504,
    "title": "Add minimum PEP518 build-system specification",
    "user": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-08-13T18:43:48Z",
    "updated_at": "2023-08-13T18:43:48Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6504",
      "html_url": "https://github.com/psf/requests/pull/6504",
      "diff_url": "https://github.com/psf/requests/pull/6504.diff",
      "patch_url": "https://github.com/psf/requests/pull/6504.patch",
      "merged_at": null
    },
    "body": "We've been missing the minimum PEP 518 build specification in our pyproject.toml. This PR adds that, along with an explicit backend to remove any ambiguity for alternative build tools.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6504/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6504/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6455",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6455/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6455/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6455/events",
    "html_url": "https://github.com/psf/requests/issues/6455",
    "id": 1708743145,
    "node_id": "I_kwDOABTKOs5l2Vnp",
    "number": 6455,
    "title": "Incorrect behavior with schemeless-dotless host:port URLs",
    "user": {
      "login": "itamaro",
      "id": 290943,
      "node_id": "MDQ6VXNlcjI5MDk0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/290943?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itamaro",
      "html_url": "https://github.com/itamaro",
      "followers_url": "https://api.github.com/users/itamaro/followers",
      "following_url": "https://api.github.com/users/itamaro/following{/other_user}",
      "gists_url": "https://api.github.com/users/itamaro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itamaro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itamaro/subscriptions",
      "organizations_url": "https://api.github.com/users/itamaro/orgs",
      "repos_url": "https://api.github.com/users/itamaro/repos",
      "events_url": "https://api.github.com/users/itamaro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itamaro/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2023-05-13T21:19:31Z",
    "updated_at": "2023-05-18T15:27:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "URLs of the form `hostname:8080` (with no scheme, with \"hostname\" not containing any dots) can be used to refer to the netloc \"hostname:8080\"\r\n\r\n`requests.utils.prepend_scheme_if_needed` should correctly prepend the `new_scheme` when provided with such a URL.\r\n\r\n## Expected Result\r\n\r\nthe prepended-scheme URL should be \"http://hostname:8080\"\r\n\r\n## Actual Result\r\n\r\nthe prepended-scheme URL is \"hostname:///8080\" (e.g. treating the \"hostname\" part as the scheme, no host, no port, and \"8080\" as the path)\r\n\r\nI extended the `test_prepend_scheme_if_needed` to demonstrate this behavior (see  https://github.com/psf/requests/compare/main...itamaro:requests:schemeless-hostname-anad-port-bug)\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nfrom requests.utils import prepend_scheme_if_needed\r\nprint(prepend_scheme_if_needed(\"hostname:8080\", \"http\"))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"22.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.30.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"2.0.2\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6455/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6454",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6454/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6454/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6454/events",
    "html_url": "https://github.com/psf/requests/pull/6454",
    "id": 1704948479,
    "node_id": "PR_kwDOABTKOs5QP0Jj",
    "number": 6454,
    "title": "Add os.PathLike support for cert files",
    "user": {
      "login": "steveberdy",
      "id": 86739818,
      "node_id": "MDQ6VXNlcjg2NzM5ODE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/86739818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/steveberdy",
      "html_url": "https://github.com/steveberdy",
      "followers_url": "https://api.github.com/users/steveberdy/followers",
      "following_url": "https://api.github.com/users/steveberdy/following{/other_user}",
      "gists_url": "https://api.github.com/users/steveberdy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/steveberdy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/steveberdy/subscriptions",
      "organizations_url": "https://api.github.com/users/steveberdy/orgs",
      "repos_url": "https://api.github.com/users/steveberdy/repos",
      "events_url": "https://api.github.com/users/steveberdy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/steveberdy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-05-11T02:36:35Z",
    "updated_at": "2023-08-17T02:49:29Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6454",
      "html_url": "https://github.com/psf/requests/pull/6454",
      "diff_url": "https://github.com/psf/requests/pull/6454.diff",
      "patch_url": "https://github.com/psf/requests/pull/6454.patch",
      "merged_at": null
    },
    "body": "## Summary\r\n\r\nAdds support for any path-like object, including `pathlib.Path`. See https://github.com/psf/requests/issues/5936#issuecomment-931758148 for more details.\r\nSome things have changed since the linked issue was created, so it may be a good time to add support now.\r\n\r\nFixes #5936 ",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6454/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6454/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6453",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6453/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6453/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6453/events",
    "html_url": "https://github.com/psf/requests/issues/6453",
    "id": 1703537523,
    "node_id": "I_kwDOABTKOs5lietz",
    "number": 6453,
    "title": "Error when requesting URL which contains emojis or certain characters",
    "user": {
      "login": "emilio-cea",
      "id": 23096738,
      "node_id": "MDQ6VXNlcjIzMDk2NzM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23096738?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilio-cea",
      "html_url": "https://github.com/emilio-cea",
      "followers_url": "https://api.github.com/users/emilio-cea/followers",
      "following_url": "https://api.github.com/users/emilio-cea/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilio-cea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilio-cea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilio-cea/subscriptions",
      "organizations_url": "https://api.github.com/users/emilio-cea/orgs",
      "repos_url": "https://api.github.com/users/emilio-cea/repos",
      "events_url": "https://api.github.com/users/emilio-cea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilio-cea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2023-05-10T09:50:51Z",
    "updated_at": "2023-06-22T09:28:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When performing a GET request to a URL which contains emojis, a redirection occurs in which the `location` header also contains emojis. From the stacktrace error I believe there's an error when handling redirects if the URL contains certain characters or emojis on it, but further investigation could yield better results.\r\n\r\nThis is the URL in question: `https://www.nulled.to/topic/512174-income-ocean-\ufffd-hf-leak-\ufffd\u2600\ufe0f/`\r\n\r\nIt can be found on a forum page, where the source HTML contains these emojis and characters:\r\n`https://www.nulled.to/forum/9-tutorials-guides-ebooks-etc/page-779?prune_day=100&sort_by=Z-A&sort_key=start_date&topicfilter=all`\r\n\r\n_Note that when making the request to the URL, since it's a Cloudflare protected forum, an error 403 can happen in which case, the error mentioned further below **does not happen**. That's why it leads me to believe the error happens only when a redirection occurs, as the `location` header which requests is trying to fetch also contains emojis and then, the encoding error happens._\r\n\r\n## Expected Result\r\n\r\nMaking the request to the site successfully and returning HTML source code.\r\n\r\n## Actual Result\r\n\r\nAn error was raised:\r\nUnicodeDecodeError: 'utf-8' codec can't decode bytes in position 48-50: invalid continuation byte\r\n\r\nThis is the stacktrace:\r\n\r\n```bash\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n  return session.request(method=method, url=url, **kwargs)\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 542, in request\r\n  resp = self.send(prep, **send_kwargs)\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 677, in send\r\n  history = [resp for resp in gen]\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 677, in <listcomp>\r\n  history = [resp for resp in gen]\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 150, in resolve_redirects\r\n  url = self.get_redirect_target(resp)\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/sessions.py\", line 116, in get_redirect_target\r\n  return to_native_string(location, 'utf8')\r\nFile \"workdir/env/lib/python3.7/site-packages/requests/_internal_utils.py\", line 25, in to_native_string\r\n  out = string.decode(encoding)\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nurl = \"https://www.nulled.to/topic/512174-income-ocean-\ufffd-hf-leak-\ufffd\u2600\ufe0f/\"\r\nr=requests.get(url)\r\nprint(r.content)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.0-22-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6453/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6400",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6400/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6400/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6400/events",
    "html_url": "https://github.com/psf/requests/pull/6400",
    "id": 1654506335,
    "node_id": "PR_kwDOABTKOs5Nnkxj",
    "number": 6400,
    "title": "Codespell: workflow, config + 1 typo fixed",
    "user": {
      "login": "yarikoptic",
      "id": 39889,
      "node_id": "MDQ6VXNlcjM5ODg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yarikoptic",
      "html_url": "https://github.com/yarikoptic",
      "followers_url": "https://api.github.com/users/yarikoptic/followers",
      "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}",
      "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions",
      "organizations_url": "https://api.github.com/users/yarikoptic/orgs",
      "repos_url": "https://api.github.com/users/yarikoptic/repos",
      "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yarikoptic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-04-04T20:06:32Z",
    "updated_at": "2023-11-22T22:07:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6400",
      "html_url": "https://github.com/psf/requests/pull/6400",
      "diff_url": "https://github.com/psf/requests/pull/6400.diff",
      "patch_url": "https://github.com/psf/requests/pull/6400.patch",
      "merged_at": null
    },
    "body": "My humble contribution to keep requests so typos free as it is proudly is now.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6400/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6388",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6388/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6388/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6388/events",
    "html_url": "https://github.com/psf/requests/pull/6388",
    "id": 1636884109,
    "node_id": "PR_kwDOABTKOs5Ms4tZ",
    "number": 6388,
    "title": "Document that a Response is a context manager",
    "user": {
      "login": "Hawk777",
      "id": 365236,
      "node_id": "MDQ6VXNlcjM2NTIzNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/365236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Hawk777",
      "html_url": "https://github.com/Hawk777",
      "followers_url": "https://api.github.com/users/Hawk777/followers",
      "following_url": "https://api.github.com/users/Hawk777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Hawk777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Hawk777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Hawk777/subscriptions",
      "organizations_url": "https://api.github.com/users/Hawk777/orgs",
      "repos_url": "https://api.github.com/users/Hawk777/repos",
      "events_url": "https://api.github.com/users/Hawk777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Hawk777/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-03-23T05:37:45Z",
    "updated_at": "2023-03-23T05:37:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6388",
      "html_url": "https://github.com/psf/requests/pull/6388",
      "diff_url": "https://github.com/psf/requests/pull/6388.diff",
      "patch_url": "https://github.com/psf/requests/pull/6388.patch",
      "merged_at": null
    },
    "body": "This is mentioned in the Advanced Usage page, but not in the API reference. It is mentioned in the API reference for `Session`, so it seems reasonable that it should be mentioned for `Response` as well. It looks like this capability was added in GH-4137, which made the change to the former documentation but not the latter.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6388/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6383",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6383/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6383/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6383/events",
    "html_url": "https://github.com/psf/requests/pull/6383",
    "id": 1631149287,
    "node_id": "PR_kwDOABTKOs5MZoZY",
    "number": 6383,
    "title": "Clarify docs for multipart file uploads",
    "user": {
      "login": "SyntaxColoring",
      "id": 3236864,
      "node_id": "MDQ6VXNlcjMyMzY4NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3236864?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SyntaxColoring",
      "html_url": "https://github.com/SyntaxColoring",
      "followers_url": "https://api.github.com/users/SyntaxColoring/followers",
      "following_url": "https://api.github.com/users/SyntaxColoring/following{/other_user}",
      "gists_url": "https://api.github.com/users/SyntaxColoring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SyntaxColoring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SyntaxColoring/subscriptions",
      "organizations_url": "https://api.github.com/users/SyntaxColoring/orgs",
      "repos_url": "https://api.github.com/users/SyntaxColoring/repos",
      "events_url": "https://api.github.com/users/SyntaxColoring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SyntaxColoring/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-03-19T22:54:22Z",
    "updated_at": "2023-06-02T14:29:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6383",
      "html_url": "https://github.com/psf/requests/pull/6383",
      "diff_url": "https://github.com/psf/requests/pull/6383.diff",
      "patch_url": "https://github.com/psf/requests/pull/6383.patch",
      "merged_at": null
    },
    "body": "This makes some documentation changes that clarify the `files` argument of `requests.post()` et. al.\r\n\r\n## Be more precise when we say \"multiple files\"\r\n\r\nThe `files` argument can either be a dict:\r\n\r\n```python\r\nfiles = {\r\n    \"field_1\": file_1,\r\n    \"field_2\": file_2,\r\n}\r\n```\r\n\r\nOr a list of tuples:\r\n\r\n```python\r\nfiles = [\r\n    (\"field_1\": file_1),\r\n    (\"field_2\": file_2),\r\n]\r\n```\r\n\r\nA few places implied that to \"upload multiple files in one request,\" you had to use the list-of-tuples syntax. But the dict syntax supports multiple files just fine. The added power in the list-of-tuples syntax seems to be that you can upload multiple files *to the same form field.* So, we now say that.\r\n\r\n## Update the reference docs\r\n\r\nThe API reference documentation did not completely describe what values were acceptable for `files`, and in some cases it was misleading.\r\n\r\n* It didn't mention the list-of-tuples syntax at all.\r\n* It said you could pass a \"dictionary of `'name': file-like-objects`\". The pluralization there makes it look like you can do something like `{\"name\": [file_1, file_2]}`, but that's not correct.\r\n* It didn't describe what you were allowed to provide as a \"`fileobj`\". (It can be a file-like object, or `str` contents, or `bytes` contents.)\r\n* It said `name` to refer to the value that Requests uses as the form field name. This could be misconstrued as the file name. [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578) and other examples within Requests call it the \"field name\" or \"form field name.\"\r\n\r\nMy sources for these changes:\r\n\r\n* The existing [POST a Multipart-Encoded File](https://github.com/psf/requests/blob/7f694b79e114c06fac5ec06019cada5a61e5570f/docs/user/quickstart.rst?plain=1#L300) section.\r\n* The existing [POST Multiple Multipart-Encoded Files](https://github.com/psf/requests/blob/7f694b79e114c06fac5ec06019cada5a61e5570f/docs/user/advanced.rst?plain=1#L391) section.\r\n* [Request's type stubs](https://github.com/python/typeshed/blob/8080e491d2fa92b1b1390c87fac23a1a38dcd919/stubs/requests/requests/sessions.pyi#L91).\r\n\r\nIt's difficult to describe this API concisely because it accepts so many different input shapes, and these additions do make the rendered docs feel a bit crowded.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6383/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6377",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6377/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6377/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6377/events",
    "html_url": "https://github.com/psf/requests/issues/6377",
    "id": 1618801708,
    "node_id": "I_kwDOABTKOs5gfPQs",
    "number": 6377,
    "title": "test_zipped_paths_extracted fails if test file has been modified since last run",
    "user": {
      "login": "DRMacIver",
      "id": 28623,
      "node_id": "MDQ6VXNlcjI4NjIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DRMacIver",
      "html_url": "https://github.com/DRMacIver",
      "followers_url": "https://api.github.com/users/DRMacIver/followers",
      "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}",
      "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions",
      "organizations_url": "https://api.github.com/users/DRMacIver/orgs",
      "repos_url": "https://api.github.com/users/DRMacIver/repos",
      "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DRMacIver/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-03-10T11:07:01Z",
    "updated_at": "2023-03-10T11:07:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "If you run `python -m pytest tests/test_utils.py -ktest_zipped_paths_extracted` this test will pass normally. If you run it again, it will pass again.\r\n\r\nIf, however, you make any modifications to the file, the test will now fail and keep failing:\r\n\r\n```       assert filecmp.cmp(extracted_path, __file__)\r\nE       AssertionError: assert False\r\nE        +  where False = <function cmp at 0x7f4ea6d4dab0>('/tmp/test_utils.py', '/home/david/project-reducer/scratch/requests/tests/test_utils.py')\r\nE        +    where <function cmp at 0x7f4ea6d4dab0> = filecmp.cmp\r\n```\r\nThe reason for this is that the last time the test ran, the contents of `__file__` were written to `/tmp/test_utils.py` and when `extract_zipped_paths` is next called, it doesn't overwrite the existing file, so the filecmp fails because it's now comparing against the old version of the file.\r\n\r\n## Expected Result\r\n\r\nThe test should run successfully when modifications to the file are made.\r\n\r\n## Actual Result\r\n\r\nModifications to the test file that are unrelated to the test in question cause it to fail.\r\n\r\n## Reproduction Steps\r\n\r\n```bash\r\npython -m pytest tests/test_utils.py -ktest_zipped_paths_extracted\r\necho -n '# modification' >> tests/test_utils.py\r\npython -m pytest tests/test_utils.py -ktest_zipped_paths_extracted\r\n```\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.1.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"3.0.1\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.8\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.15.90.1-microsoft-standard-WSL2\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.2\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.14\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6377/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6347",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6347/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6347/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6347/events",
    "html_url": "https://github.com/psf/requests/pull/6347",
    "id": 1574264336,
    "node_id": "PR_kwDOABTKOs5Jba48",
    "number": 6347,
    "title": "Use context manager to open files",
    "user": {
      "login": "RichieB2B",
      "id": 1461970,
      "node_id": "MDQ6VXNlcjE0NjE5NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1461970?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RichieB2B",
      "html_url": "https://github.com/RichieB2B",
      "followers_url": "https://api.github.com/users/RichieB2B/followers",
      "following_url": "https://api.github.com/users/RichieB2B/following{/other_user}",
      "gists_url": "https://api.github.com/users/RichieB2B/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RichieB2B/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RichieB2B/subscriptions",
      "organizations_url": "https://api.github.com/users/RichieB2B/orgs",
      "repos_url": "https://api.github.com/users/RichieB2B/repos",
      "events_url": "https://api.github.com/users/RichieB2B/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RichieB2B/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-02-07T12:45:21Z",
    "updated_at": "2023-11-29T14:03:11Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6347",
      "html_url": "https://github.com/psf/requests/pull/6347",
      "diff_url": "https://github.com/psf/requests/pull/6347.diff",
      "patch_url": "https://github.com/psf/requests/pull/6347.patch",
      "merged_at": null
    },
    "body": "In the documentation for `POST a Multipart-Encoded File` the example code opens the file inline but never closes it. This leaves the file open until the script ends. It is better to use a context manager even in example code.\r\n\r\nOriginal:\r\n```\r\n>>> url = 'https://httpbin.org/post'\r\n>>> files = {'file': open('report.xls', 'rb')}\r\n\r\n>>> r = requests.post(url, files=files)\r\n>>> r.text\r\n```\r\n\r\nReplace with:\r\n```\r\n>>> url = 'https://httpbin.org/post'\r\n>>> with open('report.xls', 'rb') as fd:\r\n...     files = {'file': fd}\r\n\r\n...     r = requests.post(url, files=files)\r\n...     r.text\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6347/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6347/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6344",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6344/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6344/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6344/events",
    "html_url": "https://github.com/psf/requests/issues/6344",
    "id": 1560963030,
    "node_id": "I_kwDOABTKOs5dCmfW",
    "number": 6344,
    "title": "Cookies returned in Set-Cookie header not added to RequestsCookieJar ",
    "user": {
      "login": "helmstedt",
      "id": 48943001,
      "node_id": "MDQ6VXNlcjQ4OTQzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48943001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/helmstedt",
      "html_url": "https://github.com/helmstedt",
      "followers_url": "https://api.github.com/users/helmstedt/followers",
      "following_url": "https://api.github.com/users/helmstedt/following{/other_user}",
      "gists_url": "https://api.github.com/users/helmstedt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/helmstedt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/helmstedt/subscriptions",
      "organizations_url": "https://api.github.com/users/helmstedt/orgs",
      "repos_url": "https://api.github.com/users/helmstedt/repos",
      "events_url": "https://api.github.com/users/helmstedt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/helmstedt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2023-01-28T18:31:30Z",
    "updated_at": "2023-08-01T17:38:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I am making a post request where the response object has a 'Set-Cookie' with cookie data when inspecting response.headers, but where response.cookies has an empty cookie jar.\r\n\r\nMy request contains a number of parameters which I am reproducing here, but I doubt the issue has to do with the parameters passed:\r\n\r\n```response = requests.post(url, headers=headers, cookies=cookies, data=data, allow_redirects=False)```\r\n\r\nI suspect that the cookies returned in the header might contain non-standard syntax or are too long. I have tried logging in to the site in question using both Firefox and Chrome with Javascript off. Both browsers store the cookies for the response in question and submit the cookies for subsequent requests to the site in question.\r\n\r\n## Expected Result\r\n\r\nMy response object contains the following headers. I have edited a few alphanumeric characters in the values for safety reasons, but in terms of length and syntax nothing has been touched:\r\n\r\n    response.headers\r\n    >> {'Cache-Control': 'no-cache,no-store', 'Pragma': 'no-cache', 'Expires': 'Thu, 01 Jan 1970 00:00:00 GMT', 'Location': '/', 'Set-Cookie': '.AspNetCore.Correlation.jF47v6lTv_fiF9L6IoIRm_NyIwGokyQGecjNK4J6Qyc=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/signin-oidc; secure; samesite=none; httponly, .AspNetCore.OpenIdConnect.Nonce.CfDJ8N0wv-Ekr1hBgNlqS3YOmQRnE85Vk8rRFKjF8vB02JU-Q7_OtSCXPp_ukzPNIjKavJA13Ndwb9b7dDzR82gSyrHRa6edkcAUq4WxoL8KIz7ZkSN0BY0Fi6BPPDjZT-tog2HzormhD982Lioo2hYSu1oh6UHBHoVMwrEQfLxN54ySXY45aE2p-TmjBbSI4_LpLpodpubI46HtsrBX_h0x9Qys7bRitwhjX9aH4zHd9hxAWwZ9NQbyfKl7uAxEr8rs5dsz5y410uiMrlwEfPJKnCM=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/signin-oidc; secure; samesite=none; httponly, .AspNetCore.Cookies.V2=chunks-2; domain=; path=/; secure; samesite=lax; httponly, .AspNetCore.Cookies.V2C1=CfDJ8N0wv-Ekr1hBgNlqS3YOmQRfOKeY0UmP1Odn0-2suN0E5YV2JDz7dlW5ZIRp2WEOVpjLDknFkmvAxZrV7zy8Mz7wJerKsjKXvlm37iIoM8CmkvXXug4_BFXiPJtPPLa4GDaMlh7MdIf_i2wavk9OrDxlyQi0LVFNURifPuL1-AQne1MpbiOshDP7Ap71SKh9FiNiY4bzGe8LJfPBCMGU-k-CXNz3WlRuKM6I6WuuPZ-F_6mbL1s9E4ecdvqLNhthnOgHzyNZtlfZoYaJSSGQQonQXKo0cI1Png7Kh6RRaGBa43b39XgilTDHPqwsUgYzSuaUBhJ2vW0MfYckMKKsrVK77jVg5oEKqpCCBOvQ4mkYWgIQ6v4TdtLT3IwLp_V_NcovbybhDlWmWfZIGqvPN7jqKcmrYD00blVCKtmUSQh1qF4cuy458Tk64gAp7rcwQQ6m0ye84iGJDuzXBe_qqoUOLiVqVTmZiSENuH-9_9ltF5gnp9IdPHsLFbQqtr8ahlKnyvmRjQSEbpNBSf1N0xga83ZfLeQTRKop-qLiQW4wTNHtJlTIJAuYGF-yuUmHApo-45yOh5qN7naiXejfG0oFP-adnRS9mUu4hErwzM3_QhORBvXjPsSlK-PNoNvNpsqwFq69Z321x4qwSrdBnUd0W7SphPh0tMCurcg4AHSY2uMRX9QXwL8dEGvtvBhF3Omt_g14rhYMoeNDKegTvRFGG_q6DUdf_t9Jn4rhw3uxfC9UUIUfYKsbLlWvr6_Bz4cSu1H287nRCeIONQFjTCnR2C1DFwFaeOwip5GYKeJGJbVlu5nCx4X1rdIhuTpko83IvQaAYP5okESCGm215bST0higylflnG0uChRgTyI6ABusBKLyHYVeBTuqZkF-GebWSoD2iLp8SoNZ8GVfvCQMbEwotPTfiycMG3dfI_03h9X3rJD8AHruOFwJsaly4xxorXwKlbALJ_Ym4jLISaJJEjJ3CpIE_6pch32cxQ-t3GvnduCdfkc3oFRB2cakuW_W5-Bqj3wyF6mqNzfy9rwslGNOrkPiLCcCqbq4KjvzXIYPOw-eP7iPU8OO_a7TJsTOX_QIgMEWuufdxNlA8okiNL-9dqGee3rOrwQpCxr2vWUu29dSisVZwQtQF0Bbn3gAyPtHS3lL0pSeRjupVpC4BMZZzYUdy3oy1TYASBT2uIp9SbvnYd2j65xNutTtgONLY_Zf9p4KewFRRfnZzttX02YFt3yjRsa6IGqUaDMtpy9KaKN9nk_IhrWbTpqwkYYAtrsKpwNoJfyIT2WAJAE6NbrqGbLxNqJBHYDnJRY2yCon0dmHFzzKp5YWPVabopHEtHV6OcpX_0zH0Dt_1Lz61FDHJiQcPg0yCr63q8lzku5MDt8mgrTJoWF4MYr9Bg4R-dzTOBVCaCBytfH2k18IdImmWRjthQR1sBsgyQjh6LeeY4lDClfqmgGEs_dOofsQAc6QcQN2VdD7o3TZR5drOPk2zLsVv25mGs9f9rKM5rMWcHAdGmZ5kzucxPN9S7WbuxR3Iw_BXVx0lgR1aw88jLcWDiC6EmOD07l43EDLxt8Jq3ZARfXxcvVOnaY5Rg9pu1U7ex2WSkowzIRo6XXhe1I-NuFVjZq5wE-GP3NoQznhYbZEF2sMYwvKm7nDArt8TcFbxXy_ZUudiiRQ8zU89m4rzlaSQdyz6qDmx2sYUU61RirfSZDsdhZKtC4_nXRVb-GdfJJDAIpwYwqcoEETodgmrjBa1Vw1uxbdA0F5GnU_pMRrep1hywy9SidcMmeqvCTCkThqaiZ-3DV2RVaLn8vugggtZtAxpxE0POUfEVxmTfZQKZsQ9Ec57AEsJhMsfN7gJJyocjm9j1-GKzrplor76zy3DcxoaQSCZ7pfUG7cIxEVFhQD_cKdSldHnHfAK6S3TYmi7Whn-Y10aANTLlZDzgKkpYugMjpq1RqPE7NfOT-mChe9Wda0lpWh44cxgHA6FUAu1KGfTl-EGg6frYHuYSgoMl3cmDaLJPme2SlrYdjr0rKoM3kWlWFEf9YxstbGgoGoLqSG6A2BJuiRaq5nxT3lLkUinaeqFs42YzeRAouTRrdJhSvVwIU6EEZeDeC6GXl7lC2U_EDdejgBMnANf-uSntMENJF8N4_p4YInxhG-AKLYJRK15MTMVUjg-Qir43SHB02sBbKyDPltr4Ripm5KVnRORahPfVMH8HsYwRc4CSyyebl-Nyl6RajQdVBP2OzT6iFAhCyNbWckkoIhzGtP9HF2v_ilyh4iqEakJnuKzDdicNi0f0LE2-GPo9td4NrFQSePz9wRkvqbsePq6nLlVeljYwtjagPlS6T-y0xAKOceQH-wOmehidWsx__yLytKL9QMXWykdDGrPyB6EarA-BqySWDWIKr0VgQiy8XcAxdJgWltvA3X7qGLYnWO9DmyWovAYt60H7V0pXDESkr8BKnklrVk4ALzEnCWvY1jY-39pxqiAsFKjKDoxFRUSp7zThjRTvPZ5LoNE3BAZU0zHv5ZTNca-qFgwEaMNgD0OmCdPE3VflBxb4_No4Md-LsezU_m4nZvwv3QbmQ4wgMSmIBFJ_JJzjVSo6bJcIdrrNiIQsYbCVIDGb2ZlTSqnBtBlze3MEYhCdBIJWsOyWSTOMygtH5aQ5D4yP4W1k_9eNNP-s9RdwRGvFfuFNO5T8FDZgWKYGUnhtRuhAIALbzIlZuSjd11qNxVtXtEtHMbWoYGHQqjVlvodTEAXVyA5-G-MjSBZzBO5b2mrDAvlKrHT0s8qAii9GBDM4Hrjhts6Q4zuCqV-34GrovkEKVokNDuSotRPycjCdeOLQDHtWsBy9VK_3jrxlSqTq2RHHpKhgeURd6--cjIjX9gMkUc3NRj1zCRkF4_LsGLQcaIkybZjUP4Fh1G9viOqJYlZGlkLQMV1vIIIPN6uFRAVz_QwKbK00R1OAS2HiqTP8dMD_6S4jYNKSbyFBku6bZG5GkG2NxefJx5Y9fFnX7AkzKOK9GNbcYqO9g5uv_yqFEtH0tYpjtumVRcU8lTUQoVZJdC1I12qDfGZ5KOIWOZmnS_IA-rDUYFp2IYtOyLuNvFVIyiOMRKGlTo5i1nAZXK-dF_kAoiIz9SmJa5q_uBliyo_G1iyNcCECtK_B3C4YmFYAOKDiUcStIiPo5DQjRe_94dr2Q-D4RPnxHrE1jKh9SbZpDLHserbTUGXwyHnO0wmoZRrrLleV8bzG2x2KJJyDBKwfXn5MKN51_DesTY95Ek7o-PEJTtAwTFchweH1DbEogvTn7uPJZwkU30ez3XsIJLEFvmXI8Vz0S7tvstpzg0SdtOEcFSkiRT1ONyC1k2fq8CTVH8quVXEmVXbwrSh1K_AH_kc9gMtrPmcIxjnekvDS1-O8HzufgAz8N6fWg4JyLSAn-MlnMfBYGiFNRcJxic2yr6ypGwALcDCHPRsjj-1Hm50LiTSi-FUpTVSuKpnmkt_ECmWVbt86OdfR88j76Pj0f_y3Usa9kq8AL0d8gRzXnxq-73_3pTa71KlGrwPdKbMU04XX6xBsMyMPXDX_Ahh29TlUTLkBDQW_YgTbLL16mOt4s8mVl79zb9yM6zDuSZQ6DL4LuPRSvOushld390_85f2RND0z_yDAB44QXtghPHOM1oyUI3obpnhKp-1canAdsFR6truMIjDceN1IImqXgWzjMzN106wJjadsFyWc5qbZfvpHUSiwNLJDYgwHQI-dUs2mbdNcyotCWmvzUxRoDvJwWXNX4b7FBmfIsZEeqkt3vOs1F5Xz6bXM5-XwQUELdK5m18hfCkhZ2CEhaLd7Nwn-1bQpvjbHg4f0ftMPYxGnSFsePWOFmaUQgUOmE9qr2EgHmWzRe837KWHsqAW3N89TKmlrxecbf3ekxsuqKm7GHHQyzGOz2eHkI6M_k5Ix0eGLN6-E4Gywpbvxfgqgtkv_2cMKuYJtp; domain=; path=/; secure; samesite=lax; httponly, .AspNetCore.Cookies.V2C2=wQS0WKB4ajMPd7QaJarvKMBSR6cvj4d80LSzHJEe1GXtS49K9t2HHcEYjBOG4rtkA4tzE5ZRzuY0hbxxi9jLF1CDzsE7_jG6eCWPVpkNITF-vteDH52CYywJi-RHZ68Yq7UFNCYlf8dw8U9irplfv33IDTt_-1Uy3JcB4DPYYp0wPZAuZAg3GzvnJB6T2LXcxJ-P7a8gwV2Tz0w2BAmbUaD1gL4Jq2abwgkE3NqGDyKsfISega78J9jLgaZvyBFQ86yetjuaPuCZ-ZiM3CPyiIg3Bvv15FK0sGi6blVKxfSsf_RMYxNptMgn39Xh5idQYxW4GwMIvojANiufWmAhNr959CiRm-dVaYjs4FBPG7CwyYf5RSFFoR1bMYv_moTbmct0ttAAY2zv6IifJyEDt7bkrL0dQkI8vAH868hG06huqd8ihFpi0GUyinx1Qgp1LakCesausD8B_cHSNmzYXReQn1Ttu8vCD8T4mLXtBW-J535ybMlKnv49LiIzUG41HLzhkRqqpgst-7hGFIeZUcbM3Gs6J1MkSsEJx8StFxSddn3apbZx2nT9429j4Rq1jk-4SBgOt1y7fTcAknLPMl9aoSbTL7mfIG8yqZuvzJMKWxy0jhtkpfa0lpHnk8bf6ZToQlJInvksRKRmbKTWGEKhSEobN3ONmM_zT1KUf64O6JHj95uh6_xooguHRuQhVnV4N1uIZodzBm-_N_SvAPt3U0qvcWJ7WJykc5B8kKSNz9Dk3nWzSEfXygd88r-aV_3bLIZf1kM6qzB8wd9zEZasb9ud6lIosoQx_riquJxkh4PjRkxKjOvZp9ESaPTISeNBc1tHC-UEy5UglJ95sQ6os7bO7YBz5lXcvoH4kFTj4D-h_DFq3wdQ-hFFiUSuNafF0Vs0vwQmq1er9MVeLmyrEs8mO1M6MsExJ0UIB2jG4qcEc0YVtOaayEXAsQU_02zHJyV96IuXOzh3bYx6K6ztHvECl0XfMjgRFLtAiyByf0zRGWxxf_lfKJMKW2CY1HWcieaaaUsnMQbXSXlCPuEVnnisRTH3eVgjHsP5Vz3uuVJ_e5ZBDVpvuwBuVcinxLKIfaCJjooQKk3Hxwu04cC0OmUOf9NXWzRuWEX-UkXxEE8SiaLzzDFlawHBTRDWD2WNC_4zP_oGI6y9AgM-h3iY8MWApimSUxKClBl9mhmgABM0q7UTApAYr5gkaGxl7nqcEj0wjSk6q0pyV78_OAU4E6c2w0LEOPvlCvdVulMe8T9-x3P37zWzTwNv0s-kJ62KfNqBPuLmzNti9qQObw9TQtOYVGEG1jnemgHSjPggcE5YEN4SnOsdgoI7IKNogzE4_3_zVTsv0pZ-Uhj56guc5G9gOEjDITTigm-6sFvsAIgf4Id3lRdoUmtyW1LhpIh2r87XLPaAPNvBpSHIapWRr7R3uPfqunMvcXagRbOtfHoTCdKq8JClybnonwR6nYTK6tnVXRTPfvLzC2jyWP2YbsNvV0zKLcB3iOhgf; domain=; path=/; secure; samesite=lax; httponly', 'X-Content-Type-Options': 'nosniff', 'X-Robots-Tag': 'noindex, nofollow', 'Strict-Transport-Security': 'max-age=31536000; includeSubDomains', 'Content-Security-Policy': \"report-uri https://csp-report.browser-intake-datadoghq.eu/api/v2/logs?dd-api-key=pubd9330f91e9b3979f9a62f277730740cb&dd-evp-origin=content-security-policy&ddsource=csp-report&ddtags=env%3aproduction%2cversion%3a58610%2cservice%3aDinero.Frontend;default-src 'none';script-src *.chargebee.com *.chargebeestatic.com *.adyen.com connect.facebook.net www.google.com googleads.g.doubleclick.net www.googleadservices.com www.google-analytics.com www.googletagmanager.com ajax.googleapis.com maps.googleapis.com *.linkedin.com snap.licdn.com bat.bing.com 'self' *.dinero.dk *.workbox.dk 'unsafe-eval' 'unsafe-inline' trackcmp.net https://cdneu.net/app.js https://storage.googleapis.com/snowplow-cto-office-tracker-bucket/2.15.0/sp.js analytics.twitter.com static.ads-twitter.com js.userflow.com disutgh7q0ncc.cloudfront.net *.zopim.com *.zendesk.com *.zdassets.com;style-src *.chargebee.com 'self' *.dinero.dk *.workbox.dk data: 'unsafe-inline' js.userflow.com;img-src www.facebook.com www.google.dk www.google.com stats.g.doubleclick.net www.google-analytics.com www.googletagmanager.com *.googleapis.com maps.googleapis.com *.ggpht.com maps.gstatic.com *.linkedin.com bat.bing.com 'self' *.dinero.dk *.workbox.dk data: blob: *.visma.com cb-prod-eu-c1-invoice-logos.s3.eu-central-1.amazonaws.com gallery.mailchimp.com www.partner-ads.com analytics.twitter.com t.co js.userflow.com cdn.nordicapigateway.com nagpublic.blob.core.windows.net *.zopim.com *.zopim.io;font-src 'self' *.dinero.dk *.workbox.dk data: *.zopim.com;child-src 'none';connect-src *.algolia.net https://*.browser-intake-datadoghq.eu dawa.aws.dk www.facebook.com stats.g.doubleclick.net www.google-analytics.com *.oribi.io bat.bing.com 'self' dinero.dk *.dinero.dk *.workbox.dk ws: wss: *.visma.com https://cdneu.net/app.js https://capture-api.eu.autopilotapp.com/ js.userflow.com *.wootric.eu wootric-eligibility.herokuapp.com *.zopim.com *.zopim.io *.zdassets.com wss://*.zopim.com wss://dinero.zendesk.com;worker-src blob:;media-src *.zopim.com;frame-src *.chargebee.com *.adyen.com *.dinero.dk *.workbox.dk player.vimeo.com;frame-ancestors https://connect.visma.com;form-action adfs.mylogbuy.com 'self' https://connect.visma.com;object-src 'none';\", 'Date': 'Sat, 28 Jan 2023 17:34:56 GMT', 'Content-Length': '0', 'Via': '1.1 google', 'Alt-Svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000'}\r\n\r\nI would expect my response.cookies to contain the cookie data in response.headers['Set-Cookie'].\r\n\r\n## Actual Result\r\n\r\nInstead of containing the cookies from the response headers, the response cookie jar is empty:\r\n\r\n    response.cookies\r\n    >> <RequestsCookieJar[]>\r\n\r\nI have tried logging in to the site in question using both Firefox and Chrome with Javascript off. Both browsers store the cookies for the response in question and submit the cookies for subsequent requests to the site in question.\r\n\r\n## Reproduction Steps\r\n\r\nI am unable to provide reproduction steps in the bug report, since a complete reproduction includes user credentials for the site in question. I hope that someone with more in-depth knowledge of Requests is able to reproduce the issue by parsing the Set-Cookie part of the header above with the relevant class or functions in Requests.\r\n\r\nI would be happy to provide a bug fixer with test credentials and code to reproduce the issue on the site returning the response. Just reach out to me.\r\n\r\n## System Information\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.0\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010cf\",\r\n    \"version\": \"22.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.2\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6344/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6344/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6313",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6313/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6313/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6313/events",
    "html_url": "https://github.com/psf/requests/issues/6313",
    "id": 1506222821,
    "node_id": "I_kwDOABTKOs5ZxyLl",
    "number": 6313,
    "title": "requests ignores no_proxy which contains a IPv6 CIDR ",
    "user": {
      "login": "derekhiggins",
      "id": 883848,
      "node_id": "MDQ6VXNlcjg4Mzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/883848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/derekhiggins",
      "html_url": "https://github.com/derekhiggins",
      "followers_url": "https://api.github.com/users/derekhiggins/followers",
      "following_url": "https://api.github.com/users/derekhiggins/following{/other_user}",
      "gists_url": "https://api.github.com/users/derekhiggins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/derekhiggins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/derekhiggins/subscriptions",
      "organizations_url": "https://api.github.com/users/derekhiggins/orgs",
      "repos_url": "https://api.github.com/users/derekhiggins/repos",
      "events_url": "https://api.github.com/users/derekhiggins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/derekhiggins/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-12-21T12:27:54Z",
    "updated_at": "2022-12-21T12:41:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "python requests supports a no_proxy environment variable with a IPv4 CIDR e.g.\r\n\r\ne.g\r\n```\r\n+ export http_proxy no_proxy\r\n+ http_proxy=http://localhost\r\n+ python -c 'import requests.utils ; print(requests.utils.should_bypass_proxies(\"http://1.2.3.4\", None))'\r\nFalse\r\n+ no_proxy=1.2.3.0/24\r\n+ python -c 'import requests.utils ; print(requests.utils.should_bypass_proxies(\"http://1.2.3.4\", None))'\r\nTrue\r\n```\r\n\r\nbut doesn't support a IPv6 CIDR e.g.\r\n\r\n```\r\n+ http_proxy=http://localhost\r\n+ python -c 'import requests.utils ; print(requests.utils.should_bypass_proxies(\"http://[1:2:3::4]\", None))'\r\nFalse\r\n+ no_proxy=1:2:3::/64\r\n+ python -c 'import requests.utils ; print(requests.utils.should_bypass_proxies(\"http://[1:2:3::4]\", None))'\r\nFalse\r\n```\r\n\r\n\r\n## Expected Result\r\n\r\nFor proxy to be bypassed if a the url matches the IPv6 CIDR in no_proxy\r\n\r\n## Actual Result\r\n\r\nIPv6 CIDR ignored\r\n\r\n## Reproduction Steps\r\n\r\nas above\r\n\r\n## System Information\r\n\r\n[derekh@laptop ~]$  python -m requests.help\r\n/usr/lib/python3.11/site-packages/requests/help.py:24: DeprecationWarning: 'urllib3.contrib.pyopenssl' module is deprecated and will be removed in a future release of urllib3 2.x. Read more in this issue: https://github.com/urllib3/urllib3/issues/2680\r\n  from urllib3.contrib import pyopenssl\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.1.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"37.0.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.11.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"6.0.13-300.fc37.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"30000050\",\r\n    \"version\": \"21.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000050\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6313/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6295",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6295/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6295/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6295/events",
    "html_url": "https://github.com/psf/requests/issues/6295",
    "id": 1465062456,
    "node_id": "I_kwDOABTKOs5XUxQ4",
    "number": 6295,
    "title": "Endless history: the history contains a self-reference",
    "user": {
      "login": "CachingFoX",
      "id": 1838534,
      "node_id": "MDQ6VXNlcjE4Mzg1MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1838534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CachingFoX",
      "html_url": "https://github.com/CachingFoX",
      "followers_url": "https://api.github.com/users/CachingFoX/followers",
      "following_url": "https://api.github.com/users/CachingFoX/following{/other_user}",
      "gists_url": "https://api.github.com/users/CachingFoX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CachingFoX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CachingFoX/subscriptions",
      "organizations_url": "https://api.github.com/users/CachingFoX/orgs",
      "repos_url": "https://api.github.com/users/CachingFoX/repos",
      "events_url": "https://api.github.com/users/CachingFoX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CachingFoX/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2022-11-26T06:12:04Z",
    "updated_at": "2024-07-04T12:37:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The history of a requests contains a self-reference to the history owner. The history will be endless.\r\n\r\n## Expected Result\r\nIf I traverse recursive the complete history of a requests, this will be a finally graph.\r\nThe history of a request is a tree without cycles. \r\n\r\n```\r\nR1 (history: 2)\r\n     R2 (no history)\r\n     R3 (no history)\r\n```\r\n\r\n## Actual Result\r\nIf I traverse recursive the complete history of a requests, the program breaks with recursive error. `RecursionError: maximum recursion depth exceeded while calling a Python object`\r\nThe history contains a self-reference to the history owner.\r\n\r\nThe history of a request is a graph with a cycle.\r\n\r\n```\r\nR1 (history: 2)\r\n     R2 (no history)\r\n          R3 (history: 1)\r\n               R3 (history: 1)\r\n                    R3 (history: 1)\r\n                         R3 (history: 1)\r\n                              R3 (history: 1)\r\n                                   ....\r\n```\r\n```\r\nid=140537834271072 history=2\r\n\tindex=0 id=140537834079136\r\n\tindex=1 id=140537834080960\r\nid=140537834079136 history=0\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\n\r\n....\r\n\r\n\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nid=140537834080960 history=1\r\n\tindex=0 id=140537834080960\r\nTraceback (most recent call last):\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 12, in <module>\r\n    history(requests.get('https://coord.info/GC8T8E8'))\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 9, in history\r\n    history(item)\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 9, in history\r\n    history(item)\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 9, in history\r\n    history(item)\r\n  [Previous line repeated 993 more times]\r\n  File \"/Users/andreas/PycharmProjects/cce/main.py\", line 5, in history\r\n    print(f\"id={id(r)} history={len(r.history)}\")\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\nProcess finished with exit code 1\r\n\r\n```\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\n\r\ndef history(r):\r\n    print(f\"id={id(r)} history={len(r.history)}\")\r\n    for index, item in enumerate(r.history):\r\n        print(f\"\\tindex={index} id={id(item)}\")\r\n    for index, item in enumerate(r.history):\r\n        history(item)\r\n\r\n\r\nhistory(requests.get('https://coord.info/GC8T8E8'))\r\n\r\n\r\n```\r\n\r\n## System Information\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.1\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"21.6.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010109f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.13\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": {
      "login": "sethmlarson",
      "id": 18519037,
      "node_id": "MDQ6VXNlcjE4NTE5MDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/18519037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sethmlarson",
      "html_url": "https://github.com/sethmlarson",
      "followers_url": "https://api.github.com/users/sethmlarson/followers",
      "following_url": "https://api.github.com/users/sethmlarson/following{/other_user}",
      "gists_url": "https://api.github.com/users/sethmlarson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sethmlarson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sethmlarson/subscriptions",
      "organizations_url": "https://api.github.com/users/sethmlarson/orgs",
      "repos_url": "https://api.github.com/users/sethmlarson/repos",
      "events_url": "https://api.github.com/users/sethmlarson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sethmlarson/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6295/timeline",
    "performed_via_github_app": null,
    "state_reason": "reopened"
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6294",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6294/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6294/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6294/events",
    "html_url": "https://github.com/psf/requests/issues/6294",
    "id": 1462357280,
    "node_id": "I_kwDOABTKOs5XKc0g",
    "number": 6294,
    "title": "PUT requests for zero-byte files get 'Transfer-Encoding': 'chunked' header",
    "user": {
      "login": "radu-malliu",
      "id": 26001154,
      "node_id": "MDQ6VXNlcjI2MDAxMTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26001154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/radu-malliu",
      "html_url": "https://github.com/radu-malliu",
      "followers_url": "https://api.github.com/users/radu-malliu/followers",
      "following_url": "https://api.github.com/users/radu-malliu/following{/other_user}",
      "gists_url": "https://api.github.com/users/radu-malliu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/radu-malliu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/radu-malliu/subscriptions",
      "organizations_url": "https://api.github.com/users/radu-malliu/orgs",
      "repos_url": "https://api.github.com/users/radu-malliu/repos",
      "events_url": "https://api.github.com/users/radu-malliu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/radu-malliu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-11-23T20:20:33Z",
    "updated_at": "2022-11-23T20:20:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Context: uploading files to AWS S3 via requests. Files may be empty. When attempting to upload an empty file, a response of `501: Not implemented` is received. This seems to be because, when content length is 0, a `Transfer-Encoding: chunked` header is automatically added. S3 does not support the encoding.\r\n\r\n## Expected Result\r\n\r\nWhen an empty file PUT is attempted via `requests.put`, a `Content-Length: 0` header should be set on the request. A `Transfer-Encoding: chunked` header should not be set automatically.\r\n\r\n## Actual Result\r\n\r\nWhen an empty file PUT is attempted via `requests.put`, a `Transfer-Encoding: chunked` header is set. No `Content-Length` header is set. If a `Content-Length: 0` header is set explicitly, the `Transfer-Encoding: chunked` header is still set.\r\n\r\n## Reproduction Steps\r\n\r\nIf AWS account, bucket, credentials for principal with PutObject permissions aren't available:\r\n```python\r\nimport requests\r\n\r\nfile = open(<path_to_empty_file>, \"rb\")\r\nsession = requests.session()\r\n\r\nlink = \"http://httpbin.org/put\"\r\n\r\n# using requests.put yields the same results. Using session.put here to examine request\r\n# with S3 instead of httpbin.org, the call below results in a 501. Note the request headers\r\nres_no_CL = session.put(link, data=file, headers={\"Content-Type\": \"text/plain\"})\r\nprint(res_no_CL.request.headers)\r\n# with S3 instead of httpbin.org, the call below results in a 501. With httpbin.org it returns\r\n# ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\r\n# so can't examine headers, but I assume behaviour is consistent\r\nres_explicit_CL = session.put(link, data=file, headers={\"Content-Type\": \"text/plain\", \"Content-Length\": \"0\"})\r\nprint(res_explicit_CL.request.headers)\r\n```\r\n\r\nIf AWS prerequisites above are available:\r\n```python\r\nimport requests\r\nimport boto3\r\n\r\ns3 = boto3.client('s3')\r\nfile = open(<path_to_empty_file>, \"rb\")\r\nsession = requests.session()\r\n\r\nlink = s3.generate_presigned_url(ClientMethod=\"put_object\", Params={\"Bucket\": \"<your_bucket>\", \"Key\": \"<path_in_bucket>\", \"ContentType\": \"text/plain\"})\r\n\r\n# using requests.put yields the same results. Using session.put here to examine request\r\n# the call below results in a 501. Note the request headers\r\nres_no_CL = session.put(link, data=file, headers={\"Content-Type\": \"text/plain\"})\r\nprint(res_no_CL.request.headers)\r\n# the call below results in a 501. Note the request headers\r\nres_explicit_CL = session.put(link, data=file, headers={\"Content-Type\": \"text/plain\", \"Content-Length\": \"0\"})\r\nprint(res_explicit_CL.request.headers)\r\n```\r\n\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.1\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.102.1-microsoft-standard-WSL2\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6294/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6282",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6282/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6282/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6282/events",
    "html_url": "https://github.com/psf/requests/issues/6282",
    "id": 1443045891,
    "node_id": "I_kwDOABTKOs5WAyID",
    "number": 6282,
    "title": "IPv6 Zone Identifiers are not correctly parsed (still)",
    "user": {
      "login": "benizl",
      "id": 15090,
      "node_id": "MDQ6VXNlcjE1MDkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15090?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benizl",
      "html_url": "https://github.com/benizl",
      "followers_url": "https://api.github.com/users/benizl/followers",
      "following_url": "https://api.github.com/users/benizl/following{/other_user}",
      "gists_url": "https://api.github.com/users/benizl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benizl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benizl/subscriptions",
      "organizations_url": "https://api.github.com/users/benizl/orgs",
      "repos_url": "https://api.github.com/users/benizl/repos",
      "events_url": "https://api.github.com/users/benizl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benizl/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2022-11-10T01:06:19Z",
    "updated_at": "2024-06-25T20:00:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Issue #5775 notes that IPv6 Zone Identifiers are not parsed correctly when the Zone ID is itself a valid percent-encoded character from the `UNRESERVED_SET`. That issue was incorrectly closed as a duplicate of #5126, in fact #5126 is to do with a different, resolved, bug in urllib. This ticket here *is* a duplicate of #5775 but commenting on that ticket is now locked.\r\n\r\nIPv6 addresses can have the form `fe80::1:2:3:4%zone` where `zone` is any alphanumeric sequence and is platform-dependent. In order to address their use in URLs, where the `%zone` could be interpreted as a percent-escaped character, RFC6874 requires the `%` to be replaced with its own percent-escaped representation `%25`, e.g. `http://[fe80::1:2:3:4%25zone`.\r\n\r\nIn `requests`, this is not enough to protect the Zone ID in the URL, if the zone is a valid percent-escaped character from the `UNRESERVED_SET`. Specifically, `url.py::_normalize_host` removes the RFC6874 sequence and replaces it with a simple `%`, then the round trip through `quote/unquote_reserved` in `utils.py::requote_uri` called from `PreparedRequest::prepare_url` transforms the Zone ID in to the percent-escaped character anyway.\r\n\r\nNote that *doubly* escaping the percent works, but the URL is then neither intuitive nor RFC-compliant.\r\n\r\n## Expected Result\r\n\r\n```python\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%61]').prepare().url -> Undefined/don't care (not RFC-compliant)\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%2561]').prepare().url -> 'http://[fe80::1:2:3:4%61]'\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%252561]').prepare().url -> 'http://[fe80::1:2:3:4%2561]'\r\n```\r\n\r\n## Actual Result\r\n\r\n```python\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%61]').prepare().url -> 'http://[fe80::1:2:3:4a]'\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%2561]').prepare().url -> 'http://[fe80::1:2:3:4a]'\r\nrequests.Request('GET', 'http://[fe80::1:2:3:4%252561]').prepare().url -> 'http://[fe80::1:2:3:4%61]'\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"22.1.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010111f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6282/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6279",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6279/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6279/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6279/events",
    "html_url": "https://github.com/psf/requests/issues/6279",
    "id": 1440191701,
    "node_id": "I_kwDOABTKOs5V15TV",
    "number": 6279,
    "title": " HTTPS Request through HTTP Proxy is sent incorrectly when using chunked body",
    "user": {
      "login": "moshec2",
      "id": 96691861,
      "node_id": "U_kgDOBcNmlQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/96691861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moshec2",
      "html_url": "https://github.com/moshec2",
      "followers_url": "https://api.github.com/users/moshec2/followers",
      "following_url": "https://api.github.com/users/moshec2/following{/other_user}",
      "gists_url": "https://api.github.com/users/moshec2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moshec2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moshec2/subscriptions",
      "organizations_url": "https://api.github.com/users/moshec2/orgs",
      "repos_url": "https://api.github.com/users/moshec2/repos",
      "events_url": "https://api.github.com/users/moshec2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moshec2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-11-08T13:19:24Z",
    "updated_at": "2023-06-22T14:43:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I am using the chunked request body feature (`data=generator`). When defining a HTTP proxy and sending a request to a HTTPS URL, `requests` is trying to perform a TLS handshake with the (HTTP) proxy server, instead of sending a CONNECT request and performing the handshake with the target server through the tunnel. This behaviour prevents the request from completing successfully.\r\n\r\n## Expected Result\r\n\r\n`requests` should send a CONNECT request to the proxy and negotiate TLS with the target server through the tunnel.\r\n\r\n## Actual Result\r\n\r\n`requests` tries to negotiate TLS directly with the HTTP proxy server, and fails to do so.\r\n\r\n## Reproduction Steps\r\n\r\nRun an HTTP proxy on `127.0.0.1:8080` and execute the following code:\r\n```python\r\n  import requests\r\n  \r\n  def body_generator():\r\n    yield \"test\"\r\n    return\r\n  \r\n  requests.post(\"https://www.google.com/\",\r\n    proxies={\"https\": \"http://127.0.0.1:8080/\"},\r\n    data=body_generator(),\r\n  )\r\n```\r\n\r\n## More info\r\n\r\nThe chunked encoding generator feature is implemented in `requests/adapters.py`:\r\n```python\r\ntry:\r\n    if not chunked:\r\n        resp = conn.urlopen(\r\n            ...\r\n        )\r\n\r\n    # Send the request.\r\n    else:\r\n        if hasattr(conn, \"proxy_pool\"):\r\n            conn = conn.proxy_pool\r\n\r\n        low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\r\n\r\n        try:\r\n            ... Send request with chunked body ...\r\n```\r\n\r\nIn the case of chunked encoding, instead of using `conn.urlopen` to send the request, it uses `conn._get_conn` and sends the request manually.\r\nIt seems like, for some reason, `conn._get_conn` is not handling the proxy correctly.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6279/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6275",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6275/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6275/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6275/events",
    "html_url": "https://github.com/psf/requests/issues/6275",
    "id": 1435476003,
    "node_id": "I_kwDOABTKOs5Vj6Aj",
    "number": 6275,
    "title": "[Feature request or doc oversight?] Apparently, there's still no way to read uncompressed content as file-like object #465 ",
    "user": {
      "login": "ell1e",
      "id": 64124388,
      "node_id": "MDQ6VXNlcjY0MTI0Mzg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/64124388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ell1e",
      "html_url": "https://github.com/ell1e",
      "followers_url": "https://api.github.com/users/ell1e/followers",
      "following_url": "https://api.github.com/users/ell1e/following{/other_user}",
      "gists_url": "https://api.github.com/users/ell1e/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ell1e/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ell1e/subscriptions",
      "organizations_url": "https://api.github.com/users/ell1e/orgs",
      "repos_url": "https://api.github.com/users/ell1e/repos",
      "events_url": "https://api.github.com/users/ell1e/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ell1e/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-11-04T02:58:55Z",
    "updated_at": "2022-11-04T02:58:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This was originally discussed here: https://github.com/psf/requests/issues/465 For some reason the ticket was however closed without a file-like object approach being added here: https://requests.readthedocs.io/en/latest/user/quickstart/ (Other than the somewhat odd `.raw` that returns something I suspect most people that just want a file-like stream aren't interested in.) There doesn't seem to be an explanation why that ticket was closed, and the discussion suggesting *something* was fixed but I can't really figure out what.\r\n\r\nSince it's not that easy to wrap `iter_content()` to a file like object with arbitrary read amounts and just wrapping `.content` for that generically seems to be unsafe to me due to denial of service, it would be nice if this was provided and then documented here: https://requests.readthedocs.io/en/latest/user/quickstart/ (With a section alike to \"Raw Response Content\".)\r\n\r\nThe requests version I tested on is: 2.27.1",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6275/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6270",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6270/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6270/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6270/events",
    "html_url": "https://github.com/psf/requests/pull/6270",
    "id": 1424104539,
    "node_id": "PR_kwDOABTKOs5Ble1Y",
    "number": 6270,
    "title": "fix: pass response (self) to ConnectionError constructor",
    "user": {
      "login": "ErikBjare",
      "id": 1405370,
      "node_id": "MDQ6VXNlcjE0MDUzNzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1405370?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ErikBjare",
      "html_url": "https://github.com/ErikBjare",
      "followers_url": "https://api.github.com/users/ErikBjare/followers",
      "following_url": "https://api.github.com/users/ErikBjare/following{/other_user}",
      "gists_url": "https://api.github.com/users/ErikBjare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ErikBjare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ErikBjare/subscriptions",
      "organizations_url": "https://api.github.com/users/ErikBjare/orgs",
      "repos_url": "https://api.github.com/users/ErikBjare/repos",
      "events_url": "https://api.github.com/users/ErikBjare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ErikBjare/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-10-26T14:10:56Z",
    "updated_at": "2023-09-20T09:44:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6270",
      "html_url": "https://github.com/psf/requests/pull/6270",
      "diff_url": "https://github.com/psf/requests/pull/6270.diff",
      "patch_url": "https://github.com/psf/requests/pull/6270.patch",
      "merged_at": null
    },
    "body": "As far as I can tell, this is the only internal construction of `ConnectionError` that doesn't include `request` or `response`.\r\n\r\nPart of improving typing for exceptions in requests: https://github.com/python/typeshed/pull/8989",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6270/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6265",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6265/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6265/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6265/events",
    "html_url": "https://github.com/psf/requests/pull/6265",
    "id": 1419643957,
    "node_id": "PR_kwDOABTKOs5BWpG_",
    "number": 6265,
    "title": "Fix setuptools deprecation warnings",
    "user": {
      "login": "mgorny",
      "id": 110765,
      "node_id": "MDQ6VXNlcjExMDc2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/110765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgorny",
      "html_url": "https://github.com/mgorny",
      "followers_url": "https://api.github.com/users/mgorny/followers",
      "following_url": "https://api.github.com/users/mgorny/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions",
      "organizations_url": "https://api.github.com/users/mgorny/orgs",
      "repos_url": "https://api.github.com/users/mgorny/repos",
      "events_url": "https://api.github.com/users/mgorny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgorny/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-10-23T05:24:51Z",
    "updated_at": "2023-01-19T13:20:33Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6265",
      "html_url": "https://github.com/psf/requests/pull/6265",
      "diff_url": "https://github.com/psf/requests/pull/6265.diff",
      "patch_url": "https://github.com/psf/requests/pull/6265.patch",
      "merged_at": null
    },
    "body": "Update keys used in `setup.cfg` in order to fix the following setuptools deprecation warnings:\r\n\r\n> The license_file parameter is deprecated, use license_files instead.\r\n\r\n> Usage of dash-separated 'provides-extra' will not be supported\r\n> in future versions. Please use the underscore name 'provides_extra'\r\n> instead\r\n\r\n> Usage of dash-separated 'requires-dist' will not be supported\r\n> in future versions. Please use the underscore name 'requires_dist'\r\n> instead",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6265/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6265/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6255",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6255/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6255/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6255/events",
    "html_url": "https://github.com/psf/requests/issues/6255",
    "id": 1401998263,
    "node_id": "I_kwDOABTKOs5TkMu3",
    "number": 6255,
    "title": "Mention pickling in the docs for creating custom Transport Adapters",
    "user": {
      "login": "izabelakowal",
      "id": 9248891,
      "node_id": "MDQ6VXNlcjkyNDg4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9248891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izabelakowal",
      "html_url": "https://github.com/izabelakowal",
      "followers_url": "https://api.github.com/users/izabelakowal/followers",
      "following_url": "https://api.github.com/users/izabelakowal/following{/other_user}",
      "gists_url": "https://api.github.com/users/izabelakowal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izabelakowal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izabelakowal/subscriptions",
      "organizations_url": "https://api.github.com/users/izabelakowal/orgs",
      "repos_url": "https://api.github.com/users/izabelakowal/repos",
      "events_url": "https://api.github.com/users/izabelakowal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izabelakowal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-10-08T16:38:53Z",
    "updated_at": "2022-10-08T16:38:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "While subclassing `HTTPAdapter` as well as `Session` the class variable `__attrs__` needs to be appended with any custom instance variables. Otherwise, the instance breaks during pickling, which can happen in many different scenarios - for example, during Django's `setUpTestData` deep copying/in-memory data isolation. I think it would be nice if this is mentioned in the documentation. \r\n\r\nThere's a classic example of a custom adapter for setting a timeout value that is mentioned in multiple blog posts. Unfortunately, all of these examples are essentially broken because of a lack of information about pickling and `__attrs__` class variable. \r\n\r\nAnd yet the pattern of overriding `__attrs__` exists in many open source libs, for example:\r\n\r\nhttps://github.com/requests/toolbelt/blob/master/requests_toolbelt/adapters/ssl.py#L46\r\nhttps://github.com/docker/docker-py/blob/main/docker/transport/unixconn.py#L57\r\n\r\nIf this pattern is so commonly used and needed, it might be a good idea to add it to the docs. Again, this is because so many people can stumble upon this issue.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6255/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6255/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6254",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6254/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6254/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6254/events",
    "html_url": "https://github.com/psf/requests/issues/6254",
    "id": 1400226001,
    "node_id": "I_kwDOABTKOs5TdcDR",
    "number": 6254,
    "title": "python context.verify_mode is ignored by requests module",
    "user": {
      "login": "revit13",
      "id": 16211463,
      "node_id": "MDQ6VXNlcjE2MjExNDYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/16211463?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/revit13",
      "html_url": "https://github.com/revit13",
      "followers_url": "https://api.github.com/users/revit13/followers",
      "following_url": "https://api.github.com/users/revit13/following{/other_user}",
      "gists_url": "https://api.github.com/users/revit13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/revit13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/revit13/subscriptions",
      "organizations_url": "https://api.github.com/users/revit13/orgs",
      "repos_url": "https://api.github.com/users/revit13/repos",
      "events_url": "https://api.github.com/users/revit13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/revit13/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-10-06T19:57:23Z",
    "updated_at": "2023-04-14T18:12:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "In the following code the response contains ssl error `SSL: CERTIFICATE_VERIFY_FAILED` although the default verify_mode `ssl.CERT_NONE` is set in the context by calling context=create_ssl_context() as hown below. I expected that I to get no ssl error.\r\n\r\nIt seems that `verify_mode` in the context is ignored by the requests module. It is not clear to me what attributes from the context are not ignored by the requests module? will it take context.minimum_version? Thanks\r\n\r\nCaused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1123)')))\r\n\r\n```\r\ndef create_ssl_context(verify_mode=ssl.CERT_NONE,\r\n                   key_file=None, cert_file=None,\r\n                   cafile=None,\r\n                   tls_min_version=None):\r\n    context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\r\n    context.verify_mode = verify_mode\r\n    if tls_min_version:\r\n        context.minimum_version = tls_min_version\r\n    if key_file or cert_file:\r\n        context.load_cert_chain(cert_file, key_file)\r\n    if cafile:\r\n        context.load_verify_locations(cafile)\r\n    else:\r\n        context.set_default_verify_paths()\r\n    return context\r\n\r\nclass SSLContextAdapter(requests.adapters.HTTPAdapter):\r\n   def __init__(self, ssl_context=None, **kwargs):\r\n      self.ssl_context = ssl_context\r\n      super().__init__(**kwargs)\r\n\r\n   def init_poolmanager(self, *args, **kwargs):\r\n      kwargs['ssl_context'] = self.ssl_context\r\n      return super(SSLContextAdapter, self).init_poolmanager(*args, **kwargs)\r\n\r\n\r\ndef client_side(context, hostname, data, headers):\r\n  s = requests.Session()\r\n  context = create_ssl_context()\r\n  s.mount('https://', SSLContextAdapter(context))\r\n  s.mount('http://', SSLContextAdapter(context))\r\n  print(context.verify_mode)\r\n  response = s.post(hostname, data=data, headers=headers)\r\n  print(response.text)\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6254/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6254/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6250",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6250/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6250/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6250/events",
    "html_url": "https://github.com/psf/requests/issues/6250",
    "id": 1391512671,
    "node_id": "I_kwDOABTKOs5S8Mxf",
    "number": 6250,
    "title": "apparent_encoding should be cached since chardet can be slow",
    "user": {
      "login": "mlissner",
      "id": 236970,
      "node_id": "MDQ6VXNlcjIzNjk3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/236970?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mlissner",
      "html_url": "https://github.com/mlissner",
      "followers_url": "https://api.github.com/users/mlissner/followers",
      "following_url": "https://api.github.com/users/mlissner/following{/other_user}",
      "gists_url": "https://api.github.com/users/mlissner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mlissner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mlissner/subscriptions",
      "organizations_url": "https://api.github.com/users/mlissner/orgs",
      "repos_url": "https://api.github.com/users/mlissner/repos",
      "events_url": "https://api.github.com/users/mlissner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mlissner/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-09-29T21:15:59Z",
    "updated_at": "2022-09-30T11:33:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "We have some scraper code that sometimes gets back PDFs and other times gets back HTML. Today we learned that if you access r.text in a large-ish PDF (40MB), chardet is called, which uses a lot of CPU (and a ton of memory):\r\n\r\n```\r\nr = requests.get(some_url)\r\nr.text\r\n```\r\n\r\nThat's more or less fine (best not to try to get the text of a PDF this way), but if you access `r.text` more than once, chardet gets run over and over. \r\n\r\nWe have code like this that performs horribly:\r\n\r\n```\r\nr = requests.get(some_url)\r\nif bad_text in r.text:\r\n    continue\r\nif other_bad_text in r.text:\r\n    continue\r\n# ...many more tests...\r\n```\r\n\r\nWhen you access `r.text`, it checks if the encoding can come from the HTTP headers. If not, it runs the `apparent_encoding` property, which looks like:\r\n\r\n```\r\n    @property\r\n    def apparent_encoding(self):\r\n        \"\"\"The apparent encoding, provided by the charset_normalizer or chardet libraries.\"\"\"\r\n        return chardet.detect(self.content)[\"encoding\"]\r\n```\r\n\r\nI think that property should probably be cached since it's slow, so that repeated calls to r.text don't hurt so badly.\r\n\r\n## Expected Result\r\n\r\nI expected the calls to the text property to only calculate the encoding once per request.\r\n\r\n## Actual Result\r\n\r\nEach call to the text property re-calculates the encoding, which is slow and uses a lot of memory (this is probably a bug in chardet, but it uses hundreds of MB on a 40MB PDF right now).\r\n\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"5.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.209-116.363.amzn2.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010ef\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.5\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6250/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6248",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6248/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6248/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6248/events",
    "html_url": "https://github.com/psf/requests/issues/6248",
    "id": 1390004728,
    "node_id": "I_kwDOABTKOs5S2cn4",
    "number": 6248,
    "title": "`requests.utils._parse_content_type_header` gives the wrong value when multiple headers with the same name are present.",
    "user": {
      "login": "iulian-birlica",
      "id": 103742086,
      "node_id": "U_kgDOBi76hg",
      "avatar_url": "https://avatars.githubusercontent.com/u/103742086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iulian-birlica",
      "html_url": "https://github.com/iulian-birlica",
      "followers_url": "https://api.github.com/users/iulian-birlica/followers",
      "following_url": "https://api.github.com/users/iulian-birlica/following{/other_user}",
      "gists_url": "https://api.github.com/users/iulian-birlica/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iulian-birlica/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iulian-birlica/subscriptions",
      "organizations_url": "https://api.github.com/users/iulian-birlica/orgs",
      "repos_url": "https://api.github.com/users/iulian-birlica/repos",
      "events_url": "https://api.github.com/users/iulian-birlica/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iulian-birlica/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-09-28T22:16:12Z",
    "updated_at": "2023-11-26T20:27:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\nThe http rfc (specifically [section 4.2)](https://www.rfc-editor.org/rfc/rfc2616#section-4.2) allows multiple headers with the same name to be present, granted that they can be collapsed into a single header with comma separated values.\r\n\r\nWhen encountered with a response containing these headers:\r\n```\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Type: text/javascript\r\n```\r\nrequests parses them into a single dictionary value:\r\n```\r\n{'Content-Type': 'text/html; charset=UTF-8, text/javascript', ...}\r\n```\r\nbut `requests.utils._parse_content_type_header` parses it wrong, by assuming that charset is `UTF-8, text/javascript`, instead of `UTF-8`\r\n<!-- What you expected. -->\r\n\r\nI expected requests to give the correct encoding, or at least one of the encodings from the two headers, preferably the first, `UTF-8`.\r\n\r\n<!-- What happened instead. -->\r\n\r\nI get the encoding for the response set to `UTF-8, text/javascript`\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nres = requests.get(\"url-that-responds-with-two-content-headers\")\r\nprint(res.encoding)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.9.0-16-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010ef\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101000cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nSeeing that converting the `dict` to a `list` would be much more trouble, my proposed fix is to ignore characters after the first comma. `requests.utils._parse_content_type_header` would start with `tokens = header.split(',')[0].split(\";\")`.\r\n\r\nI can make a PR, if this bug is deemed true and if that is the solution.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6248/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6245",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6245/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6245/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6245/events",
    "html_url": "https://github.com/psf/requests/issues/6245",
    "id": 1382483856,
    "node_id": "I_kwDOABTKOs5SZweQ",
    "number": 6245,
    "title": "Cookie having a Domain cookie-attribute with empty string fails to be added to the cookie jar ",
    "user": {
      "login": "ecclejau",
      "id": 95308897,
      "node_id": "U_kgDOBa5MYQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/95308897?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ecclejau",
      "html_url": "https://github.com/ecclejau",
      "followers_url": "https://api.github.com/users/ecclejau/followers",
      "following_url": "https://api.github.com/users/ecclejau/following{/other_user}",
      "gists_url": "https://api.github.com/users/ecclejau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ecclejau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ecclejau/subscriptions",
      "organizations_url": "https://api.github.com/users/ecclejau/orgs",
      "repos_url": "https://api.github.com/users/ecclejau/repos",
      "events_url": "https://api.github.com/users/ecclejau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ecclejau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-09-22T13:46:49Z",
    "updated_at": "2023-04-15T13:27:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\nUsing requests to access an API hosted on an application server we noticed that cookies were not added to the cookie jar in the session.  \r\nIt seems that after an upgrade to the application server framework it adds a `domain=;` cookie-attribute to the cookies in the response.\r\n\r\n## Expected Result\r\n\r\nThe cookie to be added to the jar\r\n\r\n## Actual Result\r\n\r\nThe cookie is dropped.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport unittest\r\nfrom typing import Tuple\r\nfrom unittest.mock import MagicMock\r\n\r\nimport requests\r\nfrom hamcrest import assert_that, has_length\r\n\r\n\r\nclass TestMissingSessionCookieIssue(unittest.TestCase):\r\n    @staticmethod\r\n    def __make_mocks(cookie_header_value: str) -> Tuple[MagicMock, MagicMock]:\r\n        message = MagicMock()\r\n        message.get_all.side_effect = [[], [cookie_header_value]]\r\n\r\n        response = MagicMock()\r\n        response.info.return_value = message\r\n\r\n        request = MagicMock()\r\n        request.get_full_url.return_value = \"http://localhost:1234/page\"\r\n        request.origin_req_host = \"localhost\"\r\n\r\n        return request, response\r\n\r\n    def test_cookie_with_no_domain(self) -> None:\r\n        request, response = self.__make_mocks(\"SESSION_ID=12345678; HttpOnly; Path=/page; SameSite=Strict\")\r\n        session = requests.session()\r\n\r\n        session.cookies.extract_cookies(response, request)\r\n\r\n        assert_that(session.cookies, has_length(1))\r\n\r\n    def test_cookie_with_empty_domain(self) -> None:\r\n        request, response = self.__make_mocks(\"SESSION_ID=12345678; domain=; path=/page; samesite=strict; httponly\")\r\n        session = requests.session()\r\n\r\n        session.cookies.extract_cookies(response, request)\r\n\r\n        assert_that(session.cookies, has_length(1))\r\n\r\n```\r\nRequirements:\r\n* `PyHamcrest==2.0.2`\r\n* `requests==2.28.1`\r\n* Python 3.9\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.4\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.14.0-1052-oem\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.12\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6245/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6245/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6238",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6238/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6238/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6238/events",
    "html_url": "https://github.com/psf/requests/issues/6238",
    "id": 1374478536,
    "node_id": "I_kwDOABTKOs5R7ODI",
    "number": 6238,
    "title": "LookupDict does not implement full contract of the dict class",
    "user": {
      "login": "michal-klimek",
      "id": 1168419,
      "node_id": "MDQ6VXNlcjExNjg0MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1168419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michal-klimek",
      "html_url": "https://github.com/michal-klimek",
      "followers_url": "https://api.github.com/users/michal-klimek/followers",
      "following_url": "https://api.github.com/users/michal-klimek/following{/other_user}",
      "gists_url": "https://api.github.com/users/michal-klimek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michal-klimek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michal-klimek/subscriptions",
      "organizations_url": "https://api.github.com/users/michal-klimek/orgs",
      "repos_url": "https://api.github.com/users/michal-klimek/repos",
      "events_url": "https://api.github.com/users/michal-klimek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michal-klimek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-09-15T12:48:54Z",
    "updated_at": "2022-10-07T15:10:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`LookupDict` absolutely includes all of the dict methods. In particular, it allows the use of `__setitem__` and other things from the dict class. It specifically does only one thing, which is override `__getitem__` to allow returning `None`.\r\n\r\nSo it's not ok to replace the dict with `object` in this case, even though the requests codebase doesn't use that functionality.\r\n\r\nThanks for reporting this issue though, and I hope you keep reading through the codebase!\r\n\r\n_Originally posted by @Lukasa in https://github.com/psf/requests/issues/3848#issuecomment-277197592_\r\n\r\nThis is unfortunately a false statement. Take a look on the following checks:\r\n```\r\nIn [1]: from requests.status_codes import codes\r\n\r\nIn [2]: codes\r\nOut[2]: <lookup 'status_codes'>\r\n\r\nIn [3]: codes.keys()\r\nOut[3]: dict_keys([])\r\n\r\nIn [4]: list(codes.keys())\r\nOut[4]: []\r\n```\r\nIf `LookupDict` pretends to quack like a duck it should do so. Or it should not derive from the `dict` if it works even worse:\r\n```\r\nIn [8]: from requests.status_codes import codes\r\n\r\nIn [9]: codes[\"my_code\"] = 700\r\n\r\nIn [10]: list(codes.keys())\r\nOut[10]: ['my_code']\r\n\r\nIn [11]: codes[\"my_code\"]\r\n\r\nIn [12]: \r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6238/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6237",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6237/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6237/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6237/events",
    "html_url": "https://github.com/psf/requests/pull/6237",
    "id": 1368938993,
    "node_id": "PR_kwDOABTKOs4-u9uG",
    "number": 6237,
    "title": "Improved documentation of exceptions in api.rst",
    "user": {
      "login": "mhayworth",
      "id": 73895101,
      "node_id": "MDQ6VXNlcjczODk1MTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/73895101?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mhayworth",
      "html_url": "https://github.com/mhayworth",
      "followers_url": "https://api.github.com/users/mhayworth/followers",
      "following_url": "https://api.github.com/users/mhayworth/following{/other_user}",
      "gists_url": "https://api.github.com/users/mhayworth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mhayworth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mhayworth/subscriptions",
      "organizations_url": "https://api.github.com/users/mhayworth/orgs",
      "repos_url": "https://api.github.com/users/mhayworth/repos",
      "events_url": "https://api.github.com/users/mhayworth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mhayworth/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-09-11T12:57:23Z",
    "updated_at": "2022-09-11T12:57:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6237",
      "html_url": "https://github.com/psf/requests/pull/6237",
      "diff_url": "https://github.com/psf/requests/pull/6237.diff",
      "patch_url": "https://github.com/psf/requests/pull/6237.patch",
      "merged_at": null
    },
    "body": "Added use cases and inheritance information for the common types of exceptions that are listed in docs/api.rst. Documentation already exists for the main interface, request sessions, and lower-level classes on the website, so those may want to be moved into api.rst as well for consistent formatting. Alternatively, this information could also be chosen to move to the website. I am open to any changes we might want to make to improve this documentation and help users better understand the exceptions their code may be throwing.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6237/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6228",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6228/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6228/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6228/events",
    "html_url": "https://github.com/psf/requests/issues/6228",
    "id": 1360883908,
    "node_id": "I_kwDOABTKOs5RHXDE",
    "number": 6228,
    "title": "Explain the status and the future of the library (in PR template, README, docs site)",
    "user": {
      "login": "tuukkamustonen",
      "id": 94327,
      "node_id": "MDQ6VXNlcjk0MzI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/94327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuukkamustonen",
      "html_url": "https://github.com/tuukkamustonen",
      "followers_url": "https://api.github.com/users/tuukkamustonen/followers",
      "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions",
      "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs",
      "repos_url": "https://api.github.com/users/tuukkamustonen/repos",
      "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-09-03T15:12:06Z",
    "updated_at": "2023-04-06T19:38:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Attempting to file a new feature request shows the text:\r\n\r\n> Requests is not accepting feature requests at this time.\r\n\r\nFair enough, there must be reason for that (e.g. lack of maintainers).\r\n\r\nHowever, maybe explain a bit more - if new features are not accepted, what is the future of the library in general? You could:\r\n\r\n- Pin a ticket on the issue tracker\r\n- Add a note to the README\r\n- And/or maybe to the docs site\r\n\r\nCurrent state leaves people (at least me) searching/googling for the status and explanation, yet nothing is found?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6228/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6228/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6221",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6221/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6221/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6221/events",
    "html_url": "https://github.com/psf/requests/issues/6221",
    "id": 1355430987,
    "node_id": "I_kwDOABTKOs5QyjxL",
    "number": 6221,
    "title": "allow_redirect will ignore HSTS(STRICT-TRANSPORT-SECURITY)",
    "user": {
      "login": "zer0ty",
      "id": 100894276,
      "node_id": "U_kgDOBgOGRA",
      "avatar_url": "https://avatars.githubusercontent.com/u/100894276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zer0ty",
      "html_url": "https://github.com/zer0ty",
      "followers_url": "https://api.github.com/users/zer0ty/followers",
      "following_url": "https://api.github.com/users/zer0ty/following{/other_user}",
      "gists_url": "https://api.github.com/users/zer0ty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zer0ty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zer0ty/subscriptions",
      "organizations_url": "https://api.github.com/users/zer0ty/orgs",
      "repos_url": "https://api.github.com/users/zer0ty/repos",
      "events_url": "https://api.github.com/users/zer0ty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zer0ty/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-08-30T09:08:54Z",
    "updated_at": "2022-08-30T09:08:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "while a website set header STRICT-TRANSPORT-SECURITY, it means tell browser use https, but requests is not judged\r\n\r\n## Expected Result\r\n\r\nsometimes, developer set 302 and redirect website to http . at the same time, someone config header with STRICT-TRANSPORT-SECURITY. To browser, this will be ok, but to requests, not able to access http://example.com because of use http protocol\r\n\r\n## Actual Result\r\n\r\n![image](https://user-images.githubusercontent.com/100894276/187396909-9a671bd7-c374-4ec1-b461-8f17379e56dc.png)\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nr = requests.get('exmaple.com', allow_redirect=True)\r\nr.status_code ==> 502\r\n\r\nIn Chrome:\r\nr.status_code == 200\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"37.0.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"30000030\",\r\n    \"version\": \"22.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010df\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6221/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6211",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6211/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6211/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6211/events",
    "html_url": "https://github.com/psf/requests/issues/6211",
    "id": 1327625146,
    "node_id": "I_kwDOABTKOs5PIfO6",
    "number": 6211,
    "title": "Merge types-requests into psf/requests with py.typed marker",
    "user": {
      "login": "kkirsche",
      "id": 947110,
      "node_id": "MDQ6VXNlcjk0NzExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/947110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkirsche",
      "html_url": "https://github.com/kkirsche",
      "followers_url": "https://api.github.com/users/kkirsche/followers",
      "following_url": "https://api.github.com/users/kkirsche/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkirsche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkirsche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkirsche/subscriptions",
      "organizations_url": "https://api.github.com/users/kkirsche/orgs",
      "repos_url": "https://api.github.com/users/kkirsche/repos",
      "events_url": "https://api.github.com/users/kkirsche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkirsche/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-08-03T18:24:02Z",
    "updated_at": "2022-08-03T18:53:30Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This issue is to merge the existing type hints available in typeshed ([here](https://github.com/python/typeshed/tree/master/stubs/requests)) into this repository.\r\n\r\nCurrently, psf/requests supports only Python 3.7+ per https://github.com/psf/requests/blob/main/setup.py#L10\r\n\r\nAs a result, type-related code would not impact usability by end users. Performance concerns related to additional imports may also be addressed by protecting the type-only imports under the `typing.TYPE_CHECKING` boolean and using the correct syntax downstream.\r\n\r\nBy making this change, it will keep type information paired with the code, ensuring they get updated together, it will reduce the maintenance burden on the typeshed team (not requested, just a side effect), and will enable more users to get type-hint related information without having to install separate packages.\r\n\r\nDepending on your point of view on type hints, they also can reduce the risk of bugs caused by refactoring.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6211/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6211/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6205",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6205/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6205/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6205/events",
    "html_url": "https://github.com/psf/requests/issues/6205",
    "id": 1320190408,
    "node_id": "I_kwDOABTKOs5OsIHI",
    "number": 6205,
    "title": "Transport adapters not honored with proxy",
    "user": {
      "login": "patatetom",
      "id": 14196171,
      "node_id": "MDQ6VXNlcjE0MTk2MTcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/14196171?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patatetom",
      "html_url": "https://github.com/patatetom",
      "followers_url": "https://api.github.com/users/patatetom/followers",
      "following_url": "https://api.github.com/users/patatetom/following{/other_user}",
      "gists_url": "https://api.github.com/users/patatetom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patatetom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patatetom/subscriptions",
      "organizations_url": "https://api.github.com/users/patatetom/orgs",
      "repos_url": "https://api.github.com/users/patatetom/repos",
      "events_url": "https://api.github.com/users/patatetom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patatetom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-07-27T22:34:31Z",
    "updated_at": "2022-08-02T07:20:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "hi,\r\n\r\nmaking a poor socks server at localhost on port 8001 with ssh/sshd running at localhost :\r\n```console\r\n@term1$ ssh -N -D localhost:8001 localhost\r\n```\r\n\r\nmaking a self-signed certificate for testing and debuging negociations on server side with s_server@openssl :\r\n```console\r\n@term2$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes \r\n        while :\r\n        do\r\n            echo -e \"HTTP/1.0 200 OK\\nContent-Length: 0\\n\\n\" |\r\n            openssl s_server -4 -cert cert.pem -key key.pem -accept 4433 -msg\r\n        done\r\n```\r\n\r\ngetting `requests` informations :\r\n```console\r\n@term3$ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.1.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.0-1057-oem\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010106f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.8\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nrunning `requests` simply :\r\n```console\r\n@term3$ python <<~~~\r\nimport requests\r\nurl = \"https://localhost:4433/\"\r\nsession = requests.Session()\r\nresponse = session.head(url=url, verify=False)\r\n~~~\r\n```\r\n\r\nTLS1.3 by default :\r\n```console\r\n@term2$ ...\r\n        <<< TLS 1.3, Handshake [length 0034], Finished\r\n        ...\r\n        >>> TLS 1.3, Handshake [length 00e9], NewSessionTicket\r\n        ...\r\n```\r\n\r\nrunning `requests` with transport adapter only :\r\n```console\r\n@term3$ python <<~~~\r\nimport ssl\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\nfrom urllib3.poolmanager import PoolManager\r\nclass TestHTTPAdapter(HTTPAdapter):\r\n    def init_poolmanager(self, connections, maxsize, block=False):\r\n        self.poolmanager = PoolManager(\r\n            num_pools=connections,\r\n            maxsize=maxsize,\r\n            block=block,\r\n            ssl_version=ssl.PROTOCOL_TLSv1_2\r\n        )\r\nurl = \"https://localhost:4433/\"\r\nsession = requests.Session()\r\nsession.mount(url, TestHTTPAdapter())\r\nresponse = session.head(url=url, verify=False)\r\n~~~\r\n```\r\n\r\nTLS1.2 is OK :slightly_smiling_face: :\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```\r\n\r\nrunning `requests` with transport adapter **and socks proxy** :\r\n```console\r\n@term3$ python <<~~~\r\nimport ssl\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\nfrom urllib3.poolmanager import PoolManager\r\nclass TestHTTPAdapter(HTTPAdapter):\r\n    def init_poolmanager(self, connections, maxsize, block=False):\r\n        self.poolmanager = PoolManager(\r\n            num_pools=connections,\r\n            maxsize=maxsize,\r\n            block=block,\r\n            ssl_version=ssl.PROTOCOL_TLSv1_2\r\n        )\r\nurl = \"https://localhost:4433/\"\r\nsession = requests.Session()\r\nsession.mount(url, TestHTTPAdapter())\r\nproxies={\"https\":\"socks5://localhost:8001\"}\r\nresponse = session.head(url=url, proxies=proxies, verify=False)\r\n~~~\r\n```\r\n\r\nTLS1.2 is **KO** :slightly_frowning_face: :\r\n```console\r\n@term2$ ...\r\n        <<< TLS 1.3, Handshake [length 0034], Finished\r\n        ...\r\n        >>> TLS 1.3, Handshake [length 00e9], NewSessionTicket\r\n        ...\r\n```\r\n\r\n`requests` has the same behavior whether `pyopenssl` is present/used or not.\r\nHTTP/HTTPS proxies not tested : sorry.\r\n\r\nregards, lacsaP.\r\n\r\n---\r\n\r\nnote that `httpie` works as expected :\r\n```console\r\n@term4$ https --verify no https://localhost:4433\r\nHTTP/1.0 200 OK\r\nContent-Length: 0\r\n```\r\n```console\r\n@term2$ ...\r\n        <<< TLS 1.3, Handshake [length 0034], Finished\r\n        ...\r\n        >>> TLS 1.3, Handshake [length 00e9], NewSessionTicket\r\n        ...\r\n```\r\n```console\r\n@term4$ https --ssl tls1.2 --verify no https://localhost:4433\r\nHTTP/1.0 200 OK\r\nContent-Length: 0\r\n```\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```\r\n```console\r\n@term4$ https --ssl tls1.2 --verify no --proxy https:socks5://localhost:8001 https://localhost:4433\r\nHTTP/1.0 200 OK\r\nContent-Length: 0\r\n```\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```\r\n\r\nas well as `urllib3` :\r\n```console\r\n@term5$ python <<~~~\r\nimport urllib3\r\nhttps = urllib3.PoolManager(cert_reqs='CERT_NONE')\r\nr = https.request('GET', 'https://localhost:4433')\r\n~~~\r\n```\r\n```console\r\n@term2$ ...\r\n        <<< TLS 1.3, Handshake [length 0034], Finished\r\n        ...\r\n        >>> TLS 1.3, Handshake [length 00e9], NewSessionTicket\r\n        ...\r\n```\r\n```console\r\n@term5$ python <<~~~\r\nimport ssl, urllib3\r\nhttps = urllib3.PoolManager(cert_reqs='CERT_NONE', ssl_version=ssl.PROTOCOL_TLSv1_2)\r\nr = https.request('GET', 'https://localhost:4433')\r\n~~~\r\n```\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```\r\n```console\r\n@term5$ python <<~~~\r\nimport ssl\r\nfrom urllib3.contrib.socks import SOCKSProxyManager\r\nsocks = SOCKSProxyManager('socks5h://localhost:8001/', cert_reqs='CERT_NONE', ssl_version=ssl.PROTOCOL_TLSv1_2)\r\nr = socks.request('GET', 'https://localhost:4433')\r\n~~~\r\n```\r\n```console\r\n@term2$ ...\r\n        >>> TLS 1.2, Handshake [length 0010], Finished\r\n        ...\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6205/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6205/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6192",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6192/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6192/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6192/events",
    "html_url": "https://github.com/psf/requests/pull/6192",
    "id": 1298956810,
    "node_id": "PR_kwDOABTKOs47Gr6i",
    "number": 6192,
    "title": "Fix the popitem bug in cookies",
    "user": {
      "login": "kianelbo",
      "id": 34425507,
      "node_id": "MDQ6VXNlcjM0NDI1NTA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/34425507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kianelbo",
      "html_url": "https://github.com/kianelbo",
      "followers_url": "https://api.github.com/users/kianelbo/followers",
      "following_url": "https://api.github.com/users/kianelbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kianelbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kianelbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kianelbo/subscriptions",
      "organizations_url": "https://api.github.com/users/kianelbo/orgs",
      "repos_url": "https://api.github.com/users/kianelbo/repos",
      "events_url": "https://api.github.com/users/kianelbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kianelbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/35",
      "html_url": "https://github.com/psf/requests/milestone/35",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/35/labels",
      "id": 11076316,
      "node_id": "MI_kwDOABTKOs4AqQLc",
      "number": 35,
      "title": "2.33.0",
      "description": "",
      "creator": {
        "login": "nateprewitt",
        "id": 5271761,
        "node_id": "MDQ6VXNlcjUyNzE3NjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nateprewitt",
        "html_url": "https://github.com/nateprewitt",
        "followers_url": "https://api.github.com/users/nateprewitt/followers",
        "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
        "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
        "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
        "repos_url": "https://api.github.com/users/nateprewitt/repos",
        "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 3,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2024-05-20T14:16:54Z",
      "updated_at": "2024-05-21T12:26:27Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2022-07-08T12:27:41Z",
    "updated_at": "2024-05-20T14:17:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6192",
      "html_url": "https://github.com/psf/requests/pull/6192",
      "diff_url": "https://github.com/psf/requests/pull/6192.diff",
      "patch_url": "https://github.com/psf/requests/pull/6192.patch",
      "merged_at": null
    },
    "body": "Closes #6190 ",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6192/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6192/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6190",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6190/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6190/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6190/events",
    "html_url": "https://github.com/psf/requests/issues/6190",
    "id": 1293744958,
    "node_id": "I_kwDOABTKOs5NHPs-",
    "number": 6190,
    "title": "requests.cookies.RequestsCookieJar: popitem() does not work",
    "user": {
      "login": "fireattack",
      "id": 4130991,
      "node_id": "MDQ6VXNlcjQxMzA5OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4130991?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fireattack",
      "html_url": "https://github.com/fireattack",
      "followers_url": "https://api.github.com/users/fireattack/followers",
      "following_url": "https://api.github.com/users/fireattack/following{/other_user}",
      "gists_url": "https://api.github.com/users/fireattack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fireattack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fireattack/subscriptions",
      "organizations_url": "https://api.github.com/users/fireattack/orgs",
      "repos_url": "https://api.github.com/users/fireattack/repos",
      "events_url": "https://api.github.com/users/fireattack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fireattack/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2022-07-05T03:39:54Z",
    "updated_at": "2022-11-16T15:53:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`requests.cookies.RequestsCookieJar`'s `popitem()` method doesn't seem to work even if cookies is not empty.\r\n\r\n## Expected Result\r\n\r\nFrom [the doc](https://requests.readthedocs.io/en/latest/api/#requests.cookies.RequestsCookieJar.popitem):\r\n\r\n>remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty.\r\n\r\n(Also, I'm not sure what exactly is \"D\" here. I assume it means the cookies obj itself.)\r\n\r\n## Actual Result\r\n\r\nIt always raises KeyError even when it's not empty.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nr = requests.get('https://google.com')\r\nprint(len(r.cookies)) # = 3\r\n\r\nr.cookies.popitem()\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.10\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"3.4.8\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010cf\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.28.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010107f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.3\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6190/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6190/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6186",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6186/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6186/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6186/events",
    "html_url": "https://github.com/psf/requests/pull/6186",
    "id": 1288922045,
    "node_id": "PR_kwDOABTKOs46k-4l",
    "number": 6186,
    "title": "refactor: prefer f-strings to format where fits within black lengths",
    "user": {
      "login": "kkirsche",
      "id": 947110,
      "node_id": "MDQ6VXNlcjk0NzExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/947110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkirsche",
      "html_url": "https://github.com/kkirsche",
      "followers_url": "https://api.github.com/users/kkirsche/followers",
      "following_url": "https://api.github.com/users/kkirsche/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkirsche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkirsche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkirsche/subscriptions",
      "organizations_url": "https://api.github.com/users/kkirsche/orgs",
      "repos_url": "https://api.github.com/users/kkirsche/repos",
      "events_url": "https://api.github.com/users/kkirsche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkirsche/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-06-29T15:46:13Z",
    "updated_at": "2022-06-29T15:46:13Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6186",
      "html_url": "https://github.com/psf/requests/pull/6186",
      "diff_url": "https://github.com/psf/requests/pull/6186.diff",
      "patch_url": "https://github.com/psf/requests/pull/6186.patch",
      "merged_at": null
    },
    "body": "Python added f-strings in version 3.6, with [PEP 498](https://www.python.org/dev/peps/pep-0498/). F-strings are a flexible and powerful way to format strings. They make the code shorter and more readable, since the code now looks more like the output.\r\n\r\nF-Strings are also more performant than using `.format` (e.g. see [F-String Speed Considerations](https://realpython.com/lessons/f-strings-speed-considerations-performance/), [F-String Benchmarks](https://www.scivision.dev/python-f-string-speed/) for two quick examples) because the python runtime can insert the variables into the string while parsing rather than backtracking to insert them into the placeholders, reducing the number of times the lines need to be processed",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6186/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6185",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6185/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6185/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6185/events",
    "html_url": "https://github.com/psf/requests/pull/6185",
    "id": 1288910937,
    "node_id": "PR_kwDOABTKOs46k8hC",
    "number": 6185,
    "title": "refactor: use contextlib.suppress instead of empty except",
    "user": {
      "login": "kkirsche",
      "id": 947110,
      "node_id": "MDQ6VXNlcjk0NzExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/947110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkirsche",
      "html_url": "https://github.com/kkirsche",
      "followers_url": "https://api.github.com/users/kkirsche/followers",
      "following_url": "https://api.github.com/users/kkirsche/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkirsche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkirsche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkirsche/subscriptions",
      "organizations_url": "https://api.github.com/users/kkirsche/orgs",
      "repos_url": "https://api.github.com/users/kkirsche/repos",
      "events_url": "https://api.github.com/users/kkirsche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkirsche/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-06-29T15:37:24Z",
    "updated_at": "2022-06-29T15:37:24Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6185",
      "html_url": "https://github.com/psf/requests/pull/6185",
      "diff_url": "https://github.com/psf/requests/pull/6185.diff",
      "patch_url": "https://github.com/psf/requests/pull/6185.patch",
      "merged_at": null
    },
    "body": "Use [contextlib](https://docs.python.org/3/library/contextlib.html)'s suppress method to silence a specific error, instead of passing in an exception handler.\r\n\r\nThe context manager slightly shortens the code and significantly clarifies the author's intention to ignore the specific errors. The standard library feature was introduced following a [discussion](https://bugs.python.org/issue15806), where the consensus was that\r\n\r\n> A key benefit here is in the priming effect for readers... The with statement form makes it clear before you start reading the code that certain exceptions won't propagate.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6185/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6172",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6172/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6172/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6172/events",
    "html_url": "https://github.com/psf/requests/pull/6172",
    "id": 1278928229,
    "node_id": "PR_kwDOABTKOs46DhIL",
    "number": 6172,
    "title": "Clarify setting proxies exceptions",
    "user": {
      "login": "RichieB2B",
      "id": 1461970,
      "node_id": "MDQ6VXNlcjE0NjE5NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1461970?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RichieB2B",
      "html_url": "https://github.com/RichieB2B",
      "followers_url": "https://api.github.com/users/RichieB2B/followers",
      "following_url": "https://api.github.com/users/RichieB2B/following{/other_user}",
      "gists_url": "https://api.github.com/users/RichieB2B/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RichieB2B/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RichieB2B/subscriptions",
      "organizations_url": "https://api.github.com/users/RichieB2B/orgs",
      "repos_url": "https://api.github.com/users/RichieB2B/repos",
      "events_url": "https://api.github.com/users/RichieB2B/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RichieB2B/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-06-21T19:12:01Z",
    "updated_at": "2023-01-25T18:58:28Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6172",
      "html_url": "https://github.com/psf/requests/pull/6172",
      "diff_url": "https://github.com/psf/requests/pull/6172.diff",
      "patch_url": "https://github.com/psf/requests/pull/6172.patch",
      "merged_at": null
    },
    "body": "This adds an example for the `NO_PROXY` environment variable and explains making exceptions to the proxy settings using per-host proxy entries.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6172/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6172/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6167",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6167/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6167/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6167/events",
    "html_url": "https://github.com/psf/requests/issues/6167",
    "id": 1276016823,
    "node_id": "I_kwDOABTKOs5MDni3",
    "number": 6167,
    "title": "InvalidHeader exception when trying to add a \":method\" header field (breaking change in 2.28.0)",
    "user": {
      "login": "Alex8768765",
      "id": 107793741,
      "node_id": "U_kgDOBmzNTQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/107793741?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Alex8768765",
      "html_url": "https://github.com/Alex8768765",
      "followers_url": "https://api.github.com/users/Alex8768765/followers",
      "following_url": "https://api.github.com/users/Alex8768765/following{/other_user}",
      "gists_url": "https://api.github.com/users/Alex8768765/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Alex8768765/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Alex8768765/subscriptions",
      "organizations_url": "https://api.github.com/users/Alex8768765/orgs",
      "repos_url": "https://api.github.com/users/Alex8768765/repos",
      "events_url": "https://api.github.com/users/Alex8768765/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Alex8768765/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 16,
    "created_at": "2022-06-19T10:26:03Z",
    "updated_at": "2024-04-11T14:07:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "My app is making a POST request enforcing some specific header fields. Among them, I was able to explicitly enforce a \":method\" header field. But since 2.28.0, this now raises the following error: \r\n\r\n`requests.exceptions.InvalidHeader: Invalid leading whitespace, reserved character(s), or returncharacter(s) in header name: ':method'`\r\n\r\nEnforcing this header field is possibly a widespread practice as this is part of the requirements for sending notifications through Apple's push notification servers. \r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6167/reactions",
      "total_count": 6,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 3
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6167/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6166",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6166/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6166/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6166/events",
    "html_url": "https://github.com/psf/requests/pull/6166",
    "id": 1275758940,
    "node_id": "PR_kwDOABTKOs455DPD",
    "number": 6166,
    "title": "Add union operator support to CaseInsensitiveDict (PEP 584)",
    "user": {
      "login": "Cubicpath",
      "id": 24359380,
      "node_id": "MDQ6VXNlcjI0MzU5Mzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/24359380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Cubicpath",
      "html_url": "https://github.com/Cubicpath",
      "followers_url": "https://api.github.com/users/Cubicpath/followers",
      "following_url": "https://api.github.com/users/Cubicpath/following{/other_user}",
      "gists_url": "https://api.github.com/users/Cubicpath/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Cubicpath/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Cubicpath/subscriptions",
      "organizations_url": "https://api.github.com/users/Cubicpath/orgs",
      "repos_url": "https://api.github.com/users/Cubicpath/repos",
      "events_url": "https://api.github.com/users/Cubicpath/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Cubicpath/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-06-18T10:46:20Z",
    "updated_at": "2022-06-18T20:53:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6166",
      "html_url": "https://github.com/psf/requests/pull/6166",
      "diff_url": "https://github.com/psf/requests/pull/6166.diff",
      "patch_url": "https://github.com/psf/requests/pull/6166.patch",
      "merged_at": null
    },
    "body": "Adds support for the `|` and `|=` operators for `CaseInsensitiveDict`.\r\n\r\nThis copies the functionality of `dict` from [PEP 584](https://peps.python.org/pep-0584). Even though this PEP was implemented in 3.9, the functionality implemented to `CaseInsensitiveDict` still works in all currently supported versions (3.7+).\r\n\r\nThis also brings a level of consistency with other Mapping types, i.e. `OrderedDict`, `MappingProxyType`, `ChainMap`, `WeakKeyDictionary`, and more have this as supported behavior.\r\n\r\nThe code itself is a slightly modified version of the [reference implementation](https://peps.python.org/pep-0584/#reference-implementation).\r\n\r\nExample usage:\r\n```python3\r\nsession = Session()\r\nsession.headers |= {'Accept', 'application/json'}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6166/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6162",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6162/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6162/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6162/events",
    "html_url": "https://github.com/psf/requests/pull/6162",
    "id": 1268321914,
    "node_id": "PR_kwDOABTKOs45galI",
    "number": 6162,
    "title": "Fix HTTPS websites with system-wide HTTP proxy on Windows",
    "user": {
      "login": "ValdikSS",
      "id": 3054729,
      "node_id": "MDQ6VXNlcjMwNTQ3Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3054729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ValdikSS",
      "html_url": "https://github.com/ValdikSS",
      "followers_url": "https://api.github.com/users/ValdikSS/followers",
      "following_url": "https://api.github.com/users/ValdikSS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ValdikSS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ValdikSS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ValdikSS/subscriptions",
      "organizations_url": "https://api.github.com/users/ValdikSS/orgs",
      "repos_url": "https://api.github.com/users/ValdikSS/repos",
      "events_url": "https://api.github.com/users/ValdikSS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ValdikSS/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-06-11T16:42:34Z",
    "updated_at": "2022-07-18T12:10:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6162",
      "html_url": "https://github.com/psf/requests/pull/6162",
      "diff_url": "https://github.com/psf/requests/pull/6162.diff",
      "patch_url": "https://github.com/psf/requests/pull/6162.patch",
      "merged_at": null
    },
    "body": "Due to urllib bug, requests fails to open any HTTPS websites on Windows\r\nif there's system-wide HTTP proxy configured. This is because urllib\r\nincorrectly prepends the protocol to the proxy host and port, as in:\r\n\r\n```\r\n{'http':  'http://host:port',\r\n 'https': 'https://host:port',\r\n 'ftp':   'ftp://host:port'}\r\n```\r\n\r\nSuch configuration forces urllib3 to use HTTPS proxy (Secure Web Proxy,\r\nalso known as TLS Proxy) for HTTPS URLs, which the configured proxy\r\nmost likely does not support.\r\n\r\nDetect incorrect behavior and rewrite the protocol to http.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6162/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6162/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6158",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6158/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6158/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6158/events",
    "html_url": "https://github.com/psf/requests/issues/6158",
    "id": 1266333457,
    "node_id": "I_kwDOABTKOs5LercR",
    "number": 6158,
    "title": "2.28.0: sphinx warnings `reference target not found`",
    "user": {
      "login": "kloczek",
      "id": 31284574,
      "node_id": "MDQ6VXNlcjMxMjg0NTc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/31284574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kloczek",
      "html_url": "https://github.com/kloczek",
      "followers_url": "https://api.github.com/users/kloczek/followers",
      "following_url": "https://api.github.com/users/kloczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/kloczek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kloczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kloczek/subscriptions",
      "organizations_url": "https://api.github.com/users/kloczek/orgs",
      "repos_url": "https://api.github.com/users/kloczek/repos",
      "events_url": "https://api.github.com/users/kloczek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kloczek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-06-09T15:43:13Z",
    "updated_at": "2022-06-09T15:48:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "On building my packages I'm using `sphinx-build` command with `-n` switch which shows warmings about missing references. These are not critical issues.\r\nHere is the output with warnings:\r\n\r\n<details>\r\n\r\n```console\r\n+ /usr/bin/sphinx-build -n -T -b man docs build/sphinx/man\r\nRunning Sphinx v5.0.1\r\nWARNING: Invalid configuration value found: 'language = None'. Update your configuration to a valid langauge code. Falling back to 'en' (English).\r\nmaking output directory... done\r\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\r\nloading intersphinx inventory from https://urllib3.readthedocs.io/en/latest/objects.inv...\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [man]: all manpages\r\nupdating environment: [new config] 15 added, 0 changed, 0 removed\r\nreading sources... [100%] user/quickstart\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... done\r\nwriting... python-requests.3 { user/install user/quickstart user/advanced user/authentication community/recommended community/faq community/out-there community/support community/vulnerabilities community/release-process community/updates api dev/contributing dev/authors } /home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/models.py:docstring of requests.models.Response.json:: WARNING: py:exc reference target not found: requests.exceptions.JSONDecodeError\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.BaseAdapter.send:3: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter:3: WARNING: py:class reference target not found: Session\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.add_headers:9: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.build_response:6: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.get_connection:: WARNING: py:class reference target not found: urllib3.ConnectionPool\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.request_url:10: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.send:3: WARNING: py:class reference target not found: PreparedRequest\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/adapters.py:docstring of requests.adapters.HTTPAdapter.send:: WARNING: py:class reference target not found: urllib3 Timeout object\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/utils.py:docstring of requests.utils.add_dict_to_cookiejar:: WARNING: py:class reference target not found: CookieJar\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/cookies.py:docstring of requests.cookies.cookiejar_from_dict:: WARNING: py:class reference target not found: CookieJar\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/cookies.py:docstring of collections.abc.MutableMapping.pop:: WARNING: py:class reference target not found: v, remove specified key and return the corresponding value.\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/cookies.py:docstring of collections.abc.MutableMapping.popitem:: WARNING: py:class reference target not found: (k, v), remove and return some (key, value) pair\r\n/home/tkloczko/rpmbuild/BUILD/requests-2.28.0/requests/cookies.py:docstring of collections.abc.MutableMapping.setdefault:: WARNING: py:class reference target not found: D.get(k,d), also set D[k]=d if k not in D\r\ndone\r\nbuild succeeded, 15 warnings.\r\n```\r\n</details>\r\n\r\nYou can peak on fixes that kind of issues in other projects\r\nhttps://github.com/latchset/jwcrypto/pull/289\r\nhttps://github.com/click-contrib/sphinx-click/commit/abc31069\r\nhttps://github.com/latchset/jwcrypto/pull/289\r\nhttps://github.com/RDFLib/rdflib-sqlalchemy/issues/95\r\nhttps://github.com/sissaschool/elementpath/commit/bf869d9e\r\nhttps://github.com/jaraco/cssutils/issues/21\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6158/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6140",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6140/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6140/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6140/events",
    "html_url": "https://github.com/psf/requests/issues/6140",
    "id": 1244638913,
    "node_id": "I_kwDOABTKOs5KL67B",
    "number": 6140,
    "title": "python-requests.org domain suspended.",
    "user": {
      "login": "brunns",
      "id": 227768,
      "node_id": "MDQ6VXNlcjIyNzc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/227768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunns",
      "html_url": "https://github.com/brunns",
      "followers_url": "https://api.github.com/users/brunns/followers",
      "following_url": "https://api.github.com/users/brunns/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunns/subscriptions",
      "organizations_url": "https://api.github.com/users/brunns/orgs",
      "repos_url": "https://api.github.com/users/brunns/repos",
      "events_url": "https://api.github.com/users/brunns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunns/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": true,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 12,
    "created_at": "2022-05-23T06:19:30Z",
    "updated_at": "2022-06-16T16:52:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": "resolved",
    "body": "http://python-requests.org/ is showing:\r\n\r\n<img width=\"824\" alt=\"Screenshot 2022-05-23 at 07 15 12\" src=\"https://user-images.githubusercontent.com/227768/169755158-3c2b0013-b869-4a84-93f3-7bddeabd9548.png\">\r\n\r\nIt's the same case for subdomains, including docs.python-requests.org, which is breaking the building of sphinx documentation which refer to `requests` docs: see https://github.com/brunns/mbtest/runs/6549875114?check_suite_focus=true#step:9:31 for an example.\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6140/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6140/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6139",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6139/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6139/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6139/events",
    "html_url": "https://github.com/psf/requests/issues/6139",
    "id": 1244044304,
    "node_id": "I_kwDOABTKOs5KJpwQ",
    "number": 6139,
    "title": "Misusing of system-wide proxy on Windows / HTTPS connections over system-wide proxy on Windows do not work",
    "user": {
      "login": "ValdikSS",
      "id": 3054729,
      "node_id": "MDQ6VXNlcjMwNTQ3Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3054729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ValdikSS",
      "html_url": "https://github.com/ValdikSS",
      "followers_url": "https://api.github.com/users/ValdikSS/followers",
      "following_url": "https://api.github.com/users/ValdikSS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ValdikSS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ValdikSS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ValdikSS/subscriptions",
      "organizations_url": "https://api.github.com/users/ValdikSS/orgs",
      "repos_url": "https://api.github.com/users/ValdikSS/repos",
      "events_url": "https://api.github.com/users/ValdikSS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ValdikSS/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-05-21T17:47:26Z",
    "updated_at": "2022-06-11T15:44:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\n\r\nOn Windows 10 and 11, if a system-wide proxy is configured in the OS settings, Requests won't load HTTPS websites.\r\nInstead of the regular CONNECT header, Requests sends TLS request to the proxy server (ip and port). The TLS ClientHello does not have Server Name Indication field, that's why I assume that Requests misinterprets the proxy as a Secure Web Proxy (a regular proxy with TLS encapsulation on top), which Windows does not support.\r\n\r\n## Expected Result\r\n\r\nIf system-wide proxy is configured in Windows, Requests sends CONNECT header to the proxy server when HTTPS website is requested.\r\n\r\n## Actual Result\r\n\r\nIf system-wide proxy is configured in Windows, Requests sends TLS request to the proxy address when HTTPS website is requested.\r\n\r\n## Reproduction Steps\r\n\r\n1. Configure system-wide proxy on Windows\r\n2. \r\n```python\r\nimport requests\r\nrequests.get(\"https://w3.org/\")\r\n```\r\n\r\nResult:\r\nMy proxy does not respond to the packets it does not understand, and I receive the following error:\r\n`HTTPSConnectionPool(host='w3.org, port=443): Max retries exceeded with url: / (Caused by ProxyError('Cannot connect to proxy.', timeout('_ssl.c:1114: The handshake operation timed out')))`\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6139/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6139/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6137",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6137/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6137/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6137/events",
    "html_url": "https://github.com/psf/requests/pull/6137",
    "id": 1242045051,
    "node_id": "PR_kwDOABTKOs44Imhi",
    "number": 6137,
    "title": "Allow tests to run if HTTP proxy env variables are already present,",
    "user": {
      "login": "ogayot",
      "id": 4038023,
      "node_id": "MDQ6VXNlcjQwMzgwMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4038023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ogayot",
      "html_url": "https://github.com/ogayot",
      "followers_url": "https://api.github.com/users/ogayot/followers",
      "following_url": "https://api.github.com/users/ogayot/following{/other_user}",
      "gists_url": "https://api.github.com/users/ogayot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ogayot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ogayot/subscriptions",
      "organizations_url": "https://api.github.com/users/ogayot/orgs",
      "repos_url": "https://api.github.com/users/ogayot/repos",
      "events_url": "https://api.github.com/users/ogayot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ogayot/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-05-19T16:43:48Z",
    "updated_at": "2022-05-19T16:43:48Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6137",
      "html_url": "https://github.com/psf/requests/pull/6137",
      "diff_url": "https://github.com/psf/requests/pull/6137.diff",
      "patch_url": "https://github.com/psf/requests/pull/6137.patch",
      "merged_at": null
    },
    "body": "Hello,\r\n\r\nThe following tests fail if HTTP proxy environment variables are already set:\r\n\r\n```\r\nFAILED tests/test_requests.py::TestRequests::test_mixed_case_scheme_acceptable\r\nFAILED tests/test_requests.py::TestRequests::test_HTTP_302_ALLOW_REDIRECT_GET\r\nFAILED tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_send_self_prepared_request\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_send_session_prepared_request\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_send_with_redirects\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_get - ...\r\nFAILED tests/test_requests.py::TestRequests::test_respect_proxy_env_on_request\r\n```\r\n\r\nThe variables affecting the tests are:\r\n\r\n * `http_proxy` (and `https_proxy` potentially)\r\n * `no_proxy`\r\n\r\nFixed by overriding their value if they are already present in the environment.\r\n\r\nThe `override_environ` function would fail if attempting to delete a variable that is not in the environment. Added a `suppress(KeyError)` construct around the `del` instruction to fix it.\r\n\r\nThanks,\r\nOilvier",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6137/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6131",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6131/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6131/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6131/events",
    "html_url": "https://github.com/psf/requests/issues/6131",
    "id": 1232797065,
    "node_id": "I_kwDOABTKOs5Jev2J",
    "number": 6131,
    "title": "Incorrectly strips trailing dot from absolute hostnames, causing TooManyRedirects",
    "user": {
      "login": "ccazabon",
      "id": 7227064,
      "node_id": "MDQ6VXNlcjcyMjcwNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7227064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccazabon",
      "html_url": "https://github.com/ccazabon",
      "followers_url": "https://api.github.com/users/ccazabon/followers",
      "following_url": "https://api.github.com/users/ccazabon/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccazabon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccazabon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccazabon/subscriptions",
      "organizations_url": "https://api.github.com/users/ccazabon/orgs",
      "repos_url": "https://api.github.com/users/ccazabon/repos",
      "events_url": "https://api.github.com/users/ccazabon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccazabon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-05-11T15:01:22Z",
    "updated_at": "2022-06-16T21:38:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "requests appears to be incorrectly stripping the trailing dot on absolute hostnames (i.e. explicitly marked as in the root DNS namespace) in URLs when constructing the Host: request header, like `pyropus.ca.`.  This causes redirect loops when the site chooses the absolute hostname as canonical and redirects requests without the trailing dot.\r\n\r\nThe example site redirects requests with a host header of `Host: pyropus.ca` to the same URL with the host name changed to the canonical absolute version:\r\n```\r\nHTTP/1.1 301 Moved Permanently\r\n[...]\r\nLocation: https://pyropus.ca./\r\n```\r\n\r\nrequests then strips the dot and resends the request, resulting in a redirect loop.\r\n\r\nThe trailing dot needs to be stripped from the SNI header for https requests (required by TLS/etc spec) but it should not be stripped from the Host: header value.\r\n\r\nWhen fixing the SNI trailing dot issue, curl had this bug because they changed it to also affect the Host: header value, but they've fixed it by reverting that part of the change:\r\nhttps://github.com/curl/curl/issues/8290\r\n\r\nMany other common user agents that I've tested handle this properly:\r\n* all GUI browers, to my knowledge, preserve the absolute domain name in the Host: header - I've tested Firefox, Chromium, Vivaldi, Konqueror, and Safari\r\n* wget also preserves the absolute domain name on redirect URLs\r\n* curl is now fixed and handles it\r\n\r\nA few less common ones have the same buggy behaviour, or did -- I haven't re-checked:\r\n* lynx, links, and elinks handle it like curl, erroring out on a redirect loop\r\n\r\n\r\n## Expected Result\r\n\r\nSuccessful 200 response with content.\r\n\r\n## Actual Result\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 529, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 667, in send\r\n    history = [resp for resp in gen]\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 667, in <listcomp>\r\n    history = [resp for resp in gen]\r\n  File \".../test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 166, in resolve_redirects\r\n    raise TooManyRedirects('Exceeded {} redirects.'.format(self.max_redirects), response=resp)\r\nrequests.exceptions.TooManyRedirects: Exceeded 30 redirects.\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nrequests.get(\"https://pyropus.ca./\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.17.5\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nEdit: added a couple words to the summary to clarify.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6131/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6123",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6123/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6123/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6123/events",
    "html_url": "https://github.com/psf/requests/pull/6123",
    "id": 1228062318,
    "node_id": "PR_kwDOABTKOs43bOhw",
    "number": 6123,
    "title": "Fix error caused by invalid charset in response headers",
    "user": {
      "login": "deosrc",
      "id": 50599779,
      "node_id": "MDQ6VXNlcjUwNTk5Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/50599779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deosrc",
      "html_url": "https://github.com/deosrc",
      "followers_url": "https://api.github.com/users/deosrc/followers",
      "following_url": "https://api.github.com/users/deosrc/following{/other_user}",
      "gists_url": "https://api.github.com/users/deosrc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deosrc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deosrc/subscriptions",
      "organizations_url": "https://api.github.com/users/deosrc/orgs",
      "repos_url": "https://api.github.com/users/deosrc/repos",
      "events_url": "https://api.github.com/users/deosrc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deosrc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-05-06T16:22:35Z",
    "updated_at": "2022-05-09T09:14:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6123",
      "html_url": "https://github.com/psf/requests/pull/6123",
      "diff_url": "https://github.com/psf/requests/pull/6123.diff",
      "patch_url": "https://github.com/psf/requests/pull/6123.patch",
      "merged_at": null
    },
    "body": "Ran into an error where we were having an exception raised from the requests library: `'bool' object has no attribute 'strip'`\r\n\r\nSeems the server was returning an empty charset value in the Content-Type response header of `application/json;charset`. This was causing the line below to default the value to a boolean `True`:\r\n\r\nhttps://github.com/psf/requests/blob/2a6f290bc09324406708a4d404a88a45d848ddf9/requests/utils.py#L524-L529\r\n\r\nThis meant that attempting format the charset on the line below, the value was a boolean rather than a string:\r\n\r\nhttps://github.com/psf/requests/blob/2a6f290bc09324406708a4d404a88a45d848ddf9/requests/utils.py#L545-L548\r\n\r\nThis change adds a type check so that the charset is ignored if a value is not provided. The unit test has been modified for coverage, along with expanding the other test scenarios slightly.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6123/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6122",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6122/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6122/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6122/events",
    "html_url": "https://github.com/psf/requests/pull/6122",
    "id": 1226490072,
    "node_id": "PR_kwDOABTKOs43WFID",
    "number": 6122,
    "title": "Request with data which consists of empty values only sends bad request",
    "user": {
      "login": "romanyakovlev",
      "id": 20498421,
      "node_id": "MDQ6VXNlcjIwNDk4NDIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20498421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanyakovlev",
      "html_url": "https://github.com/romanyakovlev",
      "followers_url": "https://api.github.com/users/romanyakovlev/followers",
      "following_url": "https://api.github.com/users/romanyakovlev/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanyakovlev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanyakovlev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanyakovlev/subscriptions",
      "organizations_url": "https://api.github.com/users/romanyakovlev/orgs",
      "repos_url": "https://api.github.com/users/romanyakovlev/repos",
      "events_url": "https://api.github.com/users/romanyakovlev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanyakovlev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 16,
    "created_at": "2022-05-05T10:28:39Z",
    "updated_at": "2023-06-24T16:24:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6122",
      "html_url": "https://github.com/psf/requests/pull/6122",
      "diff_url": "https://github.com/psf/requests/pull/6122.diff",
      "patch_url": "https://github.com/psf/requests/pull/6122.patch",
      "merged_at": null
    },
    "body": "Case - request with data which consists of empty values only\r\n```python\r\nget('http://localhost:80', data={'foo': None})\r\n```\r\nResponse in nginx:\r\n```\r\n172.17.0.1 - - [05/May/2022:19:34:30 +0000] \"GET / HTTP/1.1\" 200 615 \"-\" \"python-requests/2.27.1\" \"-\"\r\n172.17.0.1 - - [05/May/2022:19:34:30 +0000] \"0\" 400 157 \"-\" \"-\" \"-\"\r\n```\r\nSo it sends second request with bad status code.\r\nHere https://github.com/psf/requests/blob/main/requests/models.py#L576 `length` will be `0` so there is no `Content-Length: 0` header in request.\r\nThe problem occurs there https://github.com/psf/requests/blob/main/requests/adapters.py#L471 .\r\nBecause `request.body` is `''` and 'Content-Length' not in `request.headers` it counts as `chunk=True`.\r\nBecause of that it acts like it has `Transfer-Encoding: chunked` header, and here https://github.com/psf/requests/blob/main/requests/adapters.py#L523-L528 it does not send nothing but `low_conn.send(b'0\\r\\n\\r\\n')`.\r\nI guess thats why It has bad request like this:\r\n```\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226\r\n```\r\nThe same behavior is happening on POST request.\r\n```python\r\npost('http://localhost:80', data={'foo': None})\r\n```\r\ngives:\r\n```\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"POST / HTTP/1.1\" 200 45\r\napache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226\r\n```\r\nThe raw request will be something like this:\r\n```python\r\nimport socket\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\ns.connect((\"localhost\", 80))\r\ns.send(\r\n    b'GET / HTTP/1.1\\r\\n'\r\n    b'Host: localhost:80\\r\\n'\r\n    b'User-Agent: python-requests/2.27.1\\r\\n'\r\n    b'Accept-Encoding: gzip, deflate, br\\r\\n'\r\n    b'Accept: */*\\r\\n'\r\n    b'Connection: keep-alive\\r\\n'\r\n    b'\\r\\n'\r\n    b'0\\r\\n\\r\\n' # this thing is added here https://github.com/psf/requests/blob/main/requests/adapters.py#L528\r\n)\r\n\r\nresponse = s.recv(4096)\r\nprint(response)\r\n```\r\nso `0\\r\\n\\r\\n` is the reason of\r\n\r\n`apache_1  | 172.21.0.1 - - [05/May/2022:23:05:44 +0000] \"0\" 400 226`\r\n\r\n\r\nThis PR fixes the problem. Tests for this case are created.\r\n",
    "closed_by": {
      "login": "romanyakovlev",
      "id": 20498421,
      "node_id": "MDQ6VXNlcjIwNDk4NDIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20498421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanyakovlev",
      "html_url": "https://github.com/romanyakovlev",
      "followers_url": "https://api.github.com/users/romanyakovlev/followers",
      "following_url": "https://api.github.com/users/romanyakovlev/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanyakovlev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanyakovlev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanyakovlev/subscriptions",
      "organizations_url": "https://api.github.com/users/romanyakovlev/orgs",
      "repos_url": "https://api.github.com/users/romanyakovlev/repos",
      "events_url": "https://api.github.com/users/romanyakovlev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanyakovlev/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6122/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6120",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6120/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6120/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6120/events",
    "html_url": "https://github.com/psf/requests/issues/6120",
    "id": 1224967057,
    "node_id": "I_kwDOABTKOs5JA4OR",
    "number": 6120,
    "title": "New exception when redirect url is invalid",
    "user": {
      "login": "setla",
      "id": 38295919,
      "node_id": "MDQ6VXNlcjM4Mjk1OTE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/38295919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/setla",
      "html_url": "https://github.com/setla",
      "followers_url": "https://api.github.com/users/setla/followers",
      "following_url": "https://api.github.com/users/setla/following{/other_user}",
      "gists_url": "https://api.github.com/users/setla/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/setla/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/setla/subscriptions",
      "organizations_url": "https://api.github.com/users/setla/orgs",
      "repos_url": "https://api.github.com/users/setla/repos",
      "events_url": "https://api.github.com/users/setla/events{/privacy}",
      "received_events_url": "https://api.github.com/users/setla/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-05-04T06:22:32Z",
    "updated_at": "2022-05-04T06:22:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Currently when redirect response with invalid redirect URL is returned, we receive the same error (`InvalidURL, InvalidSchema, LocationParseError`) as when passing wrong URL that is used for first request in chain. It would be good to have those cases separated (e.g. to try fix it in custom way)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6120/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6118",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6118/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6118/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6118/events",
    "html_url": "https://github.com/psf/requests/issues/6118",
    "id": 1223719666,
    "node_id": "I_kwDOABTKOs5I8Hry",
    "number": 6118,
    "title": "`proxies` input argument is mutated",
    "user": {
      "login": "milanboers",
      "id": 1335341,
      "node_id": "MDQ6VXNlcjEzMzUzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1335341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/milanboers",
      "html_url": "https://github.com/milanboers",
      "followers_url": "https://api.github.com/users/milanboers/followers",
      "following_url": "https://api.github.com/users/milanboers/following{/other_user}",
      "gists_url": "https://api.github.com/users/milanboers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/milanboers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/milanboers/subscriptions",
      "organizations_url": "https://api.github.com/users/milanboers/orgs",
      "repos_url": "https://api.github.com/users/milanboers/repos",
      "events_url": "https://api.github.com/users/milanboers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/milanboers/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2022-05-03T05:54:56Z",
    "updated_at": "2023-03-09T05:57:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The input argument to `proxies` is mutated when environment proxy variables are present. See the reproduction steps.\r\n\r\nThis may be different than what users are expecting. It can lead to unexpected behavior when re-using the argument that was passed.\r\n\r\n## Expected Result\r\n\r\nNo mutation of the input argument:\r\n```\r\n>>> proxies = {'dummy': 'dummy'}\r\n>>> os.environ['http_proxy'] = 'http://dummy'\r\n>>> requests.get('https://python.org',proxies=proxies)\r\n<Response [200]>\r\n>>> proxies\r\n{'dummy': 'dummy'}\r\n```\r\n\r\n## Actual Result / Reproduction steps\r\n\r\n```\r\n>>> proxies = {'dummy': 'dummy'}\r\n>>> os.environ['http_proxy'] = 'http://dummy'\r\n>>> requests.get('https://python.org',proxies=proxies)\r\n<Response [200]>\r\n>>> proxies\r\n{'dummy': 'dummy', 'http': 'http://dummy'}\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.102.1-microsoft-standard-WSL2\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"30000020\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6118/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6115",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6115/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6115/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6115/events",
    "html_url": "https://github.com/psf/requests/issues/6115",
    "id": 1220894214,
    "node_id": "I_kwDOABTKOs5IxV4G",
    "number": 6115,
    "title": "Still cannot prevent requests library from encoding",
    "user": {
      "login": "LudiusMaximus",
      "id": 4678285,
      "node_id": "MDQ6VXNlcjQ2NzgyODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4678285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LudiusMaximus",
      "html_url": "https://github.com/LudiusMaximus",
      "followers_url": "https://api.github.com/users/LudiusMaximus/followers",
      "following_url": "https://api.github.com/users/LudiusMaximus/following{/other_user}",
      "gists_url": "https://api.github.com/users/LudiusMaximus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LudiusMaximus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LudiusMaximus/subscriptions",
      "organizations_url": "https://api.github.com/users/LudiusMaximus/orgs",
      "repos_url": "https://api.github.com/users/LudiusMaximus/repos",
      "events_url": "https://api.github.com/users/LudiusMaximus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LudiusMaximus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2022-04-29T13:58:44Z",
    "updated_at": "2024-01-27T10:03:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I have the same problem as https://github.com/psf/requests/issues/5964, but the solution does not work for me.\r\nI need to send unescaped URL requestes to a server. The purpose is to evoke response code 400 to test the firewall configuration.\r\n\r\n## Expected Result\r\nThe following code should (according to https://github.com/psf/requests/issues/5964) send the unescaped URL:\r\n\r\n```\r\nimport requests\r\ns = requests.Session()\r\n\r\n# Using Burp Suite Proxy to examine request being sent.\r\ns.proxies = { \r\n    \"http\"  : \"http://127.0.0.1:8080\",\r\n    \"https\" : \"http://127.0.0.1:8080\",\r\n}\r\n# Do not verify certificate.\r\ns.verify = False\r\n\r\n# Solution from https://github.com/psf/requests/issues/5964\r\nbase_url = 'https://www.example.com/search'\r\nquery = '?date_range=2017-01-01|2017-03-01'\r\nreq = requests.Request('GET', base_url)\r\np = req.prepare()\r\np.url += query\r\nresp = s.send(p)\r\nprint(resp.request.url)\r\n```\r\n\r\n\r\n## Actual Result\r\n\r\nThe `print(resp.request.url)` prints `https://www.example.com/search?date_range=2017-01-01|2017-03-01` as expected.\r\nBut what is really transmitted is the escaped URL, `https://www.example.com/search?date_range=2017-01-01%7C2017-03-01` as seen in this Burp Suite screenshot: \r\n![image](https://user-images.githubusercontent.com/4678285/165955894-9a8d73e0-98a9-48a3-abac-6ce2c652c138.png)\r\n\r\n\r\n## Reproduction Steps\r\n\r\nUse the python code above and a way of choice to capture the actual response being sent (e.g. Burp Suite  proxy).\r\nYou can also use curl to send an actually unescaped response:\r\n\r\n`curl \"https://www.example.com/search?date_range=2017-01-01|2017-03-01\" -x 127.0.0.1:8080 --insecure`\r\n\r\n![image](https://user-images.githubusercontent.com/4678285/165958290-a6dfbf45-a620-453a-9054-84cba0b4f5a2.png)\r\n\r\n\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  {\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.14.0-1034-oem\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.8\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6115/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6115/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6110",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6110/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6110/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6110/events",
    "html_url": "https://github.com/psf/requests/issues/6110",
    "id": 1209453328,
    "node_id": "I_kwDOABTKOs5IFssQ",
    "number": 6110,
    "title": "Cookies that include a port flag set to 443 aren't stored if they came from an https location without the 443 port in the URI",
    "user": {
      "login": "fjcuadrado",
      "id": 2392229,
      "node_id": "MDQ6VXNlcjIzOTIyMjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2392229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjcuadrado",
      "html_url": "https://github.com/fjcuadrado",
      "followers_url": "https://api.github.com/users/fjcuadrado/followers",
      "following_url": "https://api.github.com/users/fjcuadrado/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjcuadrado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjcuadrado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjcuadrado/subscriptions",
      "organizations_url": "https://api.github.com/users/fjcuadrado/orgs",
      "repos_url": "https://api.github.com/users/fjcuadrado/repos",
      "events_url": "https://api.github.com/users/fjcuadrado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjcuadrado/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2022-04-20T09:56:08Z",
    "updated_at": "2022-05-01T12:47:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When performing a request to an https location that doesn't include a port explicitly (for example: `https://localhost`) and that location returns a cookie that includes a `port` flag set to `443`, that cookie isn't stored into the cookie jar. However, this kind of cookie is stored into the cookie jar, when the port is set explicitly in the https location (for example: `https://localhost:443`).\r\n\r\n## Expected Result\r\n\r\nA cookie that includes a `port` flag set to `443` should be stored into the cookie jar when the request is performed to an https location that doesn't include a port.\r\n\r\n## Reproduction Steps\r\n\r\nI hope you don't mind that I've moved the Actual Result below this section. I did it because I've written a test-suite to reproduce the issue and the result of running that test-suite has been pasted in the Actual Result section.\r\n\r\n```python\r\nimport http\r\nimport pytest\r\nimport requests\r\n\r\nfrom io import BytesIO\r\nfrom urllib3.response import HTTPHeaderDict, HTTPResponse\r\n\r\n\r\nclass OriginalResponseShim:\r\n    def __init__(self, headers):\r\n        self.msg = headers\r\n\r\n    def isclosed(self):\r\n        return True\r\n\r\n    def close(self):\r\n        return\r\n\r\n\r\ndef make_http_response(\r\n    method,\r\n    url,\r\n    status=requests.codes.ok,\r\n    headers=None\r\n):\r\n    http_headers = HTTPHeaderDict()\r\n    if headers is not None:\r\n        http_headers.extend(headers)\r\n\r\n    def _make_http_response(adapter, request, *args, **kwargs):\r\n        http_response = HTTPResponse(\r\n            status=status,\r\n            reason=http.client.responses.get(status, None),\r\n            body=BytesIO(b''),\r\n            headers=http_headers,\r\n            original_response=OriginalResponseShim(http_headers),\r\n            preload_content=False,\r\n        )\r\n\r\n        return adapter.build_response(request, http_response)\r\n\r\n    return _make_http_response\r\n\r\n\r\nclass TestCookies:\r\n    @pytest.mark.parametrize('url', [\r\n        'http://localhost',\r\n        'http://localhost:80',\r\n        'http://localhost:8080',\r\n        'https://localhost',\r\n        'https://localhost:443',\r\n        'https://localhost:8080',\r\n    ])\r\n    def test_cookie_without_port(self, mocker, url):\r\n        mocker.patch(\r\n            'requests.adapters.HTTPAdapter.send',\r\n            new=make_http_response(\r\n                'GET',\r\n                url,\r\n                headers={\r\n                    'set-cookie': 'cookie=value',\r\n                },\r\n            )\r\n        )\r\n\r\n        session = requests.Session()\r\n        resp = session.request('GET', url)\r\n\r\n        assert resp.status_code == requests.codes.ok\r\n        assert 'set-cookie' in resp.headers\r\n        assert 'cookie' in session.cookies\r\n\r\n        cookie = next(iter(session.cookies))\r\n        assert cookie.name == 'cookie'\r\n        assert cookie.value == 'value'\r\n        assert cookie.port is None\r\n\r\n    @pytest.mark.parametrize('url, port', [\r\n        ('http://localhost', 80),\r\n        ('http://localhost:80', 80),\r\n        ('http://localhost:443', 443),\r\n        ('http://localhost:8080', 8080),\r\n        ('https://localhost', 443),\r\n        ('https://localhost:80', 80),\r\n        ('https://localhost:443', 443),\r\n        ('https://localhost:8080', 8080),\r\n    ])\r\n    def test_cookie_with_port(self, mocker, url, port):\r\n        mocker.patch(\r\n            'requests.adapters.HTTPAdapter.send',\r\n            new=make_http_response(\r\n                'GET',\r\n                url,\r\n                headers={\r\n                    'set-cookie': f'cookie=value; port={port}',\r\n                },\r\n            )\r\n        )\r\n\r\n        session = requests.Session()\r\n        resp = session.request('GET', url)\r\n\r\n        assert resp.status_code == requests.codes.ok\r\n        assert 'set-cookie' in resp.headers\r\n        assert 'cookie' in session.cookies\r\n\r\n        cookie = next(iter(session.cookies))\r\n        assert cookie.name == 'cookie'\r\n        assert cookie.value == 'value'\r\n        assert cookie.port == f'{port}'\r\n```\r\n\r\n## Actual Result\r\n\r\n```================================== test session starts ===================================\r\nplatform darwin -- Python 3.10.2, pytest-6.2.5, py-1.11.0, pluggy-1.0.0\r\nrootdir: /Users/fran/code/requests, configfile: pytest.ini\r\nplugins: httpbin-1.0.0, mock-2.0.0, cov-3.0.0\r\ncollected 14 items\r\n\r\ntests/test_cookies.py ..........F...                                               [100%]\r\n\r\n======================================== FAILURES ========================================\r\n________________ TestCookies.test_cookie_with_port[https://localhost-443] ________________\r\n\r\nself = <tests.test_cookies.TestCookies object at 0x10e309ff0>\r\nmocker = <pytest_mock.plugin.MockFixture object at 0x10e30a290>, url = 'https://localhost'\r\nport = 443\r\n\r\n    @pytest.mark.parametrize('url, port', [\r\n        ('http://localhost', 80),\r\n        ('http://localhost:80', 80),\r\n        ('http://localhost:443', 443),\r\n        ('http://localhost:8080', 8080),\r\n        ('https://localhost', 443),\r\n        ('https://localhost:80', 80),\r\n        ('https://localhost:443', 443),\r\n        ('https://localhost:8080', 8080),\r\n    ])\r\n    def test_cookie_with_port(self, mocker, url, port):\r\n        mocker.patch(\r\n            'requests.adapters.HTTPAdapter.send',\r\n            new=make_http_response(\r\n                'GET',\r\n                url,\r\n                headers={\r\n                    'set-cookie': f'cookie=value; port={port}',\r\n                },\r\n            )\r\n        )\r\n\r\n        session = requests.Session()\r\n        resp = session.request('GET', url)\r\n\r\n        assert resp.status_code == requests.codes.ok\r\n        assert 'set-cookie' in resp.headers\r\n>       assert 'cookie' in session.cookies\r\nE       AssertionError: assert 'cookie' in <RequestsCookieJar[]>\r\nE        +  where <RequestsCookieJar[]> = <requests.sessions.Session object at 0x10e309b10>.cookies\r\n\r\ntests/test_cookies.py:105: AssertionError\r\n```\r\n\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"21.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010ef\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.9\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6110/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6110/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6103",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6103/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6103/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6103/events",
    "html_url": "https://github.com/psf/requests/issues/6103",
    "id": 1191981901,
    "node_id": "I_kwDOABTKOs5HDDNN",
    "number": 6103,
    "title": "HTTPS proxy certificate is not validated",
    "user": {
      "login": "arossert",
      "id": 7085494,
      "node_id": "MDQ6VXNlcjcwODU0OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7085494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arossert",
      "html_url": "https://github.com/arossert",
      "followers_url": "https://api.github.com/users/arossert/followers",
      "following_url": "https://api.github.com/users/arossert/following{/other_user}",
      "gists_url": "https://api.github.com/users/arossert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arossert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arossert/subscriptions",
      "organizations_url": "https://api.github.com/users/arossert/orgs",
      "repos_url": "https://api.github.com/users/arossert/repos",
      "events_url": "https://api.github.com/users/arossert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arossert/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2022-04-04T15:44:10Z",
    "updated_at": "2022-07-30T03:45:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When running a request using `HTTPS` proxy the proxy certificate is ignored even when `verify=True`.\r\nIs there a way to validate the proxy certificate?\r\n```\r\n>>> requests.get(\"https://www.google.com\", proxies={\"https\": \"https://100.117.2.81:3129\"}, verify=True)\r\n>>> <Response [200]>\r\n```\r\nThis is available using `pycurl`\r\n```\r\ncurl.setopt(pycurl.PROXY_SSL_VERIFYPEER, True)\r\ncurl.setopt(pycurl.PROXY_SSL_VERIFYHOST, True)\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6103/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6102",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6102/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6102/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6102/events",
    "html_url": "https://github.com/psf/requests/issues/6102",
    "id": 1191322611,
    "node_id": "I_kwDOABTKOs5HAiPz",
    "number": 6102,
    "title": "HTTPDigestAuth fails on non-latin credentials",
    "user": {
      "login": "ondratu",
      "id": 6469029,
      "node_id": "MDQ6VXNlcjY0NjkwMjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6469029?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ondratu",
      "html_url": "https://github.com/ondratu",
      "followers_url": "https://api.github.com/users/ondratu/followers",
      "following_url": "https://api.github.com/users/ondratu/following{/other_user}",
      "gists_url": "https://api.github.com/users/ondratu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ondratu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ondratu/subscriptions",
      "organizations_url": "https://api.github.com/users/ondratu/orgs",
      "repos_url": "https://api.github.com/users/ondratu/repos",
      "events_url": "https://api.github.com/users/ondratu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ondratu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-04-04T06:32:18Z",
    "updated_at": "2024-04-17T16:41:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "There was issue reported, which is closed with bad results.\r\n\r\nhttps://github.com/psf/requests/blob/4f6c0187150af09d085c03096504934eb91c7a9e/requests/auth.py#L59-L63\r\n\r\nDon't pass unicode strings in the arguments, but use UTF8 bytes instead.\r\n```\r\nself.session.get(main_url, auth=requests.auth.HTTPDigestAuth(\"\u0421\u0435\u0440\u0433\u0435\u0439_\u041b\u0430\u0441\u0442\u043e\u0447\u043a\u0438\u043d\".encode('UTF-8'), '1234'))\r\n```\r\n\r\n_Originally posted by @D-stefaang in https://github.com/psf/requests/issues/5089#issuecomment-763569911_\r\n\r\nBut this is wrong! When i try to set user 'Ond\u0159ej' with this advice, requests send bad string:\r\n\r\n```\r\nHTTPDigestAuth('Ond\u0159ej'.encode('utf-8'), 'hesl\u00ed\u010dko')\r\n```\r\ncreates header starts with wrong username!\r\n```\r\nDigest username=\"b'Ond\\xc5\\x99ej'\"\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6102/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6094",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6094/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6094/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6094/events",
    "html_url": "https://github.com/psf/requests/issues/6094",
    "id": 1178140499,
    "node_id": "I_kwDOABTKOs5GOP9T",
    "number": 6094,
    "title": "HTTPBasicAuth does not handle non-latin-1 characters",
    "user": {
      "login": "frafra",
      "id": 4068,
      "node_id": "MDQ6VXNlcjQwNjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frafra",
      "html_url": "https://github.com/frafra",
      "followers_url": "https://api.github.com/users/frafra/followers",
      "following_url": "https://api.github.com/users/frafra/following{/other_user}",
      "gists_url": "https://api.github.com/users/frafra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frafra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frafra/subscriptions",
      "organizations_url": "https://api.github.com/users/frafra/orgs",
      "repos_url": "https://api.github.com/users/frafra/repos",
      "events_url": "https://api.github.com/users/frafra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frafra/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-03-23T13:40:56Z",
    "updated_at": "2023-05-27T22:08:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi,\r\nI have a password containing Norwegian characters, like \"\u00f8\". I found that `HTTPBasicAuth` generates a wrong `Authentication` header, as the base64-encoded password differed from what I computed and successfully tested.\r\n\r\nIt looks like `latin-1` is the default encoding instead of  `utf-8`:\r\nhttps://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/auth.py#L59-L63\r\n\r\nMy workaround is to encode strings to `utf-8` before passing them to `HTTPBasicAuth`, but it looks like this would break starting with `requests >= 3.0.0`:\r\n\r\nhttps://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/auth.py#L36-L41\r\n\r\nI do not know if different servers have different defaults, but if `requests` do not want to handle binary sequences, then it should probably allow specifying different encodings.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6094/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6086",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6086/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6086/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6086/events",
    "html_url": "https://github.com/psf/requests/issues/6086",
    "id": 1170383353,
    "node_id": "I_kwDOABTKOs5FwqH5",
    "number": 6086,
    "title": "urllib.request.proxy_bypass makes DNS request without using configured proxies when system has NO_PROXY configured at some level",
    "user": {
      "login": "GiorgioComitini",
      "id": 76849071,
      "node_id": "MDQ6VXNlcjc2ODQ5MDcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/76849071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GiorgioComitini",
      "html_url": "https://github.com/GiorgioComitini",
      "followers_url": "https://api.github.com/users/GiorgioComitini/followers",
      "following_url": "https://api.github.com/users/GiorgioComitini/following{/other_user}",
      "gists_url": "https://api.github.com/users/GiorgioComitini/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GiorgioComitini/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GiorgioComitini/subscriptions",
      "organizations_url": "https://api.github.com/users/GiorgioComitini/orgs",
      "repos_url": "https://api.github.com/users/GiorgioComitini/repos",
      "events_url": "https://api.github.com/users/GiorgioComitini/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GiorgioComitini/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 15,
    "created_at": "2022-03-16T00:04:14Z",
    "updated_at": "2022-03-28T16:47:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When using Requests via a SOCKS5 proxy on one of the latest MacBook Pros (Apple Silicon), the DNS requests are not correctly passed to the proxy server even when using the \"socks5h\" scheme. Instead, the DNS resolution happens at the level of the client, causing a DNS leak.\r\n\r\nThis happens with various versions/combinations of Requests/PySocks/Python, the latter being the Apple Silicon versions obtained through pyenv. I have tested this using the local SOCKS5 proxy server provided by Tor.\r\n\r\nIn more detail, I tested the bug on various pyenv Python distributions, labeled 3.8 to 3.10 plus miniforge3, with Requests from v2.16.0 to v2.27.1, and PySocks from v1.5.7 to v1.7.1 (not every single version in between). In what follows, I'll use an example System Information output.\r\n\r\nAlso, I used Wireshark to monitor the DNS requests, and I used curl with the --proxy socks5h://127.0.0.1:9050 flag as a control, to make sure that the local Tor proxy was working properly and that the DNS leak is indeed specific to Python/Requests/PySocks.\r\n\r\nI am not able to confirm whether the DNS leak also happens on Python versions obtained other than through pyenv. On an Intel MacBook using an Anaconda Python version and the latest Requests/PySocks, the leak does not occur.\r\n\r\n## Expected Result\r\n\r\nWhen using the \"socks5h\" scheme, the DNS requests should be forwarded to the SOCKS proxy.\r\n\r\n## Actual Result\r\n\r\nThe DNS requests are sent from the client instead, causing a DNS leak.\r\n\r\n## Reproduction Steps\r\n\r\nInstall any Apple Silicon Python version from pyenv (see above for the versions I tested) and start Tor.\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n    \"http\": \"socks5h://127.0.0.1:9050\",\r\n    \"https\": \"socks5h://127.0.0.1:9050\",\r\n}\r\n\r\nresp = requests.get(\"https://\"+url, proxies=proxies)\r\n```\r\n\r\nMonitor the outgoing DNS requests using Wireshark. If they are sent via the outbound network interface to your pre-configured DNS server (as opposed to the local interface, destination IP 127.0.0.1, port 9050), a DNS leak is occurring.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"21.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010df\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.8\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6086/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6086/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6048",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6048/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6048/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6048/events",
    "html_url": "https://github.com/psf/requests/pull/6048",
    "id": 1113918664,
    "node_id": "PR_kwDOABTKOs4xj3Jb",
    "number": 6048,
    "title": "Fixing unicode surrogates in POST data lead to exception",
    "user": {
      "login": "mftb",
      "id": 1322800,
      "node_id": "MDQ6VXNlcjEzMjI4MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322800?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mftb",
      "html_url": "https://github.com/mftb",
      "followers_url": "https://api.github.com/users/mftb/followers",
      "following_url": "https://api.github.com/users/mftb/following{/other_user}",
      "gists_url": "https://api.github.com/users/mftb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mftb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mftb/subscriptions",
      "organizations_url": "https://api.github.com/users/mftb/orgs",
      "repos_url": "https://api.github.com/users/mftb/repos",
      "events_url": "https://api.github.com/users/mftb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mftb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-01-25T13:55:14Z",
    "updated_at": "2022-03-09T18:26:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/6048",
      "html_url": "https://github.com/psf/requests/pull/6048",
      "diff_url": "https://github.com/psf/requests/pull/6048.diff",
      "patch_url": "https://github.com/psf/requests/pull/6048.patch",
      "merged_at": null
    },
    "body": "Closes #6008\r\nFixing the unicode surrogates issue",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6048/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6026",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6026/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6026/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6026/events",
    "html_url": "https://github.com/psf/requests/issues/6026",
    "id": 1091897772,
    "node_id": "I_kwDOABTKOs5BFQms",
    "number": 6026,
    "title": "UnicodeDecodeError after following a chain of redirects ",
    "user": {
      "login": "wodim",
      "id": 1001553,
      "node_id": "MDQ6VXNlcjEwMDE1NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1001553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wodim",
      "html_url": "https://github.com/wodim",
      "followers_url": "https://api.github.com/users/wodim/followers",
      "following_url": "https://api.github.com/users/wodim/following{/other_user}",
      "gists_url": "https://api.github.com/users/wodim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wodim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wodim/subscriptions",
      "organizations_url": "https://api.github.com/users/wodim/orgs",
      "repos_url": "https://api.github.com/users/wodim/repos",
      "events_url": "https://api.github.com/users/wodim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wodim/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-01-01T21:42:39Z",
    "updated_at": "2023-03-03T15:06:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "#6006\r\n\r\nSomething confuses requests (or urllib3?) along the way\r\n\r\nActual Result\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 92: invalid continuation byte\r\n\r\nReproduction Steps\r\nimport requests\r\nrequests.get(\"https://www.lavozdegalicia.es/noticia/deportes/2021/12/13/psg-juve-united-nuevos-rivales-espa%C3%B1oles-champions/00031639396272418389372.htm\")\r\n\r\nSystem Information\r\n$ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.0\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.0-17763-Microsoft\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010cf\",\r\n    \"version\": \"21.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n@sigmavirus24 you have been too harsh on this one.\r\n\r\nTraceback (most recent call last):\r\nFile \"\", line 1, in\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\api.py\", line 76, in get\r\nreturn request('get', url, params=params, **kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\api.py\", line 61, in request\r\nreturn session.request(method=method, url=url, **kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 542, in request\r\nresp = self.send(prep, **send_kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 677, in send\r\nhistory = [resp for resp in gen]\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 677, in\r\nhistory = [resp for resp in gen]\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 150, in resolve_redirects\r\nurl = self.get_redirect_target(resp)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 116, in get_redirect_target\r\nreturn to_native_string(location, 'utf8')\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests_internal_utils.py\", line 25, in to_native_string\r\nout = string.decode(encoding)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 92: invalid continuation byte\r\n\r\nThe guilty part there is return to_native_string(location, 'utf8') Trying to decode the URL to native utf8 when it should rather \"URL encode\" it. I am not an HTTP expert, but this exception should be handled more gracefully anyway.\r\n\r\nThe location given by the remote for redirection is as follow:\r\n\r\nb'http://www.lavozdegalicia.es/noticia/deportes/2021/12/13/psg-juve-united-nuevos-rivales-espa\\xf1oles-champions/00031639396272418389372.htm'\r\n\r\nShould the \\xf1 be decoded as follow %F1 ?\r\n\r\nI can see that this behavior is already followed by Chrome.\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6026/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6026/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6025",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6025/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6025/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6025/events",
    "html_url": "https://github.com/psf/requests/issues/6025",
    "id": 1091484277,
    "node_id": "I_kwDOABTKOs5BDrp1",
    "number": 6025,
    "title": "Support for proxy that requires DigestAuth",
    "user": {
      "login": "raffaem",
      "id": 54762742,
      "node_id": "MDQ6VXNlcjU0NzYyNzQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/54762742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raffaem",
      "html_url": "https://github.com/raffaem",
      "followers_url": "https://api.github.com/users/raffaem/followers",
      "following_url": "https://api.github.com/users/raffaem/following{/other_user}",
      "gists_url": "https://api.github.com/users/raffaem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raffaem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raffaem/subscriptions",
      "organizations_url": "https://api.github.com/users/raffaem/orgs",
      "repos_url": "https://api.github.com/users/raffaem/repos",
      "events_url": "https://api.github.com/users/raffaem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raffaem/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-12-31T09:01:04Z",
    "updated_at": "2024-08-30T08:42:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Requests seems not to have support for proxies which requires DigestAuth, only BasicAuth.\r\n\r\nIn [this SO post](https://stackoverflow.com/a/60031108/1719931) there is an authorization module that implements support for proxies that require DigestAuth, and also allow to connect to HTTPS websites.\r\n\r\n[requests-toolbet](https://github.com/requests/toolbelt) (I don't know whether it is an official project of requests) has a [HTTPProxyDigestAuth](https://toolbelt.readthedocs.io/en/latest/authentication.html#httpproxydigestauth) class, but doesn't [allow to connect to HTTPS websites](https://github.com/requests/toolbelt/issues/321).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6025/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6015",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6015/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6015/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6015/events",
    "html_url": "https://github.com/psf/requests/issues/6015",
    "id": 1089176381,
    "node_id": "I_kwDOABTKOs5A64M9",
    "number": 6015,
    "title": "Possible issue with proxies and TLS versions when using a session.",
    "user": {
      "login": "defunes43",
      "id": 1909717,
      "node_id": "MDQ6VXNlcjE5MDk3MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1909717?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/defunes43",
      "html_url": "https://github.com/defunes43",
      "followers_url": "https://api.github.com/users/defunes43/followers",
      "following_url": "https://api.github.com/users/defunes43/following{/other_user}",
      "gists_url": "https://api.github.com/users/defunes43/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/defunes43/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/defunes43/subscriptions",
      "organizations_url": "https://api.github.com/users/defunes43/orgs",
      "repos_url": "https://api.github.com/users/defunes43/repos",
      "events_url": "https://api.github.com/users/defunes43/events{/privacy}",
      "received_events_url": "https://api.github.com/users/defunes43/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-12-27T11:27:52Z",
    "updated_at": "2024-05-24T21:23:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Using a session or a request object with the same parameters should yield the same results.\r\n\r\nWhen a proxy is used, and when the target website supports TLS 1.0 and TLS 1.1 (or does not support TLS 1.3, I could not figure it out), a request object works fine, whereas a session throws a SSL Error.\r\n\r\n## Expected Result\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n  'http': 'http://127.0.0.1:8888',\r\n  'https': 'http://127.0.0.1:8888',\r\n}\r\n\r\nrequests.get('https://sidep.gouv.fr/', proxies=proxies)\r\n\r\nsession = requests.Session()\r\nsession.proxies.update(proxies)\r\nsession.get('https://sidep.gouv.fr/')\r\n```\r\n\r\nThe two ways to get the data should yield the same result.\r\n\r\n## Actual Result\r\n\r\nThe request works, but not with the session:\r\n\r\n```\r\nHTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 696, in urlopen\r\n    self._prepare_proxy(conn)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 964, in _prepare_proxy\r\n    conn.connect()\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connection.py\", line 364, in connect    \r\n    conn = self._connect_tls_proxy(hostname, conn)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connection.py\", line 501, in _connect_tls_proxy\r\n    socket = ssl_wrap_socket(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\ssl_.py\", line 453, in ssl_wrap_socket\r\n    ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\ssl_.py\", line 495, in _ssl_wrap_socket_impl\r\n    return ssl_context.wrap_socket(sock)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 512, in wrap_socket\r\n    return self.sslsocket_class._create(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 1070, in _create\r\n    self.do_handshake()\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 1341, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\adapters.py\", line 439, in send        \r\n    resp = conn.urlopen(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 755, in urlopen\r\n    retries = retries.increment(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\retry.py\", line 574, in increment  \r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy\\__main__.py\", line 45, in <module>\r\n    cli.main()\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy/..\\debugpy\\server\\cli.py\", line 444, in main\r\n    run()\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy/..\\debugpy\\server\\cli.py\", line 285, in run_file\r\n    runpy.run_path(target_as_str, run_name=compat.force_str(\"__main__\"))\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 269, in run_path\r\n    return _run_module_code(code, init_globals, run_name,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 96, in _run_module_code\r\n    _run_code(code, mod_globals, init_globals,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"c:\\Users\\Max\\testssl.py\", line 16, in <module>\r\n    raise e\r\n  File \"c:\\Users\\Max\\testssl.py\", line 13, in <module>\r\n    session.get('https://sidep.gouv.fr/')\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 555, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 542, in request     \r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 655, in send        \r\n    r = adapter.send(request, **kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\adapters.py\", line 514, in send        \r\n    raise SSLError(e, request=request)\r\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\n```\r\n\r\nWhen using a TLS 1.3 enabled (which seem to mean TLS 1.0 and 1.1 disabled) website, both versions work, for example:\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n  'http': 'http://127.0.0.1:8888',\r\n  'https': 'http://127.0.0.1:8888',\r\n}\r\n\r\nrequests.get('https://example.com/', proxies=proxies)\r\n\r\nsession = requests.Session()\r\nsession.proxies.update(proxies)\r\nsession.verify = False\r\nsession.get('https://example.com/')\r\n```\r\n\r\nWithout the proxy, it works fine for both websites. I spend a couple hours trying with many websites to figure out the breaking cause, and I believe it is the TLS version.\r\n\r\n## System Information\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6015/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6008",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6008/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6008/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6008/events",
    "html_url": "https://github.com/psf/requests/issues/6008",
    "id": 1082739182,
    "node_id": "I_kwDOABTKOs5AiUnu",
    "number": 6008,
    "title": "Unicode surrogates in POST data lead to exception",
    "user": {
      "login": "pcworld",
      "id": 1506734,
      "node_id": "MDQ6VXNlcjE1MDY3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1506734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcworld",
      "html_url": "https://github.com/pcworld",
      "followers_url": "https://api.github.com/users/pcworld/followers",
      "following_url": "https://api.github.com/users/pcworld/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcworld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcworld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcworld/subscriptions",
      "organizations_url": "https://api.github.com/users/pcworld/orgs",
      "repos_url": "https://api.github.com/users/pcworld/repos",
      "events_url": "https://api.github.com/users/pcworld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcworld/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-12-16T23:50:15Z",
    "updated_at": "2021-12-17T02:21:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Summary. -->\r\n\r\nIn requests 2.26.0 with Python 3, when passing unicode strings with surrogate characters as POST data (either directly as a `str` or as part of a `dict`), sending the request throws an exception.\r\n\r\n## Expected Result\r\n\r\nThe library should not throw an exception, even when fed with unvalidated user input.\r\n\r\n<!-- What you expected. -->\r\n\r\n## Actual Result / Reproduction Steps\r\n\r\n```\r\n>>> import requests\r\n>>> requests.__version__\r\n'2.26.0'\r\n\r\n>>> requests.post('https://example.invalid', data={'name': 'test\\udced\\udcb3\\udc83.pdf'})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 117, in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 528, in request\r\n    prep = self.prepare_request(req)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 466, in prepare_request\r\n    hooks=merge_hooks(request.hooks, self.hooks),\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 319, in prepare\r\n    self.prepare_body(data, files, json)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 515, in prepare_body\r\n    body = self._encode_params(data)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 104, in _encode_params\r\n    v.encode('utf-8') if isinstance(v, str) else v))\r\nUnicodeEncodeError: 'utf-8' codec can't encode characters in position 4-6: surrogates not allowed\r\n\r\n>>> requests.post('https://example.com/', 'test\\udced\\udcb3\\udc83.pdf')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 117, in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/adapters.py\", line 449, in send\r\n    timeout=timeout\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 706, in urlopen\r\n    chunked=chunked,\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 394, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connection.py\", line 239, in request\r\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\r\n  File \"/usr/lib/python3.7/http/client.py\", line 1260, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.7/http/client.py\", line 1305, in _send_request\r\n    body = _encode(body, 'body')\r\n  File \"/usr/lib/python3.7/http/client.py\", line 174, in _encode\r\n    (name.title(), data[err.start:err.end], name)) from None\r\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 4-6: Body ('\\udced\\udcb3\\udc83') is not valid Latin-1. Use body.encode('utf-8') if you want to send it encoded in UTF-8.\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.0-17-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010104f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n-----\r\nIn [requests/models.py](https://github.com/psf/requests/blob/39d0fdd9096f7dceccbc8f82e1eda7dd64717a8e/requests/models.py), there are several calls like `some_string.encode('utf-8')`. I suppose changing them to `some_string.encode('utf-8', 'surrogatepass')` would at least fix the first reproduction case. Not sure about the second, since the exception occurs in http.client there.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6008/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6008/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/6004",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/6004/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/6004/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/6004/events",
    "html_url": "https://github.com/psf/requests/issues/6004",
    "id": 1077668422,
    "node_id": "I_kwDOABTKOs5AO-pG",
    "number": 6004,
    "title": "For Morsel cookies requests expects wrong Expires time format",
    "user": {
      "login": "druid8",
      "id": 43011904,
      "node_id": "MDQ6VXNlcjQzMDExOTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43011904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/druid8",
      "html_url": "https://github.com/druid8",
      "followers_url": "https://api.github.com/users/druid8/followers",
      "following_url": "https://api.github.com/users/druid8/following{/other_user}",
      "gists_url": "https://api.github.com/users/druid8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/druid8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/druid8/subscriptions",
      "organizations_url": "https://api.github.com/users/druid8/orgs",
      "repos_url": "https://api.github.com/users/druid8/repos",
      "events_url": "https://api.github.com/users/druid8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/druid8/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2021-12-11T22:49:51Z",
    "updated_at": "2023-09-28T09:09:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm not sure about this, but it looks that requests is expecting invalid date format in Expires section in Cookies passed as Morsel objects.\r\n\r\n`morsel_to_cookie` (from `requests/cookie.py`) function parse `expires` attr if there is no `max-age` (which is OK) using format from `time_template`. However this format is set as `'%a, %d-%b-%Y %H:%M:%S GMT'` which is none of allowed expires section date value described in RFC (https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1).\r\n\r\nThe nearest format is the first choice from https://www.rfc-editor.org/rfc/rfc2616#section-3.3.1. The difference is that between date parts there should be a space, but requests expects dash.\r\n\r\nSee Reproduction Steps for very simple example which bases on Python std libs only and crashes.\r\n\r\n## Expected Result\r\n\r\nIt's expected that requests properly accepts Morsel cookies when expires follows RFC https://www.rfc-editor.org/rfc/rfc2616#section-3.3.1.\r\n\r\n## Actual Result\r\n\r\nThere is `ValueError` raised by strptime that passed value does not match format.\r\nExample:\r\n`ValueError: time data 'Thu, 01 Jan 1970 00:00:00 GMT' does not match format '%a, %d-%b-%Y %H:%M:%S GMT'`\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\n    from http.cookies import SimpleCookie\r\n    from requests.cookies import RequestsCookieJar\r\n    cookies = SimpleCookie()\r\n    cookies.load('auth_session=null; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; httponly; samesite=strict')\r\n\r\n    jar = RequestsCookieJar()\r\n    jar.update(cookies)\r\n```\r\n\r\nExample above is a simplified case of using [`async_asgi_testclient`](https://github.com/vinissimus/async-asgi-testclient) to test application written with [`Starlette`](https://www.starlette.io/) with `SessionMiddleware`. The `async_asgi_testclient` collects cookies using `SimpleCookie` class from standard `http` lib and then pass them to `requests` lib which is used to perform client test requests.\r\n\r\nBut this issue is not related to these packages as I reproduced it using only Python standard `http` lib and `requests` as above.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.15.0-1-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/6004/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/6004/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5975",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5975/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5975/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5975/events",
    "html_url": "https://github.com/psf/requests/issues/5975",
    "id": 1052405538,
    "node_id": "I_kwDOABTKOs4-um8i",
    "number": 5975,
    "title": "Request doesn't provide a way to refresh headers for each retry, making it impossible to regenerate expired Authorization headers",
    "user": {
      "login": "vitaly-krugl",
      "id": 1441066,
      "node_id": "MDQ6VXNlcjE0NDEwNjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1441066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitaly-krugl",
      "html_url": "https://github.com/vitaly-krugl",
      "followers_url": "https://api.github.com/users/vitaly-krugl/followers",
      "following_url": "https://api.github.com/users/vitaly-krugl/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitaly-krugl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitaly-krugl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitaly-krugl/subscriptions",
      "organizations_url": "https://api.github.com/users/vitaly-krugl/orgs",
      "repos_url": "https://api.github.com/users/vitaly-krugl/repos",
      "events_url": "https://api.github.com/users/vitaly-krugl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitaly-krugl/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2021-11-12T21:02:34Z",
    "updated_at": "2023-07-18T02:03:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I am using requests 2.23.0 with Python 3.8. \r\n\r\nMy app configures the `requests.packages.urllib3.util.retry.Retry` instance and then passes it via the `max_retries` arg to `requests.adapters.HTTPAdapter` constructor and then mounts the adapter as follows:\r\n\r\n```\r\nclass RetriableSslSession(requests.Session):\r\n    def __init__(self):\r\n        super(RetriableSslSession, self).__init__()\r\n\r\n        self.mount('https://', create_default_ssl_adapter())\r\n```\r\n\r\nThen before making a request, my app sets `session.auth` to an instance of [EdgeGridAuth](https://github.com/akamai/AkamaiOPEN-edgegrid-python/blob/master/akamai/edgegrid/edgegrid.py) that is derived from `requests.auth.AuthBase`.\r\n\r\nSince EdgeGridAuth implements the [AuthBase.\\_\\_call\\_\\_](https://github.com/akamai/AkamaiOPEN-edgegrid-python/blob/bbfd58b75a61684ef72e29d2dab2e81492b3f4cb/akamai/edgegrid/edgegrid.py#L257) method, I expected that the Authorization header would be generated for each retry. However, in our apache proxy logs, we're seeing the same Authorization header reused from time to time, which suggests that retries are not causing the Authorization header to be generated.\r\n\r\nCould you please let me know what I may be doing wrong and explain how to cause the Authorization header to be re-generated for each Retry?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5975/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5975/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5953",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5953/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5953/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5953/events",
    "html_url": "https://github.com/psf/requests/pull/5953",
    "id": 1021171999,
    "node_id": "PR_kwDOABTKOs4s8rEb",
    "number": 5953,
    "title": "Add ipv6 support to should_bypass_proxies",
    "user": {
      "login": "derekhiggins",
      "id": 883848,
      "node_id": "MDQ6VXNlcjg4Mzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/883848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/derekhiggins",
      "html_url": "https://github.com/derekhiggins",
      "followers_url": "https://api.github.com/users/derekhiggins/followers",
      "following_url": "https://api.github.com/users/derekhiggins/following{/other_user}",
      "gists_url": "https://api.github.com/users/derekhiggins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/derekhiggins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/derekhiggins/subscriptions",
      "organizations_url": "https://api.github.com/users/derekhiggins/orgs",
      "repos_url": "https://api.github.com/users/derekhiggins/repos",
      "events_url": "https://api.github.com/users/derekhiggins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/derekhiggins/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2021-10-08T14:38:07Z",
    "updated_at": "2024-05-17T15:14:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5953",
      "html_url": "https://github.com/psf/requests/pull/5953",
      "diff_url": "https://github.com/psf/requests/pull/5953.diff",
      "patch_url": "https://github.com/psf/requests/pull/5953.patch",
      "merged_at": null
    },
    "body": "Add support to should_bypass_proxies to support\r\nIPv6 ipaddresses and CIDRs in no_proxy. Includes\r\nadding IPv6 support to various other helper functions.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5953/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5950",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5950/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5950/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5950/events",
    "html_url": "https://github.com/psf/requests/issues/5950",
    "id": 1016443852,
    "node_id": "I_kwDOABTKOs48lbPM",
    "number": 5950,
    "title": "RequestsCookieJar._find_on_duplicates wrongly fails on cookie with empty value",
    "user": {
      "login": "alexpostolache",
      "id": 61288277,
      "node_id": "MDQ6VXNlcjYxMjg4Mjc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/61288277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexpostolache",
      "html_url": "https://github.com/alexpostolache",
      "followers_url": "https://api.github.com/users/alexpostolache/followers",
      "following_url": "https://api.github.com/users/alexpostolache/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexpostolache/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexpostolache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexpostolache/subscriptions",
      "organizations_url": "https://api.github.com/users/alexpostolache/orgs",
      "repos_url": "https://api.github.com/users/alexpostolache/repos",
      "events_url": "https://api.github.com/users/alexpostolache/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexpostolache/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-10-05T15:06:09Z",
    "updated_at": "2022-08-31T12:03:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Getting the value of  a cookie which is set without a value by a website raises a `KeyError`. I don't know if this is by design. Browsers seem to accept these kind of cookies, even though this behaviour seems like bad practice.\r\n\r\n## Expected Result\r\n\r\nAn empty string.\r\n\r\n## Actual Result\r\n\r\n`RequestsCookieJar._find_no_duplicates` raises a `KeyError`\r\n\r\n## Reproduction Steps\r\nIn `ipython`:\r\n```python\r\nimport requests\r\nresp = requests.get(\"https://www.pib-insurance.com/\")\r\nresp.cookies.get_dict() # pretty print cookies\r\nresp.cookies[\"firstname\"]\r\n```\r\n\r\n## Fix\r\nI think last `if` in `_find_no_duplicates` (line **397** of `cookies.py`) should be `if toReturn is not None:` to accommodate for cookies without values.\r\n\r\nThanks!",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5950/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5936",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5936/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5936/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5936/events",
    "html_url": "https://github.com/psf/requests/issues/5936",
    "id": 998380556,
    "node_id": "I_kwDOABTKOs47ghQM",
    "number": 5936,
    "title": "`cert` parameter does not accept a single `pathlib.Path` object as argument",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-09-16T16:01:24Z",
    "updated_at": "2023-02-01T04:49:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "requests seems to have special handling for when the `cert` parameter is a single `str`, but does not extend the same special handling to `pathlib.Path`, meaning currently you either have to do `cert=str(path)` or `cert=(path, path)`.\r\n\r\n## Expected Result\r\n\r\n`Path` objects should be handled just like `str`.\r\n\r\n## Actual Result\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/adapters.py\", line 416, in send\r\n    self.cert_verify(conn, request.url, verify, cert)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/adapters.py\", line 243, in cert_verify\r\n    conn.cert_file = cert[0]\r\nTypeError: 'PosixPath' object is not subscriptable\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nfrom pathlib import Path\r\n\r\nimport requests\r\n\r\nrequests.get('https://example.com', cert=Path('cert.pem'))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.5\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.2\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.0-8-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.6\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5936/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5936/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5922",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5922/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5922/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5922/events",
    "html_url": "https://github.com/psf/requests/pull/5922",
    "id": 985083834,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NzI0NDM4NjY0",
    "number": 5922,
    "title": "Always use value of session.verify when set, fixes #5921",
    "user": {
      "login": "brmzkw",
      "id": 795841,
      "node_id": "MDQ6VXNlcjc5NTg0MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/795841?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brmzkw",
      "html_url": "https://github.com/brmzkw",
      "followers_url": "https://api.github.com/users/brmzkw/followers",
      "following_url": "https://api.github.com/users/brmzkw/following{/other_user}",
      "gists_url": "https://api.github.com/users/brmzkw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brmzkw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brmzkw/subscriptions",
      "organizations_url": "https://api.github.com/users/brmzkw/orgs",
      "repos_url": "https://api.github.com/users/brmzkw/repos",
      "events_url": "https://api.github.com/users/brmzkw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brmzkw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-09-01T12:20:19Z",
    "updated_at": "2021-09-01T12:47:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5922",
      "html_url": "https://github.com/psf/requests/pull/5922",
      "diff_url": "https://github.com/psf/requests/pull/5922.diff",
      "patch_url": "https://github.com/psf/requests/pull/5922.patch",
      "merged_at": null
    },
    "body": "This fixes https://github.com/psf/requests/issues/5921 where the value of REQUESTS_CA_BUNDLE is read even when certificate verification is disabled through the session.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5922/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5915",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5915/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5915/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5915/events",
    "html_url": "https://github.com/psf/requests/pull/5915",
    "id": 980930645,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NzIxMDc0NDc1",
    "number": 5915,
    "title": "Adds a Realistic WSGI Server for Testing",
    "user": {
      "login": "theGOTOguy",
      "id": 1411050,
      "node_id": "MDQ6VXNlcjE0MTEwNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1411050?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theGOTOguy",
      "html_url": "https://github.com/theGOTOguy",
      "followers_url": "https://api.github.com/users/theGOTOguy/followers",
      "following_url": "https://api.github.com/users/theGOTOguy/following{/other_user}",
      "gists_url": "https://api.github.com/users/theGOTOguy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theGOTOguy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theGOTOguy/subscriptions",
      "organizations_url": "https://api.github.com/users/theGOTOguy/orgs",
      "repos_url": "https://api.github.com/users/theGOTOguy/repos",
      "events_url": "https://api.github.com/users/theGOTOguy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theGOTOguy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2021-08-27T06:49:12Z",
    "updated_at": "2023-09-12T02:53:52Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5915",
      "html_url": "https://github.com/psf/requests/pull/5915",
      "diff_url": "https://github.com/psf/requests/pull/5915.diff",
      "patch_url": "https://github.com/psf/requests/pull/5915.patch",
      "merged_at": null
    },
    "body": "Sending of chunked-encoded data is not currently tested to be correct anywhere in requests' tests, and is called out as a needed improvement in #5906.  This is a hurdle to accepting #5664, a change which would both simplify requests' code and consistently use [urllib3 for retrying errors](https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html).  \r\n\r\nThe [existing test server](https://github.com/psf/requests/blob/main/tests/testserver/server.py) is a simple socket that can send and receive data and is not aware of HTTP protocols.  Therefore, using it to verify correct sending of chunked-encoded data, for instance, would ultimately become a change-detector test.  \r\n\r\nThis change seeks to remedy that while also taking a step towards both simplifying and strengthening requests' tests.\r\n\r\nWe strengthen requests' tests by introducing the popular [Werkzeug library](https://github.com/pallets/werkzeug) as an explicit test dependency ([Flask](https://github.com/pallets/flask), which uses Werkzeug, is already a test dependency).  By doing so, we leverage their authority as an implementer of [PEP 3333](https://www.python.org/dev/peps/pep-3333/) to validate our own implementation of chunked encoding.  This implicitly future-proofs against any hypothetical breaking changes to the standard by testing against Werkzeug's trusted implementation.\r\n\r\nWe also simplify requests' tests, since the implementation of the test [WerkzeugServer](https://github.com/psf/requests/commit/f1f838e36bc24fb40d7121e72298da3e5a7149ff#diff-a53b39ec2e425dad0c8387f8402839b2ec328e93494086ed66abb4b49708deeb) here is substantially more concise than the [current test server](https://github.com/psf/requests/blob/main/tests/testserver/server.py).  If this change is accepted, in another pull request I will refactor all of requests' tests to use the WerkzeugServer rather than the current test server.  ",
    "closed_by": {
      "login": "theGOTOguy",
      "id": 1411050,
      "node_id": "MDQ6VXNlcjE0MTEwNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1411050?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theGOTOguy",
      "html_url": "https://github.com/theGOTOguy",
      "followers_url": "https://api.github.com/users/theGOTOguy/followers",
      "following_url": "https://api.github.com/users/theGOTOguy/following{/other_user}",
      "gists_url": "https://api.github.com/users/theGOTOguy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theGOTOguy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theGOTOguy/subscriptions",
      "organizations_url": "https://api.github.com/users/theGOTOguy/orgs",
      "repos_url": "https://api.github.com/users/theGOTOguy/repos",
      "events_url": "https://api.github.com/users/theGOTOguy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theGOTOguy/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5915/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5871",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5871/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5871/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5871/events",
    "html_url": "https://github.com/psf/requests/issues/5871",
    "id": 944382996,
    "node_id": "MDU6SXNzdWU5NDQzODI5OTY=",
    "number": 5871,
    "title": "Make chardet/charset_normalizer optional?",
    "user": {
      "login": "akx",
      "id": 58669,
      "node_id": "MDQ6VXNlcjU4NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akx",
      "html_url": "https://github.com/akx",
      "followers_url": "https://api.github.com/users/akx/followers",
      "following_url": "https://api.github.com/users/akx/following{/other_user}",
      "gists_url": "https://api.github.com/users/akx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akx/subscriptions",
      "organizations_url": "https://api.github.com/users/akx/orgs",
      "repos_url": "https://api.github.com/users/akx/repos",
      "events_url": "https://api.github.com/users/akx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akx/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": true,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 23,
    "created_at": "2021-07-14T12:34:54Z",
    "updated_at": "2022-01-13T16:35:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": "off-topic",
    "body": "With a routine version bump of requirements, I noticed `chardet` had been switched out for `charset_normalizer` (which I had never heard of before) in #5797, apparently due to LGPL license concerns.\r\n\r\nI agree with @sigmavirus24's comment https://github.com/psf/requests/pull/5797#issuecomment-875158955 that it's strange for something as central in the Python ecosystem as `requests` is (45k stars, 8k forks, many contributors at the time of writing)  to switch to such a relatively unknown and unproven library (132 stars, 5 forks, 2 contributors) for a _hard_ dependency in something as central in the Python ecosystem as `requests` is. \r\n\r\nThe release notes say you could use `pip install \"requests[use_chardet_on_py3]\"` to use `chardet` instead of `charset_normalizer`, but with that extra set both libraries get installed.\r\n\r\nI would imagine many users don't really necessarily need the charset detection features in Requests; could we open a discussion on making both `chardet`/`charset_normalizer` optional, \u00e1 la `requests[chardet]` or `requests[charset_normalizer]`?\r\n\r\nAFAICS, the only place where `chardet` is actually used in `requests` is `Response.apparent_encoding`, which is used by `Response.text` when there is no determined encoding. \r\n\r\nMaybe `apparent_encoding` could try to\r\n\r\n1. as a built-in first attempt, try decoding the content as UTF-8 (which would likely be successful for many cases)\r\n2. if neither `chardet` or `charset_normalizer` is installed, warn the user (\"No encoding detection library is installed. Falling back to XXXX. Please see YYYY for instructions\" or somesuch) and return e.g. `ascii`\r\n3. use either chardet library as per usual",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5871/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5871/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5860",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5860/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5860/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5860/events",
    "html_url": "https://github.com/psf/requests/pull/5860",
    "id": 938529554,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Njg0ODk4MTcw",
    "number": 5860,
    "title": "Document de-duplication of keys for params and data",
    "user": {
      "login": "verhovsky",
      "id": 5687998,
      "node_id": "MDQ6VXNlcjU2ODc5OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5687998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/verhovsky",
      "html_url": "https://github.com/verhovsky",
      "followers_url": "https://api.github.com/users/verhovsky/followers",
      "following_url": "https://api.github.com/users/verhovsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/verhovsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/verhovsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/verhovsky/subscriptions",
      "organizations_url": "https://api.github.com/users/verhovsky/orgs",
      "repos_url": "https://api.github.com/users/verhovsky/repos",
      "events_url": "https://api.github.com/users/verhovsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/verhovsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-07-07T06:17:40Z",
    "updated_at": "2022-06-11T06:26:05Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5860",
      "html_url": "https://github.com/psf/requests/pull/5860",
      "diff_url": "https://github.com/psf/requests/pull/5860.diff",
      "patch_url": "https://github.com/psf/requests/pull/5860.patch",
      "merged_at": null
    },
    "body": "and format the files dict format correctly",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5860/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5833",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5833/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5833/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5833/events",
    "html_url": "https://github.com/psf/requests/issues/5833",
    "id": 904032198,
    "node_id": "MDU6SXNzdWU5MDQwMzIxOTg=",
    "number": 5833,
    "title": "Discrepancies between self-prepared and session-prepared request headers",
    "user": {
      "login": "rittneje",
      "id": 28784688,
      "node_id": "MDQ6VXNlcjI4Nzg0Njg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/28784688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rittneje",
      "html_url": "https://github.com/rittneje",
      "followers_url": "https://api.github.com/users/rittneje/followers",
      "following_url": "https://api.github.com/users/rittneje/following{/other_user}",
      "gists_url": "https://api.github.com/users/rittneje/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rittneje/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rittneje/subscriptions",
      "organizations_url": "https://api.github.com/users/rittneje/orgs",
      "repos_url": "https://api.github.com/users/rittneje/repos",
      "events_url": "https://api.github.com/users/rittneje/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rittneje/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2021-05-27T17:50:01Z",
    "updated_at": "2022-01-06T12:57:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "If we prepare a request normally (the `prepare()` method), it does not include any additional headers by default, even if the resulting prepared request is sent via a session.\r\n\r\nHowever, if the request is prepared via the session (the `prepare_request(Request)` method), then it will include a few headers by default: `Accept`, `Accept-Encoding`, `User-Agent`, and `Connection`.\r\n\r\nThere are some (arguably buggy) HTTP servers that apparently will reject any request that includes the `Accept` or `Accept-Encoding` header with 406 Not Acceptable.\r\n\r\nThis situation led to major confusion when trying to fix our usage of this library to send all the requests through a single session in order to leverage cookie handling.\r\n\r\nThis default header logic does not appear to be documented anywhere. I also think it is very confusing that a self-prepared request and a session-prepared request would have different headers. Unfortunately, I assume this cannot be changed easily for fear of breaking backwards compatibility.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5833/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5816",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5816/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5816/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5816/events",
    "html_url": "https://github.com/psf/requests/pull/5816",
    "id": 891696495,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjQ0NTIzOTEw",
    "number": 5816,
    "title": "Warn user if environment variables are used",
    "user": {
      "login": "Akasurde",
      "id": 633765,
      "node_id": "MDQ6VXNlcjYzMzc2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/633765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Akasurde",
      "html_url": "https://github.com/Akasurde",
      "followers_url": "https://api.github.com/users/Akasurde/followers",
      "following_url": "https://api.github.com/users/Akasurde/following{/other_user}",
      "gists_url": "https://api.github.com/users/Akasurde/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Akasurde/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Akasurde/subscriptions",
      "organizations_url": "https://api.github.com/users/Akasurde/orgs",
      "repos_url": "https://api.github.com/users/Akasurde/repos",
      "events_url": "https://api.github.com/users/Akasurde/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Akasurde/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-05-14T07:43:32Z",
    "updated_at": "2022-06-02T08:14:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5816",
      "html_url": "https://github.com/psf/requests/pull/5816",
      "diff_url": "https://github.com/psf/requests/pull/5816.diff",
      "patch_url": "https://github.com/psf/requests/pull/5816.patch",
      "merged_at": null
    },
    "body": "When session.verify=False, session.trust_env=True and\r\nREQUESTS_CA_BUNDLE or CURL_CA_BUNDLE is defined as environment\r\nvariables then, notify user that requests will use environment variables\r\nrather than silently failing.\r\n\r\npartially fixes: #3829\r\n\r\nSigned-off-by: Abhijeet Kasurde <akasurde@redhat.com>",
    "closed_by": {
      "login": "sigmavirus24",
      "id": 240830,
      "node_id": "MDQ6VXNlcjI0MDgzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigmavirus24",
      "html_url": "https://github.com/sigmavirus24",
      "followers_url": "https://api.github.com/users/sigmavirus24/followers",
      "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
      "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
      "repos_url": "https://api.github.com/users/sigmavirus24/repos",
      "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5816/reactions",
      "total_count": 10,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5816/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5814",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5814/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5814/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5814/events",
    "html_url": "https://github.com/psf/requests/issues/5814",
    "id": 886491580,
    "node_id": "MDU6SXNzdWU4ODY0OTE1ODA=",
    "number": 5814,
    "title": "Merging of default HTTP headers with specified headers breaks the defined ordering",
    "user": {
      "login": "baderj",
      "id": 5196024,
      "node_id": "MDQ6VXNlcjUxOTYwMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5196024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baderj",
      "html_url": "https://github.com/baderj",
      "followers_url": "https://api.github.com/users/baderj/followers",
      "following_url": "https://api.github.com/users/baderj/following{/other_user}",
      "gists_url": "https://api.github.com/users/baderj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baderj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baderj/subscriptions",
      "organizations_url": "https://api.github.com/users/baderj/orgs",
      "repos_url": "https://api.github.com/users/baderj/repos",
      "events_url": "https://api.github.com/users/baderj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baderj/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-05-11T08:33:34Z",
    "updated_at": "2021-05-11T16:58:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Even if headers are defined in an ``OrderedDict``, their order might change if they coincide with the ``default_headers`` set in ``utils.py``, namely ``User-Agent``, ``Accept-Encoding``, ``Accept``, and ``Connection``.\r\n\r\n## Expected Result\r\nThe order of the headers should not change when passed as an ``OrderedDict``. So for example:\r\n\r\n```python\r\nimport requests\r\nfrom collections import OrderedDict\r\n\r\nheaders = OrderedDict([\r\n    (\"Accept\",   '1'),\r\n    (\"Accept-Encoding\",   '2'),\r\n    (\"User-Agent\",   '3'),\r\n])\r\nr = requests.get('http://www.example.com', headers=headers)\r\n```\r\n\r\nshould result in the ``Accept`` header coming first, followed by ``Accept-Encoding`` and finally ``User-Agent``.\r\n\r\n## Actual Result\r\nThe ``User-Agent`` comes first, followed by ``Accept-Encoding`` and then ``Accept`` \r\n\r\n## Reason\r\nThe default headers --- as set by ``requests.utils.default_headers()`` --- are merged with the user specified headers by the function ``requests.sessions.merge_settings``. This function first takes the default headers and then updates that with the user specified headers. This ensures that user specified headers overwrite the default ones.\r\n\r\nHowever, the update process does not change the order of the default headers. So when setting ``User-Agent`` after ``Accept``, this will not be taken into account as both headers are already in the default headers and in reverse order.\r\n\r\nA fix to ``merge_settings`` could be to take the user specified headers first, and then iterate over the default headers and add them in if their are misssing.\r\n\r\n## Workaround\r\nIf one wants exactly the headers specified, one can first create a ``Session`` and remove the default headers:\r\n\r\n```\r\ns = requests.Session()\r\ns.headers = {}\r\nr = s.get(url, headers=headers, ...)\r\n```\r\n\r\nHaving a way to change the default headers on the ``requests`` module would be a welcome addition. So one could change, for example, the user agent in one place and have it affect all requests calls that follow.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom collections import OrderedDict\r\n\r\nheaders = OrderedDict([\r\n    (\"Accept\",   '1'),\r\n    (\"Accept-Encoding\",   '2'),\r\n    (\"User-Agent\",   '3'),\r\n])\r\nr = requests.get('http://www.example.com', headers=headers)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"3.3.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.8.0-50-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010109f\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.4\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5814/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5814/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5779",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5779/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5779/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5779/events",
    "html_url": "https://github.com/psf/requests/pull/5779",
    "id": 836016285,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTk2NTg3NDA4",
    "number": 5779,
    "title": "sets a default timeout and resolves #3070",
    "user": {
      "login": "grintor",
      "id": 3444196,
      "node_id": "MDQ6VXNlcjM0NDQxOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3444196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grintor",
      "html_url": "https://github.com/grintor",
      "followers_url": "https://api.github.com/users/grintor/followers",
      "following_url": "https://api.github.com/users/grintor/following{/other_user}",
      "gists_url": "https://api.github.com/users/grintor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grintor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grintor/subscriptions",
      "organizations_url": "https://api.github.com/users/grintor/orgs",
      "repos_url": "https://api.github.com/users/grintor/repos",
      "events_url": "https://api.github.com/users/grintor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grintor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-03-19T13:50:35Z",
    "updated_at": "2022-01-03T15:05:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5779",
      "html_url": "https://github.com/psf/requests/pull/5779",
      "diff_url": "https://github.com/psf/requests/pull/5779.diff",
      "patch_url": "https://github.com/psf/requests/pull/5779.patch",
      "merged_at": null
    },
    "body": "This sets a (very high) default timeout which is guaranteed not to create any breaking changes while also fixing the longstanding issue of requests possibly hanging indefinitely in any script where the dev forgot to include a timeout. I would like to urge this commit make it into the next minor release version with the possibility of lowering the timeout to 300 seconds in the next major release version.\r\n\r\nPlease see the discussion at https://github.com/psf/requests/issues/3070",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5779/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 4,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5779/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5776",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5776/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5776/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5776/events",
    "html_url": "https://github.com/psf/requests/pull/5776",
    "id": 833712902,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTk0NjYyNzU4",
    "number": 5776,
    "title": "Added explanation why the timeout is doubled.(#5773)",
    "user": {
      "login": "cpyberry",
      "id": 80456253,
      "node_id": "MDQ6VXNlcjgwNDU2MjUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/80456253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpyberry",
      "html_url": "https://github.com/cpyberry",
      "followers_url": "https://api.github.com/users/cpyberry/followers",
      "following_url": "https://api.github.com/users/cpyberry/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpyberry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpyberry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpyberry/subscriptions",
      "organizations_url": "https://api.github.com/users/cpyberry/orgs",
      "repos_url": "https://api.github.com/users/cpyberry/repos",
      "events_url": "https://api.github.com/users/cpyberry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpyberry/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2021-03-17T12:21:12Z",
    "updated_at": "2022-01-03T15:22:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5776",
      "html_url": "https://github.com/psf/requests/pull/5776",
      "diff_url": "https://github.com/psf/requests/pull/5776.diff",
      "patch_url": "https://github.com/psf/requests/pull/5776.patch",
      "merged_at": null
    },
    "body": "## issue\r\n\r\n#5773",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5776/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5748",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5748/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5748/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5748/events",
    "html_url": "https://github.com/psf/requests/pull/5748",
    "id": 805501636,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTcxMDkxNzg3",
    "number": 5748,
    "title": "Fix: #4362 - Redirect resolved even though allow_redirects is set to False causing exception for unsupported connection adapter",
    "user": {
      "login": "luckydenis",
      "id": 41421345,
      "node_id": "MDQ6VXNlcjQxNDIxMzQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/41421345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luckydenis",
      "html_url": "https://github.com/luckydenis",
      "followers_url": "https://api.github.com/users/luckydenis/followers",
      "following_url": "https://api.github.com/users/luckydenis/following{/other_user}",
      "gists_url": "https://api.github.com/users/luckydenis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luckydenis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luckydenis/subscriptions",
      "organizations_url": "https://api.github.com/users/luckydenis/orgs",
      "repos_url": "https://api.github.com/users/luckydenis/repos",
      "events_url": "https://api.github.com/users/luckydenis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luckydenis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-02-10T13:12:54Z",
    "updated_at": "2021-12-29T03:56:43Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5748",
      "html_url": "https://github.com/psf/requests/pull/5748",
      "diff_url": "https://github.com/psf/requests/pull/5748.diff",
      "patch_url": "https://github.com/psf/requests/pull/5748.patch",
      "merged_at": null
    },
    "body": "Good evening\r\n\r\nThe problem was that when checking, we got data that passed the condition test: they contained `:` , and the request did not start with `http`. Example `0.0.0.0:8080`.\r\n\r\nDone:\r\n- [x] Fix #4362\r\n- [x] Add and fix tests\r\n- [x] make test\r\n- [x] flake8 (diff)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5748/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5746",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5746/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5746/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5746/events",
    "html_url": "https://github.com/psf/requests/issues/5746",
    "id": 805400543,
    "node_id": "MDU6SXNzdWU4MDU0MDA1NDM=",
    "number": 5746,
    "title": "content-type: text/csv does not apply UTF-8-decoding by default (RFC 7111 violation?)",
    "user": {
      "login": "jgehrcke",
      "id": 265630,
      "node_id": "MDQ6VXNlcjI2NTYzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/265630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgehrcke",
      "html_url": "https://github.com/jgehrcke",
      "followers_url": "https://api.github.com/users/jgehrcke/followers",
      "following_url": "https://api.github.com/users/jgehrcke/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgehrcke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgehrcke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgehrcke/subscriptions",
      "organizations_url": "https://api.github.com/users/jgehrcke/orgs",
      "repos_url": "https://api.github.com/users/jgehrcke/repos",
      "events_url": "https://api.github.com/users/jgehrcke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgehrcke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-02-10T10:50:42Z",
    "updated_at": "2021-02-10T11:01:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Created a test/repro/MWE sheet here with a cell containing the letter `\u00f6`: https://docs.google.com/spreadsheets/d/1q02F0AjDfCo_XlgFtT7HHU96emOcyf0PRQGKGoQTXCE/edit?usp=sharing\r\n\r\nWhen you HTTP GET `https://docs.google.com/spreadsheets/d/1q02F0AjDfCo_XlgFtT7HHU96emOcyf0PRQGKGoQTXCE/export?format=csv` Google generates and sends a CSV document with UTF-8-encoded text in the response body.\r\n\r\nFetching this URL with `requests` and accessing the response content with the `text` attribute reveals that `requests` does _not_ UTF-8-decode the response body bytes:\r\n\r\n```text\r\n$ python -c 'import requests; r=requests.get(\"https://docs.google.com/spreadsheets/d/1q02F0AjDfCo_XlgFtT7HHU96emOcyf0PRQGKGoQTXCE/export?format=csv\"); print(r.text)'\r\nfoo,bar,umlaut: \u00c3\u00b6\u00c3\u00b6\r\n```\r\n\r\nLibrary version:\r\n```\r\n$ pip list | grep requests\r\nrequests                 2.25.1\r\n```\r\n\r\n\r\n\r\nResponse headers (from a `curl -v ...`):\r\n\r\n```\r\n> GET /<snip> HTTP/2\r\n> Host: doc-14-2s-sheets.googleusercontent.com\r\n> user-agent: curl/7.69.1\r\n> accept: */*\r\n> \r\n{ [5 bytes data]\r\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\r\n{ [264 bytes data]\r\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\r\n{ [264 bytes data]\r\n* old SSL session ID is stale, removing\r\n{ [5 bytes data]\r\n* Connection state changed (MAX_CONCURRENT_STREAMS == 100)!\r\n} [5 bytes data]\r\n< HTTP/2 200 \r\n< content-type: text/csv\r\n< x-robots-tag: noindex, nofollow, nosnippet\r\n< cache-control: no-cache, no-store, max-age=0, must-revalidate\r\n< pragma: no-cache\r\n< expires: Mon, 01 Jan 1990 00:00:00 GMT\r\n< date: Wed, 10 Feb 2021 10:12:52 GMT\r\n< content-disposition: attachment; filename=\"<snip>.csv\"; filename*=UTF-8''<snip>.csv\r\n< access-control-allow-origin: *\r\n< access-control-expose-headers: Cache-Control,Content-Disposition,Content-Encoding,Content-Length,Content-Type,Date,Expires,Pragma,Server,Transfer-Encoding\r\n< content-security-policy: base-uri 'self';object-src 'self';report-uri https://docs.google.com/spreadsheets/cspreport;script-src 'nonce-+Qyt<snip>w' 'unsafe-inline' 'strict-dynamic' https: http: 'unsafe-eval';worker-src 'self'\r\n< content-security-policy: frame-ancestors 'self' https://docs.google.com\r\n< x-frame-options: ALLOW-FROM https://docs.google.com\r\n< x-content-type-options: nosniff\r\n< x-xss-protection: 1; mode=block\r\n< server: GSE\r\n< alt-svc: h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"\r\n< accept-ranges: none\r\n< vary: Accept-Encoding\r\n```\r\n\r\nSo, there is `content-type: text/csv`, i.e. no `'charset'` specification.\r\n\r\nI am not sure if [RFC 7111](https://tools.ietf.org/html/rfc7111) is the most recent / authoritative reference, but it says about the `text/csv` media type that\r\n\r\n```\r\n      The \"charset\" parameter specifies the charset employed by the CSV\r\n      content.  In accordance with RFC 6657 [RFC6657], the charset\r\n      parameter SHOULD be used, and if it is not present, UTF-8 SHOULD\r\n      be assumed as the default (this implies that US-ASCII CSV will\r\n      work, even when not specifying the \"charset\" parameter).  Any\r\n      charset defined by IANA for the \"text\" tree may be used in\r\n      conjunction with the \"charset\" parameter.\r\n```\r\n\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5746/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5746/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5745",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5745/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5745/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5745/events",
    "html_url": "https://github.com/psf/requests/issues/5745",
    "id": 804678861,
    "node_id": "MDU6SXNzdWU4MDQ2Nzg4NjE=",
    "number": 5745,
    "title": "HTTPDigestAuth uses quotes for algorithm and qop tokens of the Digest header",
    "user": {
      "login": "alex-che",
      "id": 4246686,
      "node_id": "MDQ6VXNlcjQyNDY2ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4246686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-che",
      "html_url": "https://github.com/alex-che",
      "followers_url": "https://api.github.com/users/alex-che/followers",
      "following_url": "https://api.github.com/users/alex-che/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-che/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-che/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-che/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-che/orgs",
      "repos_url": "https://api.github.com/users/alex-che/repos",
      "events_url": "https://api.github.com/users/alex-che/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-che/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-02-09T15:53:28Z",
    "updated_at": "2021-02-09T15:53:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The `HTTPDigestAuth.build_digest_header()` method produces the Digest header witch contains quoted strings for `algorithm` and `qop` tokens. E.g.:\r\n`\r\nDigest username=\"admin\", realm=\"server\", nonce=\"QScBItGtnPq4Dz3v25Tht4SlctJnsR\", uri=\"/api/v1/info\", response=\"e0d12a4b85789351a847c773e6f4b30e\", algorithm=\"MD5\", qop=\"auth\", nc=00000001, cnonce=\"0f905170a2cafe15\"`\r\n\r\nWhile according to [RFC 7616](https://tools.ietf.org/html/rfc7616) these tokens must not be quoted:\r\n`\r\nDigest username=\"admin\", realm=\"server\", nonce=\"QScBItGtnPq4Dz3v25Tht4SlctJnsR\", uri=\"/api/v1/info\", response=\"e0d12a4b85789351a847c773e6f4b30e\", algorithm=MD5, qop=auth, nc=00000001, cnonce=\"0f905170a2cafe15\"`\r\n\r\nBelow is the [corresponding part of the RFC](https://tools.ietf.org/html/rfc7616#section-3.4):\r\n\r\n_For historical reasons, a sender MUST only generate the quoted string syntax for the following parameters: username, realm, nonce, uri, response, cnonce, and opaque._\r\n\r\n_For historical reasons, a sender MUST NOT generate the quoted string syntax for the following parameters: algorithm, qop, and nc._\r\n\r\nThis can also be seen in [requests examples](https://tools.ietf.org/html/rfc7616#section-3.9) in the RFC.\r\n\r\nCurrent behavior may cause problems with some servers. The following subclass can be used as a temporary workaround:\r\n\r\n```\r\nclass FixedHTTPDigestAuth(HTTPDigestAuth):\r\n    def build_digest_header(self, method, url):\r\n        header = super().build_digest_header(method, url)\r\n        invalid_parts = ('algorithm', 'qop')\r\n        parts = header.split(', ')\r\n        for i, part in enumerate(parts):\r\n            if any(part.startswith(ip + '=') for ip in invalid_parts):\r\n                parts[i] = part.replace('\"', '')\r\n        header = ', '.join(parts)\r\n        return header\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5745/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5744",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5744/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5744/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5744/events",
    "html_url": "https://github.com/psf/requests/issues/5744",
    "id": 802720321,
    "node_id": "MDU6SXNzdWU4MDI3MjAzMjE=",
    "number": 5744,
    "title": "urllib3 LocationParseError (label empty or too long) uncaught by requests",
    "user": {
      "login": "cknabs",
      "id": 33416700,
      "node_id": "MDQ6VXNlcjMzNDE2NzAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33416700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cknabs",
      "html_url": "https://github.com/cknabs",
      "followers_url": "https://api.github.com/users/cknabs/followers",
      "following_url": "https://api.github.com/users/cknabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/cknabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cknabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cknabs/subscriptions",
      "organizations_url": "https://api.github.com/users/cknabs/orgs",
      "repos_url": "https://api.github.com/users/cknabs/repos",
      "events_url": "https://api.github.com/users/cknabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cknabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-02-06T15:06:05Z",
    "updated_at": "2021-02-20T09:37:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When accessing an URL with a label with more than 63 characters, an `urllib3.exceptions.LocationParseError` (label empty or too long) is returned without being caught by requests. \r\nMaybe this is related to #4746?\r\n\r\n## Expected Result\r\n\r\nNo exception, or an exception raised by requests (maybe InvalidURL?).\r\n\r\n## Actual Result\r\n\r\nException is not caught by requests. \r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nrequests.get('http://1234567890123456789012345678901234567890123456789012345678901234.com')\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/requests/adapters.py\", line 439, in send\r\n    resp = conn.urlopen(\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connectionpool.py\", line 699, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connectionpool.py\", line 394, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connection.py\", line 234, in request\r\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 1255, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 1301, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 1250, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 1010, in _send_output\r\n    self.send(msg)\r\n  File \"/usr/lib64/python3.8/http/client.py\", line 950, in send\r\n    self.connect()\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connection.py\", line 200, in connect\r\n    conn = self._new_conn()\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/connection.py\", line 169, in _new_conn\r\n    conn = connection.create_connection(\r\n  File \"/home/christian/Projects/EUvsDisinfo/venv/lib64/python3.8/site-packages/urllib3/util/connection.py\", line 69, in create_connection\r\n    return six.raise_from(\r\n  File \"<string>\", line 3, in raise_from\r\nurllib3.exceptions.LocationParseError: Failed to parse: '1234567890123456789012345678901234567890123456789012345678901234.com', label empty or too long\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.11-100.fc32.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010109f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.2\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}    \r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5744/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5743",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5743/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5743/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5743/events",
    "html_url": "https://github.com/psf/requests/issues/5743",
    "id": 802017200,
    "node_id": "MDU6SXNzdWU4MDIwMTcyMDA=",
    "number": 5743,
    "title": "Loss of the cookie state when using max-age=0.",
    "user": {
      "login": "luckydenis",
      "id": 41421345,
      "node_id": "MDQ6VXNlcjQxNDIxMzQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/41421345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luckydenis",
      "html_url": "https://github.com/luckydenis",
      "followers_url": "https://api.github.com/users/luckydenis/followers",
      "following_url": "https://api.github.com/users/luckydenis/following{/other_user}",
      "gists_url": "https://api.github.com/users/luckydenis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luckydenis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luckydenis/subscriptions",
      "organizations_url": "https://api.github.com/users/luckydenis/orgs",
      "repos_url": "https://api.github.com/users/luckydenis/repos",
      "events_url": "https://api.github.com/users/luckydenis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luckydenis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-02-05T09:48:37Z",
    "updated_at": "2021-02-06T16:43:22Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Summary.\r\nLoss of the `cookie` state when receiving a response from the server containing the lifetime in the format `max-age=0`.\r\n\r\n## Expected Result\r\n\r\n```python\r\nimport requests\r\nr = requests.get('http://127.0.0.1:5000/expire')\r\n>>> r.headers\r\n{'Set-Cookie': 'test=test; Path=/; Max-Age=0', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '10', 'Server': 'Werkzeug/1.0.1 Python/3.8.7', 'Date': 'Fri, 05 Feb 2021 09:26:48 GMT'}\r\n>>> r.cookies\r\n<RequestsCookieJar[Cookie(version=0, name='test', value='test', port=None, port_specified=False, domain='127.0.0.1', domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=1612520808, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False)]>\r\n```\r\n\r\n## Actual Result\r\n\r\n```python\r\n>>> import requests\r\n>>> r = requests.get('http://127.0.0.1:5000/expire')\r\n>>> r.headers\r\n{'Set-Cookie': 'test=test; Path=/; Max-Age=0', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14', 'Server': 'Werkzeug/1.0.1 Python/3.8.7', 'Date': 'Fri, 05 Feb 2021 09:16:43 GMT'}\r\n>>> r.cookies\r\n<RequestsCookieJar[]>\r\n```\r\n\r\n## Reproduction Steps\r\n\r\napp.py\r\n```python\r\nfrom flask import Flask, make_response\r\n\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route('/expire')\r\ndef expire():\r\n    return \"Expired cookie\", {'Set-Cookie': 'test=test; Path=/; Max-Age=0'}\r\n```\r\nStart app: `FLASK_APP=app.py flask run -p 5000`\r\n\r\ntest.py\r\n```python\r\nimport requests\r\n\r\n\r\nr = requests.get('http://127.0.0.1:5000/expire')\r\nprint('headers:', r.headers)\r\nprint()\r\nprint('cookies:', r.cookies)\r\n```\r\n\r\noutput\r\n```bash\r\nheaders: {'Set-Cookie': 'test=test; Path=/; Max-Age=0', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14', 'Server': 'Werkzeug/1.0.1 Python/3.8.7', 'Date': 'Fri, 05 Feb 2021 09:40:32 GMT'}\r\n\r\ncookies: <RequestsCookieJar[]>\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```bash\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.8.0-41-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5743/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5735",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5735/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5735/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5735/events",
    "html_url": "https://github.com/psf/requests/pull/5735",
    "id": 796256743,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTYzNDY0NTE4",
    "number": 5735,
    "title": "5677: Respect variable precedence in session",
    "user": {
      "login": "mateusduboli",
      "id": 1688249,
      "node_id": "MDQ6VXNlcjE2ODgyNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1688249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mateusduboli",
      "html_url": "https://github.com/mateusduboli",
      "followers_url": "https://api.github.com/users/mateusduboli/followers",
      "following_url": "https://api.github.com/users/mateusduboli/following{/other_user}",
      "gists_url": "https://api.github.com/users/mateusduboli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mateusduboli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mateusduboli/subscriptions",
      "organizations_url": "https://api.github.com/users/mateusduboli/orgs",
      "repos_url": "https://api.github.com/users/mateusduboli/repos",
      "events_url": "https://api.github.com/users/mateusduboli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mateusduboli/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 12,
    "created_at": "2021-01-28T18:44:04Z",
    "updated_at": "2022-01-03T15:25:21Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5735",
      "html_url": "https://github.com/psf/requests/pull/5735",
      "diff_url": "https://github.com/psf/requests/pull/5735.diff",
      "patch_url": "https://github.com/psf/requests/pull/5735.patch",
      "merged_at": null
    },
    "body": "- Move `Session#merge_environment_variables` from `Session#request` to `Session#send` to make it consistent\r\n- On `Session#send` change variable precedence to (higher precedence first) `kwargs` -> `session args` -> `environment`.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5735/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5735/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5731",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5731/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5731/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5731/events",
    "html_url": "https://github.com/psf/requests/issues/5731",
    "id": 792638349,
    "node_id": "MDU6SXNzdWU3OTI2MzgzNDk=",
    "number": 5731,
    "title": "no/no_proxy is not honoured",
    "user": {
      "login": "Suika",
      "id": 2320837,
      "node_id": "MDQ6VXNlcjIzMjA4Mzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2320837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Suika",
      "html_url": "https://github.com/Suika",
      "followers_url": "https://api.github.com/users/Suika/followers",
      "following_url": "https://api.github.com/users/Suika/following{/other_user}",
      "gists_url": "https://api.github.com/users/Suika/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Suika/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Suika/subscriptions",
      "organizations_url": "https://api.github.com/users/Suika/orgs",
      "repos_url": "https://api.github.com/users/Suika/repos",
      "events_url": "https://api.github.com/users/Suika/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Suika/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2021-01-23T19:59:26Z",
    "updated_at": "2024-02-06T17:54:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I guess PRs are overlooked without an Issues. It's about #5596 and the way handle no_proxy. Since urllib handles `no_proxy` properly, it's the logic in requests that messes with the env in a seemingly twisted way.\r\n\r\n## Expected Result\r\n\r\nThe ability to use no_proxy vairable via OS and function arguments.\r\n\r\n## Actual Result\r\n\r\nOnly OS `no_proxy` ENV is being processed. Uncer certain conditions that were described multiple times in the `no_proxy` issues.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.9.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.9\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.18-10-pve\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010107f\",\r\n    \"version\": \"19.1.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.23.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010107f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.9\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5731/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5726",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5726/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5726/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5726/events",
    "html_url": "https://github.com/psf/requests/issues/5726",
    "id": 791814139,
    "node_id": "MDU6SXNzdWU3OTE4MTQxMzk=",
    "number": 5726,
    "title": "Possible memory leaking when combining session, threading and proxies",
    "user": {
      "login": "jaimecoj",
      "id": 9117697,
      "node_id": "MDQ6VXNlcjkxMTc2OTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9117697?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimecoj",
      "html_url": "https://github.com/jaimecoj",
      "followers_url": "https://api.github.com/users/jaimecoj/followers",
      "following_url": "https://api.github.com/users/jaimecoj/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimecoj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimecoj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimecoj/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimecoj/orgs",
      "repos_url": "https://api.github.com/users/jaimecoj/repos",
      "events_url": "https://api.github.com/users/jaimecoj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimecoj/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-01-22T08:42:05Z",
    "updated_at": "2023-11-03T02:03:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I it helps I got error `OSError: [Errno 24] Too many open files` when running script, not sure if it is related with memory leak, I solved setting to 10000 `ulimit -n 10000`\r\n\r\n## Expected Result\r\n\r\nRAM usage kept under reasonable limits\r\n\r\n## Actual Result\r\n\r\nRAM usage doesn't stop growing\r\n\r\n## Reproduction Steps\r\n\r\nI usually wouldn't be posting target website or the proxy credentials, but in this case I think they are needed for reproduce the bug.\r\n\r\n```\r\nimport requests\r\nfrom threading import Thread\r\nfrom time import sleep\r\n\r\nsession = requests.Session()\r\nfrom memory_profiler import profile\r\nfrom random import randrange\r\nfinished = False\r\n\r\n\r\ndef get_proxy():\r\n    proxy = \"http://lum-customer-hl_f53c879b-zone-static-session-\" + str(randrange(999999)) + \":au2d3rzz8tut@zproxy.lum-superproxy.io:22225\"\r\n    return {\r\n        \"http\": proxy,\r\n        \"https\": proxy\r\n    }\r\n\r\n\r\ndef make_request(url):\r\n    session.get(url, proxies=get_proxy())\r\n\r\ndef worker():\r\n    while True:\r\n        if finished: return\r\n        make_request(\"http://1000imagens.com/\")\r\n\r\n\r\n@profile\r\ndef main():\r\n    global finished\r\n    threads = []\r\n    for i in range(2):\r\n        t = Thread(target=worker)\r\n        t.start()\r\n        threads.append(t)\r\n\r\n    count = 0\r\n    while True:\r\n        sleep(1)\r\n        count += 1\r\n        if count == 300:\r\n            finished = True\r\n            return\r\n\r\nmain()\r\n```\r\n\r\n## System Information\r\n\r\n    $ python3.9 -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-134-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n```\r\n# lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.5 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n```\r\n\r\nI tried with python versions 3.6, 3.8 and 3.9 and found no difference.\r\n\r\n## Output of memory_profiler\r\n```\r\nLine #    Mem usage    Increment  Occurences   Line Contents\r\n============================================================\r\n    31     23.8 MiB     23.8 MiB           1   @profile\r\n    32                                         def main():\r\n    33                                             global finished\r\n    34     23.8 MiB      0.0 MiB           1       threads = []\r\n    35     23.8 MiB      0.0 MiB           3       for i in range(2):\r\n    36     23.8 MiB      0.0 MiB           2           t = Thread(target=worker)\r\n    37     23.8 MiB      0.0 MiB           2           t.start()\r\n    38     23.8 MiB      0.0 MiB           2           threads.append(t)\r\n    39\r\n    40     23.8 MiB      0.0 MiB           1       count = 0\r\n    41                                             while True:\r\n    42    547.1 MiB    523.2 MiB         300           sleep(1)\r\n    43    547.1 MiB      0.0 MiB         300           count += 1\r\n    44    547.1 MiB      0.0 MiB         300           if count == 300:\r\n    45    547.1 MiB      0.0 MiB           1               finished = True\r\n    46    547.1 MiB      0.0 MiB           1               return\r\n```\r\n\r\nAfter 5 minutes it eats +500MB ram. If I leave it running indefinitely it would consume all available ram and would be killed. \r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5726/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5726/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5725",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5725/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5725/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5725/events",
    "html_url": "https://github.com/psf/requests/issues/5725",
    "id": 791526254,
    "node_id": "MDU6SXNzdWU3OTE1MjYyNTQ=",
    "number": 5725,
    "title": "Support for logging is abysmal, and documentation is missing",
    "user": {
      "login": "jackjansen",
      "id": 4665100,
      "node_id": "MDQ6VXNlcjQ2NjUxMDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4665100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jackjansen",
      "html_url": "https://github.com/jackjansen",
      "followers_url": "https://api.github.com/users/jackjansen/followers",
      "following_url": "https://api.github.com/users/jackjansen/following{/other_user}",
      "gists_url": "https://api.github.com/users/jackjansen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jackjansen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jackjansen/subscriptions",
      "organizations_url": "https://api.github.com/users/jackjansen/orgs",
      "repos_url": "https://api.github.com/users/jackjansen/repos",
      "events_url": "https://api.github.com/users/jackjansen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jackjansen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-01-21T22:03:23Z",
    "updated_at": "2022-02-21T22:54:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Attempting to change logging for requests is very complicated, can only be done application-wide (I think), and the documentation is missing.\r\n\r\nGoogle finds many incorrect suggestions (mainly pointing to readthedocs documentation of requests version 0.x), the only workable information I found was at this stack overflow thread: https://stackoverflow.com/questions/10588644/how-can-i-see-the-entire-http-request-thats-being-sent-by-my-python-application\r\n\r\nAs a first step it would be good if the information from this thread (insofar as it is still correct) was included in the documentation somewhere.\r\n\r\nBut it would be a lot nicer if there was easier support for logging, possibly through a toolbelt module or something. Controlling logging on a fine-grained scale is vital, especially when you are trying to debug things like SSL-related errors (which are rather unintelligible in their own right) in a large scale application.\r\n\r\nI understand that part of the problem is with urllib3, but I guess I have to start somewhere.\r\n\r\nAnd I'm willing to help, if personpower is an issue.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5725/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5725/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5714",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5714/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5714/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5714/events",
    "html_url": "https://github.com/psf/requests/issues/5714",
    "id": 781373560,
    "node_id": "MDU6SXNzdWU3ODEzNzM1NjA=",
    "number": 5714,
    "title": "Inconsistent behavior after redirects when passing cookies directly",
    "user": {
      "login": "JanPokorny",
      "id": 4580066,
      "node_id": "MDQ6VXNlcjQ1ODAwNjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4580066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JanPokorny",
      "html_url": "https://github.com/JanPokorny",
      "followers_url": "https://api.github.com/users/JanPokorny/followers",
      "following_url": "https://api.github.com/users/JanPokorny/following{/other_user}",
      "gists_url": "https://api.github.com/users/JanPokorny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JanPokorny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JanPokorny/subscriptions",
      "organizations_url": "https://api.github.com/users/JanPokorny/orgs",
      "repos_url": "https://api.github.com/users/JanPokorny/repos",
      "events_url": "https://api.github.com/users/JanPokorny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JanPokorny/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-01-07T14:57:10Z",
    "updated_at": "2021-01-07T23:40:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I have noticed that cookies passed directly (no session) behave strangely. When passed as the `cookie` argument, cookies are persisted after all redirects (even cross-domain and when expired explicitly).  When passed as the `Cookie` header, the header is dropped after any redirect. \r\n\r\nI came across this behavior when discussing the same issue for the `httpx` library (https://github.com/encode/httpx/issues/1404). I do not know whether this behavior is intended. If it is, I would be glad for an explanation behind this design choice.\r\n\r\n## Expected Result\r\n\r\nI would expect cookies passed as the `cookie` argument to work the same way as if a single-use session was used, and the `Cookie` header to be passed regardless of redirects.\r\n\r\n## Actual Result\r\n\r\n`cookie` argument cookies are always passed (regardless of being expired or the redirect being cross-domain), while `Cookie` header cookies are always dropped (even on same-domain redirects).\r\n\r\n## Reproduction Steps\r\n\r\nServer:\r\n```python\r\nimport flask\r\napp = flask.Flask(__name__)\r\n\r\n@app.route('/r')\r\ndef r():\r\n    return \"yes\" if \"test\" in flask.request.cookies else \"no\"\r\n\r\n@app.route('/same_domain_redirect')\r\ndef same_domain_redirect():\r\n    return flask.redirect(\"/r\", code=302)\r\n\r\n@app.route('/cross_domain_redirect')\r\ndef cross_domain_redirect():\r\n    return flask.redirect(\"http://localhost:5000/r\", code=302)\r\n\r\n@app.route('/same_domain_redirect_expire')\r\ndef same_domain_redirect_expire():\r\n    resp = flask.redirect(\"/r\", code=302)\r\n    resp.set_cookie('test', '', expires=0)\r\n    return resp\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\n```\r\n\r\nClient:\r\n```python\r\nimport requests\r\n\r\nprint(requests.get(\"http://127.0.0.1:5000/same_domain_redirect\", cookies={ \"test\": \"test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/cross_domain_redirect\", cookies={ \"test\": \"test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/same_domain_redirect_expire\", cookies={ \"test\": \"test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/same_domain_redirect\", headers={ \"Cookie\": \"test=test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/cross_domain_redirect\", headers={ \"Cookie\": \"test=test\" }).content)\r\nprint(requests.get(\"http://127.0.0.1:5000/same_domain_redirect_expire\", headers={ \"Cookie\": \"test=test\" }).content)\r\n```\r\n\r\n## System Information\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010107f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.2\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5714/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5714/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5709",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5709/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5709/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5709/events",
    "html_url": "https://github.com/psf/requests/issues/5709",
    "id": 774742813,
    "node_id": "MDU6SXNzdWU3NzQ3NDI4MTM=",
    "number": 5709,
    "title": "Cookies are lost on 307 redirects",
    "user": {
      "login": "gil9red",
      "id": 6244078,
      "node_id": "MDQ6VXNlcjYyNDQwNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6244078?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gil9red",
      "html_url": "https://github.com/gil9red",
      "followers_url": "https://api.github.com/users/gil9red/followers",
      "following_url": "https://api.github.com/users/gil9red/following{/other_user}",
      "gists_url": "https://api.github.com/users/gil9red/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gil9red/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gil9red/subscriptions",
      "organizations_url": "https://api.github.com/users/gil9red/orgs",
      "repos_url": "https://api.github.com/users/gil9red/repos",
      "events_url": "https://api.github.com/users/gil9red/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gil9red/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-25T14:42:22Z",
    "updated_at": "2020-12-25T14:58:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When I submit a request, I get a 307 response and a cookie. But when the request is repeated, the cookie is not added.\r\n\r\nAdded request logging:\r\n```\r\ntry:\r\n    import http.client as http_client\r\nexcept ImportError:\r\n    # Python 2\r\n    import httplib as http_client\r\nhttp_client.HTTPConnection.debuglevel = 1\r\n\r\n# You must initialize logging, otherwise you'll not see debug output.\r\nimport logging\r\nlogging.basicConfig()\r\nlogging.getLogger().setLevel(logging.DEBUG)\r\nrequests_log = logging.getLogger(\"requests.packages.urllib3\")\r\nrequests_log.setLevel(logging.DEBUG)\r\nrequests_log.propagate = True\r\n```\r\n\r\nResult (first 2 requests):\r\n```\r\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): www.dns-shop.ru:443\r\nsend: b'GET /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/ HTTP/1.1\\r\\nHost: www.dns-shop.ru\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\r\nDEBUG:urllib3.connectionpool:https://www.dns-shop.ru:443 \"GET /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/ HTTP/1.1\" 307 0\r\nreply: 'HTTP/1.1 307 TemporaryRedirect\\r\\n'\r\nheader: Server: Variti/0.9.3a\r\nheader: Date: Fry, 25 Dec 2020 14:3753 GMT\r\nheader: Set-Cookie: ipp_uid_tst=1608907073940/2LhuRHu-NT--na0AX4hLKg; Expires=; Domain=; Path=/\r\nheader: Location: /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/\r\nheader: Connection: keep-alive\r\nheader: Keep-Alive: timeout=60\r\nheader: Content-Length: 0\r\n\r\nsend: b'GET /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/ HTTP/1.1\\r\\nHost: www.dns-shop.ru\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\r\nDEBUG:urllib3.connectionpool:https://www.dns-shop.ru:443 \"GET /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/ HTTP/1.1\" 307 0\r\nreply: 'HTTP/1.1 307 TemporaryRedirect\\r\\n'\r\nheader: Server: Variti/0.9.3a\r\nheader: Date: Fry, 25 Dec 2020 14:3754 GMT\r\nheader: Set-Cookie: ipp_uid_tst=1608907074028/oOg1XsGU12ZE8PkUludY5g; Expires=; Domain=; Path=/\r\nheader: Location: /product/4d664a0d90d61b80/processor-amd-ryzen-7-3700x-oem/\r\nheader: Connection: keep-alive\r\nheader: Keep-Alive: timeout=60\r\nheader: Content-Length: 0\r\n```\r\n\r\n## Expected Result\r\n\r\nHTTP 200, OK\r\n\r\n## Actual Result\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:/Users/ipetrash/Projects/SimplePyScripts/html_parsing/www_dns_shop_ru/get_price.py\", line 17, in <module>\r\n    rs = requests.get('https://www.dns-shop.ru/')\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\sessions.py\", line 677, in send\r\n    history = [resp for resp in gen]\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\sessions.py\", line 677, in <listcomp>\r\n    history = [resp for resp in gen]\r\n  File \"C:\\Users\\ipetrash\\Anaconda3\\lib\\site-packages\\requests\\sessions.py\", line 166, in resolve_redirects\r\n    raise TooManyRedirects('Exceeded {} redirects.'.format(self.max_redirects), response=resp)\r\nrequests.exceptions.TooManyRedirects: Exceeded 30 redirects.\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nsession = requests.session()\r\nrs = session.get('https://www.dns-shop.ru/')\r\nprint(rs)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{                                   \r\n  \"chardet\": {                      \r\n    \"version\": \"3.0.4\"              \r\n  },                                \r\n  \"cryptography\": {                 \r\n    \"version\": \"2.7\"                \r\n  },                                \r\n  \"idna\": {                         \r\n    \"version\": \"2.8\"                \r\n  },                                \r\n  \"implementation\": {               \r\n    \"name\": \"CPython\",              \r\n    \"version\": \"3.7.3\"              \r\n  },                                \r\n  \"platform\": {                     \r\n    \"release\": \"10\",                \r\n    \"system\": \"Windows\"             \r\n  },                                \r\n  \"pyOpenSSL\": {                    \r\n    \"openssl_version\": \"1010103f\",  \r\n    \"version\": \"17.2.0\"             \r\n  },                                \r\n  \"requests\": {                     \r\n    \"version\": \"2.25.1\"             \r\n  },                                \r\n  \"system_ssl\": {                   \r\n    \"version\": \"1010108f\"           \r\n  },                                \r\n  \"urllib3\": {                      \r\n    \"version\": \"1.24.2\"             \r\n  },                                \r\n  \"using_pyopenssl\": true           \r\n}                                   \r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5709/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5709/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5693",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5693/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5693/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5693/events",
    "html_url": "https://github.com/psf/requests/pull/5693",
    "id": 764088748,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTM4MzI5NDM4",
    "number": 5693,
    "title": "Pass urllib3.SKIP_HEADER when headers should be unset",
    "user": {
      "login": "sigmavirus24",
      "id": 240830,
      "node_id": "MDQ6VXNlcjI0MDgzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigmavirus24",
      "html_url": "https://github.com/sigmavirus24",
      "followers_url": "https://api.github.com/users/sigmavirus24/followers",
      "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
      "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
      "repos_url": "https://api.github.com/users/sigmavirus24/repos",
      "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-12T17:32:16Z",
    "updated_at": "2022-02-17T15:48:57Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": true,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5693",
      "html_url": "https://github.com/psf/requests/pull/5693",
      "diff_url": "https://github.com/psf/requests/pull/5693.diff",
      "patch_url": "https://github.com/psf/requests/pull/5693.patch",
      "merged_at": null
    },
    "body": "urllib3 introduced some default headers and a way to skip them if\r\ndesired. Let's use that sentinel value to pass along information about\r\nRequests' users desire to skip those headers as well.\r\n\r\nCloses gh-5671\r\n\r\n---\r\nI'm pretty sure the tests will fail to start with, but wanted to get a sketch of something up for early review",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5693/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5693/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5692",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5692/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5692/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5692/events",
    "html_url": "https://github.com/psf/requests/issues/5692",
    "id": 762917561,
    "node_id": "MDU6SXNzdWU3NjI5MTc1NjE=",
    "number": 5692,
    "title": "requests.auth.HTTPDigestAuth does not support qop=auth-int",
    "user": {
      "login": "ATXadam",
      "id": 13699256,
      "node_id": "MDQ6VXNlcjEzNjk5MjU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/13699256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ATXadam",
      "html_url": "https://github.com/ATXadam",
      "followers_url": "https://api.github.com/users/ATXadam/followers",
      "following_url": "https://api.github.com/users/ATXadam/following{/other_user}",
      "gists_url": "https://api.github.com/users/ATXadam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ATXadam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ATXadam/subscriptions",
      "organizations_url": "https://api.github.com/users/ATXadam/orgs",
      "repos_url": "https://api.github.com/users/ATXadam/repos",
      "events_url": "https://api.github.com/users/ATXadam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ATXadam/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-11T21:18:45Z",
    "updated_at": "2020-12-11T21:18:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## Summary: \r\nWhen using requests.auth.HTTPDigestAuth, if the www-authenticate digest back has a qop value of 'auth-int', build_digest_header returns None, which makes http.client.HTTPConnection.putheader throw an exception because *values expects to be a set of Strings or Bytes.\r\n\r\n## Expected Result:\r\nI expect a valid Digest in return, or at least an Exception that input data is bad\r\n\r\n## Actual Result:\r\nTypeError Exception - expected string or bytes-like object\r\n\r\n## Reproduction Steps\r\n```\r\nimport requests\r\nrequests.get('https://device.hostname/api/auth', auth=requests.auth.HTTPDigestAuth('login','password')\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"20.2.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.24.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010108f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.9\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n## Working Fix\r\nrequests.auth.HTTPDigestAuth.build_digest_header has the following code, which is causing the return of None:\r\n```\r\n        if not qop:\r\n            respdig = KD(HA1, \"%s:%s\" % (nonce, HA2))\r\n        elif qop == 'auth' or 'auth' in qop.split(','):\r\n            noncebit = \"%s:%s:%s:%s:%s\" % (\r\n                nonce, ncvalue, cnonce, 'auth', HA2\r\n            )\r\n            respdig = KD(HA1, noncebit)\r\n        else:\r\n            # XXX handle auth-int.\r\n            return None\r\n```\r\n\r\nPatches Needed:\r\nrequests.auth.HTTPDigestAuth.build_digest_header needs to have an optional arg for body, which should be the bytes of the body of the request or None\r\n```\r\ndef build_digest_header(self, method, url, body=b''):\r\n```\r\n\r\nThe qop value should be put into a list:\r\n```\r\n        qop = self._thread_local.chal.get('qop')\r\n        if qop:\r\n            qop = [x.strip() for x in qop.split(',')]\r\n```\r\n\r\nA2 needs to be calculated differently if auth-int:\r\n\r\n```\r\n        if qop and 'auth-int' in qop:\r\n            A2 = '%s:%s:%s' % (method, path, hash_utf8(body or b''))\r\n        else:\r\n            A2 = '%s:%s' % (method, path)\r\n```\r\n\r\nAnd the qop test block needs to be changed:\r\n```\r\n        if not qop:\r\n            respdig = KD(HA1, \"%s:%s\" % (nonce, HA2))\r\n        else:\r\n            if 'auth' in qop or 'auth-int' in qop:\r\n                noncebit = \"%s:%s:%s:%s:%s\" % (\r\n                    nonce, ncvalue, cnonce, ','.join(qop), HA2\r\n                )\r\n                respdig = KD(HA1, noncebit)\r\n            else:\r\n                raise NotImplementedError('qop value of \"%s\" is not implemented.' % (','.join(qop)))\r\n```\r\n\r\nAlso the last check before returning digest:\r\n```\r\n        if qop:\r\n            base += ', qop=%s, nc=%s, cnonce=\"%s\"' % (','.join(qop), ncvalue, cnonce)\r\n```\r\n\r\nNow to change the callers:\r\nhandle_401 needs to be changed to add the body arg:\r\n```\r\n            prep.headers['Authorization'] = self.build_digest_header(\r\n                prep.method, prep.url, prep.body)\r\n```\r\n\r\n__call__ needs to be changed to add the body arg:\r\n```\r\n            r.headers['Authorization'] = self.build_digest_header(r.method, r.url, r.body)\r\n```\r\n\r\nAnd that should create a fully working framework for auth-int with RFC 2617",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5692/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5677",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5677/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5677/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5677/events",
    "html_url": "https://github.com/psf/requests/issues/5677",
    "id": 755724610,
    "node_id": "MDU6SXNzdWU3NTU3MjQ2MTA=",
    "number": 5677,
    "title": "Session does not consistently respects proxy environment variables.",
    "user": {
      "login": "mateusduboli",
      "id": 1688249,
      "node_id": "MDQ6VXNlcjE2ODgyNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1688249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mateusduboli",
      "html_url": "https://github.com/mateusduboli",
      "followers_url": "https://api.github.com/users/mateusduboli/followers",
      "following_url": "https://api.github.com/users/mateusduboli/following{/other_user}",
      "gists_url": "https://api.github.com/users/mateusduboli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mateusduboli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mateusduboli/subscriptions",
      "organizations_url": "https://api.github.com/users/mateusduboli/orgs",
      "repos_url": "https://api.github.com/users/mateusduboli/repos",
      "events_url": "https://api.github.com/users/mateusduboli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mateusduboli/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-12-03T00:55:49Z",
    "updated_at": "2023-06-26T12:06:39Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "There are inconsistencies when working with proxy environment variables using `Session` objects.\r\n\r\nWhen using `Session#request` or verb methods (`get`, `post`, `put`), those work correctly and use the proxy when they are present.\r\n\r\nHowever `Session#send(PreparedRequest)` does not respect the variables by default, but does when it handles redirect responses, e.g. `303`.\r\n\r\nI've written a test class to present this behavior.\r\n\r\n## Expected Result\r\n\r\nAll methods in `Session` to respect the proxy variable.\r\n\r\n## Actual Result\r\n\r\n`Session#send(PreparedRequest)` does not respect proxy environment variables.\r\n\r\n## Reproduction Steps\r\n\r\nTest case 1 fails with a successful request.\r\n\r\n```python\r\nimport requests\r\nimport pytest\r\n\r\n# Copied from requests/tests/utils.py for making this a standalone\r\nimport os\r\nimport contextlib\r\n\r\n@contextlib.contextmanager\r\ndef override_environ(**kwargs):\r\n    save_env = dict(os.environ)\r\n    for key, value in kwargs.items():\r\n        if value is None:\r\n            del os.environ[key]\r\n        else:\r\n            os.environ[key] = value\r\n    try:\r\n        yield\r\n    finally:\r\n        os.environ.clear()\r\n        os.environ.update(save_env)\r\n\r\nclass TestSession:\r\n\r\n    def test_respect_proxy_env_on_send(self):\r\n        session = requests.Session()\r\n\r\n        # Does not respect the proxy configuration and ignores the proxy\r\n        request = requests.Request(\r\n            method='GET', url='https://www.google.com/'\r\n        )\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                session.send(request.prepare())\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n        \r\n    def test_respect_proxy_env_on_send_with_redirects(self):\r\n        session = requests.Session()\r\n\r\n        # Returns a 303 to www.google.com and respects the proxy\r\n        request = requests.Request(\r\n            method='GET', url='https://google.com/'\r\n        )\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                session.send(request.prepare())\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n\r\n    def test_respect_proxy_env_on_get(self):\r\n        session = requests.Session()\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                # No redirects\r\n                session.get('https://www.google.com')\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n\r\n    def test_respect_proxy_env_on_request(self):\r\n        session = requests.Session()\r\n\r\n        with override_environ(https_proxy='http://example.com'):\r\n            try:\r\n                # No redirects\r\n                session.request(method='GET', url='https://www.google.com')\r\n                assert False, \"The proxy is invalid this request should not be successful.\"\r\n            except requests.exceptions.ProxyError as e:\r\n                assert 'Cannot connect to proxy' in str(e)\r\n```\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.9.8-100.fc32.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020ff\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.2\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5677/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5677/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5671",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5671/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5671/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5671/events",
    "html_url": "https://github.com/psf/requests/issues/5671",
    "id": 752649243,
    "node_id": "MDU6SXNzdWU3NTI2NDkyNDM=",
    "number": 5671,
    "title": "Urllib3 >1.26.x | Introduces default User-Agent header",
    "user": {
      "login": "prilly-dev",
      "id": 66376450,
      "node_id": "MDQ6VXNlcjY2Mzc2NDUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/66376450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prilly-dev",
      "html_url": "https://github.com/prilly-dev",
      "followers_url": "https://api.github.com/users/prilly-dev/followers",
      "following_url": "https://api.github.com/users/prilly-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/prilly-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prilly-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prilly-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/prilly-dev/orgs",
      "repos_url": "https://api.github.com/users/prilly-dev/repos",
      "events_url": "https://api.github.com/users/prilly-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prilly-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "sigmavirus24",
      "id": 240830,
      "node_id": "MDQ6VXNlcjI0MDgzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigmavirus24",
      "html_url": "https://github.com/sigmavirus24",
      "followers_url": "https://api.github.com/users/sigmavirus24/followers",
      "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
      "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
      "repos_url": "https://api.github.com/users/sigmavirus24/repos",
      "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "sigmavirus24",
        "id": 240830,
        "node_id": "MDQ6VXNlcjI0MDgzMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sigmavirus24",
        "html_url": "https://github.com/sigmavirus24",
        "followers_url": "https://api.github.com/users/sigmavirus24/followers",
        "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
        "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
        "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
        "repos_url": "https://api.github.com/users/sigmavirus24/repos",
        "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-28T10:32:24Z",
    "updated_at": "2022-01-06T16:40:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "With pyrequest pullrequest https://github.com/psf/requests/commit/03957eb1c2b9a1e5e6d61f5e930d7c5ed7cfe853 v2.25.0 urllib3 is updated to v1.26.0. with this version bump urllib3 has changed default behavior in regards to header \"User-Agent\" : https://pypi.org/project/urllib3/ \r\n\r\nurllib3 1.26.0\r\n```\r\nAdded default User-Agent header to every request (Pull #1750)\r\nAdded urllib3.util.SKIP_HEADER for skipping User-Agent, Accept-Encoding, and Host headers from being automatically emitted with requests (Pull #2018)\r\n```\r\nUrllib3 now introduces default User-Agent header when no user-agent header is set. Urlib3 also introduces the function \"urllib3.util.SKIP_HEADER\" as a means to deactivate default user-agent header.\r\n\r\n## Expected Result\r\n\r\nPyrequest should adopt easy means of deactivating \"User-Agent\" headers by utilizing the \"urllib3.util.SKIP_HEADER\" function\r\n\r\n## Actual Result\r\n\r\nDefault \"User-agent\" header is enforced when no header= is specified.\r\nby using headers={\"User-Agent\": none} no longer deactivate default \"user-agent\" while using headers={\"User-Agent\": \"\"} will deactivate \"user-agent\" header\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nreq = Request('POST', url=BASE_URL + endpoint, data=params).prepare()  \r\n```\r\n---> Deafult \"user-agent\" is enforced \"User-Agent: python-urllib3/1.26.2\"\r\n```\r\nreq = Request('POST', url=BASE_URL + endpoint, headers={\"User-Agent\": None}, data=params).prepare()\r\n```\r\n ---> Does not deactivate \"User-Agent\"\r\n```\r\nreq = Request('POST', url=BASE_URL + endpoint, headers={\"User-Agent\": \"\"}, data=params).prepare()\r\n```\r\nDeactivates \"User-Agent\" succesfully\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n<paste here>\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n\r\nPython 3.8, Docker\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5671/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5668",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5668/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5668/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5668/events",
    "html_url": "https://github.com/psf/requests/issues/5668",
    "id": 750244584,
    "node_id": "MDU6SXNzdWU3NTAyNDQ1ODQ=",
    "number": 5668,
    "title": "Request with chunked encoding doesn't respect timeout",
    "user": {
      "login": "kchen",
      "id": 31767,
      "node_id": "MDQ6VXNlcjMxNzY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/31767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kchen",
      "html_url": "https://github.com/kchen",
      "followers_url": "https://api.github.com/users/kchen/followers",
      "following_url": "https://api.github.com/users/kchen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kchen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kchen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kchen/subscriptions",
      "organizations_url": "https://api.github.com/users/kchen/orgs",
      "repos_url": "https://api.github.com/users/kchen/repos",
      "events_url": "https://api.github.com/users/kchen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kchen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-11-25T01:30:18Z",
    "updated_at": "2024-07-02T11:46:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "If I use requests to send a POST request and pass in a generator (and therefore the request uses chunked encoding), the timeout parameter is not respected. If I use a fixed bytes object instead of a generator, the timeout is respected.\r\n\r\n## Expected Result\r\n\r\nThe request should time out (in the reproduction steps below, after 2 seconds).\r\n\r\n## Actual Result\r\n\r\nThe request did not time out. The reproduction steps below print \"Connecting to http://localhost:15382/\" and then hangs there.\r\n\r\n## Reproduction Steps\r\n\r\nRun \"nc -l 15382\", and then the program below: \r\n\r\n```python\r\nimport requests\r\n\r\nurl = \"http://localhost:15382/\"\r\n\r\ndef generator():\r\n    yield b\"a\"\r\n    yield b\"b\"\r\n\r\nprint(f\"Connecting to {url}\")\r\ntry:\r\n    requests.post(url, timeout=2, data=generator())\r\n    print(f\"Completed connecting to {url}\")\r\nexcept Exception as exc:\r\n    print(f\"Got {exc}\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-111-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010104f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nIt appears that HTTPAdapter.send() uses the timeout for non-chunked requests, but not for chunked requests, so that may be the cause of this issue.\r\n\r\n(I initially investigated this bug after finding that my POST request of a large file to an HTTPS server was timing out after about 6 minutes (when I had a 10 minute timeout set). I haven't been able to reproduce the 6 minute timeout with a simple test case, but it seems like that may consist of 1 minute to send the large file, and after sending the file, it looks like openssl may have a default 5 minute timeout if not overridden. If this analysis is correct, a fix should also ensure the openssl timeout is updated as well.)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5668/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5668/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5665",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5665/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5665/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5665/events",
    "html_url": "https://github.com/psf/requests/pull/5665",
    "id": 746843383,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTI0MTY1Nzg4",
    "number": 5665,
    "title": "Add support for HTTPS proxies.",
    "user": {
      "login": "jalopezsilva",
      "id": 1276443,
      "node_id": "MDQ6VXNlcjEyNzY0NDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1276443?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jalopezsilva",
      "html_url": "https://github.com/jalopezsilva",
      "followers_url": "https://api.github.com/users/jalopezsilva/followers",
      "following_url": "https://api.github.com/users/jalopezsilva/following{/other_user}",
      "gists_url": "https://api.github.com/users/jalopezsilva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jalopezsilva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jalopezsilva/subscriptions",
      "organizations_url": "https://api.github.com/users/jalopezsilva/orgs",
      "repos_url": "https://api.github.com/users/jalopezsilva/repos",
      "events_url": "https://api.github.com/users/jalopezsilva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jalopezsilva/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-11-19T19:00:06Z",
    "updated_at": "2022-01-03T15:23:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5665",
      "html_url": "https://github.com/psf/requests/pull/5665",
      "diff_url": "https://github.com/psf/requests/pull/5665.diff",
      "patch_url": "https://github.com/psf/requests/pull/5665.patch",
      "merged_at": null
    },
    "body": "Starting with 1.26 urllib3 now supports HTTPS proxies. To enable the support two changes are needed:\r\n\r\n* An additional proxy_kwargs argument that can be passed from the session. This dictionary will be used to pass any arguments needed to the underlying adapter. The parameter is optional.\r\n* The use_forwarding_for_https mode requires us to send the absolute URI when enabled.\r\n\r\nThe resulting API is very similar except it takes an additional parameter when needed. An example:\r\n\r\n```\r\n    session = requests.Session()\r\n    proxies = {\"http\": \"https://proxy.example\", \"https\": \"https://proxy.example\"}\r\n\r\n    proxies_kwargs = {\r\n        \"proxy_ssl_context\": proxy_ssl_context(),\r\n    }\r\n\r\n    response = session.get(\r\n       \"https://www.google.com\", proxies=proxies, proxies_kwargs=proxies_kwargs\r\n    )\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5665/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5641",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5641/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5641/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5641/events",
    "html_url": "https://github.com/psf/requests/issues/5641",
    "id": 729507670,
    "node_id": "MDU6SXNzdWU3Mjk1MDc2NzA=",
    "number": 5641,
    "title": "Bad escaping of double quote in uploaded file",
    "user": {
      "login": "dvarrazzo",
      "id": 199429,
      "node_id": "MDQ6VXNlcjE5OTQyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/199429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dvarrazzo",
      "html_url": "https://github.com/dvarrazzo",
      "followers_url": "https://api.github.com/users/dvarrazzo/followers",
      "following_url": "https://api.github.com/users/dvarrazzo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dvarrazzo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dvarrazzo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dvarrazzo/subscriptions",
      "organizations_url": "https://api.github.com/users/dvarrazzo/orgs",
      "repos_url": "https://api.github.com/users/dvarrazzo/repos",
      "events_url": "https://api.github.com/users/dvarrazzo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dvarrazzo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-10-26T12:08:14Z",
    "updated_at": "2023-10-10T17:51:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Uploading a file whose name contains double quotes (\") in the file, requests replaces the character with %22. This is not reversible because the %  char is not escaped (it's not possible to tell apart a literal %22 from a quote), and it's different from what a browser does. Browsers seem to use backslash escape instead (tested with Firefox).\r\n\r\n## Expected Result\r\n\r\nIn a shell run:\r\n```\r\n$ nc -l 0.0.0.0 8080 | grep filename\r\n```\r\n\r\nIn Python\r\n```\r\nrequests.post(\"http://localhost:8080/\", files={'file': (\"\"\"foo% 'bar\" \\u20ac.txt\"\"\", open(\"README.rst\"))})\r\n```\r\n\r\nExpected, what a browser returns, in the nc shell:\r\n\r\n```\r\nContent-Disposition: form-data; name=\"file\"; filename=\"foo% 'bar\\\" \u20ac.txt\"\r\n```\r\n\r\n## Actual Result\r\n\r\n```\r\nContent-Disposition: form-data; name=\"file\"; filename=\"foo% 'bar%22 \u20ac.txt\"\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.0-51-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.24.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.8\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5641/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5641/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5613",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5613/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5613/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5613/events",
    "html_url": "https://github.com/psf/requests/issues/5613",
    "id": 714114435,
    "node_id": "MDU6SXNzdWU3MTQxMTQ0MzU=",
    "number": 5613,
    "title": "Support for SameSite cookie flag.",
    "user": {
      "login": "anio",
      "id": 3686626,
      "node_id": "MDQ6VXNlcjM2ODY2MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3686626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anio",
      "html_url": "https://github.com/anio",
      "followers_url": "https://api.github.com/users/anio/followers",
      "following_url": "https://api.github.com/users/anio/following{/other_user}",
      "gists_url": "https://api.github.com/users/anio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anio/subscriptions",
      "organizations_url": "https://api.github.com/users/anio/orgs",
      "repos_url": "https://api.github.com/users/anio/repos",
      "events_url": "https://api.github.com/users/anio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-03T15:33:09Z",
    "updated_at": "2020-10-03T22:33:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi,\r\n\r\nHave you any plan to expose `samesite` cookie flag?\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5613/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5596",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5596/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5596/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5596/events",
    "html_url": "https://github.com/psf/requests/pull/5596",
    "id": 708215345,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDkyNDgzNTMw",
    "number": 5596,
    "title": "Fix no_proxy and no, not being respected. Merge self.proxies and proxies",
    "user": {
      "login": "Suika",
      "id": 2320837,
      "node_id": "MDQ6VXNlcjIzMjA4Mzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2320837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Suika",
      "html_url": "https://github.com/Suika",
      "followers_url": "https://api.github.com/users/Suika/followers",
      "following_url": "https://api.github.com/users/Suika/following{/other_user}",
      "gists_url": "https://api.github.com/users/Suika/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Suika/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Suika/subscriptions",
      "organizations_url": "https://api.github.com/users/Suika/orgs",
      "repos_url": "https://api.github.com/users/Suika/repos",
      "events_url": "https://api.github.com/users/Suika/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Suika/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-09-24T14:21:15Z",
    "updated_at": "2024-05-16T03:04:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5596",
      "html_url": "https://github.com/psf/requests/pull/5596",
      "diff_url": "https://github.com/psf/requests/pull/5596.diff",
      "patch_url": "https://github.com/psf/requests/pull/5596.patch",
      "merged_at": null
    },
    "body": "Since no_proxy is not working as intended, I tried fixing it with least intrsion into whole process.\r\nIt is contained to the `merge_environment_settings` and `request` function. In the `request` the proxy from request and proxy from session are merged. Having the request proxy overwrite the session proxy where needed.\r\n\r\nThe  `should_bypass_proxies` is applied outside `get_environ_proxies` in `merge_environment_settings`, since `no_proxy` is only applied to OS ENV and not the proxies set in `requests` or `Sessions`\r\n\r\nShould close #4871, I hope.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5596/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5596/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5575",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5575/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5575/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5575/events",
    "html_url": "https://github.com/psf/requests/issues/5575",
    "id": 692373612,
    "node_id": "MDU6SXNzdWU2OTIzNzM2MTI=",
    "number": 5575,
    "title": "Requests ignores HSTS if redirected to http:// version of site",
    "user": {
      "login": "gowenfawr",
      "id": 6210340,
      "node_id": "MDQ6VXNlcjYyMTAzNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6210340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gowenfawr",
      "html_url": "https://github.com/gowenfawr",
      "followers_url": "https://api.github.com/users/gowenfawr/followers",
      "following_url": "https://api.github.com/users/gowenfawr/following{/other_user}",
      "gists_url": "https://api.github.com/users/gowenfawr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gowenfawr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gowenfawr/subscriptions",
      "organizations_url": "https://api.github.com/users/gowenfawr/orgs",
      "repos_url": "https://api.github.com/users/gowenfawr/repos",
      "events_url": "https://api.github.com/users/gowenfawr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gowenfawr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-09-03T21:18:32Z",
    "updated_at": "2020-10-14T13:24:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Requests will follow an unencrypted http:// redirect from a site that implements HSTS.\r\n\r\n## Expected Result\r\n\r\nI expected Requests to force https:// handling of all http:// URLs for a site which has advertised Strict-Transport-Security.\r\n\r\n## Actual Result\r\n\r\nRequests followed a 301 redirect to Location: http://site and, since port 80 was blocked for that site, spun forever and timed out.  \r\n\r\n(Note, the fact that an HSTS site is redirecting to a closed and unencrypted port is a sin on the site's behalf, not being defended here, but it illustrates the HSTS handling very nicely.  Requests times out because it tries to follow the http:// link.  Chrome, Firefox, Edge, and Internet Explorer all ignore the http:// referral and rewrite it as https://, arriving at the target landing page.  Chrome developer mode describes it as a \"307 Internal Redirect\" and \"Non-Authoritative-Reason: HSTS\").\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nr = requests.get('https://olb.bsf.net', timeout=(3,15))\r\n\r\n```\r\nSite sends a 302 Redirect to /login, then a 301 Redirect to http://olb.bsf.net/login/.  This last redirect to an unencrypted URL is what exposes the behavior.  Since the site doesn't listen on port 80, this request will time out and throw an urllib3.exceptions.MaxRetryError error.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.7.6-x86_64-linode136\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5575/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5544",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5544/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5544/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5544/events",
    "html_url": "https://github.com/psf/requests/issues/5544",
    "id": 668903401,
    "node_id": "MDU6SXNzdWU2Njg5MDM0MDE=",
    "number": 5544,
    "title": "Raising readtimeout instead of connecttimeout",
    "user": {
      "login": "stephanebruckert",
      "id": 1932338,
      "node_id": "MDQ6VXNlcjE5MzIzMzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1932338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephanebruckert",
      "html_url": "https://github.com/stephanebruckert",
      "followers_url": "https://api.github.com/users/stephanebruckert/followers",
      "following_url": "https://api.github.com/users/stephanebruckert/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephanebruckert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephanebruckert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephanebruckert/subscriptions",
      "organizations_url": "https://api.github.com/users/stephanebruckert/orgs",
      "repos_url": "https://api.github.com/users/stephanebruckert/repos",
      "events_url": "https://api.github.com/users/stephanebruckert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephanebruckert/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-07-30T15:57:31Z",
    "updated_at": "2021-08-10T13:47:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "My timeout is set to `(1,10)` AKA connect=1, read=10 and when it times out, I can see either:\r\n\r\n> HTTPSConnectionPool(host='cloud-collector.newrelic.com', port=443): Read timed out. (read timeout=10)\r\n\r\nor \r\n\r\n> HTTPSConnectionPool(host='cloud-collector.newrelic.com', port=443): Read timed out. (read timeout=1)\r\n\r\n<img width=\"1320\" alt=\"Screenshot 2020-07-30 at 16 36 08\" src=\"https://user-images.githubusercontent.com/1932338/88945113-7d20b400-d285-11ea-8189-ea68dfc7e9ff.png\">\r\n\r\nThe second one looks like definitely a connect timeout and should mention `connect` instead of `read`. Currently it's possibly making one believe that the timeouts are not being applied correctly.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5544/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5544/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5540",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5540/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5540/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5540/events",
    "html_url": "https://github.com/psf/requests/issues/5540",
    "id": 665135091,
    "node_id": "MDU6SXNzdWU2NjUxMzUwOTE=",
    "number": 5540,
    "title": "iter_lines is still broken?",
    "user": {
      "login": "vitidev",
      "id": 2243958,
      "node_id": "MDQ6VXNlcjIyNDM5NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2243958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitidev",
      "html_url": "https://github.com/vitidev",
      "followers_url": "https://api.github.com/users/vitidev/followers",
      "following_url": "https://api.github.com/users/vitidev/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitidev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitidev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitidev/subscriptions",
      "organizations_url": "https://api.github.com/users/vitidev/orgs",
      "repos_url": "https://api.github.com/users/vitidev/repos",
      "events_url": "https://api.github.com/users/vitidev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitidev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-07-24T12:27:57Z",
    "updated_at": "2023-11-10T21:01:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I don't understand.\r\n\r\nI can't iterate \"\\r\\n\" because \"\\r\" and \"\\n\" can be read into different chunks. \r\n\r\nBut I can't even get solve this problem by explicitly setting the final delimiter \"\\n\"\r\n\r\n      for line in (_.strip() for _ in resp.iter_lines(delimiter=b\"\\n\")):\r\n          print(line)\r\n\r\nbecause if chunk end with \"\\r\\n\", then `lines = chunk.split(delimiter)` in `iter_lines` append empty extra line (but chunk.splitlines() not)\r\n\r\nthe same problem and just with \"\\n\" - if chunk end with delimiter, then we get an extra empty line. Which forces you to set a large buffer size if line length is unknown\r\n\r\n\r\nSo if the `split(...)` adds an extra line, why not remove it?\r\n\r\n        if delimiter:\r\n            lines = chunk.split(delimiter)\r\n            if lines and not lines[-1]:\r\n                lines.pop(-1)\r\n        else:\r\n            lines = chunk.splitlines()\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5540/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5540/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5536",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5536/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5536/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5536/events",
    "html_url": "https://github.com/psf/requests/issues/5536",
    "id": 660816593,
    "node_id": "MDU6SXNzdWU2NjA4MTY1OTM=",
    "number": 5536,
    "title": "When stream=True iter_content(chunk_size=None) reads the input as a single big chunk",
    "user": {
      "login": "hexagonrecursion",
      "id": 52621858,
      "node_id": "MDQ6VXNlcjUyNjIxODU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/52621858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexagonrecursion",
      "html_url": "https://github.com/hexagonrecursion",
      "followers_url": "https://api.github.com/users/hexagonrecursion/followers",
      "following_url": "https://api.github.com/users/hexagonrecursion/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexagonrecursion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexagonrecursion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexagonrecursion/subscriptions",
      "organizations_url": "https://api.github.com/users/hexagonrecursion/orgs",
      "repos_url": "https://api.github.com/users/hexagonrecursion/repos",
      "events_url": "https://api.github.com/users/hexagonrecursion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexagonrecursion/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-07-19T12:45:58Z",
    "updated_at": "2023-11-09T15:26:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "[According to the documentation](https://2.python-requests.org/en/master/api/#requests.Response.iter_content) when stream=True iter_content(chunk_size=None) \"will read data as it arrives in whatever size the chunks are received\", But it actually collects all input into a single big bytes object consuming large amounts of memory and entirely defeating the purpose of iter_content().\r\n\r\n## Expected Result\r\n\r\niter_content(chunk_size=None) yields \"data as it arrives in whatever size the chunks are received\".\r\n\r\n## Actual Result\r\n\r\nA single big chunk\r\n\r\n## Reproduction Steps\r\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/hexagonrecursion/requests-bug/c34439734aca44a8b5df85d606b2ac63ca0510f0?filepath=repro.ipynb)\r\n```python\r\nfrom requests import get\r\nURL = 'https://dl.fedoraproject.org/pub/alt/iot/32/IoT/x86_64/images/Fedora-IoT-32-20200603.0.x86_64.raw.xz'\r\nr = get(URL, stream=True)\r\nfor b in r.iter_content(chunk_size=None):\r\n    print(len(b))\r\n```\r\nprints\r\n```\r\n533830860\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.9.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.9\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.104+\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010107f\",\r\n    \"version\": \"19.1.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.23.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010107f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.9\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5536/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5536/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5503",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5503/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5503/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5503/events",
    "html_url": "https://github.com/psf/requests/issues/5503",
    "id": 641242223,
    "node_id": "MDU6SXNzdWU2NDEyNDIyMjM=",
    "number": 5503,
    "title": "Performance: Response.content is unnecessarily slow",
    "user": {
      "login": "bmerry",
      "id": 1963944,
      "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bmerry",
      "html_url": "https://github.com/bmerry",
      "followers_url": "https://api.github.com/users/bmerry/followers",
      "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
      "organizations_url": "https://api.github.com/users/bmerry/orgs",
      "repos_url": "https://api.github.com/users/bmerry/repos",
      "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bmerry/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-18T14:13:55Z",
    "updated_at": "2020-06-30T06:34:24Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "The core of Response.content looks like this (where CONTENT_CHUNK_SIZE is 10KB):\r\n```python\r\nself._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\r\n```\r\nThat is suboptimal for several reasons:\r\n1. All the data has to be read into a temporary `bytes`, then copied into the joined buffer.\r\n2. It's also memory-inefficient: the CPython implementation of bytes.join first converts the generator to a sequence, so if the content is 1GB, you will temporarily have 2GB of memory used.\r\n3. 10KB isn't really big enough to amortise all the overheads (increasing it significantly improves performance).\r\n\r\nIt looks like this used to be done with `self.raw.read`, but it was changed to the current approach [8 years ago](https://github.com/psf/requests/commit/00b13673e32e45d2eb6517c0cf81915467331d8f). I've tried a quick test to switch back to `self.raw.read(decode_content=True)`, but it's failing some unit tests, presumably because of subtleties in handling Content-Encoding. If the maintainers agree that this is worth pursuing then I can work on dealing with the corner cases to make a PR.\r\n\r\n## Expected Result\r\n\r\nI expect `resp.content` from a non-streamed request to have similar performance to `resp.raw.read()` from a streamed request.\r\n\r\n## Actual Result\r\n\r\nI've benchmarked `response.content` at 590 MB/s and `response.raw.read()`see sample code below) at 3180 MB/s \u2014 5.4x faster. With 10-25 Gb/s networking becoming pretty standard in the data centre, this represents a significant bottleneck.\r\n\r\n```python\r\ndef load_requests_naive(url: str) -> bytes:\r\n    with requests.get(url) as resp:\r\n        return resp.content\r\n\r\ndef load_requests_stream(url: str) -> bytes:\r\n    with requests.get(url, stream=True) as resp:\r\n        return resp.raw.read()\r\n```\r\n\r\n## Reproduction Steps\r\nYou'll need to run an HTTP server that can deliver a large file at high bandwidth (I happen to have Minio+Varnish on my local machine, but I'm sure other servers e.g. Apache could be used). Then run the script below as `httpbench-requests.py all http://...`. Note that Python 3.8 (or possibly it was 3.7) improved the performance of http.client.HTTPResponse.read, so if you use an older Python version the difference in performance is less enormous, but still >2x on my machine.\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\r\nimport argparse\r\nimport gc\r\nimport hashlib\r\nimport http.client\r\nimport io\r\nimport socket\r\nimport textwrap\r\nimport time\r\nimport urllib.parse\r\nfrom typing import Callable, Tuple, Optional\r\n\r\nimport requests\r\nimport numpy as np\r\n\r\n\r\n_Method = Callable[[str], bytes]\r\nMETHODS = {}\r\n\r\n\r\ndef method(name: str) -> Callable[[_Method], _Method]:\r\n    def decorate(func: _Method) -> _Method:\r\n        METHODS[name] = func\r\n        return func\r\n\r\n    return decorate\r\n\r\n\r\n@method('requests-naive')\r\ndef load_requests_naive(url: str) -> bytes:\r\n    with requests.get(url) as resp:\r\n        return resp.content\r\n\r\n\r\n@method('requests-stream-read')\r\ndef load_requests_stream(url: str) -> bytes:\r\n    with requests.get(url, stream=True) as resp:\r\n        return resp.raw.read()\r\n\r\n\r\ndef measure_method(method: str, args: argparse.Namespace) -> None:\r\n    rates = []\r\n    for i in range(args.passes):\r\n        gc.collect()\r\n        start = time.monotonic()\r\n        data = METHODS[method](args.url)\r\n        stop = time.monotonic()\r\n        elapsed = stop - start\r\n        rates.append(len(data) / elapsed)\r\n        del data\r\n    mean = np.mean(rates)\r\n    std = np.std(rates) / np.sqrt(args.passes - 1)\r\n    print('{}: {:.1f} \u00b1 {:.1f} MB/s'.format(method, mean / 1e6, std / 1e6))\r\n\r\n\r\ndef main():\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument('--passes', type=int, default=5)\r\n    parser.add_argument('method')\r\n    parser.add_argument('url')\r\n    args = parser.parse_args()\r\n    if args.method not in METHODS and args.method != 'all':\r\n        parser.error('Method must be \"all\" or one of {}'.format(set(METHODS.keys())))\r\n\r\n    if args.method == 'all':\r\n        for method in METHODS:\r\n            measure_method(method, args)\r\n    else:\r\n        measure_method(args.method, args)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.9\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.0-37-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.24.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.9\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5503/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5503/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5498",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5498/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5498/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5498/events",
    "html_url": "https://github.com/psf/requests/issues/5498",
    "id": 639579432,
    "node_id": "MDU6SXNzdWU2Mzk1Nzk0MzI=",
    "number": 5498,
    "title": "Avoid unnecessary data collection conversion by making use of urllib3's HTTPHeaderDict for request headers",
    "user": {
      "login": "dbaxa",
      "id": 1684354,
      "node_id": "MDQ6VXNlcjE2ODQzNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1684354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbaxa",
      "html_url": "https://github.com/dbaxa",
      "followers_url": "https://api.github.com/users/dbaxa/followers",
      "following_url": "https://api.github.com/users/dbaxa/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbaxa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbaxa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbaxa/subscriptions",
      "organizations_url": "https://api.github.com/users/dbaxa/orgs",
      "repos_url": "https://api.github.com/users/dbaxa/repos",
      "events_url": "https://api.github.com/users/dbaxa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbaxa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-16T11:11:34Z",
    "updated_at": "2021-02-05T02:38:53Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Avoid unnecessary data collection conversion by making use of urllib3's [`HTTPHeaderDict`](https://github.com/urllib3/urllib3/blob/master/src/urllib3/_collections.py#L106) for request headers & response headers. Currently request http headers are placed in a [`CaseInsensitiveDict`](https://github.com/psf/requests/blob/master/requests/structures.py#L15) but before a request is made the headers are converted to urllib3's [`HTTPHeaderDict`](https://github.com/urllib3/urllib3/blob/master/src/urllib3/_collections.py#L106) & similar seems to occur for responses (in reverse). ",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5498/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5486",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5486/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5486/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5486/events",
    "html_url": "https://github.com/psf/requests/pull/5486",
    "id": 636196928,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDMyNDE0NzA3",
    "number": 5486,
    "title": "Allow for autodection of encoding for scalar values",
    "user": {
      "login": "blenq",
      "id": 22727090,
      "node_id": "MDQ6VXNlcjIyNzI3MDkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22727090?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blenq",
      "html_url": "https://github.com/blenq",
      "followers_url": "https://api.github.com/users/blenq/followers",
      "following_url": "https://api.github.com/users/blenq/following{/other_user}",
      "gists_url": "https://api.github.com/users/blenq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blenq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blenq/subscriptions",
      "organizations_url": "https://api.github.com/users/blenq/orgs",
      "repos_url": "https://api.github.com/users/blenq/repos",
      "events_url": "https://api.github.com/users/blenq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blenq/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-10T12:15:13Z",
    "updated_at": "2022-01-03T15:26:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5486",
      "html_url": "https://github.com/psf/requests/pull/5486",
      "diff_url": "https://github.com/psf/requests/pull/5486.diff",
      "patch_url": "https://github.com/psf/requests/pull/5486.patch",
      "merged_at": null
    },
    "body": "Since JSON RFC 7158 (and also in 7159 and 8259) scalar values are also valid JSON texts. The json decoder from the Python standard libs also accepts such scalar values.\r\n\r\nThe JSON Unicode detection algorithm in \"requests\" assumes that the first two characters are always ASCII. That is not true anymore.\r\nTherefore the current detection fails in at least these two edge cases\r\n\r\n- A single digit in UTF-16 encoding\r\n- A quoted string with the first character having a Unicode value higher than 255 in UTF-16 encoding\r\n\r\nAlso autodetection by chardet returns the wrong encoding.\r\n\r\nThis change detects the encoding in case of those two edge cases.\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5486/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5464",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5464/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5464/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5464/events",
    "html_url": "https://github.com/psf/requests/pull/5464",
    "id": 621354329,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDIwNDIzMTI5",
    "number": 5464,
    "title": "Allow semicolon in the href of Link header",
    "user": {
      "login": "ibnesayeed",
      "id": 65147,
      "node_id": "MDQ6VXNlcjY1MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/65147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ibnesayeed",
      "html_url": "https://github.com/ibnesayeed",
      "followers_url": "https://api.github.com/users/ibnesayeed/followers",
      "following_url": "https://api.github.com/users/ibnesayeed/following{/other_user}",
      "gists_url": "https://api.github.com/users/ibnesayeed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ibnesayeed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ibnesayeed/subscriptions",
      "organizations_url": "https://api.github.com/users/ibnesayeed/orgs",
      "repos_url": "https://api.github.com/users/ibnesayeed/repos",
      "events_url": "https://api.github.com/users/ibnesayeed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ibnesayeed/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-19T23:41:45Z",
    "updated_at": "2022-01-03T15:26:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5464",
      "html_url": "https://github.com/psf/requests/pull/5464",
      "diff_url": "https://github.com/psf/requests/pull/5464.diff",
      "patch_url": "https://github.com/psf/requests/pull/5464.patch",
      "merged_at": null
    },
    "body": "Semicolons are valid characters in URIs, splitting them while parsing the `Link` header results in unexpected token and wrong `url` attribute (notice `;oldid=934259284` portion the below example).\r\n\r\n```\r\n<https://en.wikipedia.org/w/index.php?title=COVID-19_pandemic&amp;oldid=934259284>; rel=\"original\", <https://web.archive.org/web/timemap/link/https://en.wikipedia.org/w/index.php?title=COVID-19_pandemic&amp;oldid=934259284>; rel=\"timemap\"; type=\"application/link-format\"\r\n```\r\n\r\nThis PR attempts to fix current parsing issue and also renames a variable to better reflect the purpose of it.\r\n\r\nI would note here that this parser still is far from perfect and can be better implemented using state machine.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5464/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5464/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5461",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5461/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5461/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5461/events",
    "html_url": "https://github.com/psf/requests/issues/5461",
    "id": 619752546,
    "node_id": "MDU6SXNzdWU2MTk3NTI1NDY=",
    "number": 5461,
    "title": "Treat invalid percent encoding consistently",
    "user": {
      "login": "openandclose",
      "id": 30379553,
      "node_id": "MDQ6VXNlcjMwMzc5NTUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/30379553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/openandclose",
      "html_url": "https://github.com/openandclose",
      "followers_url": "https://api.github.com/users/openandclose/followers",
      "following_url": "https://api.github.com/users/openandclose/following{/other_user}",
      "gists_url": "https://api.github.com/users/openandclose/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/openandclose/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/openandclose/subscriptions",
      "organizations_url": "https://api.github.com/users/openandclose/orgs",
      "repos_url": "https://api.github.com/users/openandclose/repos",
      "events_url": "https://api.github.com/users/openandclose/events{/privacy}",
      "received_events_url": "https://api.github.com/users/openandclose/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-05-17T17:02:35Z",
    "updated_at": "2020-05-21T17:01:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The present form of ``requote_uri`` unnecessarily divides invalid cases.\r\n\r\nWhen alpha-numeric, '%' is quoted to '%25'.\r\nE.g. ``%pp`` to ``%25pp``.\r\n\r\nWhen not alpha-numeric, '%' is kept as is.\r\nE.g. ``%--`` to ``%--``.\r\n(Note these two examples are in the tests,\r\nand the latter is for ``unquote_unreserved``,\r\nbut the result is the same.)\r\nOr ``%<<`` to ``%%3C%3C``.\r\n\r\nbut I think '%' should be quoted in all invalid cases.\r\n(Or to put it differently, isolated '%' must be quoted.)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5461/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5449",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5449/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5449/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5449/events",
    "html_url": "https://github.com/psf/requests/issues/5449",
    "id": 614907671,
    "node_id": "MDU6SXNzdWU2MTQ5MDc2NzE=",
    "number": 5449,
    "title": "How to propagate cookie policies through posts?",
    "user": {
      "login": "karres-illinois",
      "id": 51006466,
      "node_id": "MDQ6VXNlcjUxMDA2NDY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51006466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karres-illinois",
      "html_url": "https://github.com/karres-illinois",
      "followers_url": "https://api.github.com/users/karres-illinois/followers",
      "following_url": "https://api.github.com/users/karres-illinois/following{/other_user}",
      "gists_url": "https://api.github.com/users/karres-illinois/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karres-illinois/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karres-illinois/subscriptions",
      "organizations_url": "https://api.github.com/users/karres-illinois/orgs",
      "repos_url": "https://api.github.com/users/karres-illinois/repos",
      "events_url": "https://api.github.com/users/karres-illinois/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karres-illinois/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-08T18:29:00Z",
    "updated_at": "2020-05-11T14:25:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi,\r\n\r\nI am using Python 3.8 and the latest pip updates of everything mentioned below.\r\n\r\nI am trying to consume a very old, but active SOAP resource.  I am using Zeep for the SOAP part.  The SOAP service is so old that I need to set a special cookie policy to handle the fact that the old SOAP service returns obsolete `set-cookie2` headers.  I am new to this so there could be better ways but the first few executable lines of my code sample (at the bottom) create a dummy cookie to establish a cookie policy that *should* pull in the obsolete cookies.\r\n\r\nTHe dummy cookie is attached to the session and the SOAP \"login\" method is called.  I have stepped through the execution path (most recent on top).  Everything above the \"transports\" lines is in the your domain I think.\r\n\r\n```\r\n\t\tmerge_cookies, cookies.py:549\r\n\t\tprepare_request, sessions.py:441\r\n\t\trequest, sessions.py:516\r\n\t\tpost, sessions.py:578\r\n\t\tpost, transports.py:61\r\n\t\tpost_xml, transports.py:107\r\n\t\tsend, soap.py:122\r\n\t\t__call__, proxy.py:40\r\n\t\t<module>, zeep_test.py:31\r\n```\r\n\r\nI have modified Zeep's code to send the session cookies to your \"post\" method in the \"kwargs\".\r\n\r\n```\r\n        response = self.session.post(\r\n            address, data=message, headers=headers,\r\n            timeout=self.operation_timeout, \r\n\t\t\tcookies=self.session.cookies\r\n        )\r\n```\r\n\r\n\"post\" calls \"request\" calls \"prepare_request\" calls \"merge_cookies\".  That code is:\r\n\r\n```\r\n        # Merge with session cookies\r\n        merged_cookies = merge_cookies(\r\n            merge_cookies(RequestsCookieJar(), self.cookies), cookies)\r\n```\r\n\t\t\t\r\nIn my case the passed in cookie is a \"cookielib.CookieJar\".  The line:\r\n\r\n```\r\n        try:\r\n            cookiejar.update(cookies)\r\n```\r\n\r\nis executed but the \"cookielib.CookieJar\" policies are NOT copied over.  I don't know what to do about that.  Is there a better way to set a global cookie policy?\r\n\r\nA relevant portion of my code is:\r\n\r\n```\r\n\t\timport requests\r\n\t\tfrom requests import Session, cookies\r\n\t\tfrom zeep import Client, Settings\r\n\t\tfrom zeep.cache import SqliteCache\r\n\t\tfrom zeep.transports import Transport\r\n\t\tfrom http.cookiejar import CookieJar, DefaultCookiePolicy\r\n\r\n\t\tpolicy = DefaultCookiePolicy(rfc2965=True)\r\n\t\tcj = CookieJar(policy)\r\n\t\tcj.set_cookie(requests.cookies.create_cookie(name=\"dummy\", value=\"dummy\"))\r\n\r\n\t\tmy_session = Session()\r\n\t\tmy_session.cookies = cj\r\n\r\n\t\tmy_settings = Settings(strict=False)\r\n\t\tmy_cache = SqliteCache()\r\n\t\tmy_url = 'https://lists.mycompany.com/lists/wsdl'\r\n\r\n\t\tclient = Client(\r\n\t\t\tmy_url,\r\n\t\t\ttransport=Transport(\r\n\t\t\t\tsession=my_session,\r\n\t\t\t\tcache=my_cache\r\n\t\t\t),\r\n\t\t\tsettings=my_settings\r\n\t\t)\r\n\t\t\r\n\t\tresponse = client.service.login(email=\"Me\",\r\n\t\t\t\t\t\t\t\t\t\tpassword=\"mememe\")\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5449/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5449/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5441",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5441/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5441/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5441/events",
    "html_url": "https://github.com/psf/requests/pull/5441",
    "id": 607860646,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA5NzUzMTQw",
    "number": 5441,
    "title": "Strip double-quotes on proxy environment variables and add test (issue #4613)",
    "user": {
      "login": "bluebird75",
      "id": 216653,
      "node_id": "MDQ6VXNlcjIxNjY1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/216653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluebird75",
      "html_url": "https://github.com/bluebird75",
      "followers_url": "https://api.github.com/users/bluebird75/followers",
      "following_url": "https://api.github.com/users/bluebird75/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluebird75/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluebird75/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluebird75/subscriptions",
      "organizations_url": "https://api.github.com/users/bluebird75/orgs",
      "repos_url": "https://api.github.com/users/bluebird75/repos",
      "events_url": "https://api.github.com/users/bluebird75/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluebird75/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-27T21:19:20Z",
    "updated_at": "2022-01-03T15:27:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5441",
      "html_url": "https://github.com/psf/requests/pull/5441",
      "diff_url": "https://github.com/psf/requests/pull/5441.diff",
      "patch_url": "https://github.com/psf/requests/pull/5441.patch",
      "merged_at": null
    },
    "body": "Issue #4613 details two problems :\r\n* proxy may contain white-space accidentally\r\n* proxy may be contain extra double-quotes on Windows\r\n\r\nA fix already exists for the white-space problem, this addresses the second problem.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5441/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5436",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5436/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5436/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5436/events",
    "html_url": "https://github.com/psf/requests/issues/5436",
    "id": 606483070,
    "node_id": "MDU6SXNzdWU2MDY0ODMwNzA=",
    "number": 5436,
    "title": "Add response.future_requests_uri, deprecate response.is_permanent_redirect",
    "user": {
      "login": "SoniEx2",
      "id": 1779619,
      "node_id": "MDQ6VXNlcjE3Nzk2MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1779619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoniEx2",
      "html_url": "https://github.com/SoniEx2",
      "followers_url": "https://api.github.com/users/SoniEx2/followers",
      "following_url": "https://api.github.com/users/SoniEx2/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoniEx2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoniEx2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoniEx2/subscriptions",
      "organizations_url": "https://api.github.com/users/SoniEx2/orgs",
      "repos_url": "https://api.github.com/users/SoniEx2/repos",
      "events_url": "https://api.github.com/users/SoniEx2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoniEx2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 136616769,
        "node_id": "MDU6TGFiZWwxMzY2MTY3Njk=",
        "url": "https://api.github.com/repos/psf/requests/labels/Documentation",
        "name": "Documentation",
        "color": "fad8c7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-04-24T17:50:35Z",
    "updated_at": "2020-06-17T20:23:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`response.is_permanent_redirect` is unreliable/useless/dangerous for chains of redirects, just give the user the correct URI instead.\r\n\r\nexample use-case: `foo` redirects temporarily to `bar`, which in turn redirects permanently to `baz`. future requests should still be made to `foo`, but using `is_permanent_redirect` would lead to them being made to `baz` instead.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5436/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5436/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5430",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5430/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5430/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5430/events",
    "html_url": "https://github.com/psf/requests/issues/5430",
    "id": 602744441,
    "node_id": "MDU6SXNzdWU2MDI3NDQ0NDE=",
    "number": 5430,
    "title": "A `ConnectionError` (\"Read timed out.\") is raised instead of `ReadTimeout`, when using `timeout` keyword argument of `Session.get()`",
    "user": {
      "login": "nlykkei",
      "id": 14088508,
      "node_id": "MDQ6VXNlcjE0MDg4NTA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/14088508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlykkei",
      "html_url": "https://github.com/nlykkei",
      "followers_url": "https://api.github.com/users/nlykkei/followers",
      "following_url": "https://api.github.com/users/nlykkei/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlykkei/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlykkei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlykkei/subscriptions",
      "organizations_url": "https://api.github.com/users/nlykkei/orgs",
      "repos_url": "https://api.github.com/users/nlykkei/repos",
      "events_url": "https://api.github.com/users/nlykkei/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlykkei/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-04-19T15:29:31Z",
    "updated_at": "2024-08-29T10:13:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Consider the code below (**main.py**). When a temporary network disconnect occurs without the `timeout` keyword argument to `Session.get()`, the client may hang indefinitely and no exception is raised.\r\n\r\nHowever, if I use the `timeout` keyword argument, the application will raise a `ConnectionError` from **models.py** corresponding to the `urllib3.exceptions.ReadTimeoutError`:\r\n\r\n`requests.exceptions.ConnectionError: HTTPSConnectionPool(host='confluence.example.net', port=443): Read timed out.`\r\n\r\nGiven that the exception is only raised, when using the `timeout` keyword argument, why isn't Requests raising `ReadTimeout` exception instead? In particular, the `ConnectionError`'s exception message \"Read timed out.\" suggests that it should be a `ReadTimeout` exception?\r\n\r\nTo mitigate the issue I'm currently performing a regular expression match on the exception message, which is a bad practice:\r\n\r\n```\r\nexcept ConnectionError as e:\r\n     if re.search('Read timed out', str(e), re.IGNORECASE):\r\n```\r\n**main.py**:\r\n\r\n```\r\n try:\r\n     with requests.Session() as rs:\r\n         rs.mount('https://', HTTPAdapter(max_retries=Retry(total=10, connect=10, read=10, backoff_factor=1)))\r\n         with rs.get(url, params={}, headers={}, auth=self.auth, verify=self.ssl_verify, timeout=(30, 30)) as r:\r\n             r.raise_for_status()\r\n             page_set = r.json()\r\n except ReadTimeout as e:\r\n     logging.exception('Request for page set timed out: {}'.format(url))\r\n     continue\r\n except ConnectionError as e:\r\n     if re.search('Read timed out', str(e), re.IGNORECASE):\r\n         logging.exception('Request for page set timed out (network problem): {}'.format(url))\r\n         continue\r\n     else:\r\n         raise\r\n```\r\n\r\n**models.py**:\r\nhttps://github.com/psf/requests/blob/master/requests/models.py\r\n\r\n```\r\ndef generate():\r\n            # Special case for urllib3.\r\n            if hasattr(self.raw, 'stream'):\r\n                try:\r\n                    for chunk in self.raw.stream(chunk_size, decode_content=True):\r\n                        yield chunk\r\n                except ProtocolError as e:\r\n                    raise ChunkedEncodingError(e)\r\n                except DecodeError as e:\r\n                    raise ContentDecodingError(e)\r\n                except ReadTimeoutError as e:\r\n                    raise ConnectionError(e)\r\n```\r\n\r\n**Exception**:\r\n\r\n```\r\nERROR -- 04/19/2020 04:51:32 PM -- root -- ThreadPoolExecutor-0_0  -- Request for page set timed out (network problem): https://confluence.example.net/rest/api/content/search?expand=version,history,space,body.storage,children.attachment.version,children.attachment.history,children.attachment.space&limit=50&start=1900&cql=(type=page)\r\nTraceback (most recent call last):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 425, in _error_catcher\r\n    yield\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 755, in read_chunked\r\n    chunk = self._handle_chunk(amt)\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 708, in _handle_chunk\r\n    returned_chunk = self._fp._safe_read(self.chunk_left)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/client.py\", line 620, in _safe_read\r\n    chunk = self.fp.read(min(amt, MAXAMOUNT))\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py\", line 589, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\", line 1071, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\", line 929, in read\r\n    return self._sslobj.read(len, buffer)\r\nsocket.timeout: The read operation timed out\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/models.py\", line 751, in generate\r\n    for chunk in self.raw.stream(chunk_size, decode_content=True):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 560, in stream\r\n    for line in self.read_chunked(amt, decode_content=decode_content):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 781, in read_chunked\r\n    self._original_response.close()\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 130, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/urllib3/response.py\", line 430, in _error_catcher\r\n    raise ReadTimeoutError(self._pool, None, \"Read timed out.\")\r\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='confluence.example.net', port=443): Read timed out.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/confluence/confluence.py\", line 112, in __producer\r\n    with rs.get(url, params={}, headers={}, auth=self.auth, verify=self.ssl_verify, timeout=(30, 30)) as r:\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/sessions.py\", line 543, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/sessions.py\", line 530, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/sessions.py\", line 683, in send\r\n    r.content\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/models.py\", line 829, in content\r\n    self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\r\n  File \"/Users/nlykkei/projects/atlassian-watchdog/lib/python3.7/site-packages/requests/models.py\", line 758, in generate\r\n    raise ConnectionError(e)\r\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='confluence.example.net', port=443): Read timed out.\r\n```\r\n\r\n## Expected Result\r\n\r\nI would expect a `requests.exceptions.ReadTimeout` to be raised. \r\n\r\n## Actual Result\r\n\r\nA `requests.exceptions.ConnectError` was raised instead, with the error message: `Read timed out.`\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\nnlykkei:~$ python3 -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"19.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.23.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5430/reactions",
      "total_count": 12,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5430/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5411",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5411/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5411/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5411/events",
    "html_url": "https://github.com/psf/requests/issues/5411",
    "id": 592523068,
    "node_id": "MDU6SXNzdWU1OTI1MjMwNjg=",
    "number": 5411,
    "title": "Incorrect cookie handling: third level domain incorrectly uses second level domain cookies",
    "user": {
      "login": "dvorapa",
      "id": 5113916,
      "node_id": "MDQ6VXNlcjUxMTM5MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5113916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dvorapa",
      "html_url": "https://github.com/dvorapa",
      "followers_url": "https://api.github.com/users/dvorapa/followers",
      "following_url": "https://api.github.com/users/dvorapa/following{/other_user}",
      "gists_url": "https://api.github.com/users/dvorapa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dvorapa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dvorapa/subscriptions",
      "organizations_url": "https://api.github.com/users/dvorapa/orgs",
      "repos_url": "https://api.github.com/users/dvorapa/repos",
      "events_url": "https://api.github.com/users/dvorapa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dvorapa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-04-02T10:27:12Z",
    "updated_at": "2020-05-14T08:44:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When visiting (logging in to) zh.wikisource.org, cookies for the following domain are set:\r\n- .wikisource.org\r\n\r\nIf one visits wikisource.org afterwards, cookies for the following domain are set:\r\n- wikisource.org\r\n\r\nAfter i.e. logout from zh.wikisource.org, zh.wikisource.org sends cookie invalidation request for .wikisource.org. Requests invalidates them correctly, leaves wikisource.org cookies untouched correctly.\r\nBut for further communication with zh.wikisource.org, requests incorrectly use remaining wikisource.org cookie. Which is rejected by zh.wikisource.org and followed by cookie invalidation request for .wikisource.org.\r\n\r\n## Expected Result\r\nIt looks like the cookie handling library used by requests is doing something wrong (at least according to the RFCs), as it should not send the host-only cookie for wikisource.org to zh.wikisource.org. If it's using RFC 2109, \"zh.wikisource.org\" does not domain-match the cookie for \"wikisource.org\" because \"wikisource.org\" doesn't begin with a dot. If it's using RFC 6265, the domainless cookie for \"wikisource.org\" should have had the host-only-flag set meaning it should not be sent to \"zh.wikisource.org\". OTOH, it's possible it's being bug-compatible with browsers (RFC 6265 even notes that such a bug exists/existed in some agents in \u00a7 4.1.2.3).\r\n\r\n## Actual Result\r\nAs written above, requests use wikisource.org cookie for zh.wikisource.org. Which is rejected by zh.wikisource.org and followed by cookie invalidation request for .wikisource.org\". That is fulfilled (no cookies for .wikisource.org are set), but requests still tries to push cookies for wikisource.org to zh.wikisource.org. So the actual result is endless loop (https://travis-ci.org/github/wikimedia/pywikibot/jobs/669558038#L13763).\r\n\r\n## Reproduction Steps\r\nSimple:\r\n```python\r\nimport pywikibot\r\ns=pywikibot.Site('zh', 'wikisource')\r\nprint(s.hostname())  # zh.wikisource.org\r\ns.login()\r\n\r\ns2=pywikibot.Site('mul', 'wikisource')\r\nprint(s2.hostname())  # wikisource.org\r\ns2.login()\r\n\r\ns.logout()\r\ns.login()\r\n# endless loop here\r\n```\r\nElaborate:\r\n```python\r\nimport requests\r\ns=requests.Session()\r\n\r\ndef login(url):\r\n  while True:\r\n    # login token\r\n    r1=s.post(url=url, data={'action':'query','meta':'tokens','type':'login','format':'json'})\r\n    logintoken = r1.json()['query']['tokens']['logintoken']\r\n    # login (test account)\r\n    r2=s.post(url=url, data={'action':'clientlogin','loginreturnurl':'https://example.com','logintoken':logintoken,'username':'Test20200402','password':'popokatepetl','format':'json'})\r\n    print(r2.json())\r\n    if r2.json().get('error') and r2.json()['error'].get('code') == 'badtoken':\r\n      continue\r\n    else:\r\n      break\r\n  #print(s.cookies)\r\n\r\ndef logout(url):\r\n  # logout token\r\n  r1=s.post(url=url, data={'action':'query','meta':'tokens','type':'csrf','format':'json'})\r\n  logouttoken = r1.json()['query']['tokens']['csrftoken']\r\n  # logout\r\n  r2=s.post(url=url, data={'action':'logout','token':logouttoken,'format':'json'})\r\n  print(r2.json())\r\n  #print(s.cookies)\r\n\r\nurl1 = 'https://zh.wikisource.org/w/api.php'\r\nurl2='https://wikisource.org/w/api.php'\r\n\r\nlogin(url1)\r\n\r\nlogin(url2)\r\n\r\nlogout(url1)\r\n\r\nlogin(url1)\r\n# endless loop here\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\nReproduced on many PCs with many configurations and also on Travis-CI. Here is one:\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.18\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.23.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010104f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n\r\nLinks:\r\nReported and described in more detail in: https://phabricator.wikimedia.org/T224712\r\nReproducible immediately in: https://repl.it/repls/HarmfulBiodegradableExperiments\r\nPastebin (just in case): https://pastebin.com/7d7Dn9p1",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5411/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5411/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5388",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5388/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5388/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5388/events",
    "html_url": "https://github.com/psf/requests/issues/5388",
    "id": 580653057,
    "node_id": "MDU6SXNzdWU1ODA2NTMwNTc=",
    "number": 5388,
    "title": "RequestsCookieJar appends \".local\" to cookie from localhost",
    "user": {
      "login": "dominickj-tdi",
      "id": 49956725,
      "node_id": "MDQ6VXNlcjQ5OTU2NzI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/49956725?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dominickj-tdi",
      "html_url": "https://github.com/dominickj-tdi",
      "followers_url": "https://api.github.com/users/dominickj-tdi/followers",
      "following_url": "https://api.github.com/users/dominickj-tdi/following{/other_user}",
      "gists_url": "https://api.github.com/users/dominickj-tdi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dominickj-tdi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dominickj-tdi/subscriptions",
      "organizations_url": "https://api.github.com/users/dominickj-tdi/orgs",
      "repos_url": "https://api.github.com/users/dominickj-tdi/repos",
      "events_url": "https://api.github.com/users/dominickj-tdi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dominickj-tdi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-13T14:54:34Z",
    "updated_at": "2020-04-09T20:45:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When I make a request to localhost (on my development machine), Requests changes the domain from \"localhost\" to \"localhost.local\" when saving the cookie. Thus, I am unable to access the cookie if I specify the domain parameter in the get method.\r\n\r\nMy app requires me to get and set cookies on the session object as a persistence mechanism; I need to persist this cookie over more than one session in the python app.\r\n\r\n## Expected Result\r\n\r\nI would expect the domain in `RequestCookieJar` to always match the domain I used to make the request.\r\n\r\n## Actual Result\r\n\r\nIf I make a request to localhost, instead I get the cookie saved to the domain \"localhost.local\". (Note that I cannot actually make requests to \"localhost.local\", they fail.) This puts me in a position where I must make requests to \"localhost\" but use \"localhost.local\" to get or set the cookie.\r\n\r\n## Reproduction Steps\r\n\r\n```\r\n>>> import requests\r\n>>> ses = requests.Session()\r\n>>> ses.get('http://localhost/')\r\n<Response [200]>\r\n>>> ses.cookies\r\n<RequestsCookieJar[Cookie(version=0, name='PHPSESSID', value='ui1hr334bmcr1r85jlu8k3rq65', port=None, port_specified=False, domain='localhost.local', domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)]>\r\n>>> ses.cookies.get('PHPSESSID')\r\n'ui1hr334bmcr1r85jlu8k3rq65'\r\n>>> ses.cookies.get('PHPSESSID', domain='localhost')\r\n>>> ses.cookies.get('PHPSESSID', domain='localhost.local')\r\n'ui1hr334bmcr1r85jlu8k3rq65'\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101000af\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5388/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5388/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5348",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5348/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5348/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5348/events",
    "html_url": "https://github.com/psf/requests/issues/5348",
    "id": 566817921,
    "node_id": "MDU6SXNzdWU1NjY4MTc5MjE=",
    "number": 5348,
    "title": "Cookie with empty value crashes when wrapping jar into dict",
    "user": {
      "login": "undera",
      "id": 2026469,
      "node_id": "MDQ6VXNlcjIwMjY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2026469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/undera",
      "html_url": "https://github.com/undera",
      "followers_url": "https://api.github.com/users/undera/followers",
      "following_url": "https://api.github.com/users/undera/following{/other_user}",
      "gists_url": "https://api.github.com/users/undera/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/undera/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/undera/subscriptions",
      "organizations_url": "https://api.github.com/users/undera/orgs",
      "repos_url": "https://api.github.com/users/undera/repos",
      "events_url": "https://api.github.com/users/undera/events{/privacy}",
      "received_events_url": "https://api.github.com/users/undera/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-18T11:08:08Z",
    "updated_at": "2020-02-18T11:08:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "KeyError is raised instead of returning the single cookie, if the cookie value is empty. \r\n\r\nFrom the source code it is obvious that it will fail like that. Specifically, line https://github.com/psf/requests/blob/master/requests/cookies.py#L397 says:\r\n```python\r\n        if toReturn:\r\n            return toReturn\r\n```\r\n\r\nWhich mean empty value will be considered as invalid (RFC allows empty cookie value).\r\n\r\nThe fix is simple - make the check `if toReturn is not None`.\r\n\r\n\r\n## Expected Result\r\n\r\nExpected to get dict printed.\r\n\r\n## Actual Result\r\n\r\n`KeyError: \"name='authCke', domain=None, path=None\"` raised\r\n\r\n## Reproduction Steps\r\nBear with bootstrapping, I made it to avoid actual network code that needs to authenticate first. \r\n\r\n```python\r\nfrom http.client import HTTPMessage\r\n\r\nfrom requests import PreparedRequest\r\nfrom requests.cookies import RequestsCookieJar, MockResponse, MockRequest\r\n\r\nraw = 'authCke=; domain=.opentable.com; expires=Mon, 18-May-2020 08:38:10 GMT; path=/;SameSite=None'\r\nheaders = HTTPMessage()\r\nheaders.add_header('set-cookie', raw)\r\njar = RequestsCookieJar()\r\nresp = MockResponse(headers)\r\nreq = PreparedRequest()\r\nreq.headers = {}\r\nreq.url = 'https://opentable.com/'\r\nreq = MockRequest(req)\r\njar.extract_cookies(resp, req)\r\nprint(dict(jar))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.1.4\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-76-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010100f\",\r\n    \"version\": \"18.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.7\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5348/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5316",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5316/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5316/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5316/events",
    "html_url": "https://github.com/psf/requests/issues/5316",
    "id": 550522326,
    "node_id": "MDU6SXNzdWU1NTA1MjIzMjY=",
    "number": 5316,
    "title": "HTTPAdapter with SSLContext specified does not use SSLContext's ca_certs on Windows",
    "user": {
      "login": "matthchr",
      "id": 8798850,
      "node_id": "MDQ6VXNlcjg3OTg4NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8798850?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthchr",
      "html_url": "https://github.com/matthchr",
      "followers_url": "https://api.github.com/users/matthchr/followers",
      "following_url": "https://api.github.com/users/matthchr/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthchr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthchr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthchr/subscriptions",
      "organizations_url": "https://api.github.com/users/matthchr/orgs",
      "repos_url": "https://api.github.com/users/matthchr/repos",
      "events_url": "https://api.github.com/users/matthchr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthchr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-16T01:34:19Z",
    "updated_at": "2020-04-12T19:06:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "My objective was to get `requests` to use the Windows certificate store rather than the `certifi` bundle. **Maybe this just isn't supported.**\r\n\r\nI know there is some complexity and has been some debate about how supplying an `SSLContext` was supposed to work in `requests` (see #2118). But according to that issue, TransportAdapters (i.e. `HTTPAdapter`) is the recommended way to provide an `SSLContext`.\r\n\r\n## Expected Result\r\n\r\nThe SSL Context provided would pass its `ca_certs` along to requests and authentication with a remote endpoint would work.\r\n\r\n## Actual Result\r\n\r\nIt didn't work, instead there is a failure looking up the certificate bundle (which I've neglected to deploy alongside my application, so it's not there).\r\n\r\nThe callstack ends up here:\r\n```\r\nFile \"venv\\lib\\site-packages\\requests\\adapters.py\", line 228, in cert_verify\r\n    \"invalid path: {}\".format(cert_loc))\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport requests.adapters\r\n\r\n# adapted from https://stackoverflow.com/questions/42981429/ssl-failure-on-windows-using-python-requests/50215614\r\nclass SSLContextAdapter(requests.adapters.HTTPAdapter):\r\n    def init_poolmanager(self, *args, **kwargs):\r\n        context = ssl.create_default_context()\r\n\r\n        kwargs['ssl_context'] = context\r\n        return super(SSLContextAdapter, self).init_poolmanager(*args, **kwargs)\r\n\r\ns = requests.Session()\r\ns.mount('https://www.google.com', SSLContextAdapter())\r\nresult = s.get('https://www.google.com')\r\n```\r\n\r\nAdditionally (as a hack to emulate my enviornment), go rename `venv\\Lib\\site-packages\\certifi\\cacert.pem`\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010103f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.7\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5316/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5263",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5263/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5263/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5263/events",
    "html_url": "https://github.com/psf/requests/issues/5263",
    "id": 522980865,
    "node_id": "MDU6SXNzdWU1MjI5ODA4NjU=",
    "number": 5263,
    "title": "`connect` timeout is *not* a TCP connect timeout, but a TCP connect + send the whole HTTP request timeout",
    "user": {
      "login": "thomas-riccardi",
      "id": 1730297,
      "node_id": "MDQ6VXNlcjE3MzAyOTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1730297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thomas-riccardi",
      "html_url": "https://github.com/thomas-riccardi",
      "followers_url": "https://api.github.com/users/thomas-riccardi/followers",
      "following_url": "https://api.github.com/users/thomas-riccardi/following{/other_user}",
      "gists_url": "https://api.github.com/users/thomas-riccardi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thomas-riccardi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thomas-riccardi/subscriptions",
      "organizations_url": "https://api.github.com/users/thomas-riccardi/orgs",
      "repos_url": "https://api.github.com/users/thomas-riccardi/repos",
      "events_url": "https://api.github.com/users/thomas-riccardi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thomas-riccardi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 14,
    "created_at": "2019-11-14T16:49:25Z",
    "updated_at": "2021-03-11T10:22:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`connect` timeout is *not* a TCP connect timeout, but a TCP connect + send the whole HTTP request timeout.\r\n\r\n## Expected Result\r\n\r\nI expect that the documentation is correct about `connect` timeout:\r\nThe [advanced documentation](https://requests.readthedocs.io/en/master/user/advanced/#timeouts) says:\r\n> The connect timeout is the number of seconds Requests will wait for your client to establish a connection to a remote machine (corresponding to the connect()) call on the socket. It\u2019s a good practice to set connect timeouts to slightly larger than a multiple of 3, which is the default TCP packet retransmission window.\r\n\r\n## Actual Result\r\n\r\nThe `connect` timeout seems to be the TCP connect timeout + sending the whole HTTP request.\r\n\r\n\r\n## Reproduction Steps\r\n```bash\r\ndd if=/dev/zero of=zero.100MB bs=100M count=1\r\n```\r\n```python\r\nimport requests\r\n\r\nfiles = {'file': open('zero.100MB', 'rb')}\r\nrequests.post('somehost', timeout=(1, 1000), files=files)\r\n```\r\n\r\n(It needs a host accepting the large POST, I couldn't find any public right now...)\r\n\r\nResult:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 387, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 1106, in request\r\n    self._send_request(method, url, body, headers)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 1151, in _send_request\r\n    self.endheaders(body)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 1102, in endheaders\r\n    self._send_output(message_body)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 936, in _send_output\r\n    self.send(message_body)\r\n  File \"/usr/lib/python3.5/http/client.py\", line 908, in send\r\n    self.sock.sendall(data)\r\n  File \"/usr/lib/python3.5/ssl.py\", line 891, in sendall\r\n    v = self.send(data[count:])\r\n  File \"/usr/lib/python3.5/ssl.py\", line 861, in send\r\n    return self._sslobj.write(data)\r\n  File \"/usr/lib/python3.5/ssl.py\", line 586, in write\r\n    return self._sslobj.write(data)\r\nsocket.timeout: The write operation timed out\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.8\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-64-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.7\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n## Analysis\r\n\r\nDigging into urllib3:\r\nhttps://github.com/urllib3/urllib3/blob/37ba61a8b8120cbd866d057eaa3936f4b140dee0/src/urllib3/connectionpool.py#L370-L390\r\n\r\nIt sets the connect timeout on the connection, then validate https, then sends the full request, and only then sets the read timeout on the connection socket.\r\n\r\nThat being said I could *not* find any urllib3 doc explicitly defining the `connect` timeout as requests does...\r\n\r\nFinally:\r\nhttps://docs.python.org/3.8/library/socket.html#socket.socket.sendall\r\n> Changed in version 3.5: The socket timeout is no more reset each time data is sent successfully. The socket timeout is now the maximum total duration to send all data.\r\n\r\nSo maybe it did work as a TCP connect timeout + write idle timeout before python 3.5 (which is still not just TCP connect timeout, but closer to it), but now it is clearly not.\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5263/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5263/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5258",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5258/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5258/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5258/events",
    "html_url": "https://github.com/psf/requests/issues/5258",
    "id": 520055151,
    "node_id": "MDU6SXNzdWU1MjAwNTUxNTE=",
    "number": 5258,
    "title": "Issue with Latin Characters in URL",
    "user": {
      "login": "daltonch",
      "id": 7874711,
      "node_id": "MDQ6VXNlcjc4NzQ3MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7874711?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daltonch",
      "html_url": "https://github.com/daltonch",
      "followers_url": "https://api.github.com/users/daltonch/followers",
      "following_url": "https://api.github.com/users/daltonch/following{/other_user}",
      "gists_url": "https://api.github.com/users/daltonch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daltonch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daltonch/subscriptions",
      "organizations_url": "https://api.github.com/users/daltonch/orgs",
      "repos_url": "https://api.github.com/users/daltonch/repos",
      "events_url": "https://api.github.com/users/daltonch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daltonch/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-08T14:48:07Z",
    "updated_at": "2020-08-06T12:18:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Getting UTF-8 when attempting to get a URL with Latin characters in the URL.\r\n\r\n## Expected Result\r\n\r\n<Response [200]>\r\n\r\n## Actual Result\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/api.py\", line 60, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 668, in send\r\n    history = [resp for resp in gen] if allow_redirects else []\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 668, in <listcomp>\r\n    history = [resp for resp in gen] if allow_redirects else []\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 247, in resolve_redirects\r\n    **adapter_kwargs\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 681, in send\r\n    r._next = next(self.resolve_redirects(r, request, yield_requests=True, **kwargs))\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 149, in resolve_redirects\r\n    url = self.get_redirect_target(resp)\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/sessions.py\", line 115, in get_redirect_target\r\n    return to_native_string(location, 'utf8')\r\n  File \"/usr/local/lib/python3.7/site-packages/requests/_internal_utils.py\", line 25, in to_native_string\r\n    out = string.decode(encoding)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 64: invalid continuation byte\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nrequests.get(\"http://www.janes.com/article/92450/south-korea-launches-philippine-navy-s-second-jos\u00e9-rizal-class-frigate?from_rss=1\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"19.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5258/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5257",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5257/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5257/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5257/events",
    "html_url": "https://github.com/psf/requests/pull/5257",
    "id": 519861422,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzM4NTUxNTU1",
    "number": 5257,
    "title": "Safely handle, when uri contains IPv6 link local with %zone index ",
    "user": {
      "login": "jjlogu",
      "id": 1691611,
      "node_id": "MDQ6VXNlcjE2OTE2MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1691611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jjlogu",
      "html_url": "https://github.com/jjlogu",
      "followers_url": "https://api.github.com/users/jjlogu/followers",
      "following_url": "https://api.github.com/users/jjlogu/following{/other_user}",
      "gists_url": "https://api.github.com/users/jjlogu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jjlogu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jjlogu/subscriptions",
      "organizations_url": "https://api.github.com/users/jjlogu/orgs",
      "repos_url": "https://api.github.com/users/jjlogu/repos",
      "events_url": "https://api.github.com/users/jjlogu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jjlogu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-08T07:40:46Z",
    "updated_at": "2022-01-03T15:27:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5257",
      "html_url": "https://github.com/psf/requests/pull/5257",
      "diff_url": "https://github.com/psf/requests/pull/5257.diff",
      "patch_url": "https://github.com/psf/requests/pull/5257.patch",
      "merged_at": null
    },
    "body": "## Issue:\r\nWhen URI contains IPv6 link local with zone index (Ex: fe80::726f:8a26:222a:2bf3%eth0), requote_uri encodes all % to %25. Because of it, requests.get was requesting different resource.\r\n\r\nScreenshot: \r\n![image](https://user-images.githubusercontent.com/1691611/68458332-8b76fd80-0228-11ea-9c6f-8e439f257180.png)\r\n\r\nI'm proposing to ignore domain part in utils.unquote_unreserved.\r\n\r\n## Actual Result\r\n<pre>\r\n>>> requests.utils.requote_uri('http://[fe80::726f:8a26:222a:2bf3%eth0]:8080/a%20b/index.html')\r\n'http://[fe80::726f:8a26:222a:2bf3%25eth0]:8080/a%2520b/index.html'\r\n</pre>\r\n\r\n## Expected Result\r\n<pre>\r\n>>> requests.utils.requote_uri('http://[fe80::726f:8a26:222a:2bf3%eth0]:8080/a%20b/index.html')\r\n'http://[fe80::726f:8a26:222a:2bf3%eth0]:8080/a%20b/index.html'\r\n</pre>\r\n\r\n## System Information\r\n<pre>\r\n# python3 -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.2.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.5.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.71-UNRELEASED-v4-00050-g76f27ecf9a52\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1000207f\",\r\n    \"version\": \"18.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n</pre>",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5257/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5255",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5255/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5255/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5255/events",
    "html_url": "https://github.com/psf/requests/issues/5255",
    "id": 517568621,
    "node_id": "MDU6SXNzdWU1MTc1Njg2MjE=",
    "number": 5255,
    "title": "Allow authentication methods to set client certficates",
    "user": {
      "login": "aragilar",
      "id": 1281144,
      "node_id": "MDQ6VXNlcjEyODExNDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1281144?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aragilar",
      "html_url": "https://github.com/aragilar",
      "followers_url": "https://api.github.com/users/aragilar/followers",
      "following_url": "https://api.github.com/users/aragilar/following{/other_user}",
      "gists_url": "https://api.github.com/users/aragilar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aragilar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aragilar/subscriptions",
      "organizations_url": "https://api.github.com/users/aragilar/orgs",
      "repos_url": "https://api.github.com/users/aragilar/repos",
      "events_url": "https://api.github.com/users/aragilar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aragilar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-05T06:16:50Z",
    "updated_at": "2019-11-05T06:16:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Currently authentication methods can configure all the request options except for the `cert` option (the `verify` option also cannot be specified, but I don't a need for that). Would a PR to allow the setting of `cert` on the request object to be propagated up to send be acceptable?\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5255/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5255/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5245",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5245/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5245/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5245/events",
    "html_url": "https://github.com/psf/requests/issues/5245",
    "id": 511283605,
    "node_id": "MDU6SXNzdWU1MTEyODM2MDU=",
    "number": 5245,
    "title": "Incorrect json() docstring",
    "user": {
      "login": "alekna",
      "id": 10272121,
      "node_id": "MDQ6VXNlcjEwMjcyMTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10272121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alekna",
      "html_url": "https://github.com/alekna",
      "followers_url": "https://api.github.com/users/alekna/followers",
      "following_url": "https://api.github.com/users/alekna/following{/other_user}",
      "gists_url": "https://api.github.com/users/alekna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alekna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alekna/subscriptions",
      "organizations_url": "https://api.github.com/users/alekna/orgs",
      "repos_url": "https://api.github.com/users/alekna/repos",
      "events_url": "https://api.github.com/users/alekna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alekna/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-10-23T12:16:53Z",
    "updated_at": "2021-11-15T11:33:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "What `json()` actually does - it deserializes JSON into a Python object.\r\n\r\nSo the docstring below must be wrong:\r\nhttps://github.com/psf/requests/blob/fab1fd10d0b115e635b9ef1364f8444089725000/requests/models.py#L894-L918",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5245/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5232",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5232/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5232/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5232/events",
    "html_url": "https://github.com/psf/requests/pull/5232",
    "id": 508622251,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzI5MzgwODEy",
    "number": 5232,
    "title": "Add timeout as a default attribute for Session objects",
    "user": {
      "login": "ofek",
      "id": 9677399,
      "node_id": "MDQ6VXNlcjk2NzczOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9677399?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ofek",
      "html_url": "https://github.com/ofek",
      "followers_url": "https://api.github.com/users/ofek/followers",
      "following_url": "https://api.github.com/users/ofek/following{/other_user}",
      "gists_url": "https://api.github.com/users/ofek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ofek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ofek/subscriptions",
      "organizations_url": "https://api.github.com/users/ofek/orgs",
      "repos_url": "https://api.github.com/users/ofek/repos",
      "events_url": "https://api.github.com/users/ofek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ofek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-17T17:37:10Z",
    "updated_at": "2022-01-03T15:28:12Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5232",
      "html_url": "https://github.com/psf/requests/pull/5232",
      "diff_url": "https://github.com/psf/requests/pull/5232.diff",
      "patch_url": "https://github.com/psf/requests/pull/5232.patch",
      "merged_at": null
    },
    "body": "We encountered a bug today wherein we mistakenly assumed it was already supported as an attribute like all the other kwargs, https://github.com/DataDog/integrations-core/pull/4811",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5232/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5232/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5224",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5224/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5224/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5224/events",
    "html_url": "https://github.com/psf/requests/issues/5224",
    "id": 504608266,
    "node_id": "MDU6SXNzdWU1MDQ2MDgyNjY=",
    "number": 5224,
    "title": "utf-8 chars in name of file in post requests",
    "user": {
      "login": "FrostNecro",
      "id": 15328872,
      "node_id": "MDQ6VXNlcjE1MzI4ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15328872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrostNecro",
      "html_url": "https://github.com/FrostNecro",
      "followers_url": "https://api.github.com/users/FrostNecro/followers",
      "following_url": "https://api.github.com/users/FrostNecro/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrostNecro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrostNecro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrostNecro/subscriptions",
      "organizations_url": "https://api.github.com/users/FrostNecro/orgs",
      "repos_url": "https://api.github.com/users/FrostNecro/repos",
      "events_url": "https://api.github.com/users/FrostNecro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrostNecro/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-09T12:07:41Z",
    "updated_at": "2019-10-09T12:08:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I have some code like this:\r\n``` python\r\nfiles = {\"file\": (\"some utf-8 chars like '\u2116'\", open(\"file.jpg\", \"rb\"), \"image/jpeg\")}\r\nr = requests.post(\"localhost\", files=files)\r\n```\r\n\r\nand I receive broken jpg file (actually, 2x size of original)\r\n\r\n\r\n## Expected Result\r\n\r\nI expect to receive file.jpg\r\n\r\n## Actual Result\r\n\r\nBut requests send to me broken file.\r\n\r\n## System Information\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010103f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000211f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.2\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5224/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5221",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5221/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5221/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5221/events",
    "html_url": "https://github.com/psf/requests/pull/5221",
    "id": 501663168,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzIzODkyOTY0",
    "number": 5221,
    "title": "Change raise_for_status message to hide password in URL",
    "user": {
      "login": "Overv",
      "id": 285063,
      "node_id": "MDQ6VXNlcjI4NTA2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/285063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Overv",
      "html_url": "https://github.com/Overv",
      "followers_url": "https://api.github.com/users/Overv/followers",
      "following_url": "https://api.github.com/users/Overv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Overv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Overv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Overv/subscriptions",
      "organizations_url": "https://api.github.com/users/Overv/orgs",
      "repos_url": "https://api.github.com/users/Overv/repos",
      "events_url": "https://api.github.com/users/Overv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Overv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-10-02T18:49:19Z",
    "updated_at": "2022-09-28T16:03:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5221",
      "html_url": "https://github.com/psf/requests/pull/5221",
      "diff_url": "https://github.com/psf/requests/pull/5221.diff",
      "patch_url": "https://github.com/psf/requests/pull/5221.patch",
      "merged_at": null
    },
    "body": "This PR fixes #5021 by replacing a password in the URL with asterisks.\r\n\r\nExample:\r\n\r\n```python\r\nimport requests\r\n\r\nr = requests.get(\"http://foo:secret@httpbin.org/status/401\")\r\nr.raise_for_status()\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"5021.py\", line 4, in <module>\r\n    r.raise_for_status()\r\n  File \"***/python-requests/requests/requests/models.py\", line 968, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 401 Client Error: UNAUTHORIZED for url: http://foo:***@httpbin.org/status/401\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5221/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5221/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5220",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5220/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5220/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5220/events",
    "html_url": "https://github.com/psf/requests/pull/5220",
    "id": 501644975,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzIzODc4MDE3",
    "number": 5220,
    "title": "Fix connection pool managers not taking varying TLS parameters into account",
    "user": {
      "login": "Overv",
      "id": 285063,
      "node_id": "MDQ6VXNlcjI4NTA2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/285063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Overv",
      "html_url": "https://github.com/Overv",
      "followers_url": "https://api.github.com/users/Overv/followers",
      "following_url": "https://api.github.com/users/Overv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Overv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Overv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Overv/subscriptions",
      "organizations_url": "https://api.github.com/users/Overv/orgs",
      "repos_url": "https://api.github.com/users/Overv/repos",
      "events_url": "https://api.github.com/users/Overv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Overv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-02T18:12:03Z",
    "updated_at": "2022-01-03T15:28:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5220",
      "html_url": "https://github.com/psf/requests/pull/5220",
      "diff_url": "https://github.com/psf/requests/pull/5220.diff",
      "patch_url": "https://github.com/psf/requests/pull/5220.patch",
      "merged_at": null
    },
    "body": "This PR fixes #5140 and #4325 by returning different connection and proxy pools based on the connection parameters for the current request.\r\n\r\nI tested it with the following code:\r\n\r\n```python\r\nimport requests\r\n\r\nsession = requests.Session()\r\n\r\nprint(session.get('https://client.badssl.com/'))\r\nprint(session.get('https://client.badssl.com/', cert=('client.crt', 'client.key')))\r\nprint(session.get('https://client.badssl.com/', cert=('client.crt', 'client.key')))\r\nprint(session.get('https://client.badssl.com/'))\r\nprint(session.get('https://client.badssl.com/'))\r\n```\r\n\r\nWhich correctly outputs:\r\n\r\n```\r\n<Response [400]>\r\n<Response [200]>\r\n<Response [200]>\r\n<Response [400]>\r\n<Response [400]>\r\n```\r\n\r\nInstead of the previous output:\r\n\r\n```\r\n<Response [400]>\r\n<Response [400]>\r\n<Response [400]>\r\n<Response [400]>\r\n<Response [400]>\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5220/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5217",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5217/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5217/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5217/events",
    "html_url": "https://github.com/psf/requests/issues/5217",
    "id": 501092513,
    "node_id": "MDU6SXNzdWU1MDEwOTI1MTM=",
    "number": 5217,
    "title": "Requests does not preserve supplied CookiePolicy or CookieJar",
    "user": {
      "login": "jandersen-plaid",
      "id": 52045989,
      "node_id": "MDQ6VXNlcjUyMDQ1OTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/52045989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jandersen-plaid",
      "html_url": "https://github.com/jandersen-plaid",
      "followers_url": "https://api.github.com/users/jandersen-plaid/followers",
      "following_url": "https://api.github.com/users/jandersen-plaid/following{/other_user}",
      "gists_url": "https://api.github.com/users/jandersen-plaid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jandersen-plaid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jandersen-plaid/subscriptions",
      "organizations_url": "https://api.github.com/users/jandersen-plaid/orgs",
      "repos_url": "https://api.github.com/users/jandersen-plaid/repos",
      "events_url": "https://api.github.com/users/jandersen-plaid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jandersen-plaid/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-01T19:14:46Z",
    "updated_at": "2019-10-01T19:14:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Recently, I have run into some niche issues with cookies where servers are sending cookies that they themselves do not accept. An example is in https://github.com/psf/requests/issues/4592 or where a `'Set-Cookie'` header has a value that contains ASCII control codes -- `r'[\\x01-\\x1F\\x7F]'`. I fully accept that it is not within the scope of `requests` to validate cookies (nor should it be), which is why I have come to a solution of creating a new `CookiePolicy` which will refuse to set cookies that are similar to the previous `'Set-Cookie'` example.\r\n\r\nUnfortunately, in using the new policy with the default `Session` class it appears that the policy is not preserved while making requests. In investigating further, it looks like `requests` just overrides whatever `CookieJar` or `CookiePolicy` is set by the user to be `RequestsCookieJar` instead of preserving the supplied `CookieJar`.\r\n\r\nSince this is heavily reliant on what the server sends, I tried to supply as complete and self-contained of an example as possible below (which requires a quickly spun-up server), but let me know if the issue needs further explanation.\r\n\r\nAdditionally, I would be more than happy to submit a PR that supplies a fix and adequate tests if needed (though after validation that this is not intended behavior, of course).\r\n\r\n## Expected Result\r\n\r\nI expect for the cookie policy to be preserved while making requests within a session or requests at all. That is, there should be no `AssertionError`s or printed statements in the below example.\r\n\r\n## Actual Result\r\n\r\n```\r\nFailed to preserve cookie policy with set_policy\r\nFailed to preserve cookie policy with RequestsCookieJar\r\nFailed to preserve cookie policy with NewCookieJar\r\n```\r\n\r\n## Reproduction Steps\r\n\r\nSpin up a local server that sends a weird cookie\r\n```python\r\n\r\nfrom flask import Flask, redirect, make_response, request, url_for\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/plain_req')\r\ndef plain_req():\r\n    resp = make_response('Single response')\r\n    resp.headers['Set-Cookie'] = \"bad_cookie=\\x01; path=/; HttpOnly\"\r\n    return resp\r\n\r\n@app.route('/redirect_1')\r\ndef redirect_1():\r\n    return redirect(url_for('redirect_2'), code=302)\r\n\r\n@app.route('/redirect_2')\r\ndef redirect_2():\r\n    resp = make_response(redirect(url_for('redirect_3'), code=302))\r\n    resp.headers['Set-Cookie'] = \"bad_cookie=\\x01; path=/; HttpOnly\"\r\n    return resp\r\n\r\n@app.route('/redirect_3')\r\ndef redirect_3():\r\n    if '\\x01' in request.cookies.get('bad_cookie'):\r\n        resp = make_response('Client Error: Bad cookies recieved', 401)\r\n    else:\r\n        resp = make_response('It all worked, yay!', 200)\r\n    return resp\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(host='0.0.0.0', port=8000)\r\n```\r\n\r\nTest for the cookie (will raise AssertionError in either the context manager or\r\n```python\r\nimport requests\r\nfrom requests.cookies import RequestsCookieJar\r\nfrom http.cookiejar import DefaultCookiePolicy, CookieJar\r\n\r\nclass NewCookiePolicy(DefaultCookiePolicy):\r\n\r\n    def set_ok(self, cookie, request):\r\n        valid = super(NewCookiePolicy, self).set_ok(cookie, request)\r\n        if '\\x01' in cookie.value:\r\n            return False\r\n        return valid\r\n\r\ndef test_session(session):\r\n    # A plain request does not work\r\n    req = session.get('http://127.0.0.1:8000/plain_req')\r\n    assert '\\x01' not in req.cookies.items()[0][1]  # cookie still around\r\n    assert isinstance(req.cookies._policy, NewCookiePolicy)  # Policy not preserved\r\n\r\n    # Requests with multiple redirects do not\r\n    req = session.get('http://127.0.0.1:8000/redirect_1')\r\n    assert '\\x01' not in req.history[1].cookies.items()[0][1]  # cookie still around\r\n    assert isinstance(req.history[1].cookies._policy, NewCookiePolicy)  # Policy not preserved\r\n\r\n    # Comment out the above assertion to try the context manager\r\n    with requests.Session() as s:\r\n        s.cookies.set_policy(NewCookiePolicy())\r\n        context_req = s.get('http://127.0.0.1:8000/redirect_1')\r\n        assert '\\x01' not in req.history[1].cookies.items()[0][1]  # cookie still around\r\n        assert isinstance(context_req.history[0].cookies._policy, NewCookiePolicy)  # Policy not preserved\r\n\r\npolicy_session = requests.Session()\r\npolicy_session.cookies.set_policy(NewCookiePolicy())\r\ntry:\r\n    test_session(policy_session)\r\nexcept AssertionError:\r\n    print(\"Failed to preserve cookie policy with set_policy\")\r\n\r\nreq_jar_session = requests.Session()\r\nreq_jar_session.cookies = RequestsCookieJar(policy=NewCookiePolicy())\r\ntry:\r\n    test_session(req_jar_session)\r\nexcept AssertionError:\r\n    print(\"Failed to preserve cookie policy with RequestsCookieJar\")\r\n\r\nNewCookieJar = CookieJar(policy=NewCookiePolicy())\r\n\r\nnew_jar_session = requests.Session()\r\nnew_jar_session.cookies = NewCookieJar\r\ntry:\r\n    test_session(new_jar_session)\r\nexcept AssertionError:\r\n    print(\"Failed to preserve cookie policy with NewCookieJar\")\r\n```\r\n\r\n## System Information\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000213f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.4\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5217/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5202",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5202/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5202/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5202/events",
    "html_url": "https://github.com/psf/requests/issues/5202",
    "id": 495858434,
    "node_id": "MDU6SXNzdWU0OTU4NTg0MzQ=",
    "number": 5202,
    "title": "Multipart post of image does not get the same result in requests as in Insomnia/Postman",
    "user": {
      "login": "ClerkCunt",
      "id": 28776681,
      "node_id": "MDQ6VXNlcjI4Nzc2Njgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/28776681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ClerkCunt",
      "html_url": "https://github.com/ClerkCunt",
      "followers_url": "https://api.github.com/users/ClerkCunt/followers",
      "following_url": "https://api.github.com/users/ClerkCunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/ClerkCunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ClerkCunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ClerkCunt/subscriptions",
      "organizations_url": "https://api.github.com/users/ClerkCunt/orgs",
      "repos_url": "https://api.github.com/users/ClerkCunt/repos",
      "events_url": "https://api.github.com/users/ClerkCunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ClerkCunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-19T15:02:49Z",
    "updated_at": "2020-04-07T23:23:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I am trying to upload a .jpg file to a server using HTTP POST with the requests library in Python 3.7.\r\n\r\nTarget URL has some PHP code that handles the upload, taking 'fileToUpload' as the multipart variable.\r\n\r\nI tried putting the request into a **with-statemen**t for opening the file, changing the **data=files to files=files** (as recommended by some example code), or setting the **headers** to multipart/form-data specifically. \r\n\r\n```python\r\nimport requests\r\n\r\nurl = 'http://someurl.com/upload/dir/post.php'\r\nfiles = {'fileToUpload' : open('image.jpg', 'rb')}\r\nr = requests.post(url, data=files)\r\n```\r\nIf I run the script I raise every single error message in the post.php file, while if I take the thing to Insomnia or Postman the upload works just fine, so the server-side seems to be working.\r\n\r\nAfter all it seems that the problem is with opening the file, but I tried to stick to the [documentation ](https://2.python-requests.org/en/master/user/quickstart/#post-a-multipart-encoded-file)and still can't figure out what is wrong here. \r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5202/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5196",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5196/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5196/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5196/events",
    "html_url": "https://github.com/psf/requests/issues/5196",
    "id": 494624604,
    "node_id": "MDU6SXNzdWU0OTQ2MjQ2MDQ=",
    "number": 5196,
    "title": "Host header is propagated on allow_redirects",
    "user": {
      "login": "stitch",
      "id": 333846,
      "node_id": "MDQ6VXNlcjMzMzg0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/333846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stitch",
      "html_url": "https://github.com/stitch",
      "followers_url": "https://api.github.com/users/stitch/followers",
      "following_url": "https://api.github.com/users/stitch/following{/other_user}",
      "gists_url": "https://api.github.com/users/stitch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stitch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stitch/subscriptions",
      "organizations_url": "https://api.github.com/users/stitch/orgs",
      "repos_url": "https://api.github.com/users/stitch/repos",
      "events_url": "https://api.github.com/users/stitch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stitch/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-09-17T13:28:37Z",
    "updated_at": "2019-10-01T19:37:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## Summary: \r\n\r\nWe use a combination of explicit IP addresses and Host header to contact a website explicitly via IPv4 and IPv6. The Host header is propagated in every redirect, which causes problems, as the Host header and the address will not match the visited address anymore. This might cause an infinite redirect loop if a server tries to correct the host with a redirect.\r\n\r\n## Example:\r\n```python\r\nrequests.get('http://40.101.81.152:80', allow_redirects=True, headers={'Host': 'autodiscover.drimmelen.nl', 'random_header': \"test\"})\r\n```\r\nIf you debug this request, you'll see that both the random_header and Host are sent with every request. See code below...\r\n\r\n## Expected Result\r\nFrom the support request i've seen that requests does not explicitly allows navigation between IPv6 or IPv4. This is too bad, but that is not the problem here.\r\n\r\nIn this case the problem is that the Host header is not overwritten after a redirect. We'd expect the IP(v4 or v6) address be used in the redirect, with the Host url received. If that's not possible, we'd expect the Host be overwritten with the location we're at now, completely ignoring the concept of IPv4 or IPv6 (and just going the default route of underlying network settings).\r\n\r\n## Actual Result\r\nAfter 30 redirect, the Host was still set to the value specified. This creates a mismatch between the requested address (translated from the url) and the actual url.\r\n\r\nThe following headers where observed:\r\n...ccept: */*\\r\\nConnection: keep-alive\\r\\nHost: autodiscover.drimmelen.nl\\r\\nrandom_header: test\\r\\nCookie: ClientId=3127...\r\n\r\nWhich means the random_header was progragated correctly... and also the Host header. Propagating the Host header after a redirect is obviously wrong and can cause all kinds of misunderstanding.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nrequests.get('http://40.101.81.152:80', allow_redirects=True, headers={'Host': 'autodiscover.drimmelen.nl', 'random_header': \"test\"})\r\n```\r\n\r\nThe code responsible seems to be here:\r\nhttps://github.com/psf/requests/blob/3e7d0a873f838e0001f7ac69b1987147128a7b5f/requests/sessions.py#L149\r\n\r\nThis code blindly copies all kwargs, except a few chosen ones such as content-length (of course). We think Host should be one of the things changed as well to prevent the address and url mismatch on redirects.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.6.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010102f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020ff\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5196/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5194",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5194/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5194/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5194/events",
    "html_url": "https://github.com/psf/requests/issues/5194",
    "id": 493850293,
    "node_id": "MDU6SXNzdWU0OTM4NTAyOTM=",
    "number": 5194,
    "title": "json.dumps() fails for CookieJar deserialization after serialization",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-16T05:14:12Z",
    "updated_at": "2019-10-03T12:59:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Summary.\r\n\r\n## Expected Result\r\n\r\nSeamless serialization/deserialization to and from dictionary consisting of name:value pairs.\r\n\r\n## Actual Result\r\n\r\nSerialization succeeds but the object it returns is not a serialized dictionary. If one then tries to deserialize this resulting object using `json.loads(serialized_obj)` it would return an exception.\r\nSince, deserialization requires a proper serialized dictionary, it fails there and then.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport json\r\n\r\nserialized_cookie_dict = \"\"\r\nresponse = requests.get('example') \r\nserialized_cookie_dict = json.dumps(response.cookies)\r\nprint(serialized_cookie_dict)     #--- Notice the resulting object is nothing like a dictionary\r\ndeserialized_cookie_dict = requests.cookies.cookiejar_from_dict(json.loads(serialized_cookie_dict))     #--- Error!\r\n\r\n```\r\n\r\n## System Information\r\nThis is irrelevant for the concerned bug.\r\nTested on Python version 3.6\r\n\r\n## Possible Solution/Workaround\r\n\r\n```python\r\nimport requests\r\nimport json\r\n\r\nserialized_cookie_dict = \"\"\r\nresponse = requests.get('example') \r\nserialized_cookie_dict = json.dumps(dict(response.cookies))\r\nprint(serialized_cookie_dict)     #--- Correctly serialized CookieJar\r\ndeserialized_cookie_dict = requests.cookies.cookiejar_from_dict(json.loads(serialized_cookie_dict))     #--- Successful!\r\n\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5194/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5194/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5185",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5185/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5185/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5185/events",
    "html_url": "https://github.com/psf/requests/issues/5185",
    "id": 488930661,
    "node_id": "MDU6SXNzdWU0ODg5MzA2NjE=",
    "number": 5185,
    "title": "confusing error for bad timeout value",
    "user": {
      "login": "bennn",
      "id": 1731829,
      "node_id": "MDQ6VXNlcjE3MzE4Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1731829?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bennn",
      "html_url": "https://github.com/bennn",
      "followers_url": "https://api.github.com/users/bennn/followers",
      "following_url": "https://api.github.com/users/bennn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bennn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bennn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bennn/subscriptions",
      "organizations_url": "https://api.github.com/users/bennn/orgs",
      "repos_url": "https://api.github.com/users/bennn/repos",
      "events_url": "https://api.github.com/users/bennn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bennn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-04T04:16:48Z",
    "updated_at": "2019-09-04T04:16:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Calling `requests.get(...., timeout=X)` with a bad value for `X` causes `urllib3` to throw an exception.\r\n\r\nIf `X` is a tuple, then `requests` raises its own exception too (good!).\r\n\r\nIf not, then `requests` doesn't say that it got a bad timeout value.\r\n\r\n#5017 suggested a fix, but was closed \r\n\r\n## Expected Result\r\n\r\nThese two lines should both raise an exception in `requests`:\r\n```\r\nget(\"https://random.org\", timeout=(True, True))\r\nget(\"https://random.org\", timeout=True) \r\n```\r\n\r\n## Actual Result\r\n\r\nThe first line outputs:\r\n```\r\nTraceback (most recent call last):\r\n  File \"..../requests/adapters.py\", line 425, in send\r\n    timeout = TimeoutSauce(connect=connect, read=read)\r\n  File \"..../urllib3/util/timeout.py\", line 94, in __init__\r\n    self._connect = self._validate_timeout(connect, 'connect')\r\n  File \"..../urllib3/util/timeout.py\", line 121, in _validate_timeout\r\n    raise ValueError(\"Timeout cannot be a boolean value. It must \"\r\nValueError: Timeout cannot be a boolean value. It must be an int, float or None.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 3, in <module>\r\n    get(\"https://random.org\", timeout=(True, True))\r\n  File \"..../requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"..../requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"..../requests/sessions.py\", line 537, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"..../requests/sessions.py\", line 650, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"..../requests/adapters.py\", line 431, in send\r\n    raise ValueError(err)\r\nValueError: Invalid timeout (True, True). Pass a (connect, read) timeout tuple, or a single float to set both timeouts to the same value\r\n```\r\n\r\nThe second outputs:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 3, in <module>\r\n    get(\"https://random.org\", timeout=True)\r\n  File \"..../requests/api.py\", line 76, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"..../requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"..../requests/sessions.py\", line 537, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"..../requests/sessions.py\", line 650, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"..../requests/adapters.py\", line 435, in send\r\n    timeout = TimeoutSauce(connect=timeout, read=timeout)\r\n  File \"..../urllib3/util/timeout.py\", line 94, in __init__\r\n    self._connect = self._validate_timeout(connect, 'connect')\r\n  File \"..../urllib3/util/timeout.py\", line 121, in _validate_timeout\r\n    raise ValueError(\"Timeout cannot be a boolean value. It must \"\r\nValueError: Timeout cannot be a boolean value. It must be an int, float or None.\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nget(\"https://random.org\", timeout=True) \r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"1.3.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.5.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"15.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1000208f\",\r\n    \"version\": \"16.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5185/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5184",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5184/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5184/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5184/events",
    "html_url": "https://github.com/psf/requests/issues/5184",
    "id": 488819667,
    "node_id": "MDU6SXNzdWU0ODg4MTk2Njc=",
    "number": 5184,
    "title": "different header handling",
    "user": {
      "login": "obelix05",
      "id": 14077066,
      "node_id": "MDQ6VXNlcjE0MDc3MDY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14077066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obelix05",
      "html_url": "https://github.com/obelix05",
      "followers_url": "https://api.github.com/users/obelix05/followers",
      "following_url": "https://api.github.com/users/obelix05/following{/other_user}",
      "gists_url": "https://api.github.com/users/obelix05/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obelix05/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obelix05/subscriptions",
      "organizations_url": "https://api.github.com/users/obelix05/orgs",
      "repos_url": "https://api.github.com/users/obelix05/repos",
      "events_url": "https://api.github.com/users/obelix05/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obelix05/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-03T20:57:53Z",
    "updated_at": "2019-09-03T21:02:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "There is a difference between the `requests.Request.prepare()` call and the `requests.Session().send()` call. I would like to explain a little:\r\nWhen a `requests.Session()` is initialized, different `default_headers` are set ('Accept-Encoding', 'Accept' and 'Connection'). Such a session is also initialized by `requests.get()`. Then the `custom_headers` are merged with the `default_headers`. For the query of my URL it is important that 'Accept' and 'Connection' are set. However, calling `Request.prepare()` does not set these `default_headers` and calling `requests.Session().send()` overwrites any values already set (including the `default_headers`).\r\n\r\n## Expected Result\r\n\r\n`requests.Session()` and `requests.get()` have the same headers\r\n\r\n## Actual Result\r\n\r\nThe default_headers are overwritten by `requests.Session().send()`\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nresource = 'https://www.accuweather.com/en/de/hamburg/20095/biking-weather/178556'\r\nmethod = 'GET'\r\nheaders = {\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\r\n    }\r\nverify_ssl = True\r\ntimeout = 10\r\n\r\n# this works fine\r\nresponse = requests.get(resource, headers=headers, timeout=timeout)\r\n\r\n# that causes an requests.exceptions.ReadTimeout\r\nrequest = requests.Request(method, resource, headers=headers, auth=None, data=None).prepare()\r\nwith requests.Session() as sess:\r\n    response = sess.send(request, timeout=timeout, verify=verify_ssl)\r\n\r\n# now this works fine again\r\nheaders = {\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\r\n    'Accept': '*/*',\r\n    'Connection': 'keep-alive',\r\n    }\r\n\r\nrequest = requests.Request(method, resource, headers=headers, auth=None, data=None).prepare()\r\nwith requests.Session() as sess:\r\n    response = sess.send(request, timeout=timeout, verify=verify_ssl)\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.0.0-27-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010102f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5184/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5180",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5180/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5180/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5180/events",
    "html_url": "https://github.com/psf/requests/issues/5180",
    "id": 487366546,
    "node_id": "MDU6SXNzdWU0ODczNjY1NDY=",
    "number": 5180,
    "title": "Warning if run single test case using setup.py test",
    "user": {
      "login": "magus0219",
      "id": 5009485,
      "node_id": "MDQ6VXNlcjUwMDk0ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5009485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/magus0219",
      "html_url": "https://github.com/magus0219",
      "followers_url": "https://api.github.com/users/magus0219/followers",
      "following_url": "https://api.github.com/users/magus0219/following{/other_user}",
      "gists_url": "https://api.github.com/users/magus0219/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/magus0219/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/magus0219/subscriptions",
      "organizations_url": "https://api.github.com/users/magus0219/orgs",
      "repos_url": "https://api.github.com/users/magus0219/repos",
      "events_url": "https://api.github.com/users/magus0219/events{/privacy}",
      "received_events_url": "https://api.github.com/users/magus0219/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-30T08:50:48Z",
    "updated_at": "2019-08-30T09:46:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I want to run single test case by running \r\n`pipenv run python setup.py test -a tests/test_requests.py::TestRequests::test_invalid_url` \r\n\r\n\r\n## Expected Result\r\n\r\nCan see result of single test case  \r\n\r\n## Actual Result\r\nif pytest=5.1:\r\n```\r\nrunning test\r\nrunning egg_info\r\nwriting requests.egg-info/PKG-INFO\r\nwriting dependency_links to requests.egg-info/dependency_links.txt\r\nwriting requirements to requests.egg-info/requires.txt\r\nwriting top-level names to requests.egg-info/top_level.txt\r\nreading manifest file 'requests.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwarning: no files found matching 'NOTICE'\r\nwarning: no files found matching 'requirements.txt'\r\nwriting manifest file 'requests.egg-info/SOURCES.txt'\r\nrunning build_ext\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 111, in <module>\r\n    'Source': 'https://github.com/kennethreitz/requests',\r\n  File \"/Users/magus0219/Documents/PycharmProjects/requests/venv/lib/python3.7/site-packages/setuptools-40.8.0-py3.7.egg/setuptools/__init__.py\", line 145, in setup\r\n  File \"/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/core.py\", line 148, in setup\r\n    dist.run_commands()\r\n  File \"/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/dist.py\", line 966, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/dist.py\", line 985, in run_command\r\n    cmd_obj.run()\r\n  File \"/Users/magus0219/Documents/PycharmProjects/requests/venv/lib/python3.7/site-packages/setuptools-40.8.0-py3.7.egg/setuptools/command/test.py\", line 228, in run\r\n  File \"setup.py\", line 33, in run_tests\r\n    errno = pytest.main(self.pytest_args)\r\n  File \"/Users/magus0219/Documents/PycharmProjects/requests/venv/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 58, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/Users/magus0219/Documents/PycharmProjects/requests/venv/lib/python3.7/site-packages/_pytest/config/__init__.py\", line 192, in _prepareconfig\r\n    raise TypeError(msg.format(args, type(args)))\r\nTypeError: `args` parameter expected to be a list or tuple of strings, got: 'tests/test_requests.py::TestRequests::test_invalid_url' (type: <class 'str'>)\r\n```\r\n\r\nif pytest==3.10 in Pipfile.lock\r\n```\r\n====================================================================================================== warnings summary ======================================================================================================\r\n/Users/magus0219/.local/share/virtualenvs/requests-573Zkhn_/lib/python3.7/site-packages/_pytest/config/__init__.py:194\r\n  /Users/magus0219/.local/share/virtualenvs/requests-573Zkhn_/lib/python3.7/site-packages/_pytest/config/__init__.py:194: RemovedInPytest4Warning: passing a string to pytest.main() is deprecated, pass a list of arguments instead.\r\n    _issue_config_warning(warning, config=config)\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```sh\r\npipenv run python setup.py test -a tests/test_requests.py::TestRequests::test_invalid_url\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000213f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.2\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5180/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5179",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5179/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5179/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5179/events",
    "html_url": "https://github.com/psf/requests/pull/5179",
    "id": 486283008,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzExNzY3MDE5",
    "number": 5179,
    "title": "HTTPDigestAuth thread fix",
    "user": {
      "login": "epenet",
      "id": 6771947,
      "node_id": "MDQ6VXNlcjY3NzE5NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6771947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epenet",
      "html_url": "https://github.com/epenet",
      "followers_url": "https://api.github.com/users/epenet/followers",
      "following_url": "https://api.github.com/users/epenet/following{/other_user}",
      "gists_url": "https://api.github.com/users/epenet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epenet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epenet/subscriptions",
      "organizations_url": "https://api.github.com/users/epenet/orgs",
      "repos_url": "https://api.github.com/users/epenet/repos",
      "events_url": "https://api.github.com/users/epenet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epenet/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-28T10:08:56Z",
    "updated_at": "2022-01-03T15:29:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5179",
      "html_url": "https://github.com/psf/requests/pull/5179",
      "diff_url": "https://github.com/psf/requests/pull/5179.diff",
      "patch_url": "https://github.com/psf/requests/pull/5179.patch",
      "merged_at": null
    },
    "body": "Ensure thread-state is initialised on handle_401\r\nRefs #5178",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5179/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5178",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5178/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5178/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5178/events",
    "html_url": "https://github.com/psf/requests/issues/5178",
    "id": 485992682,
    "node_id": "MDU6SXNzdWU0ODU5OTI2ODI=",
    "number": 5178,
    "title": "HTTPDigestAuth fails from secondary thread",
    "user": {
      "login": "epenet",
      "id": 6771947,
      "node_id": "MDQ6VXNlcjY3NzE5NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6771947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epenet",
      "html_url": "https://github.com/epenet",
      "followers_url": "https://api.github.com/users/epenet/followers",
      "following_url": "https://api.github.com/users/epenet/following{/other_user}",
      "gists_url": "https://api.github.com/users/epenet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epenet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epenet/subscriptions",
      "organizations_url": "https://api.github.com/users/epenet/orgs",
      "repos_url": "https://api.github.com/users/epenet/repos",
      "events_url": "https://api.github.com/users/epenet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epenet/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-27T19:30:30Z",
    "updated_at": "2019-08-27T19:30:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi,\r\n\r\nI am looking into this [Home Assistant issue 13524](https://github.com/home-assistant/home-assistant/issues/13524) where a request is prepared once at startup (on an initialisation thread), and then updated at regular interval from a thread pool. This is working fine with HTTPBasicAuth, but failing with HTTPDigestAuth.\r\n\r\nIs this a bug? or is this by design? If it is by design, can you help me find a workaround for Home Assistant?\r\n\r\n## Expected Result\r\n```\r\n{\r\n  \"authenticated\": true,\r\n  \"user\": \"user\"\r\n}\r\n```\r\n\r\n## Actual Result\r\n```\r\nTraceback (most recent call last):\r\n  File \".../python3.7/threading.py\", line 926, in _bootstrap_inner\r\n    self.run()\r\n  File \".../python3.7/threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"test.py\", line 8, in do_update\r\n    request\r\n  File \".../python3.7/site-packages/requests/sessions.py\", line 653, in send\r\n    r = dispatch_hook('response', hooks, r, **kwargs)\r\n  File \".../python3.7/site-packages/requests/hooks.py\", line 31, in dispatch_hook\r\n    _hook_data = hook(hook_data, **kwargs)\r\n  File \".../python3.7/site-packages/requests/auth.py\", line 247, in handle_401\r\n    if self._thread_local.pos is not None:\r\nAttributeError: '_thread._local' object has no attribute 'pos'\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport threading\r\n\r\ndef do_update(name, request):\r\n    print(\"do_update %s: starting\", name)\r\n    with requests.Session() as sess:\r\n        response = sess.send(\r\n            request\r\n        )\r\n    print(response.text)\r\n    print(\"do_update %s: finishing\", name)\r\n    \r\nmethod = 'GET'\r\nresource = 'http://httpbin.org/digest-auth/auth/user/passwd'\r\nauth = requests.auth.HTTPDigestAuth('user', 'passwd')\r\nrequest = requests.Request(\r\n    method, resource, auth=auth\r\n).prepare()\r\n\r\n#Works on main thread\r\ndo_update(\"main thread\", request)\r\n\r\n#Doesn't work on secondary thread\r\nx = threading.Thread(target=do_update, args=(\"other thread\",request,))\r\nx.start()\r\nx.join()\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.4\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.57+\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101000bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5178/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5177",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5177/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5177/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5177/events",
    "html_url": "https://github.com/psf/requests/issues/5177",
    "id": 485962234,
    "node_id": "MDU6SXNzdWU0ODU5NjIyMzQ=",
    "number": 5177,
    "title": "Set \"Content-Disposition\" header in `file` multipart failed",
    "user": {
      "login": "WK-GiHu",
      "id": 22146250,
      "node_id": "MDQ6VXNlcjIyMTQ2MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22146250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WK-GiHu",
      "html_url": "https://github.com/WK-GiHu",
      "followers_url": "https://api.github.com/users/WK-GiHu/followers",
      "following_url": "https://api.github.com/users/WK-GiHu/following{/other_user}",
      "gists_url": "https://api.github.com/users/WK-GiHu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WK-GiHu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WK-GiHu/subscriptions",
      "organizations_url": "https://api.github.com/users/WK-GiHu/orgs",
      "repos_url": "https://api.github.com/users/WK-GiHu/repos",
      "events_url": "https://api.github.com/users/WK-GiHu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WK-GiHu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-08-27T18:23:09Z",
    "updated_at": "2022-12-05T14:42:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Summary.\r\n\r\n- Source: [requests/models.py](https://github.com/psf/requests/blob/428f7a275914f60a8f1e76a7d69516d617433d30/requests/models.py)\r\n\r\n```\r\n    class RequestEncodingMixin(object):\r\n        ...\r\n        def _encode_files(files, data):\r\n            ...\r\n            rf = RequestField(name=k, data=fdata, filename=fn, headers=fh)\r\n            rf.make_multipart(content_type=ft)\r\n\r\n```\r\nVariable `fh` holdes the 4th tuple item passed from\r\n\r\n```\r\n    files = {'settings': (filename, io.BytesIO(b'some,data,to,send\\nanother,row,to,send\\n'),\r\n             'app/xml', {'Content-Disposition':'attachment'} )}\r\n\r\n```\r\nThe `rf.header dict` get set passing `headers=fh` with `'Content-Disposition':....`\r\nCalling `rf.make_multipart(content_type=ft)`, at the next line, only passing the 3trd tuple item.\r\n\r\nThe method [`make_multipart` - urllib3/fields.py](https://github.com/urllib3/urllib3/blob/ae7f8bbb57e74ffdb327c5e510963a886fa4ed8b/src/urllib3/fields.py) is defined as\r\n\r\n```\r\n    def make_multipart(\r\n        self, content_disposition=None, content_type=None, content_location=None\r\n    ):\r\n        self.headers[\"Content-Disposition\"] = content_disposition or u\"form-data\"\r\n        ...\r\n\r\n```\r\nwhich replaces, as `content_disposition` is `None`, the allready set `self.headers[\"Content-Disposition\"]` with the default `u\"form-data\"`.\r\n\r\n## Expected Result\r\n```\r\n--e96a4935b8d5b2355f1da3070faa4b28\r\nContent-Disposition: attachment; name=\"settings\"; filename=\"settings.xml\"\r\nContent-Type: app/xml\r\n\r\nsome,data,to,send\r\nanother,row,to,send\r\n\r\n--e96a4935b8d5b2355f1da3070faa4b28--\r\n\r\n```\r\n\r\n## Actual Result\r\n```\r\n--e96a4935b8d5b2355f1da3070faa4b28\r\nContent-Disposition: form-data; name=\"settings\"; filename=\"settings.xml\"\r\nContent-Type: app/xml\r\n\r\nsome,data,to,send\r\nanother,row,to,send\r\n\r\n--e96a4935b8d5b2355f1da3070faa4b28--\r\n\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nurl = 'http://127.0.0.1:8080'\r\nfilename = \"settings.xml\"\r\n\r\nfiles = {'settings': (filename, io.BytesIO(b'some,data,to,send\\nanother,row,to,send\\n'),\r\n         'app/xml', {'Content-Disposition':'attachment'} )}\r\n\r\nr = requests.post(url, files=files)\r\n\r\n```\r\n\r\n## System Information\r\n\r\nTested with Python: 3.5 - urllib3: 1.23 - requests: 2.19.1\r\n\r\n## Possible Solution\r\n\r\nPass **all** three parameter explicit to `.make_multipart(...`, e.g.\r\n\r\n      rf.make_multipart(content_disposition=fh.get('Content-Disposition'), \r\n                        content_type=ft, \r\n                        content_location=fh.get('Content-Location')\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5177/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5172",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5172/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5172/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5172/events",
    "html_url": "https://github.com/psf/requests/pull/5172",
    "id": 483683996,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzA5NzE0MTUx",
    "number": 5172,
    "title": "Fix Issue of Ignoring Session-level Settings",
    "user": {
      "login": "AndTheDaysGoBy",
      "id": 11529426,
      "node_id": "MDQ6VXNlcjExNTI5NDI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11529426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndTheDaysGoBy",
      "html_url": "https://github.com/AndTheDaysGoBy",
      "followers_url": "https://api.github.com/users/AndTheDaysGoBy/followers",
      "following_url": "https://api.github.com/users/AndTheDaysGoBy/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndTheDaysGoBy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndTheDaysGoBy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndTheDaysGoBy/subscriptions",
      "organizations_url": "https://api.github.com/users/AndTheDaysGoBy/orgs",
      "repos_url": "https://api.github.com/users/AndTheDaysGoBy/repos",
      "events_url": "https://api.github.com/users/AndTheDaysGoBy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndTheDaysGoBy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-08-21T22:36:53Z",
    "updated_at": "2022-01-03T15:29:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/5172",
      "html_url": "https://github.com/psf/requests/pull/5172",
      "diff_url": "https://github.com/psf/requests/pull/5172.diff",
      "patch_url": "https://github.com/psf/requests/pull/5172.patch",
      "merged_at": null
    },
    "body": "A re-write of https://github.com/psf/requests/pull/4935\r\nAddresses: https://github.com/psf/requests/issues/4938\r\nand perhaps others.\r\n\r\nIn short, there are three types of values: the instance values (e.g. those passed in via the `get(...)`, `request(...)`, etc.), the session values (e.g. those set for the session such as `s.verify = \"/some/cert\"`), and system or environment level values (e.g. the environment variable for the CA_BUNDLE that, at times, becomes the value for the verify flag).\r\n\r\nWorking with @sorech02, we determined that the best course of action was to just move the session level merging before the environment merging. I.e., the current flow is as follows: one of the simple request calls is made, e.g. `request`, `get`, `delete`, etc., then, the `merge_environment_settings` method is called wherein environment values are merged in (e.g. the CA_BUNDLE value) and then the session level settings are merged in via the `merge_settings` calls in `merge_environment_settings`.\r\n\r\nThis is too late because, by default, trust_env is set to True, which will result in the `verify` value passed into the session merging to not be none. One solution is to make sure you set trust_env to False before using the verify flag with a custom certificate, but we deemed this to only be a work around.\r\n\r\nThe true fix, as described above, is to ensure that the settings which are constructed give the proper precedence to the values given. I.e. passed > session > environment.\r\nWe were forced to leave the `setdefaults` (which effectively reapply the session values if there are no values set) in the `def send` alone because, at times, one might use `send` itself when constructing prepared requests (i.e. not via `request`, `get`, etc.). In which  case, the function must still ensure to use the session level settings.",
    "closed_by": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5172/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5162",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5162/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5162/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5162/events",
    "html_url": "https://github.com/psf/requests/issues/5162",
    "id": 480694119,
    "node_id": "MDU6SXNzdWU0ODA2OTQxMTk=",
    "number": 5162,
    "title": "requests.ConnectionError inherits only from OSError",
    "user": {
      "login": "Q-back",
      "id": 25378062,
      "node_id": "MDQ6VXNlcjI1Mzc4MDYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/25378062?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Q-back",
      "html_url": "https://github.com/Q-back",
      "followers_url": "https://api.github.com/users/Q-back/followers",
      "following_url": "https://api.github.com/users/Q-back/following{/other_user}",
      "gists_url": "https://api.github.com/users/Q-back/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Q-back/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Q-back/subscriptions",
      "organizations_url": "https://api.github.com/users/Q-back/orgs",
      "repos_url": "https://api.github.com/users/Q-back/repos",
      "events_url": "https://api.github.com/users/Q-back/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Q-back/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-14T13:56:16Z",
    "updated_at": "2019-08-14T13:56:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`requests.ConnectionError` doesn't inherit from ConnectionError from std, which is confusing.\r\n\r\n## Expected Result\r\n\r\n```\r\n(Pdb++) inspect.getmro(ConnectionError)\r\n(<class 'requests.exceptions.ConnectionError'>, <class 'requests.exceptions.RequestException'>, <class 'ConnectionError'>, <class 'OSError'>, <class 'Exception'>, <class 'BaseException'>, <class 'object'>)\r\n```\r\n\r\n## Actual Result\r\n\r\n```\r\n(Pdb++) inspect.getmro(ConnectionError)\r\n(<class 'requests.exceptions.ConnectionError'>, <class 'requests.exceptions.RequestException'>, <class 'OSError'>, <class 'Exception'>, <class 'BaseException'>, <class 'object'>)\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\ninspect.getmro(requests.ConnectionError)\r\nissubclass(requests.ConnectionError, ConnectionError)\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.2.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5162/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5162/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5153",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5153/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5153/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5153/events",
    "html_url": "https://github.com/psf/requests/issues/5153",
    "id": 476422332,
    "node_id": "MDU6SXNzdWU0NzY0MjIzMzI=",
    "number": 5153,
    "title": "Add headers to connect when using proxies?",
    "user": {
      "login": "qwerty32123",
      "id": 45830421,
      "node_id": "MDQ6VXNlcjQ1ODMwNDIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/45830421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwerty32123",
      "html_url": "https://github.com/qwerty32123",
      "followers_url": "https://api.github.com/users/qwerty32123/followers",
      "following_url": "https://api.github.com/users/qwerty32123/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwerty32123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwerty32123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwerty32123/subscriptions",
      "organizations_url": "https://api.github.com/users/qwerty32123/orgs",
      "repos_url": "https://api.github.com/users/qwerty32123/repos",
      "events_url": "https://api.github.com/users/qwerty32123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwerty32123/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-08-03T06:40:09Z",
    "updated_at": "2019-08-22T14:06:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Its possible with requests to add headers to connect? I need to add 2 headers\r\nHost and proxy connection. But default connection when using proxy is witouth 2 those so i need to know if its in some way possible to add them. \r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5153/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5153/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5140",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5140/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5140/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5140/events",
    "html_url": "https://github.com/psf/requests/issues/5140",
    "id": 469878823,
    "node_id": "MDU6SXNzdWU0Njk4Nzg4MjM=",
    "number": 5140,
    "title": "Client Side Certs with session",
    "user": {
      "login": "CMLL",
      "id": 3720126,
      "node_id": "MDQ6VXNlcjM3MjAxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3720126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CMLL",
      "html_url": "https://github.com/CMLL",
      "followers_url": "https://api.github.com/users/CMLL/followers",
      "following_url": "https://api.github.com/users/CMLL/following{/other_user}",
      "gists_url": "https://api.github.com/users/CMLL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CMLL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CMLL/subscriptions",
      "organizations_url": "https://api.github.com/users/CMLL/orgs",
      "repos_url": "https://api.github.com/users/CMLL/repos",
      "events_url": "https://api.github.com/users/CMLL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CMLL/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-07-18T16:51:09Z",
    "updated_at": "2019-10-01T20:23:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Summary.\r\n\r\nTrying to get client side certificates to work with session but I'm seeing a difference between the results when making the call with a session and the helper get method.\r\n\r\n## Expected Result\r\nCalling get with a Session returns the same result as calling `requests.get`.\r\n\r\n## Actual Result\r\nRequest fails as if the certificate was not passed.\r\n\r\n## Reproduction Steps\r\n\r\n![Screen Shot 2019-07-18 at 11 42 00 AM](https://user-images.githubusercontent.com/3720126/61476222-271af000-a952-11e9-9cd6-aaad69a45b94.png)\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n(panopta_env) \u279c  ~ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"2.7.16\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.6.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.22.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.25.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5140/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5136",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5136/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5136/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5136/events",
    "html_url": "https://github.com/psf/requests/issues/5136",
    "id": 466210052,
    "node_id": "MDU6SXNzdWU0NjYyMTAwNTI=",
    "number": 5136,
    "title": "Blocking POST request during nested exceptions raising",
    "user": {
      "login": "jdemaria",
      "id": 10978115,
      "node_id": "MDQ6VXNlcjEwOTc4MTE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10978115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdemaria",
      "html_url": "https://github.com/jdemaria",
      "followers_url": "https://api.github.com/users/jdemaria/followers",
      "following_url": "https://api.github.com/users/jdemaria/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdemaria/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdemaria/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdemaria/subscriptions",
      "organizations_url": "https://api.github.com/users/jdemaria/orgs",
      "repos_url": "https://api.github.com/users/jdemaria/repos",
      "events_url": "https://api.github.com/users/jdemaria/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdemaria/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-07-10T09:45:30Z",
    "updated_at": "2019-07-23T12:59:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "My script seems (infinitely, more than 12 hours) blocked in a POST request. When I kill it, I get all the nested exceptions below and my feeling it that there is something wrong inside Python requests, do you confirm the problem?\r\nNote that I think I can use GET instead POST but I don't know if it will block too (I'm not sure if POST or GET is more logical for my case).\r\n\r\nThanks in advance!\r\n\r\n## Expected Result\r\n\r\nRequests should raise an exception instead of infinitely block.\r\n\r\n## Actual Result\r\nThe POST infinitely block and I get these exceptions after killing the script:\r\n```\r\n2019-07-09 19:05:03,546 [ERROR] Unexpected error when searching new products\r\n\r\nTraceback (most recent call last):\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connection.py\", line 159, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/util/connection.py\", line 80, in create_connection\r\n    raise err\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/util/connection.py\", line 70, in create_connection\r\n    sock.connect(sa)\r\nOSError: [Errno 101] Network is unreachable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 600, in urlopen\r\n    chunked=chunked)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 343, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 839, in _validate_conn\r\n    conn.connect()\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connection.py\", line 301, in connect\r\n    conn = self._new_conn()\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connection.py\", line 168, in _new_conn\r\n    self, \"Failed to establish a new connection: %s\" % e)\r\nurllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x7f34e5df2cc0>: Failed to establish a new connection: [Errno 101] Network is unreachable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/adapters.py\", line 449, in send\r\n    timeout=timeout\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 638, in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/urllib3/util/retry.py\", line 398, in increment\r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='oceandata.sci.gsfc.nasa.gov', port=443): Max retries exceeded with url: /api/file_search (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f34e5df2cc0>: Failed to establish a new connection: [Errno 101] Network is unreachable'))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_download.py\", line 38, in download_products\r\n    checksums_file)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_download.py\", line 104, in search_new_products\r\n    cur_df = nasa_oc_file_search.search(post_data, split_by_month=True)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_file_search.py\", line 28, in search\r\n    return split_search(post_data)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_file_search.py\", line 77, in split_search\r\n    cur_df = simple_search(post_data)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_file_search.py\", line 35, in simple_search\r\n    data=post_data)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/throttle.py\", line 26, in wrapper\r\n    return fn(*args, **kwargs)\r\n  File \"/mount/internal/work-st/apps/download_scripts/nasa-oc-download/nasa_oc_file_search.py\", line 49, in nasa_oc_url_request\r\n    response = requests.request(method, url, data=data)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/api.py\", line 60, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/mount/internal/work-st/apps/download_scripts/miniconda3/lib/python3.7/site-packages/requests/adapters.py\", line 516, in send\r\n    raise ConnectionError(e, request=request)\r\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='oceandata.sci.gsfc.nasa.gov', port=443): Max retries exceeded with url: /api/file_search (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f34e5df2cc0>: Failed to establish a new connection: [Errno 101] Network is unreachable'))\r\n```\r\n\r\n## Reproduction Steps\r\nNot easily reproducible because this happens when the target URL does not respond, but the code is like that (I can give an exemple of <post_data> if needed):\r\n```python\r\nimport requests\r\n\r\ntry:\r\n    response = requests.request('POST', 'https://oceandata.sci.gsfc.nasa.gov/api/file_search', data=<post_data>)\r\n    response.raise_for_status()\r\nexcept:\r\n    logging.exception('Unexpected error when searching new products')\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.6.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"3.16.0-30-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010102f\",\r\n    \"version\": \"19.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010102f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5136/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5136/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5131",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5131/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5131/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5131/events",
    "html_url": "https://github.com/psf/requests/issues/5131",
    "id": 463974765,
    "node_id": "MDU6SXNzdWU0NjM5NzQ3NjU=",
    "number": 5131,
    "title": "requests.utils function accepts invalid ip/cidr input",
    "user": {
      "login": "disconnect3d",
      "id": 10009354,
      "node_id": "MDQ6VXNlcjEwMDA5MzU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/10009354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/disconnect3d",
      "html_url": "https://github.com/disconnect3d",
      "followers_url": "https://api.github.com/users/disconnect3d/followers",
      "following_url": "https://api.github.com/users/disconnect3d/following{/other_user}",
      "gists_url": "https://api.github.com/users/disconnect3d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/disconnect3d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/disconnect3d/subscriptions",
      "organizations_url": "https://api.github.com/users/disconnect3d/orgs",
      "repos_url": "https://api.github.com/users/disconnect3d/repos",
      "events_url": "https://api.github.com/users/disconnect3d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/disconnect3d/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-07-03T22:11:14Z",
    "updated_at": "2024-03-28T01:43:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "TLDR: On some libc implementations (e.g. glibc) the `socket.inet_aton` function parses IP strings trailed with whitespace and garbage, and this function is used by requests utility functions which if used externally, may cause bugs or/and security vulnerabilities.\r\n\r\nAn example of the issue can be seen below:\r\n![image](https://user-images.githubusercontent.com/10009354/60627678-1f563a00-9def-11e9-88d3-3d37397164e5.png)\r\n\r\nI have written a more detailed description of the `socket.inet_aton`'s underlying problem on [Python's bugtracker issue 37495](https://bugs.python.org/issue37495). It is yet to be decided if this is going to be fixed in Python.\r\n\r\n## Expected Result\r\n\r\nThe `requests.utils` functions `address_in_network`, `is_ipv4_address` and `is_valid_cidr` should fail with invalid input.\r\n\r\n## Actual Result\r\n\r\nIncorrect IP strings do not return an error and instead return as if the trailing garbage did not exist in the IP string.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nprint(requests.utils.address_in_network('1.1.1.1 wtf', '1.1.1.1/24'))\r\nprint(requests.utils.is_ipv4_address('1.1.1.1 disconnect3d was here...'))\r\nprint(requests.utils.is_valid_cidr('1.1.1.1 obviously not but yes/24'))\r\n```\r\n\r\n## System Information\r\n\r\nThe issue is related to libc implementation and has been tested on glibc 2.27 and 2.29.\r\n\r\nIt also occurs on MacOS which I am not sure if it is based on glibc.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5131/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5131/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5130",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5130/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5130/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5130/events",
    "html_url": "https://github.com/psf/requests/issues/5130",
    "id": 463771555,
    "node_id": "MDU6SXNzdWU0NjM3NzE1NTU=",
    "number": 5130,
    "title": "proxies argument option: handles bytes literals in dict differently from other argument options",
    "user": {
      "login": "Sekin",
      "id": 8715697,
      "node_id": "MDQ6VXNlcjg3MTU2OTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8715697?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sekin",
      "html_url": "https://github.com/Sekin",
      "followers_url": "https://api.github.com/users/Sekin/followers",
      "following_url": "https://api.github.com/users/Sekin/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sekin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sekin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sekin/subscriptions",
      "organizations_url": "https://api.github.com/users/Sekin/orgs",
      "repos_url": "https://api.github.com/users/Sekin/repos",
      "events_url": "https://api.github.com/users/Sekin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sekin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-07-03T14:02:34Z",
    "updated_at": "2020-06-29T15:46:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "```python\r\nhttps_proxy = b'http://localhost:8080'\r\nhttp_proxy = b'http://localhost:8080'\r\nproxy_dict = {b'https' : https_proxy, b'http' : http_proxy}\r\n\r\nr = requests.request(url, proxies=proxy_dict, verify=False)\r\n```\r\n## Expected Result\r\n\r\nThe *proxies argument option* accepts bytes literals as arguments, and proxies are being used.\r\n\r\n## Actual Result\r\n\r\nThe *proxies argument option* accepts bytes literals as arguments, but seems to disregard them internally: Proxies have no effect. However, no exception is raised either.\r\n\r\n## Problem\r\n\r\nThe *proxies argument option* handles bytes literals differently compared to the other argument options, e.g.. *parameters* or *data*. The *proxies argument option* only works with ```str```:\r\n```python\r\nhttps_proxy = 'http://localhost:8080'\r\nhttp_proxy = 'http://localhost:8080'\r\nproxy_dict = {'https' : https_proxy, 'http' : http_proxy}\r\n```\r\nExceptions are ignored. Using bytes literals does not raise an exception.\r\n\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5130/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5116",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5116/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5116/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5116/events",
    "html_url": "https://github.com/psf/requests/issues/5116",
    "id": 453975653,
    "node_id": "MDU6SXNzdWU0NTM5NzU2NTM=",
    "number": 5116,
    "title": "cookies.get behavior",
    "user": {
      "login": "bkdotcom",
      "id": 2137404,
      "node_id": "MDQ6VXNlcjIxMzc0MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2137404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bkdotcom",
      "html_url": "https://github.com/bkdotcom",
      "followers_url": "https://api.github.com/users/bkdotcom/followers",
      "following_url": "https://api.github.com/users/bkdotcom/following{/other_user}",
      "gists_url": "https://api.github.com/users/bkdotcom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bkdotcom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bkdotcom/subscriptions",
      "organizations_url": "https://api.github.com/users/bkdotcom/orgs",
      "repos_url": "https://api.github.com/users/bkdotcom/repos",
      "events_url": "https://api.github.com/users/bkdotcom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bkdotcom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-06-10T02:45:09Z",
    "updated_at": "2022-10-11T17:05:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Pardon me... I'm not proficient in python...  This library appears to be the de-facto reference for http clients in other programming languages as well..  \r\nit seems like many http get clients return raw cookie values. and require raw cookie names... because...   that's what this library does\r\n\r\nThe subtitle for this project is \"http for humans\"....   \r\nThis human isn't interested in the transport-layer encoding..  I want the human value\r\n\r\nWith all that said...  why :\r\n\r\n----\r\n\r\n## Expected Result\r\nI would expect `response.cookies.get()` to \r\na) expect a decoded name as a parameter and \r\nb) return a decoded (human) value\r\n\r\n## Actual Result\r\nEncoded value returned\r\nif name was encoded for http transport...   I must pass encoded name to get value\r\n\r\nresponse headers:\r\n```\r\nSet-Cookie: dingus=foo%3Bbar; path=/\r\nSet-Cookie: a%3Bb=foo%3Bbar; path=/\r\n```\r\n\r\n```python\r\n[nav] In [1]: import requests                                                                                                     \r\n\r\n[ins] In [2]: r = requests.get('http://localhost/cookietest')                                                                          \r\n\r\n[ins] In [3]: r.cookies.get('dingus')                                                                                             \r\nOut[3]: 'foo%3Bbar'\r\n\r\n[ins] In [4]: r.cookies.get('a;b')                                                                                                \r\n\r\n[ins] In [5]: r.cookies.get('a%3Bb')                                                                                              \r\nOut[5]: 'foo%3Bbar'\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5116/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5103",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5103/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5103/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5103/events",
    "html_url": "https://github.com/psf/requests/issues/5103",
    "id": 449473763,
    "node_id": "MDU6SXNzdWU0NDk0NzM3NjM=",
    "number": 5103,
    "title": "Client certificates AND self-signed",
    "user": {
      "login": "Rourke101",
      "id": 20154036,
      "node_id": "MDQ6VXNlcjIwMTU0MDM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/20154036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rourke101",
      "html_url": "https://github.com/Rourke101",
      "followers_url": "https://api.github.com/users/Rourke101/followers",
      "following_url": "https://api.github.com/users/Rourke101/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rourke101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rourke101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rourke101/subscriptions",
      "organizations_url": "https://api.github.com/users/Rourke101/orgs",
      "repos_url": "https://api.github.com/users/Rourke101/repos",
      "events_url": "https://api.github.com/users/Rourke101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rourke101/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-05-28T20:56:51Z",
    "updated_at": "2019-05-28T20:56:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I have read many posts about the issues separately, and the only ones that work are the ones setting the verification as \"False\".\r\n\r\nIs it possible to use both verify and cert?\r\n\r\nThis raises error\r\n\r\n    session.verify = 'server.pem'\r\n    session.cert = ('public.pem', 'private.pem')\r\nCaused by SSLError(SSLError(\"bad handshake: Error([('SSL routines', 'ssl3_read_bytes', 'sslv3 alert certificate unknown')])\")))\r\n\r\nWhereas this works:\r\n\r\n    session.verify = False\r\n    session.cert = ('public.pem', 'private.pem')\r\nAnd this works:\r\n\r\n    session.verify = 'server.pem'\r\n    #session.cert = ('public.pem', 'private.pem')\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5103/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5103/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5095",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5095/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5095/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5095/events",
    "html_url": "https://github.com/psf/requests/issues/5095",
    "id": 445060555,
    "node_id": "MDU6SXNzdWU0NDUwNjA1NTU=",
    "number": 5095,
    "title": "windows proxy settings taken only partly",
    "user": {
      "login": "elschman",
      "id": 32643724,
      "node_id": "MDQ6VXNlcjMyNjQzNzI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/32643724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elschman",
      "html_url": "https://github.com/elschman",
      "followers_url": "https://api.github.com/users/elschman/followers",
      "following_url": "https://api.github.com/users/elschman/following{/other_user}",
      "gists_url": "https://api.github.com/users/elschman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elschman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elschman/subscriptions",
      "organizations_url": "https://api.github.com/users/elschman/orgs",
      "repos_url": "https://api.github.com/users/elschman/repos",
      "events_url": "https://api.github.com/users/elschman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elschman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-05-16T16:52:46Z",
    "updated_at": "2019-05-16T16:52:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": " do run python 2.7/3.7 on a windows 7 host.\r\nThis host is AD managed. As part of the group policy the internet settings are set to automatically proxy configuration with an wpad.dat file at the AD server.\r\nThe configuration works. cos IE and Chrome can reach external and internal hosts. Some of the internal are excluded from proxy via no proxy rules inside the dat file.\r\n\r\nBut on python with requests im not able to reach the internal addresses which are excluded via the proxy file rules. Python always tries to get the data from the proxy.\r\n\r\nThe only solution was an extra environmental variable NO_PROXY with the ips not to be reached via the proxy.\r\n\r\nThese excluded IPs are common IPs and not private ! (90.0.0.0/8) is part of the wpad.dat exclusion\r\n\r\n## Expected Result\r\neither no proxy or all proxy settings should taken into account.\r\n\r\n## Actual Result\r\nevery requests traffic is placed on the proxy\r\nurllib3 works as expected\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nimport urllib3\r\nhttp1 = urllib3.PoolManager()\r\nr1 = http.request('GET', 'http://90.0.11.253:43001/')\r\nr1.status \r\n\r\nr2 = requests.get('http://90.0.11.253:43001/')\r\nr2.status_code\r\n\r\nr1==r2 must be true but isnt\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\nC:\\Users\\iwetzel\\AppData\\Local\\Programs\\Python\\Python37-32>python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"7\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010009f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.3\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5095/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5084",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5084/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5084/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5084/events",
    "html_url": "https://github.com/psf/requests/issues/5084",
    "id": 442846687,
    "node_id": "MDU6SXNzdWU0NDI4NDY2ODc=",
    "number": 5084,
    "title": "replace `get_encoding_from_headers` default with `None`",
    "user": {
      "login": "jvanasco",
      "id": 204779,
      "node_id": "MDQ6VXNlcjIwNDc3OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/204779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jvanasco",
      "html_url": "https://github.com/jvanasco",
      "followers_url": "https://api.github.com/users/jvanasco/followers",
      "following_url": "https://api.github.com/users/jvanasco/following{/other_user}",
      "gists_url": "https://api.github.com/users/jvanasco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jvanasco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jvanasco/subscriptions",
      "organizations_url": "https://api.github.com/users/jvanasco/orgs",
      "repos_url": "https://api.github.com/users/jvanasco/repos",
      "events_url": "https://api.github.com/users/jvanasco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jvanasco/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-05-10T18:39:29Z",
    "updated_at": "2024-07-01T09:28:08Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This issue a suggestion for handling partial elements of issues #1737 and #2086 (#1774 and others too).  I'm bringing this up in a separate ticket because it is a specific fix for multiple tickets and I am willing to write a PR for it in requests3 and requests2.  (i would have just gone and generated a PR, but I can't figure out what the actual master for requests3 actually is)\r\n\r\nmy proposal is to do the following (some of which have already been discussed as possibilities):\r\n\r\nalter `get_encoding_from_headers()`\r\n---\r\nreplace the default value of `get_encoding_from_headers` with `None` when \"text\" is in the content_type header.  currently this is \"ISO-8859-1\"\r\n\r\nhttps://github.com/kennethreitz/requests/blob/c501ec986daa4961cd9dee370b5d45ff2e524b37/requests/utils.py#L492-L493\r\n\r\nadd `Response.detected_encoding` attribute\r\n---\r\nextend `build_response` and `Response` to additionally stash the header decoding in `response.detected_encoding`.  this will allow the detected value to remain on the response object if `response.encoding` is changed by the consumer.\r\n\r\nadd `Response.text_encoding` property\r\n---\r\nadd a `text_encoding` property to `Response` , which offloads some of the logic now in `text`, and will return \"ISO-8859-1\" \r\n\r\nhttps://github.com/kennethreitz/requests/blob/c501ec986daa4961cd9dee370b5d45ff2e524b37/requests/models.py#L835-L858\r\n\r\n\r\nalter `Response.text` to use the new `.text_encoding` attribute\r\n---\r\nupdate the `text` property to use the new `.text_encoding` attribute. this just ties together all the above.\r\n\r\nGoals\r\n---\r\n\r\nThe goal of these changes is to positively identify situations where no response encoding was declared by the server.  The backwards incompatibility is that `None` will now be returned when inspecting `response.encoding` when there is no encoding for the response - however the effective encoding used to generate `.text` will be available in `response.text_encoding` .   \r\n\r\nThis still maintains compliance with RFC 2616, because `.text` will still interpret the lack of a declared encoding as having the required default charset of `ISO-8859-1`.  This simply allows developers to know when `ISO-8859-1` is being used in a default or explicit manner.\r\n\r\nThis approach doesn't address all aspects of those issues or close those tickets, but it offers a solution to many of the needs and concerns with some minor changes.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5084/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5084/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5058",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5058/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5058/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5058/events",
    "html_url": "https://github.com/psf/requests/issues/5058",
    "id": 434029127,
    "node_id": "MDU6SXNzdWU0MzQwMjkxMjc=",
    "number": 5058,
    "title": "Nested dict data get silently ignored in POST request",
    "user": {
      "login": "martimlobao",
      "id": 6430786,
      "node_id": "MDQ6VXNlcjY0MzA3ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6430786?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martimlobao",
      "html_url": "https://github.com/martimlobao",
      "followers_url": "https://api.github.com/users/martimlobao/followers",
      "following_url": "https://api.github.com/users/martimlobao/following{/other_user}",
      "gists_url": "https://api.github.com/users/martimlobao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martimlobao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martimlobao/subscriptions",
      "organizations_url": "https://api.github.com/users/martimlobao/orgs",
      "repos_url": "https://api.github.com/users/martimlobao/repos",
      "events_url": "https://api.github.com/users/martimlobao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martimlobao/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-04-16T23:35:42Z",
    "updated_at": "2020-12-26T19:21:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I just spent the last several hours trying to figure out why I was able to successfully send an API POST request through `curl` but not through requests.\r\n\r\nAfter much searching on SO, I finally figured out the solution, but I'm still confused why this should be a problem at all. Furthermore, it's very strange that requests does such a good job of simplifying HTTP requests but then reveals intricacies that an end user likely won't know how to deal with.\r\n\r\nIt turns out that `requests.post()` already has a `json` argument which handles non-trivial data dictionaries, but I don't understand why a user should need to know when to use `json` instead of `data`. To a simple user like me (and others: #2885), `data` simply takes a dictionary and parses it into a request. Using `json` in some cases but not others adds confusion and is not obvious at all. I also don't understand why I wouldn't want to *always* use `json` instead of `data`.\r\n\r\nAt the very least, if there's a strong reason why it makes sense to have both `data` and `json` arguments, a warning should be raised in these cases telling the user that they might not be sending what they think they're sending.\r\n\r\n## Expected Result\r\n\r\nHere's an example request of what I was sending through `curl`:\r\n\r\n```bash\r\n$ curl -X POST 'https://httpbin.org/post' -H 'Content-Type: application/json' -d '{\"first\": [{\"second\": {\"third\": \"data\"}}]}'\r\n\r\n{\r\n  \"args\": {}, \r\n  \"data\": \"{\\\"first\\\": [{\\\"second\\\": {\\\"third\\\": \\\"data\\\"}}]}\", \r\n  \"files\": {}, \r\n  \"form\": {}, \r\n  \"headers\": {\r\n    \"Accept\": \"*/*\", \r\n    \"Content-Length\": \"42\", \r\n    \"Content-Type\": \"application/json\", \r\n    \"Host\": \"httpbin.org\", \r\n    \"User-Agent\": \"curl/7.54.0\"\r\n  }, \r\n  \"json\": {\r\n    \"first\": [\r\n      {\r\n        \"second\": {\r\n          \"third\": \"data\"\r\n        }\r\n      }\r\n    ]\r\n  }, \r\n  \"origin\": \"123.56.7.890, 123.56.7.890\", \r\n  \"url\": \"https://httpbin.org/post\"\r\n}\r\n```\r\n\r\nSending (what I thought was) an equivalent request through requests always returned an invalid json error:\r\n\r\n```python\r\nimport requests\r\n\r\nheaders = {\"Content-Type\": \"application/json\"}\r\n\r\ndata = {\r\n    \"first\": [\r\n        {\r\n            \"second\": {\r\n                \"third\": \"data\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nr = requests.post(\"https://httpbin.org/post\", headers=headers, data=data)\r\n\r\nprint(r.json())\r\n```\r\n\r\nI expected the entire `data` dictionary to be sent in the request. However, when looking at the response from httpbin, it becomes clear that all the data from the second level is missing.\r\n\r\n## Actual Result\r\n\r\nThis is the response from httpbin, with almost all of the sent data missing:\r\n\r\n```bash\r\n{'args': {},\r\n 'data': 'first=second',\r\n 'files': {},\r\n 'form': {},\r\n 'headers': {'Accept': '*/*',\r\n             'Accept-Encoding': 'gzip, deflate',\r\n             'Content-Length': '12',\r\n             'Content-Type': 'application/json',\r\n             'Host': 'httpbin.org',\r\n             'User-Agent': 'python-requests/2.19.1'},\r\n 'json': None,\r\n 'origin': '123.56.7.890, 123.56.7.890',\r\n 'url': 'https://httpbin.org/post'}\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nheaders = {\"Content-Type\": \"application/json\"}\r\n\r\ndata = {\r\n    \"first\": [\r\n        {\r\n            \"second\": {\r\n                \"third\": \"data\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nr = requests.post(\"https://httpbin.org/post\", headers=headers, data=data)\r\n\r\nprint(r.json())\r\n```\r\n\r\nChanging the request fixes the issue, but the solution is (to me) non-obvious:\r\n```python\r\nr = requests.post(\"https://httpbin.org/post\", headers=headers, json=data)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.5.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000212f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5058/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5058/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5037",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5037/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5037/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5037/events",
    "html_url": "https://github.com/psf/requests/issues/5037",
    "id": 426347341,
    "node_id": "MDU6SXNzdWU0MjYzNDczNDE=",
    "number": 5037,
    "title": "Add request event hook",
    "user": {
      "login": "navyad",
      "id": 1172317,
      "node_id": "MDQ6VXNlcjExNzIzMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/navyad",
      "html_url": "https://github.com/navyad",
      "followers_url": "https://api.github.com/users/navyad/followers",
      "following_url": "https://api.github.com/users/navyad/following{/other_user}",
      "gists_url": "https://api.github.com/users/navyad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/navyad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/navyad/subscriptions",
      "organizations_url": "https://api.github.com/users/navyad/orgs",
      "repos_url": "https://api.github.com/users/navyad/repos",
      "events_url": "https://api.github.com/users/navyad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/navyad/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-03-28T07:53:56Z",
    "updated_at": "2021-08-28T11:50:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "There was a scenario where I need to intercept the request and was searching for if there is some way can that be done, then I found the event hook but only `response` event hook is supported.\r\nI hope adding `request` hook can be useful, if yes I would like to implement that.\r\n\r\n\r\nAny pointers or suggestion appreciated.\r\n\r\nThanks\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5037/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5037/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5031",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5031/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5031/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5031/events",
    "html_url": "https://github.com/psf/requests/issues/5031",
    "id": 425199662,
    "node_id": "MDU6SXNzdWU0MjUxOTk2NjI=",
    "number": 5031,
    "title": "rfc6266 for parsing content-disposition header",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-26T02:40:09Z",
    "updated_at": "2019-03-26T02:40:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "There is a package `rfc6266` on PyPi that does this, but it breaks on PY37 because it and its dependency `lepl` are apparently unmaintained.  If I figure out how to re-implement it, would a PR be welcomed?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5031/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5024",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5024/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5024/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5024/events",
    "html_url": "https://github.com/psf/requests/issues/5024",
    "id": 422092368,
    "node_id": "MDU6SXNzdWU0MjIwOTIzNjg=",
    "number": 5024,
    "title": "The reason that uploading file larger than 2GB will be truncated.",
    "user": {
      "login": "kmiku7",
      "id": 3275006,
      "node_id": "MDQ6VXNlcjMyNzUwMDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3275006?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kmiku7",
      "html_url": "https://github.com/kmiku7",
      "followers_url": "https://api.github.com/users/kmiku7/followers",
      "following_url": "https://api.github.com/users/kmiku7/following{/other_user}",
      "gists_url": "https://api.github.com/users/kmiku7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kmiku7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kmiku7/subscriptions",
      "organizations_url": "https://api.github.com/users/kmiku7/orgs",
      "repos_url": "https://api.github.com/users/kmiku7/repos",
      "events_url": "https://api.github.com/users/kmiku7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kmiku7/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-18T08:31:24Z",
    "updated_at": "2019-03-18T08:44:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When I upload multipart-encoded file larger than 2GB in python2 environment, the body will be truncated. Server side can not read data completely. But the content-length value in header is expected. At client side, it do not send all data.\r\n\r\nAfter tracing of function calls, it is caused by python2 socket library bug. Requests will use socket.sendall() to send body, but it use int type to keep bytes need be sent and has sent: [python2-socket-lib](https://github.com/python/cpython/blob/2.7/Modules/socketmodule.c#L2850). I also create a [issue](https://bugs.python.org/issue36337) to report this bug to python team.\r\n\r\nRather than waiting python team fix it, I thought Requests can fix quickly. After search it has also been reported many times.\r\nRequests lib can split encoded string body into many segments each one smaller than 2GB, and send segments one by one. Or wrapping string body as as file-like object is also works, like this:\r\n```python\r\nfrom cStringIO import StringIO\r\nbody=StringIO(request.body)\r\n```\r\n\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5024/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5021",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5021/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5021/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5021/events",
    "html_url": "https://github.com/psf/requests/issues/5021",
    "id": 420973695,
    "node_id": "MDU6SXNzdWU0MjA5NzM2OTU=",
    "number": 5021,
    "title": "raise_for_status leaks HTTP basic auth",
    "user": {
      "login": "calve",
      "id": 4311079,
      "node_id": "MDQ6VXNlcjQzMTEwNzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4311079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/calve",
      "html_url": "https://github.com/calve",
      "followers_url": "https://api.github.com/users/calve/followers",
      "following_url": "https://api.github.com/users/calve/following{/other_user}",
      "gists_url": "https://api.github.com/users/calve/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/calve/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/calve/subscriptions",
      "organizations_url": "https://api.github.com/users/calve/orgs",
      "repos_url": "https://api.github.com/users/calve/repos",
      "events_url": "https://api.github.com/users/calve/events{/privacy}",
      "received_events_url": "https://api.github.com/users/calve/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-14T11:46:50Z",
    "updated_at": "2019-03-15T11:01:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Calling `raise_for_status()` output (leaks) the HTTP basic auth password when raising an exception.\r\n\r\n## Expected Result\r\n\r\n```\r\n>>> import requests\r\n>>> r = requests.get(\"http://user:somepassw@httpbin.org/status/401\")\r\n>>> r.raise_for_status()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.7/site-packages/requests/models.py\", line 940, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 401 Client Error: UNAUTHORIZED for url: http://user:<redacted>@httpbin.org/status/401\r\n```\r\n## Actual Result\r\n\r\nHere we can see the HTTP password in the resulting exception (`somepassw` in our case)\r\n\r\n```\r\n>>> import requests\r\n>>> r = requests.get(\"http://user:somepassw@httpbin.org/status/401\")\r\n>>> r.raise_for_status()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.7/site-packages/requests/models.py\", line 940, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 401 Client Error: UNAUTHORIZED for url: http://user:somepassw@httpbin.org/status/401\r\n```\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.20.8-arch1-1-ARCH\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010101f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5021/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 4
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5021/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5011",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5011/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5011/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5011/events",
    "html_url": "https://github.com/psf/requests/issues/5011",
    "id": 417421164,
    "node_id": "MDU6SXNzdWU0MTc0MjExNjQ=",
    "number": 5011,
    "title": "Host header not being set for CONNECT method of HTTPS proxy",
    "user": {
      "login": "mctwynne",
      "id": 22352286,
      "node_id": "MDQ6VXNlcjIyMzUyMjg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22352286?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mctwynne",
      "html_url": "https://github.com/mctwynne",
      "followers_url": "https://api.github.com/users/mctwynne/followers",
      "following_url": "https://api.github.com/users/mctwynne/following{/other_user}",
      "gists_url": "https://api.github.com/users/mctwynne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mctwynne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mctwynne/subscriptions",
      "organizations_url": "https://api.github.com/users/mctwynne/orgs",
      "repos_url": "https://api.github.com/users/mctwynne/repos",
      "events_url": "https://api.github.com/users/mctwynne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mctwynne/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-03-05T17:47:02Z",
    "updated_at": "2020-09-24T00:12:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Since `http.client` only supports [HTTP 1.0](https://github.com/python/cpython/blob/3.7/Lib/http/client.py#L895) for the CONNECT method it's not required to send the `Host` header. Unfortunately, HTTPS proxies often expect a `Host` header to be present, and fail to connect in its absence. I thought this might be of some interest here since `requests` + proxies is not particularly uncommon.\r\n\r\nIs this something that could be supported in `requests`?\r\n\r\n## Expected Result\r\n\r\nThe expectation is that `requests` will include the `Host` header as part of the CONNECTion process.\r\n\r\n## Actual Result\r\n\r\nThe `Host` header is not included.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\n>>> requests.get('https://google.ca', timeout=5, verify=False, proxies={'https': 'localhost:8081'})                                                                                                                 \r\nTraceback (most recent call last):                                                                                                                                                                                  \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 594, in urlopen                                                                                                  \r\n    self._prepare_proxy(conn)                                                                                                                                                                                       \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 805, in _prepare_proxy                                                                                           \r\n    conn.connect()                                                                                                                                                                                                  \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/connection.py\", line 344, in connect                                                                                                      \r\n    ssl_context=context)                                                                                                                                                                                            \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/util/ssl_.py\", line 344, in ssl_wrap_socket                                                                                               \r\n    return context.wrap_socket(sock, server_hostname=server_hostname)                                                                                                                                               \r\n  File \"/usr/lib/python3.6/ssl.py\", line 407, in wrap_socket                                                                                                                                                        \r\n    _context=self, _session=session)                                                                                                                                                                                \r\n  File \"/usr/lib/python3.6/ssl.py\", line 817, in __init__                                                                                                                                                           \r\n    self.do_handshake()                                                                                                                                                                                             \r\n  File \"/usr/lib/python3.6/ssl.py\", line 1077, in do_handshake                                                                                                                                                      \r\n    self._sslobj.do_handshake()                                                                                                                                                                                     \r\n  File \"/usr/lib/python3.6/ssl.py\", line 689, in do_handshake                                                                                                                                                       \r\n    self._sslobj.do_handshake()                                                                                                                                                                                     \r\nsocket.timeout: _ssl.c:830: The handshake operation timed out                                                                                                                                                       \r\n                                                                                                                                                                                                                    \r\nDuring handling of the above exception, another exception occurred:                                                                                                                                                 \r\n                                                                                                                                                                                                                    \r\nTraceback (most recent call last):                                                                                                                                                                                  \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/adapters.py\", line 449, in send                                                                                                          \r\n    timeout=timeout                                                                                                                                                                                                 \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/connectionpool.py\", line 638, in urlopen                                                                                                  \r\n    _stacktrace=sys.exc_info()[2])                                                                                                                                                                                  \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/urllib3/util/retry.py\", line 398, in increment                                                                                                    \r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))                                                                                                                                                  \r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='google.ca', port=443): Max retries exceeded with url: / (Caused by ProxyError('Cannot connect to proxy.', timeout('_ssl.c:830: The handshake operation t\r\nimed out',)))                                                                                                                                                                                                       \r\n                                                                                                                                                                                                                    \r\nDuring handling of the above exception, another exception occurred:                                                                                                                                                 \r\n                                                                                                                                                                                                                    \r\nTraceback (most recent call last):                                                                                                                                                                                  \r\n  File \"<stdin>\", line 1, in <module>                                                                                                                                                                               \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/api.py\", line 75, in get                                                                                                                 \r\n    return request('get', url, params=params, **kwargs)                                                                                                                                                             \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/api.py\", line 60, in request                                                                                                             \r\n    return session.request(method=method, url=url, **kwargs)                                                                                                                                                        \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/sessions.py\", line 533, in request                                                                                                       \r\n    resp = self.send(prep, **send_kwargs)                                                                                                                                                                           \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/sessions.py\", line 646, in send                                                                                                          \r\n    r = adapter.send(request, **kwargs)                                                                                                                                                                             \r\n  File \"/home/me/.venvs/requests_venv/lib/python3.6/site-packages/requests/adapters.py\", line 510, in send                                                                                                          \r\n    raise ProxyError(e, request=request)                                                                                                                                                                            \r\nrequests.exceptions.ProxyError: HTTPSConnectionPool(host='google.ca', port=443): Max retries exceeded with url: / (Caused by ProxyError('Cannot connect to proxy.', timeout('_ssl.c:830: The handshake operation tim\r\ned out',)))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.7\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-43-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5011/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5011/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5002",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5002/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5002/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5002/events",
    "html_url": "https://github.com/psf/requests/issues/5002",
    "id": 414095090,
    "node_id": "MDU6SXNzdWU0MTQwOTUwOTA=",
    "number": 5002,
    "title": "Socket leakage - CLOSE_WAIT - multithreading",
    "user": {
      "login": "dancvrcek",
      "id": 13306063,
      "node_id": "MDQ6VXNlcjEzMzA2MDYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/13306063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dancvrcek",
      "html_url": "https://github.com/dancvrcek",
      "followers_url": "https://api.github.com/users/dancvrcek/followers",
      "following_url": "https://api.github.com/users/dancvrcek/following{/other_user}",
      "gists_url": "https://api.github.com/users/dancvrcek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dancvrcek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dancvrcek/subscriptions",
      "organizations_url": "https://api.github.com/users/dancvrcek/orgs",
      "repos_url": "https://api.github.com/users/dancvrcek/repos",
      "events_url": "https://api.github.com/users/dancvrcek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dancvrcek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-02-25T13:05:23Z",
    "updated_at": "2021-02-05T02:21:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Any thoughts please as I ran out of ideas what could be wrong. The problem is very possibly in the way I use requests and unfortunately I can't provide detailed configuration or the code itself but here we go.\r\n\r\nDesign: \r\n\r\nNote: All system parts are currently running on the same server so the requests.sessions are to localhost.\r\n\r\nThe application has multiple virtual encryption classes (VCS), each can use one of upstream encryption services (ES). One of ESes has a RESTful API -> the virtual encryption class uses requests.get() for queries.\r\n\r\nWhen the application starts, it creates an instance of VCS and this in turn creates its instance of a  configuration class for an ES.\r\n\r\nthere is a main static method, which listens on downstream connections. On each such connection, it will create a WorkingThread which is given the VCS instance as a parameter. The WorkingThread:\r\n1. asks ES to create a requests.session (static method)\r\n2. runs a bunch of get() requests\r\n3. closes the requests.session\r\n\r\nThe downstream client serializes connections so at the moment there's only one WorkingThread running at any one time. All upstream connections are to the same URL, what changes are HTTP GET parameters.\r\n\r\nWhat happens is that when there are, e.g., 10 connections created back-to-back, the application leaves 9 sockets in the CLOSE_WAIT state. If there is just 1 downstream connection, the socket is correctly closed.\r\n\r\n## Expected Result\r\n\r\nCorrectly closed sockets.\r\n\r\n## Actual Result\r\n\r\nWhen a new requests.Session() is created immediately after the previous has been closed, it leaks a socket (indefinite CLOSE_WAIT).\r\n\r\n## Reproduction Steps\r\n\r\nNot available at the moment - I tried run get() calls within \"with\", with \"Connection: close\" header, explicitly closing responses as well as the session, disabling selinux to no avail.\r\n\r\nThe dataflow summary: TCP server accepts a connection, creates a workingthread, which is given an global persistent object instance with an upstream config. the workingThread opens a requests.session, runs several get() requests, closes the session and sends a TCP response back.\r\n\r\n## System Information\r\n\r\nI can't access the server at the moment, but as of 20th Feb, 2019\r\n\r\nCentos7.6,  Python 2.7.5 requests and other packages are up to date, installed with pip\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5002/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/5000",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/5000/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/5000/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/5000/events",
    "html_url": "https://github.com/psf/requests/issues/5000",
    "id": 413885095,
    "node_id": "MDU6SXNzdWU0MTM4ODUwOTU=",
    "number": 5000,
    "title": "`no_proxy` setting ignores the `proxies` dictionary",
    "user": {
      "login": "ofek",
      "id": 9677399,
      "node_id": "MDQ6VXNlcjk2NzczOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9677399?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ofek",
      "html_url": "https://github.com/ofek",
      "followers_url": "https://api.github.com/users/ofek/followers",
      "following_url": "https://api.github.com/users/ofek/following{/other_user}",
      "gists_url": "https://api.github.com/users/ofek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ofek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ofek/subscriptions",
      "organizations_url": "https://api.github.com/users/ofek/orgs",
      "repos_url": "https://api.github.com/users/ofek/repos",
      "events_url": "https://api.github.com/users/ofek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ofek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-02-24T23:51:01Z",
    "updated_at": "2020-07-02T15:08:11Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "These work:\r\n\r\n```\r\n$ python -c \"import os,requests;os.environ['HTTPS_PROXY']='https://b.r.o.k.e.n.com';requests.get('https://google.com', proxies={'no_proxy': 'google.com'})\"\r\n$ python -c \"import os,requests;os.environ['HTTPS_PROXY']='https://b.r.o.k.e.n.com';os.environ['NO_PROXY']='google.com';requests.get('https://google.com')\"\r\n```\r\n\r\nThese do not work:\r\n\r\n```\r\n$ python -c \"import requests;requests.get('https://google.com', proxies={'https': 'https://b.r.o.k.e.n.com', 'no_proxy': 'google.com'})\"\r\n$ python -c \"import os,requests;os.environ['NO_PROXY']='google.com';requests.get('https://google.com', proxies={'https': 'https://b.r.o.k.e.n.com'})\"\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\ncc @Lukasa @sigmavirus24 ",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/5000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/5000/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4998",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4998/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4998/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4998/events",
    "html_url": "https://github.com/psf/requests/issues/4998",
    "id": 413494208,
    "node_id": "MDU6SXNzdWU0MTM0OTQyMDg=",
    "number": 4998,
    "title": "utils.get_encodings_from_content regexps incorrect matches",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-02-22T17:03:38Z",
    "updated_at": "2021-11-28T03:31:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`get_encodings_from_contents` uses regexps:\r\n\r\n```\r\n    charset_re = re.compile(r'<meta.*?charset=[\"\\']*(.+?)[\"\\'>]', flags=re.I)\r\n    pragma_re = re.compile(r'<meta.*?content=[\"\\']*;?charset=(.+?)[\"\\'>]', flags=re.I)\r\n    xml_re = re.compile(r'^<\\?xml.*?encoding=[\"\\']*(.+?)[\"\\'>]')\r\n```\r\n\r\nI'm finding cases where this is matching \"<meta foo=\"bar\">random junk charset=something_weird\".  A real-life example is at https://www.walmart.com/ip/108356879 where I get 7 matches.  The first one gives the desired \"utf-8\".  The next five are all \"UTF-8\\\\\".  The last one matches on a 24711 character match and produces a 1730 character gibberish result.\r\n\r\nLocally I've fixed this by changing the regexp patterns, replacing the first \".*?\" with \"[^>\\\\]*?\"\r\n\r\nWould a PR implementing this in requests (and/or requests-toolbelt) be welcome?\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4998/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4997",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4997/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4997/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4997/events",
    "html_url": "https://github.com/psf/requests/issues/4997",
    "id": 413363129,
    "node_id": "MDU6SXNzdWU0MTMzNjMxMjk=",
    "number": 4997,
    "title": "should_bypass_proxies not thread-safe",
    "user": {
      "login": "bmerry",
      "id": 1963944,
      "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bmerry",
      "html_url": "https://github.com/bmerry",
      "followers_url": "https://api.github.com/users/bmerry/followers",
      "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
      "organizations_url": "https://api.github.com/users/bmerry/orgs",
      "repos_url": "https://api.github.com/users/bmerry/repos",
      "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bmerry/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-02-22T11:29:47Z",
    "updated_at": "2019-02-22T11:29:47Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "`requests.utils.should_bypass_proxies` temporary modifies the environment, calls into httplib and then restores the environment. However, it takes no locks while doing so, so two threads both using requests could lead to a permanent change to the environment. Even with a lock, any other thread that depends on the environment may observe the change (e.g. it may launch curl in a subprocess, and curl will then pick up this `no_proxy` setting).\r\n\r\n## Expected Result\r\n\r\nThe environment is not modified by requests.\r\n\r\n## Actual Result\r\n\r\nI haven't observed this bug in practice - it's a theoretical race condition I can see in the code. In the reproduction code below, I believe the following sequence could occur:\r\n\r\n1. Thread 1 enters the set_environ context manager, sets `old_value = None`, `os.environ['no_proxy'] = 'xyz'`.\r\n2. Thread 2 enters set_environ, sets `old_value = 'xyz'`, `os.environ['no_proxy'] = 'xyz'.\r\n3. Thread 1 exits, deletes `os.environ['no_proxy']`.\r\n4. Thread 1 exits, sets `os.environ['no_proxy'] = 'xyz'`.\r\n\r\nNow after all the requests have been finished, the environment has been modified.\r\n\r\n## Reproduction Steps\r\n\r\nI think this code can in theory trigger the race condition, although I haven't observed it. It needs an HTTP server on localhost:8080 (or just edit the URL)\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport threading\r\nimport os\r\n\r\nimport requests\r\n\r\ndef my_thread():\r\n    session = requests.Session()\r\n    for i in range(100):\r\n        with session.get('http://localhost:8080/', proxies={'no_proxy': 'xyz'}) as resp:\r\n            pass\r\n\r\nthreads = [threading.Thread(target=my_thread) for _ in range(16)]\r\nfor thread in threads:\r\n    thread.start()\r\nfor thread in threads:\r\n    thread.join()\r\nprint('no_proxy:', os.environ.get('no_proxy', 'not set'))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-45-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010007f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4997/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4997/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4965",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4965/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4965/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4965/events",
    "html_url": "https://github.com/psf/requests/issues/4965",
    "id": 407445365,
    "node_id": "MDU6SXNzdWU0MDc0NDUzNjU=",
    "number": 4965,
    "title": "Accessing response.content twice removes forgets read error",
    "user": {
      "login": "tlandschoff-scale",
      "id": 17047541,
      "node_id": "MDQ6VXNlcjE3MDQ3NTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/17047541?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tlandschoff-scale",
      "html_url": "https://github.com/tlandschoff-scale",
      "followers_url": "https://api.github.com/users/tlandschoff-scale/followers",
      "following_url": "https://api.github.com/users/tlandschoff-scale/following{/other_user}",
      "gists_url": "https://api.github.com/users/tlandschoff-scale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tlandschoff-scale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tlandschoff-scale/subscriptions",
      "organizations_url": "https://api.github.com/users/tlandschoff-scale/orgs",
      "repos_url": "https://api.github.com/users/tlandschoff-scale/repos",
      "events_url": "https://api.github.com/users/tlandschoff-scale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tlandschoff-scale/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-02-06T21:46:17Z",
    "updated_at": "2020-02-18T22:37:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I had a hard debugging time today because an error in the response stream is only reported when accessing `response.content` for the first time.\r\n\r\nThis is especially irritating when running code in a debugger.\r\n\r\n## Expected Result\r\n\r\nIf accessing `response.content` the first time raises an exception I would expect that accessing `response.content` again would also raise an exception (ideally the same). \r\n\r\n## Actual Result\r\n\r\nInstead after raising on the first get, getting `response.content` again returns an empty string.\r\n\r\n## Reproduction Steps\r\n\r\nHere is a patch with a new test case for this: [error_replay_test.diff.gz](https://github.com/requests/requests/files/2838360/error_replay_test.diff.gz).\r\n\r\nBasically, it boils down to this:\r\n\r\n```python\r\nimport requests\r\n\r\nresponse = requests.post(\"http://connreset.biz/get/incomplete/chunked\", stream=True)\r\ntry:\r\n    response.content\r\nexcept Exception:\r\n    # Error handling code, may try something else or fall through\r\n    pass\r\n\r\ncontent = response.content  # empty string\r\n```\r\n\r\nOutput of my test case:\r\n\r\n```\r\n$ pipenv run py.test tests/test_lowlevel.py -q --tb=short -k retain\r\nF                                                            [100%]\r\n============================= FAILURES =============================\r\n_______________ test_response_content_retains_error ________________\r\ntests/test_lowlevel.py:343: in test_response_content_retains_error\r\n    assert False, \"error response has content: {0!r}\".format(content)\r\nE   AssertionError: error response has content: ''\r\nE   assert False\r\n1 failed, 15 deselected in 0.60 seconds\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n*Edit*: Oops, I used `pipenv run python -m requests.help` which actually called into system python 2.7. Here comes the real data:\r\n\r\n```\r\n$ pipenv run python3 -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.8+\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-43-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThanks for looking into this!\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4965/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4951",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4951/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4951/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4951/events",
    "html_url": "https://github.com/psf/requests/issues/4951",
    "id": 404226225,
    "node_id": "MDU6SXNzdWU0MDQyMjYyMjU=",
    "number": 4951,
    "title": "Allow redirects not configurable in sessions",
    "user": {
      "login": "Paradoxis",
      "id": 6770124,
      "node_id": "MDQ6VXNlcjY3NzAxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6770124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Paradoxis",
      "html_url": "https://github.com/Paradoxis",
      "followers_url": "https://api.github.com/users/Paradoxis/followers",
      "following_url": "https://api.github.com/users/Paradoxis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Paradoxis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Paradoxis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Paradoxis/subscriptions",
      "organizations_url": "https://api.github.com/users/Paradoxis/orgs",
      "repos_url": "https://api.github.com/users/Paradoxis/repos",
      "events_url": "https://api.github.com/users/Paradoxis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Paradoxis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-01-29T10:39:05Z",
    "updated_at": "2019-01-29T10:39:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I have an application I need to reach behind a firewall, I've set up a tunnel to this application via SSH running on my machine which forwards all connections from `127.0.0.1:1234` to `192.168.1.10:80`. Whenever I make a request to my application, it redirects me to a login page first.\r\n\r\nThe issue with this is that all redirect URL's have the `192.168.1.10` hostname, which requests tries to follow and inevitably crashes (as this host does not exist on *my* network). \r\n\r\nI tried to set `allow_redirects` to `False` on my session by overriding the `request` method, but the session source hard-codes the `allow_redirects` option to `True` if it isn't explicitly set when calling `get`, `head` and `options` ([source](https://github.com/requests/requests/blob/master/requests/sessions.py#L545))\r\n\r\n## Expected Result\r\nI expected no redirect to be followed, but rather that that the request ends after the first response. I expected the `allow_redirects` option to be configurable in sessions like the `verify` flag is ([source](https://github.com/requests/requests/blob/master/requests/sessions.py#L625))\r\n\r\n## Actual Result\r\nThe 302 was resolved, and attempted to redirect me to a nonexistent host, leading to a connection error exception.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\n\r\nclass Example(requests.Session):\r\n    def __init__(self, allow_redirects=False, *args, **kwargs):\r\n        super(Example, self).__init__(*args, **kwargs)\r\n        self.allow_redirects = allow_redirects\r\n\r\n    def request(self, *args, **kwargs):\r\n        kwargs.setdefault('allow_redirects', self.allow_redirects)\r\n        return super(Example, self).request(*args, **kwargs)\r\n\r\n\r\nsess = Example()\r\nsess.get('http://127.0.0.1:1234')  # ConnectionError ... 192.168.1.10 connection refused (redirected)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020af\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4951/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4941",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4941/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4941/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4941/events",
    "html_url": "https://github.com/psf/requests/issues/4941",
    "id": 400199470,
    "node_id": "MDU6SXNzdWU0MDAxOTk0NzA=",
    "number": 4941,
    "title": "Leakage of results from one request to another while using session",
    "user": {
      "login": "dilipvamsi",
      "id": 16288600,
      "node_id": "MDQ6VXNlcjE2Mjg4NjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16288600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dilipvamsi",
      "html_url": "https://github.com/dilipvamsi",
      "followers_url": "https://api.github.com/users/dilipvamsi/followers",
      "following_url": "https://api.github.com/users/dilipvamsi/following{/other_user}",
      "gists_url": "https://api.github.com/users/dilipvamsi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dilipvamsi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dilipvamsi/subscriptions",
      "organizations_url": "https://api.github.com/users/dilipvamsi/orgs",
      "repos_url": "https://api.github.com/users/dilipvamsi/repos",
      "events_url": "https://api.github.com/users/dilipvamsi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dilipvamsi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-01-17T10:08:31Z",
    "updated_at": "2019-02-28T20:43:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi,\r\nI was facing this issue when using the requests session in gevent workers threads. (https://github.com/ArangoDB-Community/pyArango/issues/65).\r\nI faced the same issue when using Celery (which was not using the gevent for workers) while communicating to the db.\r\nI have changed the code such that for every call to the db a new session is created and issue seemed to be resolved.\r\nI think the issue may be due to large number of concurrent calls to db using the same session.\r\n\r\nRegards,\r\nDilip Vamsi.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4941/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4939",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4939/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4939/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4939/events",
    "html_url": "https://github.com/psf/requests/issues/4939",
    "id": 399365119,
    "node_id": "MDU6SXNzdWUzOTkzNjUxMTk=",
    "number": 4939,
    "title": "Determining the IP address of server with bad TLS cert.",
    "user": {
      "login": "tmontes",
      "id": 1912206,
      "node_id": "MDQ6VXNlcjE5MTIyMDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1912206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmontes",
      "html_url": "https://github.com/tmontes",
      "followers_url": "https://api.github.com/users/tmontes/followers",
      "following_url": "https://api.github.com/users/tmontes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmontes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmontes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmontes/subscriptions",
      "organizations_url": "https://api.github.com/users/tmontes/orgs",
      "repos_url": "https://api.github.com/users/tmontes/repos",
      "events_url": "https://api.github.com/users/tmontes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmontes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-01-15T14:17:58Z",
    "updated_at": "2019-01-15T18:00:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Preliminary notes:\r\n* Thanks for `requests`!\r\n* I investigated quite a bit and couldn't find an obvious solution to the issue. Where I looked: documentation, stack overflow, general web search.\r\n\r\nScenario:\r\n* HTTPS service available via a DNS name mapped to multiple IP addresses.\r\n* Each such address is handled by a different server.\r\n* Some of those servers configured with a bad/wrong TLS certificate.\r\n\r\nThe issue:\r\n* Requests like `requests.get('https://multiple.example.net/')` will sometimes succeed TLS validation and other times fail. How to determine the IP address of the server with the bad TLS certificate?\r\n\r\nWhy?\r\n* I would like to be able to tell the service provider that their server at IP address \"so and so\" is presenting a wrong certificate.\r\n\r\nThe \"give me an IP address\" solutions I found all assume the HTTP connection has been established and are mostly based in the idea of using streaming mode to get to the underlying socket, calling `getpeername()` from there.\r\n\r\nThose do not work in this scenario given that an `requests.exceptions.SSLError` exception is properly raised and there's no response object to work with from that point on. Unless the exception holds a reference to the socket, but I couldn't find it there.\r\n\r\nQuestions:\r\n* Other than monkey-patching approaches, is there any solution for this challenge I may be missing?\r\n* If not, should/could `requests.exceptions.SSLError` include a reference to the socket that lead to the failure, pretty much like all other requests exceptions include a reference to the request and response objects?\r\n\r\nThanks in advance.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4939/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4934",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4934/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4934/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4934/events",
    "html_url": "https://github.com/psf/requests/issues/4934",
    "id": 398171423,
    "node_id": "MDU6SXNzdWUzOTgxNzE0MjM=",
    "number": 4934,
    "title": "request memory leak with no session ",
    "user": {
      "login": "Flyraty",
      "id": 24888835,
      "node_id": "MDQ6VXNlcjI0ODg4ODM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24888835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flyraty",
      "html_url": "https://github.com/Flyraty",
      "followers_url": "https://api.github.com/users/Flyraty/followers",
      "following_url": "https://api.github.com/users/Flyraty/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flyraty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flyraty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flyraty/subscriptions",
      "organizations_url": "https://api.github.com/users/Flyraty/orgs",
      "repos_url": "https://api.github.com/users/Flyraty/repos",
      "events_url": "https://api.github.com/users/Flyraty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flyraty/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 167537670,
        "node_id": "MDU6TGFiZWwxNjc1Mzc2NzA=",
        "url": "https://api.github.com/repos/psf/requests/labels/Propose%20Close",
        "name": "Propose Close",
        "color": "f7c6c7",
        "default": false,
        "description": null
      },
      {
        "id": 298537994,
        "node_id": "MDU6TGFiZWwyOTg1Mzc5OTQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Needs%20More%20Information",
        "name": "Needs More Information",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-01-11T07:55:51Z",
    "updated_at": "2019-01-11T16:57:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I  use requests lib to monitor  live room\u3002In the start, i use request.get()  and set  connection headers closed, it occured memory leak,  the memory  would increase 10M per 15~20 minutes and dont down. \r\n\r\nBecause of live room,  it will created 2000w requests per day. i think maybe there exists some requests dont close,  but i set the connection header closed. Why is it still existed  produced?\r\n\r\nIn the last, i use request.Session() and keep-alive connection header to solve the problem.   i want to know why   request.get  is bad but session is normal.   \r\n\r\nThere is my code demo\r\n\r\n``` python\r\nwhile  true:\r\n        headers = {'Connection': 'closed'}\r\n        requests.get(url, headers=headers):\r\n        # when the live room is closed\r\n        if close:\r\n            break\r\n```\r\n\r\n``` python\r\nsession  =requests.Session()\r\nwhile  true:\r\n        headers = {'Connection': 'keep-alive'}\r\n        session.get(url, headers=headers):\r\n        # when the live room is closed\r\n        if close:\r\n           session.close()\r\n            break\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4934/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4926",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4926/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4926/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4926/events",
    "html_url": "https://github.com/psf/requests/issues/4926",
    "id": 395415751,
    "node_id": "MDU6SXNzdWUzOTU0MTU3NTE=",
    "number": 4926,
    "title": "requests can't properly handle redirects if the response body is encoded in something else than 'utf8'",
    "user": {
      "login": "lukasz-kapica",
      "id": 4257505,
      "node_id": "MDQ6VXNlcjQyNTc1MDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4257505?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukasz-kapica",
      "html_url": "https://github.com/lukasz-kapica",
      "followers_url": "https://api.github.com/users/lukasz-kapica/followers",
      "following_url": "https://api.github.com/users/lukasz-kapica/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukasz-kapica/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukasz-kapica/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukasz-kapica/subscriptions",
      "organizations_url": "https://api.github.com/users/lukasz-kapica/orgs",
      "repos_url": "https://api.github.com/users/lukasz-kapica/repos",
      "events_url": "https://api.github.com/users/lukasz-kapica/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukasz-kapica/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 17,
    "created_at": "2019-01-02T23:37:23Z",
    "updated_at": "2023-03-03T15:21:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Just like in the topic. The response body is encoded in iso-8859-2 and the location happens to contain non-ascii character so that it results in UnicodeDecodeError being thrown.\r\n\r\n## Expected Result\r\n\r\nFlawless execution of the code.\r\n\r\n## Actual Result\r\n\r\nUnicodeDecodeError\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nrequests.get(\"http://www.biblia.deon.pl/ksiega.php?id=3\")\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  }, \r\n  \"cryptography\": {\r\n    \"version\": \"2.3\"\r\n  }, \r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  }, \r\n  \"implementation\": {\r\n    \"name\": \"CPython\", \r\n    \"version\": \"2.7.15+\"\r\n  }, \r\n  \"platform\": {\r\n    \"release\": \"4.18.0-13-generic\", \r\n    \"system\": \"Linux\"\r\n  }, \r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010100f\", \r\n    \"version\": \"18.0.0\"\r\n  }, \r\n  \"requests\": {\r\n    \"version\": \"2.19.0\"\r\n  }, \r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  }, \r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  }, \r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": {
      "login": "lukasz-kapica",
      "id": 4257505,
      "node_id": "MDQ6VXNlcjQyNTc1MDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4257505?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukasz-kapica",
      "html_url": "https://github.com/lukasz-kapica",
      "followers_url": "https://api.github.com/users/lukasz-kapica/followers",
      "following_url": "https://api.github.com/users/lukasz-kapica/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukasz-kapica/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukasz-kapica/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukasz-kapica/subscriptions",
      "organizations_url": "https://api.github.com/users/lukasz-kapica/orgs",
      "repos_url": "https://api.github.com/users/lukasz-kapica/repos",
      "events_url": "https://api.github.com/users/lukasz-kapica/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukasz-kapica/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4926/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4920",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4920/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4920/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4920/events",
    "html_url": "https://github.com/psf/requests/pull/4920",
    "id": 394710773,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjQxMzg5Mjcz",
    "number": 4920,
    "title": "iter_content() checks for < 1 chunk_size",
    "user": {
      "login": "alex-wenzel",
      "id": 32204469,
      "node_id": "MDQ6VXNlcjMyMjA0NDY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/32204469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-wenzel",
      "html_url": "https://github.com/alex-wenzel",
      "followers_url": "https://api.github.com/users/alex-wenzel/followers",
      "following_url": "https://api.github.com/users/alex-wenzel/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-wenzel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-wenzel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-wenzel/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-wenzel/orgs",
      "repos_url": "https://api.github.com/users/alex-wenzel/repos",
      "events_url": "https://api.github.com/users/alex-wenzel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-wenzel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-12-28T20:10:50Z",
    "updated_at": "2021-12-29T03:54:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/4920",
      "html_url": "https://github.com/psf/requests/pull/4920",
      "diff_url": "https://github.com/psf/requests/pull/4920.diff",
      "patch_url": "https://github.com/psf/requests/pull/4920.patch",
      "merged_at": null
    },
    "body": "With requests v2.20.1, supplying a value of 0 for `chunk_size` causes `iter_content()` to hang. This made debugging code that dynamically computes a value for `chunk_size` difficult. These two lines explicitly enforce `chunk_size` being a positive integer.",
    "closed_by": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4920/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4914",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4914/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4914/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4914/events",
    "html_url": "https://github.com/psf/requests/issues/4914",
    "id": 393115557,
    "node_id": "MDU6SXNzdWUzOTMxMTU1NTc=",
    "number": 4914,
    "title": "Proxy error when redirect (Caused by ProxyError('Cannot connect to proxy.', timeout('timed out',)))",
    "user": {
      "login": "gjones95",
      "id": 17624449,
      "node_id": "MDQ6VXNlcjE3NjI0NDQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17624449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gjones95",
      "html_url": "https://github.com/gjones95",
      "followers_url": "https://api.github.com/users/gjones95/followers",
      "following_url": "https://api.github.com/users/gjones95/following{/other_user}",
      "gists_url": "https://api.github.com/users/gjones95/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gjones95/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gjones95/subscriptions",
      "organizations_url": "https://api.github.com/users/gjones95/orgs",
      "repos_url": "https://api.github.com/users/gjones95/repos",
      "events_url": "https://api.github.com/users/gjones95/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gjones95/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-20T16:18:14Z",
    "updated_at": "2018-12-20T16:18:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Summary.\r\n\r\nWhen accessing a URL using requests, the redirect causes proxy error because the initial web page DOES require the proxy, but the page it redirects to DOES NOT require the proxy. The program succeeds in using the proxy for the first web page, but when redirecting to the next web page it does not recognize the \r\n\r\n## Expected Result\r\n\r\nAfter my program executes 'requests.get(<url>)', the program should reach the initial website through the proxy, and then redirect to the new website without going through the proxy, and then print the HTTP status code. In short, I expect the program to run and print the HTTP status code (ideally 200).\r\n\r\n## Actual Result\r\n\r\nInstead I get a proxy error when the program tries to access the website it redirects to and the HTTP status code line isn't executed.\r\n\r\nI traced this down using python debugger and my findings were as follows...\r\n\r\nThe proxy and no proxy are set in my environment and these are first set in the program as a dictionary in 'merge_environment_settings', which calls 'get_environ_proxies' which gets the proxy settings from the environment (which is needed at this point so is correct).\r\n\r\nNOTE: If the proxy wasn't needed at this point, it would have produced an empty dictionary for 'proxies' as long as the URL domain matched the 'no_proxy' (thanks to the 'should_bypass_proxies' function).\r\n\r\nAll is fine at this point as the first URL requires the proxy, BUT... \r\n\r\nFurther down the line when the redirect occurs, within the 'resolve_redirects' function, 'rebuild_proxies' is called. This functions creates a 'new_proxies' variable which copies the original environment proxy settings. \r\n\r\nFurther along in this function, the 'bypass_proxy' boolean variable is set from the 'should_bypass_proxies' function, this is correctly set to 'True' as the 'no_proxy' matches the new URL (for the redirect website).\r\n\r\nAt this point, I expect the 'new_proxies' variable to be altered as the bypass proxy has been triggered, but it remains unchanged and the 'rebuild_proxies' function just returns the original proxy settings.\r\n\r\nAnother note: within 'rebuild_proxies', the below statement is skipped due to 'not bypass_proxy' but in the 'get_environ_proxies' function mentioned earlier is the only place I discovered to actually return an empty dictionary for 'proxies' when it detects a no proxy. So by skipping the below code, it is skipping the only function I discovered to actually remove the proxy settings.\r\n\r\n```python\r\nbypass_proxy = should_bypass_proxies(url, no_proxy=no_proxy)\r\nif self.trust_env and not bypass_proxy:\r\n    environ_proxies = get_environ_proxies(url, no_proxy=no_proxy)\r\n\r\n    proxy = environ_proxies.get(scheme, environ_proxies.get('all'))\r\n\r\n    if proxy:\r\n        new_proxies.setdefault(scheme, proxy)\r\n```\r\n\r\nI actually added the following bit of code to the end of 'rebuild_proxies' and it seemed to fix my program, but i think there is an underlying issue worth fixing.\r\n\r\n```python\r\nif bypass_proxy:\r\n       new_proxies = OrderedDict()\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom requests import Session\r\n\r\ndef test():\r\n    session = Session()\r\n    session.verify = '<SSL-cert>'\r\n    r = session.get('<url>', timeout=5)\r\n    print(r.status_code)\r\n\r\nif __name__ == \"__main__\":\r\n    test()\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"2.4.2\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-29-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101000af\",\r\n    \"version\": \"18.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010007f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24.1\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n\r\nThanks for reading and hope it can be fixed!",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4914/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4914/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4894",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4894/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4894/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4894/events",
    "html_url": "https://github.com/psf/requests/issues/4894",
    "id": 388355491,
    "node_id": "MDU6SXNzdWUzODgzNTU0OTE=",
    "number": 4894,
    "title": "Timeout in session chunked requests lead to subsequent request timeout",
    "user": {
      "login": "meddulla",
      "id": 47389,
      "node_id": "MDQ6VXNlcjQ3Mzg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/47389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meddulla",
      "html_url": "https://github.com/meddulla",
      "followers_url": "https://api.github.com/users/meddulla/followers",
      "following_url": "https://api.github.com/users/meddulla/following{/other_user}",
      "gists_url": "https://api.github.com/users/meddulla/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meddulla/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meddulla/subscriptions",
      "organizations_url": "https://api.github.com/users/meddulla/orgs",
      "repos_url": "https://api.github.com/users/meddulla/repos",
      "events_url": "https://api.github.com/users/meddulla/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meddulla/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-12-06T19:10:09Z",
    "updated_at": "2019-11-14T16:29:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n## Expected Result\r\n\r\nRequests in same session don't interfere with one another.\r\n\r\n## Actual Result\r\n\r\nA slow response from a chunked request causes the subsequent request to fail with a timeout even if the server responded before the timeout was reached.\r\n\r\n## Reproduction Steps\r\n\r\nRun a test server that accepts GET and POST requests. When responding to POST requests it waits 10 seconds before responding:\r\n\r\n```python\r\nimport time\r\n\r\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\r\n\r\ntime_sleep = 10\r\n\r\nclass HandlerSlowResponse(BaseHTTPRequestHandler):\r\n    def do_POST(self):\r\n        # Hangs\r\n        time.sleep(time_sleep)\r\n        self.send_response(200)\r\n        self.end_headers()\r\n\r\n    def do_GET(self):\r\n        # OK\r\n        self.send_response(200)\r\n        self.end_headers()\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Time sleep %s\" % time_sleep)\r\n    httpd = HTTPServer(('', 8000), HandlerSlowResponse)\r\n    print('Listening on :8000')\r\n    httpd.serve_forever()\r\n\r\n```\r\n\r\nThen, in another REPL, verify non-session requests don't interfere with one another:\r\n\r\n```python\r\nimport requests\r\nimport time\r\n\r\ntimeout = 2\r\n\r\ndef norm(i):\r\n    print(\"GET (quick response) %s\" % i)\r\n    try:\r\n        requests.get('http://localhost:8000', timeout=timeout, data='hello'.encode('utf-8'))\r\n    except Exception as e:\r\n        print(\"-> EXC Norm %s %s\" % (i, e))\r\n\r\n\r\ndef chunked(i):\r\n    print(\"POST chunked (slow response) %s\" % i)\r\n    # Does not fail if exceeds timeout\r\n    def gen():\r\n        yield 'hello'.encode('utf-8')\r\n\r\n    try:\r\n        requests.post('http://localhost:8000', timeout=timeout, data=gen())\r\n    except Exception as e:\r\n        print(\"-> EXC Chunked %s %s\" % (i, e))\r\n\r\ndef cycle():\r\n    # requests don't interfere with one another\r\n    for i in range(1, 10):\r\n        time.sleep(1)\r\n        if i % 2 == 0:\r\n            norm(i)\r\n        else:\r\n            chunked(i)\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Timeout %s\" % timeout)\r\n    cycle()\r\n```\r\n\r\nOutput:\r\n\r\nNote that chunked requests never time out (ticket https://github.com/requests/requests/issues/4402).\r\n\r\n```\r\nTimeout 2\r\nPOST chunked (slow response) 1\r\nGET (quick response) 2\r\nPOST chunked (slow response) 3\r\nGET (quick response) 4\r\nPOST chunked (slow response) 5\r\nGET (quick response) 6\r\nPOST chunked (slow response) 7\r\nGET (quick response) 8\r\nPOST chunked (slow response) 9\r\n```\r\n\r\nNext, do the same thing but now using a `Session`:\r\n\r\n```python\r\nimport requests\r\nimport time\r\n\r\ntimeout = 2\r\nsession = requests.Session()\r\n\r\ndef norm_session(i):\r\n    print(\"GET norm session (quick response) %s\" % i)\r\n    try:\r\n        session.get('http://localhost:8000', timeout=timeout, data='hello'.encode('utf-8'))\r\n    except Exception as e:\r\n        print(\"-> EXC Norm session %s %s\" % (i, e))\r\n\r\n\r\ndef chunked_session(i):\r\n    print(\"POST chunked session (slow response) %s\" % i)\r\n\r\n    def gen():\r\n        yield 'hello'.encode('utf-8')\r\n\r\n    try:\r\n        session.post('http://localhost:8000', timeout=timeout, data=gen())\r\n    except Exception as e:\r\n        print(\"-> EXC Chunked session %s %s\" % (i, e))\r\n\r\n\r\ndef cycle_session():\r\n    # A normal request always times out after a chunked timeout request\r\n    # even if the server responded in time\r\n    for i in range(1, 10):\r\n        time.sleep(1)\r\n        if i % 2 == 0:\r\n            norm_session(i)\r\n        else:\r\n            chunked_session(i)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Timeout %s\" % timeout)\r\n    cycle_session()\r\n\r\n```\r\n\r\nOutput:\r\n\r\nNote that chunked requests do time out but cause the subsequent GET to fail.\r\n\r\n```\r\nTimeout 2\r\nPOST chunked session (slow response) 1\r\nGET norm session (quick response) 2\r\nPOST chunked session (slow response) 3\r\n-> EXC Chunked session 3 timed out\r\nGET norm session (quick response) 4\r\n-> EXC Norm session 4 HTTPConnectionPool(host='localhost', port=8000): Read timed out. (read timeout=2)\r\nPOST chunked session (slow response) 5\r\nGET norm session (quick response) 6\r\nPOST chunked session (slow response) 7\r\n-> EXC Chunked session 7 timed out\r\nGET norm session (quick response) 8\r\n-> EXC Norm session 8 HTTPConnectionPool(host='localhost', port=8000): Read timed out. (read timeout=2)\r\nPOST chunked session (slow response) 9\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"16.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000210f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4894/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4871",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4871/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4871/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4871/events",
    "html_url": "https://github.com/psf/requests/issues/4871",
    "id": 380254230,
    "node_id": "MDU6SXNzdWUzODAyNTQyMzA=",
    "number": 4871,
    "title": "respect no_proxy environment variable and proxies['no'] parameter",
    "user": {
      "login": "milahu",
      "id": 12958815,
      "node_id": "MDQ6VXNlcjEyOTU4ODE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/12958815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/milahu",
      "html_url": "https://github.com/milahu",
      "followers_url": "https://api.github.com/users/milahu/followers",
      "following_url": "https://api.github.com/users/milahu/following{/other_user}",
      "gists_url": "https://api.github.com/users/milahu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/milahu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/milahu/subscriptions",
      "organizations_url": "https://api.github.com/users/milahu/orgs",
      "repos_url": "https://api.github.com/users/milahu/repos",
      "events_url": "https://api.github.com/users/milahu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/milahu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 13,
    "created_at": "2018-11-13T14:33:10Z",
    "updated_at": "2024-02-23T11:46:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "make requests respect no_proxy settings\r\n\r\nbugfix attached\r\n\r\n## Expected Result\r\n\r\nhttp requests to 'white listed urls' should bypass all proxies\r\n\r\nwhite listed urls, as defined in the no_proxy env var\r\n\r\n## Actual Result\r\n\r\nproxies are not bypassed\r\n\r\nthe sample script will raise\r\n\r\nrequests.exceptions.ConnectionError: SOCKSHTTPConnectionPool ....: Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.contrib.socks.SOCKSConnection object at ....>: Failed to establish a new connection: 0x01: General SOCKS server failure',))\r\n\r\n## Reproduction Steps\r\n\r\nuse case: torify python requests, but also allow requests to localhost etc.\r\n\r\n<details>\r\n\r\n<summary>sample script</summary>\r\n\r\n```python\r\n#!/usr/bin/python2\r\n\r\n# license = public domain\r\n\r\nimport os\r\nimport random\r\nimport time\r\nimport requests\r\nimport BaseHTTPServer\r\nimport thread\r\nimport bs4\r\n\r\ntor_host = '127.0.0.1'\r\n#tor_port = 9050 # system-wide tor\r\ntor_port = 9150 # torbrowser tor\r\n\r\n# do not use tor to connect to local or private hosts\r\n# see https://en.wikipedia.org/wiki/Reserved_IP_addresses\r\nno_proxy_list = [\r\n        # hostnames are not resolved locally with socks5h proxy\r\n        'localhost',\r\n        'localhost.localdomain',\r\n        # IPv4\r\n        '127.0.0.0/8', # localhost\r\n        # subnets\r\n        '169.254.0.0/16',\r\n        '255.255.255.255',\r\n        # LAN aka private networks\r\n        '10.0.0.0/8',\r\n        '100.64.0.0/10',\r\n        '172.16.0.0/12',\r\n        '192.0.0.0/24',\r\n        '192.168.0.0/16',\r\n        '198.18.0.0/15',\r\n        # IPv6\r\n        '::1/128', # localhost\r\n        'fc00::/7', # LAN\r\n        'fe80::/10', # link-local\r\n]\r\n\r\n# variant 1\r\nos.environ['no_proxy'] = ','.join(no_proxy_list)\r\n\r\ndef get_tor_session(tor_host='127.0.0.1', tor_port=9050,\r\n        torbrowser_headers=[], no_proxy_list=[]):\r\n\r\n        session = requests.session()\r\n\r\n        # variant 1\r\n        session.trust_env = True\r\n        #session.trust_env = False # ignore environment variables\r\n\r\n        # socks5h scheme = remote DNS = no DNS leaks\r\n        p = 'socks5h://{0}:{1}'.format(tor_host, tor_port)\r\n        session.proxies = {\r\n                'http' : p,\r\n                'https': p,\r\n\r\n                # variant 2\r\n                'no': ','.join(no_proxy_list)\r\n        }\r\n\r\n        if torbrowser_headers == []:\r\n                print('warning. got no torbrowser_headers')\r\n                # at least imitate torbrowser from year 2018\r\n                torbrowser_headers = [\r\n                        ('accept-language', 'en-US,en;q=0.5'),\r\n                        ('accept', 'text/html,application/xhtml+xml,' \\\r\n                                + 'application/xml;q=0.9,*/*;q=0.8'),\r\n                        ('user-agent', 'Mozilla/5.0 (Windows NT 6.1; rv:60.0) ' \\\r\n                                + 'Gecko/20100101 Firefox/60.0'),\r\n                        ('upgrade-insecure-requests', '1'),\r\n                ]\r\n\r\n        for k, v in torbrowser_headers:\r\n                # header 'host' is dynamic\r\n                # header 'connection' = 'keep-alive' is set internally\r\n                if k not in ['host', 'connection']:\r\n                        session.headers[k] = v\r\n\r\n        return session\r\n\r\n\r\n\r\ntor = get_tor_session(tor_host, tor_port, [], no_proxy_list)\r\n\r\n\r\n\r\ntest_host = '127.0.0.1'\r\ntest_port = random.randint(8000, 16000)\r\ntest_url = 'http://{0}:{1}/'.format(test_host, test_port)\r\n\r\ndef test_tor_get(test_url):\r\n        time.sleep(2) # wait for http server to start\r\n        tor.get(test_url)\r\nthread.start_new_thread(test_tor_get, (test_url,))\r\n\r\ntest_headers = [] # global\r\nclass test_handler(BaseHTTPServer.BaseHTTPRequestHandler):\r\n        def do_GET(self): # handle GET request\r\n                global test_headers\r\n                test_headers = self.headers.items()\r\n                self.send_response(204, 'No Content')\r\n                self.end_headers()\r\n\r\nserv = BaseHTTPServer.HTTPServer((test_host, test_port), test_handler)\r\nserv.handle_request() # handle one request\r\ndel serv\r\n\r\nprint('tor.get headers')\r\nfor k, v in test_headers:\r\n        print('header %s: %s' % (k, v))\r\n\r\n#print('tor ip '+tor.get(\"http://httpbin.org/ip\").text)\r\n\r\nprint('tor check ' + \\\r\nbs4.BeautifulSoup(\r\ntor.get(\"https://check.torproject.org/\").text, 'html.parser'\r\n).title.string.strip())\r\n```\r\n\r\n</details>\r\n\r\n## System Information\r\n\r\n* python2\r\n* current git-version of requests\r\n\r\n## ~~Bugfix~~ Quickfix\r\n\r\nthe bug is in sessions.py\r\n\r\nproxies = merge_setting(proxies, self.proxies)\r\n\r\nwhere [request_]proxies was set to {} by utils.get_environ_proxies *\r\nbut proxies is set to session_proxies\r\n\r\n\\* with os.environ['no_proxy'] = '127.0.0.1'\r\n\r\nthis bugfix will respect both \r\n\r\n* no_proxy environment variable aka os.environ['no_proxy']\r\n* proxies['no'] parameter for requests.get and requests.session\r\n\r\n<details>\r\n<summary>patch</summary>\r\n\r\n```diff\r\n--- a/utils.py\r\n+++ b/utils.py\r\n@@ -757,7 +757,7 @@\r\n     :rtype: dict\r\n     \"\"\"\r\n     if should_bypass_proxies(url, no_proxy=no_proxy):\r\n-        return {}\r\n+        return {'__bypass_proxies': True}\r\n     else:\r\n         return getproxies()\r\n\r\n\r\n--- a/sessions.py\r\n+++ b/sessions.py\r\n@@ -698,8 +698,15 @@\r\n                 verify = (os.environ.get('REQUESTS_CA_BUNDLE') or\r\n                           os.environ.get('CURL_CA_BUNDLE'))\r\n\r\n+        if 'no' in self.proxies:\r\n+            if should_bypass_proxies(url, no_proxy=self.proxies['no']):\r\n+                proxies = {'__bypass_proxies': True}\r\n+\r\n         # Merge all the kwargs.\r\n-        proxies = merge_setting(proxies, self.proxies)\r\n+        if '__bypass_proxies' in proxies:\r\n+            proxies = {} # bypass proxies for this request\r\n+        else:\r\n+            proxies = merge_setting(proxies, self.proxies)\r\n         stream = merge_setting(stream, self.stream)\r\n         verify = merge_setting(verify, self.verify)\r\n         cert = merge_setting(cert, self.cert)\r\n```\r\n\r\n</details>\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4871/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4871/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4847",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4847/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4847/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4847/events",
    "html_url": "https://github.com/psf/requests/issues/4847",
    "id": 373692014,
    "node_id": "MDU6SXNzdWUzNzM2OTIwMTQ=",
    "number": 4847,
    "title": "Option for retrieving peer's TLS certificate",
    "user": {
      "login": "martingalvan",
      "id": 7912657,
      "node_id": "MDQ6VXNlcjc5MTI2NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7912657?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martingalvan",
      "html_url": "https://github.com/martingalvan",
      "followers_url": "https://api.github.com/users/martingalvan/followers",
      "following_url": "https://api.github.com/users/martingalvan/following{/other_user}",
      "gists_url": "https://api.github.com/users/martingalvan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martingalvan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martingalvan/subscriptions",
      "organizations_url": "https://api.github.com/users/martingalvan/orgs",
      "repos_url": "https://api.github.com/users/martingalvan/repos",
      "events_url": "https://api.github.com/users/martingalvan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martingalvan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-10-24T21:52:30Z",
    "updated_at": "2020-08-24T15:18:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "It would be good to have an option to retrieve the peer's TLS certificate after a request is performed. For example, this is what libcurl provides with [CURLINFO_CERTINFO](https://curl.haxx.se/libcurl/c/CURLINFO_CERTINFO.html).\r\n\r\nThere's a StackOverflow thread which offers some rather ugly methods to do this: https://stackoverflow.com/questions/16903528/how-to-get-response-ssl-certificate-from-requests-in-python",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4847/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4847/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4842",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4842/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4842/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4842/events",
    "html_url": "https://github.com/psf/requests/issues/4842",
    "id": 372482456,
    "node_id": "MDU6SXNzdWUzNzI0ODI0NTY=",
    "number": 4842,
    "title": "Using a `json.JSONDecoder` fails when simplejson is present",
    "user": {
      "login": "ricellis",
      "id": 10698320,
      "node_id": "MDQ6VXNlcjEwNjk4MzIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/10698320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricellis",
      "html_url": "https://github.com/ricellis",
      "followers_url": "https://api.github.com/users/ricellis/followers",
      "following_url": "https://api.github.com/users/ricellis/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricellis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricellis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricellis/subscriptions",
      "organizations_url": "https://api.github.com/users/ricellis/orgs",
      "repos_url": "https://api.github.com/users/ricellis/repos",
      "events_url": "https://api.github.com/users/ricellis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricellis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117745,
        "node_id": "MDU6TGFiZWwxMTc3NDU=",
        "url": "https://api.github.com/repos/psf/requests/labels/Planned",
        "name": "Planned",
        "color": "e102d8",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 15,
    "created_at": "2018-10-22T11:27:25Z",
    "updated_at": "2024-08-28T09:00:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "It appears that when `simplejson` is in the environment `requests` preferentially imports it. However, the arguments accepted by `JSONDecoder` are inconsistent between the standard library `json` and `simplejson` leading to errors when using the standard `json.JSONDecoder` when `simplejson` is in the environment.\r\n\r\n[Your documentation for `response.json() `says](http://docs.python-requests.org/en/master/api/?highlight=json#requests.Response.json):\r\n>Parameters: | **kwargs \u2013 Optional arguments that json.loads takes.\r\n\r\nThe [documentation for `json.loads`](https://docs.python.org/3.6/library/json.html#json.loads) says:\r\n>`json.loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)`\r\n\r\nand\r\n\r\n>To use a custom JSONDecoder subclass, specify it with the cls kwarg; otherwise JSONDecoder is used. Additional keyword arguments will be passed to the constructor of the class.\r\n\r\nI expected to be able to use a custom `json.JSONDecoder` without issue and indeed this works on Python 2.7, but in Python 3.7 it fails.\r\n\r\nI can see that the issue of preferentially importing `simplejson` has been raised a few times e.g.\r\nhttps://github.com/requests/requests/pull/2516\r\nhttps://github.com/requests/requests/issues/3052\r\n\r\nand that it is slated for removal in Requests 3, which I guess will resolve this issue.\r\n\r\nIf it is not possible to resolve this issue some\u00a0other way in Requests 2.x then it would be nice if the documentation around `response.json()` was updated to make it clear that the arguments to `json.loads` could be either `simplejson.loads` or the standard lib `json.loads` depending on the environment since the preferential import is effectively undocumented and non-obvious.\r\n\r\n## Expected Result\r\n\r\nA successful JSON load when using `r.json(cls=json.JSONDecoder)`.\r\n\r\n## Actual Result\r\n\r\n```\r\n    print(r.json(cls=json.JSONDecoder))\r\n  File \".../python3.7/site-packages/requests/models.py\", line 897, in json\r\n    return complexjson.loads(self.text, **kwargs)\r\n  File \".../python3.7/site-packages/simplejson/__init__.py\", line 535, in loads\r\n    return cls(encoding=encoding, **kw).decode(s)\r\nTypeError: __init__() got an unexpected keyword argument 'encoding'\r\n```\r\n\r\n## Reproduction Steps\r\n```sh\r\npip install requests\r\npip install simplejson\r\n```\r\n\r\n```python\r\nimport json\r\nimport requests\r\n\r\nr = requests.get('http://localhost:5984')\r\nprint(r.json(cls=json.JSONDecoder))\r\n```\r\n\r\n## System Information\r\n\r\n**Note this issue does not occur in Python 2.7.x.**\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"18.0.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.20.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000210f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n",
    "closed_by": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4842/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4842/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4833",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4833/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4833/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4833/events",
    "html_url": "https://github.com/psf/requests/issues/4833",
    "id": 370965521,
    "node_id": "MDU6SXNzdWUzNzA5NjU1MjE=",
    "number": 4833,
    "title": "Running prepare_headers on PreparedRequest break it",
    "user": {
      "login": "mlubimow",
      "id": 2325687,
      "node_id": "MDQ6VXNlcjIzMjU2ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2325687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mlubimow",
      "html_url": "https://github.com/mlubimow",
      "followers_url": "https://api.github.com/users/mlubimow/followers",
      "following_url": "https://api.github.com/users/mlubimow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mlubimow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mlubimow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mlubimow/subscriptions",
      "organizations_url": "https://api.github.com/users/mlubimow/orgs",
      "repos_url": "https://api.github.com/users/mlubimow/repos",
      "events_url": "https://api.github.com/users/mlubimow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mlubimow/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      },
      {
        "id": 167537670,
        "node_id": "MDU6TGFiZWwxNjc1Mzc2NzA=",
        "url": "https://api.github.com/repos/psf/requests/labels/Propose%20Close",
        "name": "Propose Close",
        "color": "f7c6c7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-10-17T08:53:15Z",
    "updated_at": "2018-10-29T12:38:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "After calling prepare() on a request, PreparedRequest object is returned. If its a PATCH request (GET is working as expected), and prepare_headers is called, it's not possible to send this request.\r\n\r\n## Expected Result\r\n\r\nHeaders should be added to a prepared request and it should be possible to send it later.\r\n\r\n## Actual Result\r\n\r\nAn exception is thrown:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"r.py\", line 7, in <module>\r\n    s.send(r)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 622, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/adapters.py\", line 466, in send\r\n    low_conn.send(hex(len(i))[2:].encode('utf-8'))\r\nTypeError: object of type 'int' has no len()\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\nr = requests.Request('PATCH', 'http://domain.com/objects/32', json={'name': 'new name'})\r\nr = r.prepare()\r\n\r\ns = requests.Session()\r\nr.prepare_headers({'Authorization': 'Token 123'})\r\ns.send(r)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.6\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.9.87-linuxkit-aufs\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010006f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4833/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4833/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4812",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4812/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4812/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4812/events",
    "html_url": "https://github.com/psf/requests/pull/4812",
    "id": 365528185,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjE5NDI3NjMx",
    "number": 4812,
    "title": "Fix no_proxy being too greedy.",
    "user": {
      "login": "gilbsgilbs",
      "id": 3407667,
      "node_id": "MDQ6VXNlcjM0MDc2Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3407667?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gilbsgilbs",
      "html_url": "https://github.com/gilbsgilbs",
      "followers_url": "https://api.github.com/users/gilbsgilbs/followers",
      "following_url": "https://api.github.com/users/gilbsgilbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/gilbsgilbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gilbsgilbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gilbsgilbs/subscriptions",
      "organizations_url": "https://api.github.com/users/gilbsgilbs/orgs",
      "repos_url": "https://api.github.com/users/gilbsgilbs/repos",
      "events_url": "https://api.github.com/users/gilbsgilbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gilbsgilbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-10-01T15:55:19Z",
    "updated_at": "2022-01-03T15:29:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/4812",
      "html_url": "https://github.com/psf/requests/pull/4812",
      "diff_url": "https://github.com/psf/requests/pull/4812.diff",
      "patch_url": "https://github.com/psf/requests/pull/4812.patch",
      "merged_at": null
    },
    "body": "**Summary:** Setting `no_proxy` on `requests.com` used to enable it on `somerequests.com` also, which was unexpected and potentially dangerous. (see #4795)\r\n\r\nNote that this delegates to urllib more often, as stated [here](https://github.com/requests/requests/issues/4795#issuecomment-425886286). I don't have the history behind `should_bypass_proxies` implementation, therefore my change is the tiniest possible (minimum thing to fix the greedy behavior). I don't know exactly why requests tries some things first and then delegates to urllib though.\r\n\r\nFixes #4795 ",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4812/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4795",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4795/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4795/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4795/events",
    "html_url": "https://github.com/psf/requests/issues/4795",
    "id": 361042061,
    "node_id": "MDU6SXNzdWUzNjEwNDIwNjE=",
    "number": 4795,
    "title": "`no_proxy` implementation is too greedy",
    "user": {
      "login": "gilbsgilbs",
      "id": 3407667,
      "node_id": "MDQ6VXNlcjM0MDc2Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3407667?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gilbsgilbs",
      "html_url": "https://github.com/gilbsgilbs",
      "followers_url": "https://api.github.com/users/gilbsgilbs/followers",
      "following_url": "https://api.github.com/users/gilbsgilbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/gilbsgilbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gilbsgilbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gilbsgilbs/subscriptions",
      "organizations_url": "https://api.github.com/users/gilbsgilbs/orgs",
      "repos_url": "https://api.github.com/users/gilbsgilbs/repos",
      "events_url": "https://api.github.com/users/gilbsgilbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gilbsgilbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-09-17T20:59:31Z",
    "updated_at": "2018-10-01T12:17:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The implementation of `no_proxy` environment just checks that the hostname ends with some host present in the `no_proxy` variable. Although there is no clear specification for `no_proxy`, this behavior is very unexpected and even dangerous.\r\n\r\n- It prevents you from bypassing only one domain and not its subdomains.\r\n- If `no_proxy` is set for `requests.com`, `attacker-requests.com` is also whitelisted. Not sure it's really really bad, but huh, it's definitely not good.\r\n\r\n## Expected Result\r\n\r\n- `no_proxy=gle.com` should bypass ONLY the domain `gle.com` (optionally its subdomains, but I don't think it's desirable)\r\n- `no_proxy=www.gle.com` should bypass ONLY the domain `www.gle.com` (optionally its subdomains, but I don't think it's desirable)\r\n- `no_proxy=.google.com` should bypass ONLY subdomains of `google.com` (and optionally `google.com`, but I don't think it's desirable)\r\n\r\n## Actual Result\r\n\r\n`no_proxy=gle.com` bypasses any domain that ends with `gle.com`, including:\r\n- `google.com`\r\n- `www.google.com`\r\n- `foo.gle.com`\r\n- `foo.bar.gle.com`\r\n\r\n## Reproduction Steps\r\n\r\n```\r\n$ http_proxy=http://no-proxy-here/ no_proxy=gle.com python -c \"import requests; print(requests.get('http://www.google.com'))\"     \r\n<Response [200]>\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.18.7-arch1-1-ARCH\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nI can prepare a PR if needed.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4795/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4747",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4747/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4747/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4747/events",
    "html_url": "https://github.com/psf/requests/issues/4747",
    "id": 343920747,
    "node_id": "MDU6SXNzdWUzNDM5MjA3NDc=",
    "number": 4747,
    "title": "urllib3 Retry and Response Hooks (Duplicates #4514)",
    "user": {
      "login": "belthaZornv",
      "id": 9652736,
      "node_id": "MDQ6VXNlcjk2NTI3MzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9652736?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/belthaZornv",
      "html_url": "https://github.com/belthaZornv",
      "followers_url": "https://api.github.com/users/belthaZornv/followers",
      "following_url": "https://api.github.com/users/belthaZornv/following{/other_user}",
      "gists_url": "https://api.github.com/users/belthaZornv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/belthaZornv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/belthaZornv/subscriptions",
      "organizations_url": "https://api.github.com/users/belthaZornv/orgs",
      "repos_url": "https://api.github.com/users/belthaZornv/repos",
      "events_url": "https://api.github.com/users/belthaZornv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/belthaZornv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-07-24T07:41:46Z",
    "updated_at": "2021-04-04T21:11:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Given you have a session, and have successfully attached the auth class and the response hooks accordingly; although you'd like to add the Retry class into the picture from urllib3.\r\n\r\n## Expected Result\r\n\r\nI'd expect the response hooks to be honoured - at the very least on the first response (not retry).\r\n\r\n## Actual Result\r\n\r\nThe response hooks are ignored completely.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom requests.adapters import HTTPAdapter\r\nfrom requests.packages.urllib3.util.retry import Retry\r\n\r\nretry = Retry(total=1, read=1, connect=1, backoff_factor=0.5,\r\n                      status_forcelist=(401, 500))\r\n\r\nadapter = HTTPAdapter(max_retries=retry)\r\n\r\nsession = requests.Session()\r\nsession.hooks = {'response': response_hook}\r\n\r\nsession.mount('http://', adapter)\r\nsession.mount('https://', adapter)\r\n\r\ndef response_hook(response, *args, **kwargs):\r\n    \"\"\"\r\n    Response hook\r\n\r\n    :param response:\r\n    :return:\r\n    \"\"\"\r\n    if response.status_code == requests.codes.unauthorized:\r\n       print('Your logic here')\r\n```\r\n\r\n## System Information\r\n\r\n```\r\nPython version: 3.5\r\nRequests version: 2.11.0\r\nOS: Ubuntu 16.04\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4747/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4747/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4730",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4730/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4730/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4730/events",
    "html_url": "https://github.com/psf/requests/issues/4730",
    "id": 339479519,
    "node_id": "MDU6SXNzdWUzMzk0Nzk1MTk=",
    "number": 4730,
    "title": "Requests toolbelt HostHeaderSSL Adapter has issues with non-standard ports. ",
    "user": {
      "login": "JohnOmernik",
      "id": 1930065,
      "node_id": "MDQ6VXNlcjE5MzAwNjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1930065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JohnOmernik",
      "html_url": "https://github.com/JohnOmernik",
      "followers_url": "https://api.github.com/users/JohnOmernik/followers",
      "following_url": "https://api.github.com/users/JohnOmernik/following{/other_user}",
      "gists_url": "https://api.github.com/users/JohnOmernik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JohnOmernik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JohnOmernik/subscriptions",
      "organizations_url": "https://api.github.com/users/JohnOmernik/orgs",
      "repos_url": "https://api.github.com/users/JohnOmernik/repos",
      "events_url": "https://api.github.com/users/JohnOmernik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JohnOmernik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-07-09T14:43:35Z",
    "updated_at": "2020-03-26T05:06:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Summary.\r\nI've posted this in the requests.toolbelt issues as well as urlib3 issues.  My challenge is following what is happening from from requests.toolbelt all the way to urllib3 is beyond my capabilities right now and I am looking for help. \r\n\r\nThe original issue on requests toolbelt is here:\r\n\r\nhttps://github.com/requests/toolbelt/issues/189\r\n\r\nThe problem is shown in completeness here:\r\n\r\nhttps://github.com/JohnOmernik/jupyter_drill/blob/master/issue.md\r\n\r\nI also opened up an issue in URLLIB3:\r\n\r\nhttps://github.com/urllib3/urllib3/issues/1411\r\n\r\nHowever, here I was requested to show just with urllib3 the issue with assert_hostname (what the HostHeaderSSLAdapter is using) and here, urlib3 returned as expected.  However, requests is using a pool manager, and I am unclear how to utilize that at the urllib3 level (with understanding of what is happening enough to recreate the problem... my testing with urllib3 was just using the test scripts included with urllib3 that references assert_hostname.)\r\n\r\n\r\n## Expected Result\r\n\r\nI expect that using the HostHeaderSSL Adapter, I should be able to connect to an IP address, but pass the hostname to the SSL verification allowing a sticky connection to specific IP while validating the SSL certificate.  \r\n## Actual Result\r\nWhen I assert a new hostname, the non-standard port is rewritten to be the https default of 443. While the certificate host is correct, the connection fails because of instead of port 20004 it connects on port 443 when using assert_hostname\r\n\r\n## Reproduction Steps\r\n\r\nPlease see above posted URLs and issues, the best way to describe this is here:\r\n\r\nhttps://github.com/JohnOmernik/jupyter_drill/blob/master/issue.md\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.3\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"1.8.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.0-127-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"100020bf\",\r\n    \"version\": \"17.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.19.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020ff\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.23\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4730/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4687",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4687/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4687/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4687/events",
    "html_url": "https://github.com/psf/requests/issues/4687",
    "id": 332556014,
    "node_id": "MDU6SXNzdWUzMzI1NTYwMTQ=",
    "number": 4687,
    "title": "Response.content is wasteful in time and memory for large inputs",
    "user": {
      "login": "tzickel",
      "id": 7489847,
      "node_id": "MDQ6VXNlcjc0ODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7489847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tzickel",
      "html_url": "https://github.com/tzickel",
      "followers_url": "https://api.github.com/users/tzickel/followers",
      "following_url": "https://api.github.com/users/tzickel/following{/other_user}",
      "gists_url": "https://api.github.com/users/tzickel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tzickel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tzickel/subscriptions",
      "organizations_url": "https://api.github.com/users/tzickel/orgs",
      "repos_url": "https://api.github.com/users/tzickel/repos",
      "events_url": "https://api.github.com/users/tzickel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tzickel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-06-14T20:39:24Z",
    "updated_at": "2018-06-16T17:01:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "https://github.com/requests/requests/blob/883caaf145fbe93bd0d208a6b864de9146087312/requests/models.py#L827\r\n\r\niter chunk is 10K, let's say we have binary content that is about 10MB, the .join first converts the iter_content to a list of 1000 items of 10K each (if it's not chunked), then it creates a new large 10MB string, copies all of them to it, then returns it.\r\n\r\nThis both creates pressure on the allocator and at the peak takes * 2 the memory of the input.\r\n\r\nWithout resorting to C, and if we know the input size (i.e. not chunked), we can create a bytearray and fill it with one iteration at a time. On my computer it is about *2-3 faster, takes half the memory and causes 1/2 of page reclaims.\r\n\r\nThe problem is that is of course that it returns a bytearray and not a bytes type, maybe this should be a helper method for large inputs if people care about this stuff ?\r\n\r\n```python\r\narr = bytearray(totalsize)\r\ni = 0\r\nfor item in self.iter_content(CONTENT_CHUNK_SIZE):\r\n  l = len(item)\r\n  arr[i:i + l] = item\r\n  i += l\r\nreturn arr\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4687/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4664",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4664/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4664/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4664/events",
    "html_url": "https://github.com/psf/requests/issues/4664",
    "id": 327141477,
    "node_id": "MDU6SXNzdWUzMjcxNDE0Nzc=",
    "number": 4664,
    "title": "requests.Session doesn't properly handle closed keep-alive sessions",
    "user": {
      "login": "eriol",
      "id": 212279,
      "node_id": "MDQ6VXNlcjIxMjI3OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/212279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eriol",
      "html_url": "https://github.com/eriol",
      "followers_url": "https://api.github.com/users/eriol/followers",
      "following_url": "https://api.github.com/users/eriol/following{/other_user}",
      "gists_url": "https://api.github.com/users/eriol/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eriol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eriol/subscriptions",
      "organizations_url": "https://api.github.com/users/eriol/orgs",
      "repos_url": "https://api.github.com/users/eriol/repos",
      "events_url": "https://api.github.com/users/eriol/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eriol/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 17,
    "created_at": "2018-05-29T01:10:35Z",
    "updated_at": "2024-02-22T15:49:48Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Hello,\r\nthis was reported for requests 2.18.4 on Debian BTS[\u00b9] by Jonathan Lynch, since it's not Debian specific I'm forwarding here:\r\n\r\n>When a server reaps a keep-alive session it sends a FIN packet to the\r\nclient. Normally, requests handles this fine and rebuilds the session on\r\nthe next request. However, there is an edge case involving network latency\r\nthat is not properly handled:\r\n\r\n>If python sends a request at roughly the same time as the server closes the\r\nsession, then the server will send a RST (as the session is closed). Python\r\nreceives this RST on what it thought was a valid session and throws an\r\nerror:\r\n\r\n```\r\nrequests.exceptions.ConnectionError: ('Connection aborted.',\r\nRemoteDisconnected('Remote end closed connection without response',))\r\n```\r\n>The reason I consider this a bug is because python received the FIN packet\r\nbefore it received the RST. As a result, it shouldn't be surprised when the\r\nconnection is subsequently aborted. It is an edge case, but the client has\r\nenough information available to it that it could have handled it correctly.\r\n\r\n>The workaround is to set max_retries on the Session via an HTTPAdaptor, but\r\nI believe the correct behavior when the FIN is received is to rebuild the\r\nsession and re-send any requests that were in-flight (rather than throwing\r\nan error). Requests correctly handles the FIN packet if there are no\r\nin-flight requests, but if there are in-flight requests it ignores it and\r\ninstead throws an error.\r\n\r\nI will ask Jonathan to continue the discussion here. Thanks!\r\n\r\n[\u00b9]  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=899406",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4664/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4664/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4601",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4601/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4601/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4601/events",
    "html_url": "https://github.com/psf/requests/issues/4601",
    "id": 316075823,
    "node_id": "MDU6SXNzdWUzMTYwNzU4MjM=",
    "number": 4601,
    "title": "Requests memory leak",
    "user": {
      "login": "Munroc",
      "id": 38544207,
      "node_id": "MDQ6VXNlcjM4NTQ0MjA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/38544207?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Munroc",
      "html_url": "https://github.com/Munroc",
      "followers_url": "https://api.github.com/users/Munroc/followers",
      "following_url": "https://api.github.com/users/Munroc/following{/other_user}",
      "gists_url": "https://api.github.com/users/Munroc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Munroc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Munroc/subscriptions",
      "organizations_url": "https://api.github.com/users/Munroc/orgs",
      "repos_url": "https://api.github.com/users/Munroc/repos",
      "events_url": "https://api.github.com/users/Munroc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Munroc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 136589914,
        "node_id": "MDU6TGFiZWwxMzY1ODk5MTQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Needs%20Info",
        "name": "Needs Info",
        "color": "e11d21",
        "default": false,
        "description": null
      },
      {
        "id": 167537670,
        "node_id": "MDU6TGFiZWwxNjc1Mzc2NzA=",
        "url": "https://api.github.com/repos/psf/requests/labels/Propose%20Close",
        "name": "Propose Close",
        "color": "f7c6c7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 25,
    "created_at": "2018-04-19T23:33:06Z",
    "updated_at": "2023-09-30T20:53:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Summary.\r\n\r\n## Expected Result\r\n\r\nProgram running normally\r\n\r\n## Actual Result\r\n\r\nProgram consuming all ram till stops working\r\n\r\n## Reproduction Steps\r\nPseudocode:\r\n```python\r\ndef function():\r\n    proxies = {\r\n        'https': proxy\r\n    }\r\n    session = requests.Session()\r\n    session.headers.update({'User-Agent': 'user - agent'})\r\n    try:                                           #\r\n        login = session.get(url, proxies=proxies)  # HERE IS WHERE MEMORY LEAKS\r\n    except:                                        #\r\n        return -1                                  #\r\n    return 0\r\n\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4601/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4601/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4590",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4590/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4590/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4590/events",
    "html_url": "https://github.com/psf/requests/issues/4590",
    "id": 314514389,
    "node_id": "MDU6SXNzdWUzMTQ1MTQzODk=",
    "number": 4590,
    "title": "requests treats urllib3's SSL handshake timeout as ReadTimeout",
    "user": {
      "login": "metheoryt",
      "id": 6823542,
      "node_id": "MDQ6VXNlcjY4MjM1NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6823542?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metheoryt",
      "html_url": "https://github.com/metheoryt",
      "followers_url": "https://api.github.com/users/metheoryt/followers",
      "following_url": "https://api.github.com/users/metheoryt/following{/other_user}",
      "gists_url": "https://api.github.com/users/metheoryt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metheoryt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metheoryt/subscriptions",
      "organizations_url": "https://api.github.com/users/metheoryt/orgs",
      "repos_url": "https://api.github.com/users/metheoryt/repos",
      "events_url": "https://api.github.com/users/metheoryt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metheoryt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 15,
    "created_at": "2018-04-16T06:15:33Z",
    "updated_at": "2021-11-29T17:22:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## Expected Result\r\n\r\nWhen connecting to a remote machine via SSL/TLS, and SSL handshake timeout happens, I expect to have `SSLError` or `ConnectionError` exception.\r\n\r\n## Actual Result\r\n\r\n`requests` raises `ReadTimeout` \r\n\r\n## Reproduction Steps\r\n\r\nI don't know how to reproduce this, but I have a real stacktrace (most recent call first):\r\n\r\n```\r\ntimeout: _ssl.c:704: The handshake operation timed out\r\n  File \"urllib3/connectionpool.py\", line 346, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"urllib3/connectionpool.py\", line 850, in _validate_conn\r\n    conn.connect()\r\n  File \"urllib3/connection.py\", line 326, in connect\r\n    ssl_context=context)\r\n  File \"urllib3/util/ssl_.py\", line 329, in ssl_wrap_socket\r\n    return context.wrap_socket(sock, server_hostname=server_hostname)\r\n  File \"python3.5/ssl.py\", line 385, in wrap_socket\r\n    _context=self)\r\n  File \"python3.5/ssl.py\", line 760, in __init__\r\n    self.do_handshake()\r\n  File \"python3.5/ssl.py\", line 996, in do_handshake\r\n    self._sslobj.do_handshake()\r\n  File \"python3.5/ssl.py\", line 641, in do_handshake\r\n    self._sslobj.do_handshake()\r\nReadTimeoutError: HTTPSConnectionPool(host='somehost.com', port=443): Read timed out. (read timeout=5)\r\n  File \"requests/adapters.py\", line 440, in send\r\n    timeout=timeout\r\n  File \"urllib3/connectionpool.py\", line 639, in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n  File \"urllib3/util/retry.py\", line 357, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"urllib3/packages/six.py\", line 686, in reraise\r\n    raise value\r\n  File \"urllib3/connectionpool.py\", line 601, in urlopen\r\n    chunked=chunked)\r\n  File \"urllib3/connectionpool.py\", line 349, in _make_request\r\n    self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\r\n  File \"urllib3/connectionpool.py\", line 309, in _raise_timeout\r\n    raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\r\nReadTimeout: HTTPSConnectionPool(host='somehost.com', port=443): Read timed out. (read timeout=5)\r\n  File \"wsa/external/soap.py\", line 234, in call\r\n    response = command(**params)\r\n  File \"zeep/client.py\", line 45, in __call__\r\n    self._op_name, args, kwargs)\r\n  File \"zeep/wsdl/bindings/soap.py\", line 113, in send\r\n    options['address'], envelope, http_headers)\r\n  File \"zeep/transports.py\", line 95, in post_xml\r\n    return self.post(address, message, headers)\r\n  File \"wsa/external/soap.py\", line 75, in post\r\n    return super(NonPersistentTransport, self).post(address, message, headers)\r\n  File \"zeep/transports.py\", line 67, in post\r\n    timeout=self.operation_timeout)\r\n  File \"requests/sessions.py\", line 555, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"requests/sessions.py\", line 508, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"raven/breadcrumbs.py\", line 297, in send\r\n    resp = real_send(self, request, *args, **kwargs)\r\n  File \"requests/sessions.py\", line 618, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"requests/adapters.py\", line 521, in send\r\n    raise ReadTimeout(e, request=request)\r\n``` \r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.5.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"3.10.0-693.5.2.el7.x86_64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000105f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n    $ openssl version\r\n\r\n```\r\nOpenSSL 1.0.2k-fips  26 Jan 2017\r\n```\r\n\r\n    $ cat /etc/redhat-release\r\n    $ uname -spori\r\n\r\n```\r\nOS: CentOS Linux release 7.4.1708 (Core), Linux 3.10.0-693.5.2.el7.x86_64 x86_64 x86_64 GNU/Linux\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4590/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4486",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4486/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4486/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4486/events",
    "html_url": "https://github.com/psf/requests/issues/4486",
    "id": 292332152,
    "node_id": "MDU6SXNzdWUyOTIzMzIxNTI=",
    "number": 4486,
    "title": "Need additional kwarg option to prevent non-SSL redirects",
    "user": {
      "login": "haridsv",
      "id": 166486,
      "node_id": "MDQ6VXNlcjE2NjQ4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/166486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haridsv",
      "html_url": "https://github.com/haridsv",
      "followers_url": "https://api.github.com/users/haridsv/followers",
      "following_url": "https://api.github.com/users/haridsv/following{/other_user}",
      "gists_url": "https://api.github.com/users/haridsv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haridsv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haridsv/subscriptions",
      "organizations_url": "https://api.github.com/users/haridsv/orgs",
      "repos_url": "https://api.github.com/users/haridsv/repos",
      "events_url": "https://api.github.com/users/haridsv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haridsv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      },
      {
        "id": 860696300,
        "node_id": "MDU6TGFiZWw4NjA2OTYzMDA=",
        "url": "https://api.github.com/repos/psf/requests/labels/3.0",
        "name": "3.0",
        "color": "1cff91",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-01-29T09:12:14Z",
    "updated_at": "2018-03-12T21:35:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When a service erroneously send a redirect from an SSL URL to a non-SSL URL, there is a high possibility that secure data (such as passwords) get sent over plaintext without the application's knowledge. There should be an option to prevent such redirects and I am in favor of preventing such redirects by default, though it may break some existing client code.\r\n\r\n## Expected Result\r\n\r\nException raised for `requests.exceptions.SSLError`\r\n\r\n## Actual Result\r\n\r\nRedirection is automatically followed\r\n\r\n## Reproduction Steps\r\n\r\n```\r\n$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes  -subj \"/C=IN/ST=TS/L=Hyderabad/O=Example.com/OU=R&D/CN=example.com\"\r\n$ echo -e \"HTTP/1.1 302 Found\\nLocation: http://google.com\\n\\n\" |  openssl s_server -key key.pem -cert cert.pem -accept 12345\r\n$ python -c 'import requests; print requests.get(\"https://localhost:12345\", verify=False).text'\r\n```\r\n\r\n## System Information\r\n\r\n```\r\n$ python -c 'import requests; print requests.__version__'\r\n2.8.1\r\n$ python -V\r\nPython 2.7.6\r\n$ uname -a\r\nLinux hdara1-wsl 3.13.0-139-generic #188-Ubuntu SMP Tue Jan 9 14:43:09 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4486/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4455",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4455/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4455/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4455/events",
    "html_url": "https://github.com/psf/requests/issues/4455",
    "id": 287220555,
    "node_id": "MDU6SXNzdWUyODcyMjA1NTU=",
    "number": 4455,
    "title": "no response object captured in error of endless redirect chain and confusing message",
    "user": {
      "login": "jvanasco",
      "id": 204779,
      "node_id": "MDQ6VXNlcjIwNDc3OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/204779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jvanasco",
      "html_url": "https://github.com/jvanasco",
      "followers_url": "https://api.github.com/users/jvanasco/followers",
      "following_url": "https://api.github.com/users/jvanasco/following{/other_user}",
      "gists_url": "https://api.github.com/users/jvanasco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jvanasco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jvanasco/subscriptions",
      "organizations_url": "https://api.github.com/users/jvanasco/orgs",
      "repos_url": "https://api.github.com/users/jvanasco/repos",
      "events_url": "https://api.github.com/users/jvanasco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jvanasco/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-01-09T20:29:36Z",
    "updated_at": "2018-01-10T18:12:47Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I found an incredibly bad URL that causes a handful of issues.  the url below jumps between a bunch of SocialFlow (trib.al) and Bitly url shorteners for tracking, then ends up on a connection timeout that also looks like a max retries exceeded (which makes no sense to me)\r\n\r\nThe exception that is raised under Py2 and Py3 does not have a response object, although one should exist \u2013 there are a long history of redirects that gets lost and makes this difficult to debug the url's problem.\r\n\r\n   HTTPSConnectionPool(host='this.cm', port=443): Max retries exceeded with url: /slate/follow (Caused by ConnectTimeoutError(<urllib3.connection.VerifiedHTTPSConnection object at 0x1021788d0>, 'Connection to this.cm timed out. (connect timeout=2)'))\r\n\r\n\r\n```python\r\nimport requests\r\n\r\ntry:\r\n\turl = 'http://slate.me/1KDocND'\r\n\tr = requests.get(url, timeout=2)\r\n\tprint(\"success\")\r\n\tprint(r.response)\r\nexcept Exception as error:\r\n\tprint(\"error\")\r\n\tprint(error)\r\n\tprint(type(error.response))\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4455/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4425",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4425/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4425/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4425/events",
    "html_url": "https://github.com/psf/requests/issues/4425",
    "id": 281148349,
    "node_id": "MDU6SXNzdWUyODExNDgzNDk=",
    "number": 4425,
    "title": "Address deleting cookies when domain-less defaults are used.",
    "user": {
      "login": "jvanasco",
      "id": 204779,
      "node_id": "MDQ6VXNlcjIwNDc3OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/204779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jvanasco",
      "html_url": "https://github.com/jvanasco",
      "followers_url": "https://api.github.com/users/jvanasco/followers",
      "following_url": "https://api.github.com/users/jvanasco/following{/other_user}",
      "gists_url": "https://api.github.com/users/jvanasco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jvanasco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jvanasco/subscriptions",
      "organizations_url": "https://api.github.com/users/jvanasco/orgs",
      "repos_url": "https://api.github.com/users/jvanasco/repos",
      "events_url": "https://api.github.com/users/jvanasco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jvanasco/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2017-12-11T20:00:10Z",
    "updated_at": "2017-12-12T23:00:17Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I found a few variations of this \"implementation detail\" in other reports, but I believe this particular use case is worth addressing.\r\n\r\nIf a URL is retrieved with either a dict or unqualified cookie jar, the deletions are ignored.\r\n\r\n    # use a dict\r\n    resp = requests.get(url, cookies={'cookie1': 'value'},)\r\n\r\nor\r\n\r\n    # use a cookiejar\r\n    session1 = requests.Session()\r\n    session1.cookies = requests.cookies.RequestsCookieJar()\r\n    session1.cookies.set('foo', 'bar')\r\n    resp1 = requests.get(url)\r\n\r\nThis can create endless redirect loops if the server's response to a resource/url combination is to set a \"delete cookie\", which requests can not handle.  Aside from failing tests and puzzled developers, this can trigger abuse flags with 3rd party api services.\r\n\r\n## Expected Result\r\n\r\nIf the server sends a cookie deletion value, it should be respected and not sent to the server.\r\n\r\n## Actual Result\r\n\r\npassing a 'cookies=\" dict to `requests.get()` creates a wrapped session with the default cookiejar.  the current implementation just deletes any matching cookie for the domain, which fails because the cookie was set as a default (not for that domain).\r\n\r\n## Potential Way To Fix\r\n\r\nA potential fix is to extend the RequestsCookieJar to use a blacklist when domain-less defaults are provided.\r\n\r\nWhen a SetCookie deletion is encountered and the cookiejar contains domain-less cookies: \r\n\r\n* delete the domain cookie (if it exists) \r\n* and populate the blacklist.\r\n\r\nWhen a request is made, filter the defaults against active blacklist values.\r\n\r\nWhen a SetCookie update is made, remove it from the blacklist (or update the blacklist's to note it as invalid until the cookie's expiry date)\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\n\r\n# cookies not unset\r\nsession1 = requests.Session()\r\nsession1.cookies = requests.cookies.RequestsCookieJar()\r\nsession1.cookies.set('foo', 'bar')\r\n\r\nr_set = session1.get(\"http://httpbin.org/cookies/set?bar=foo\")\r\nprint(r_set.json())\r\nr_del = session1.get(\"http://httpbin.org/cookies/delete?foo=bar\")\r\nprint(r_del.json())\r\nr_check = session1.get(\"http://httpbin.org/cookies\")\r\nprint(r_check.json())\r\n\r\n# cookies unset because domain matches\r\nsession2 = requests.Session()\r\nsession2.cookies = requests.cookies.RequestsCookieJar()\r\nsession2.cookies.set('foo', 'bar', domain='httpbin.org', path='/')\r\n\r\nrr_set = session2.get(\"http://httpbin.org/cookies/set?bar=foo\")\r\nprint(rr_set.json())\r\nrr_del = session2.get(\"http://httpbin.org/cookies/delete?foo=bar\")\r\nprint(rr_del.json())\r\nrr_check = session2.get(\"http://httpbin.org/cookies\")\r\nprint(rr_check.json())\r\n```\r\n\r\n## System Information\r\n\r\n\"version\": \"2.18.4\"\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4425/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4372",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4372/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4372/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4372/events",
    "html_url": "https://github.com/psf/requests/pull/4372",
    "id": 271213442,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTUwNjg4Njkx",
    "number": 4372,
    "title": "When Location decoding fails, fall back to original",
    "user": {
      "login": "mjpieters",
      "id": 46775,
      "node_id": "MDQ6VXNlcjQ2Nzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/46775?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjpieters",
      "html_url": "https://github.com/mjpieters",
      "followers_url": "https://api.github.com/users/mjpieters/followers",
      "following_url": "https://api.github.com/users/mjpieters/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjpieters/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjpieters/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjpieters/subscriptions",
      "organizations_url": "https://api.github.com/users/mjpieters/orgs",
      "repos_url": "https://api.github.com/users/mjpieters/repos",
      "events_url": "https://api.github.com/users/mjpieters/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjpieters/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2017-11-04T18:28:35Z",
    "updated_at": "2022-01-03T15:30:58Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/psf/requests/pulls/4372",
      "html_url": "https://github.com/psf/requests/pull/4372",
      "diff_url": "https://github.com/psf/requests/pull/4372.diff",
      "patch_url": "https://github.com/psf/requests/pull/4372.patch",
      "merged_at": null
    },
    "body": "Issue #3888 correctly identified Location headers as *usually* containing UTF-8\r\ncodepoints (when not correctly URL encoded), but this is not always the case.\r\nFor example the URL\r\nhttp://www.finanzen.net/suchergebnis.asp?strSuchString=DE0005933931 redirects\r\nto `b'/etf/ishares_core_dax\\xae_ucits_etf_de'`, containing the Latin-1 byte for\r\nthe \u00ae character.\r\n\r\nIf UTF-8 decoding fails, it is better to fall back to the original.\r\n\r\nThis issue was found via https://stackoverflow.com/questions/47113376/python-3-x-requests-redirect-with-unicode-character",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4372/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4372/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4325",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4325/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4325/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4325/events",
    "html_url": "https://github.com/psf/requests/issues/4325",
    "id": 262873207,
    "node_id": "MDU6SXNzdWUyNjI4NzMyMDc=",
    "number": 4325,
    "title": "Session adapter doesn't update https connections cert data",
    "user": {
      "login": "aleperno",
      "id": 2819491,
      "node_id": "MDQ6VXNlcjI4MTk0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2819491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aleperno",
      "html_url": "https://github.com/aleperno",
      "followers_url": "https://api.github.com/users/aleperno/followers",
      "following_url": "https://api.github.com/users/aleperno/following{/other_user}",
      "gists_url": "https://api.github.com/users/aleperno/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aleperno/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aleperno/subscriptions",
      "organizations_url": "https://api.github.com/users/aleperno/orgs",
      "repos_url": "https://api.github.com/users/aleperno/repos",
      "events_url": "https://api.github.com/users/aleperno/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aleperno/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2017-10-04T17:45:28Z",
    "updated_at": "2019-01-04T17:38:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Under a session, the first https request sets the HTTPSConnectionPool certs data.\r\nIf in a subsequent request, we change the certs data (eg: Set verify to True), the adaptor will update the ConnectionPool attributes, however each connection in the pool will still contain the old certs data, thus when requesting a connection from the pool, its info will differ from what we would expect.\r\n\r\n## Expected Result\r\n\r\nThe used connection should have updated certs data\r\n\r\n## Actual Result\r\n\r\nThe used connection have \"old\" certs data.\r\n\r\n## Reproduction Steps\r\nThese tests where performed against a server with a self-signed CA.\r\n```python\r\nIn [1]: from requests import Session\r\n\r\nIn [2]: url = \"https://somepage\"\r\n\r\nIn [3]: auth = (\"admin\", \"admin123\")\r\n\r\nIn [4]: s = Session()\r\n\r\nIn [5]: s.get(url, auth=auth, verify=False)\r\n\r\nOut[5]: <Response [200]>\r\n\r\n# This should fail, but doesnt\r\nIn [6]: s.get(url, auth=auth, verify=True)\r\n\r\nOut[6]: <Response [200]>\r\n\r\n# Create a new session\r\nIn [7]: Session().get(url, auth=auth, verify=True)\r\n# Raises certificate verify failed\r\n```\r\nI'm aware ConnectionPool is in urllib realm, but since it's the adaptor who is updating the pool data, perhaps it should also handle this scenario?\r\n## System Information\r\n\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  }, \r\n  \"cryptography\": {\r\n    \"version\": \"1.7.2\"\r\n  }, \r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  }, \r\n  \"implementation\": {\r\n    \"name\": \"CPython\", \r\n    \"version\": \"2.7.12\"\r\n  }, \r\n  \"platform\": {\r\n    \"release\": \"4.4.0-59-generic\", \r\n    \"system\": \"Linux\"\r\n  }, \r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1000207f\", \r\n    \"version\": \"16.0.0\"\r\n  }, \r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  }, \r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  }, \r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  }, \r\n  \"using_pyopenssl\": true\r\n}",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4325/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4325/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4323",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4323/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4323/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4323/events",
    "html_url": "https://github.com/psf/requests/issues/4323",
    "id": 262203652,
    "node_id": "MDU6SXNzdWUyNjIyMDM2NTI=",
    "number": 4323,
    "title": "Make sessions safe[r] in multi-process environment",
    "user": {
      "login": "rabbbit",
      "id": 290258,
      "node_id": "MDQ6VXNlcjI5MDI1OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/290258?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rabbbit",
      "html_url": "https://github.com/rabbbit",
      "followers_url": "https://api.github.com/users/rabbbit/followers",
      "following_url": "https://api.github.com/users/rabbbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/rabbbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rabbbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rabbbit/subscriptions",
      "organizations_url": "https://api.github.com/users/rabbbit/orgs",
      "repos_url": "https://api.github.com/users/rabbbit/repos",
      "events_url": "https://api.github.com/users/rabbbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rabbbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 191274,
        "node_id": "MDU6TGFiZWwxOTEyNzQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Contributor%20Friendly",
        "name": "Contributor Friendly",
        "color": "0b02e1",
        "default": false,
        "description": null
      },
      {
        "id": 136616769,
        "node_id": "MDU6TGFiZWwxMzY2MTY3Njk=",
        "url": "https://api.github.com/repos/psf/requests/labels/Documentation",
        "name": "Documentation",
        "color": "fad8c7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2017-10-02T19:44:08Z",
    "updated_at": "2024-05-19T18:56:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "tldr; in multi-process environment (Celery) sessions might lead to request/responses being mixed up.\r\n\r\nIt is unsafe to use Session in a multi-process environment - if the fork happens after Session initialisation the underlying connection pool will be shared across both processes, leading to potentially dangerous and hard to debug issues.\r\n\r\nI'm not sure what should happen - whather a code change is necessary, or a documentation change is enough. Please advise :)\r\n\r\n## Use case\r\n\r\nIt is likely to happen if Session is created at module load time, like:\r\n\r\n```python\r\nclass MyClient(object):\r\n    session = requests.Session()\r\n\r\n    def do_things(self, **params):\r\n         self.session.get(**params)\r\n```\r\n\r\nor if a 3rd party client is imported at the module level, where it becomes totally invisible:\r\n\r\n```python\r\n\r\nmy_database_client = database.DatabaseClient(**params)\r\n\r\nclass MyDatabaseWrapper(object):\r\n\r\n      def do_things(self, **params):\r\n            my_database_client.update(**params)\r\n```\r\n\r\nThis is particularly tricky in a **Celery**, where a previously working function might start causing troubles if invoked from Celery. Celery seems like a common Python use case.\r\n\r\nI've seen this pattern in 3 different repos written by 3 different developers - it feels common enough for it to be a problem.\r\n\r\n## Reason\r\n\r\nThis is related to https://github.com/shazow/urllib3/issues/850 in urllib3, where it was stated that it's the callers' responsibility to worry about forking - in this case, it's Requests.\r\n\r\n## Expected Result\r\n\r\nIdeally, a new Session with the same parameters would be started by Requests. \r\n\r\nIf that's too complicated, I'd expect an exception to be thrown if PID change was detected.\r\n\r\nAt the very least, docs should state the expected behaviour.\r\n\r\n\r\n## Actual Result\r\n\r\nThe responses are mixed up - one process might receive a response made for a call it didn't make.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport os\r\nimport sys\r\nimport requests\r\n\r\nMAX = 20\r\ns = requests.Session()\r\n\r\nfor n in range(MAX):\r\n    pid = os.fork()\r\n    if pid == 0:\r\n        try:\r\n            # s.mount(\"http://\", requests.adapters.HTTPAdapter())  # uncomment to fix\r\n            r = s.get('http://httpstat.us/300?sleep=100')\r\n        except Exception:\r\n            # ignoring intermittent http errors\r\n            pass\r\n        sys.exit(0)\r\n    else:\r\n        try:\r\n            r = s.get('http://httpstat.us/200')\r\n        except Exception as exc:\r\n            # ignoring intermittent http errors\r\n            pass\r\n\r\n        if r.status_code != 200:\r\n            print 'pid: {} Call {}/{}. Wrong status code detected {}'.format(\r\n                os.getpid(),\r\n                n,\r\n                MAX,\r\n                r.status_code\r\n            )\r\n```\r\n\r\n```\r\npid: 30996 Call 7/20. Wrong status code detected 300   \r\npid: 30996 Call 9/20. Wrong status code detected 300   \r\npid: 30996 Call 14/20. Wrong status code detected 300  \r\npid: 30996 Call 17/20. Wrong status code detected 300  \r\npid: 30996 Call 19/20. Wrong status code detected 300 \r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\npawel@pawel-C02V306VHTDH ~/Uber/tokenizer-python $ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  }, \r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  }, \r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  }, \r\n  \"implementation\": {\r\n    \"name\": \"CPython\", \r\n    \"version\": \"2.7.14\"\r\n  }, \r\n  \"platform\": {\r\n    \"release\": \"16.7.0\", \r\n    \"system\": \"Darwin\"\r\n  }, \r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\", \r\n    \"version\": null\r\n  }, \r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  }, \r\n  \"system_ssl\": {\r\n    \"version\": \"100020cf\"\r\n  }, \r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  }, \r\n  \"using_pyopenssl\": false\r\n}```\r\n\r\nThis command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4323/reactions",
      "total_count": 7,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4323/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4214",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4214/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4214/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4214/events",
    "html_url": "https://github.com/psf/requests/issues/4214",
    "id": 247004428,
    "node_id": "MDU6SXNzdWUyNDcwMDQ0Mjg=",
    "number": 4214,
    "title": "Returning cookies from Adapters",
    "user": {
      "login": "Singletoned",
      "id": 6284,
      "node_id": "MDQ6VXNlcjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Singletoned",
      "html_url": "https://github.com/Singletoned",
      "followers_url": "https://api.github.com/users/Singletoned/followers",
      "following_url": "https://api.github.com/users/Singletoned/following{/other_user}",
      "gists_url": "https://api.github.com/users/Singletoned/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Singletoned/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Singletoned/subscriptions",
      "organizations_url": "https://api.github.com/users/Singletoned/orgs",
      "repos_url": "https://api.github.com/users/Singletoned/repos",
      "events_url": "https://api.github.com/users/Singletoned/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Singletoned/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2017-08-01T09:12:47Z",
    "updated_at": "2017-09-05T13:52:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I've been trying to create a subclass of `BaseAdapter` for Requests that supports WSGI applications, (preferably based on the requests-wsgi-adapter package, or from scratch if need be).\r\n\r\nThe sticking point has been cookies and session handling.  From reading the Requests code, my understanding is that cookies are automatically extracted from the reponse object returned from the adapter's `send` method.  In order for the cookies to be automatically extracted the response needs to have a `r.raw._original_response.msg` chain of attributes and this should return an object with an `info` method that should return an `email.message.Message` instance (largely because of  `cookies.py:extract_cookies_to_jar`, but also because of how `http.cookiejar` behaves).\r\n\r\nThis seems like a needlessly complicated series of steps to go through, particularly as I'm not currently clear on how to correctly convert my response body to an `email.message.Message` (and a quick scan of the Python documentation makes this look non-trivial).\r\n\r\nHave I misunderstood?  Are there any helper functions for performing these steps?\r\n\r\nWould you consider a patch to `extract_cookies_to_jar` that also looks, for example, for a `_cookies_dict` property on the response, at the point that it currently silently returns if there is no `_original_response` attribute?\r\n\r\nAlternatively, would you consider supporting something like https://pypi.python.org/pypi/cookies/ with a friendlier interface (kind of \"Requests for cookies\")?  I haven't dug into it a lot, but it looks relatively easy to add optional support for it (which I'd be happy to contribute).\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4214/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4214/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/4123",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/4123/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/4123/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/4123/events",
    "html_url": "https://github.com/psf/requests/issues/4123",
    "id": 232804149,
    "node_id": "MDU6SXNzdWUyMzI4MDQxNDk=",
    "number": 4123,
    "title": "Make response.next lazily computable.",
    "user": {
      "login": "Lukasa",
      "id": 1382556,
      "node_id": "MDQ6VXNlcjEzODI1NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lukasa",
      "html_url": "https://github.com/Lukasa",
      "followers_url": "https://api.github.com/users/Lukasa/followers",
      "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
      "organizations_url": "https://api.github.com/users/Lukasa/orgs",
      "repos_url": "https://api.github.com/users/Lukasa/repos",
      "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lukasa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 17,
    "created_at": "2017-06-01T08:35:46Z",
    "updated_at": "2024-05-19T18:54:54Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "When attempting to debug #4122 I attempted to use the standard method for debugging this, which is to set `allow_redirects=False` and to manually check the headers. Unfortunately, this no longer works since @kennethreitz shipped 2.15.0, as Requests now *always* computes the first redirect target in order to write it into `Response.next`. This makes it very frustrating to debug problems with Requests redirect following because it cannot be disabled, meaning that monkeypatching is required to prevent Requests blowing up.\r\n\r\nI propose that we should either make `response.next` lazily computable, such that it is only calculated when actually requested, or we should remove it.\r\n\r\n## Expected Result\r\n\r\nI expected that if `allow_redirects=False` was provided Requests would not run any of its redirect handling code.\r\n\r\n## Actual Result\r\n\r\nIt did.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nurl = 'http://www.yftxt.com/plus/xiazai_yfx.php?open=2&id=12914&uhash=7fadfdb165fadc7362f9dc90'\r\nrequests.get(url, allow_redirects=False)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.3\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.0\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"16.7.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.17.3\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.21.1\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/4123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/4123/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/3929",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/3929/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/3929/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/3929/events",
    "html_url": "https://github.com/psf/requests/issues/3929",
    "id": 215269887,
    "node_id": "MDU6SXNzdWUyMTUyNjk4ODc=",
    "number": 3929,
    "title": "Don't override `Authorization` header when contents are bearer token (or any other token)",
    "user": {
      "login": "tomvlk",
      "id": 3877688,
      "node_id": "MDQ6VXNlcjM4Nzc2ODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3877688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomvlk",
      "html_url": "https://github.com/tomvlk",
      "followers_url": "https://api.github.com/users/tomvlk/followers",
      "following_url": "https://api.github.com/users/tomvlk/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomvlk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomvlk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomvlk/subscriptions",
      "organizations_url": "https://api.github.com/users/tomvlk/orgs",
      "repos_url": "https://api.github.com/users/tomvlk/repos",
      "events_url": "https://api.github.com/users/tomvlk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomvlk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": true,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 20,
    "created_at": "2017-03-19T15:03:38Z",
    "updated_at": "2024-02-01T00:57:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I found out that the requests lib is overriding the authorization header when a netrc file is in place, which is awesome. But in some cases you won't want this at all, and is a design flaw imo.\r\n\r\nFor example you use a bearer token, it gets replaced by the user/password from netrc.\r\n\r\nAlso see the issue here: https://github.com/python-social-auth/social-core/issues/43",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/3929/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/3929/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/3829",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/3829/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/3829/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/3829/events",
    "html_url": "https://github.com/psf/requests/issues/3829",
    "id": 202820492,
    "node_id": "MDU6SXNzdWUyMDI4MjA0OTI=",
    "number": 3829,
    "title": "Session.verify=False ignored when REQUESTS_CA_BUNDLE environment variable is set",
    "user": {
      "login": "intgr",
      "id": 137616,
      "node_id": "MDQ6VXNlcjEzNzYxNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/intgr",
      "html_url": "https://github.com/intgr",
      "followers_url": "https://api.github.com/users/intgr/followers",
      "following_url": "https://api.github.com/users/intgr/following{/other_user}",
      "gists_url": "https://api.github.com/users/intgr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/intgr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/intgr/subscriptions",
      "organizations_url": "https://api.github.com/users/intgr/orgs",
      "repos_url": "https://api.github.com/users/intgr/repos",
      "events_url": "https://api.github.com/users/intgr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/intgr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      },
      {
        "id": 117745,
        "node_id": "MDU6TGFiZWwxMTc3NDU=",
        "url": "https://api.github.com/repos/psf/requests/labels/Planned",
        "name": "Planned",
        "color": "e102d8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": true,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 14,
    "created_at": "2017-01-24T13:40:18Z",
    "updated_at": "2024-02-12T14:04:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "One would expect that when the caller explicitly asks to make unverified requests, then the `REQUESTS_CA_BUNDLE` environment variable doesn't affect it. The reality is different, however.\r\n\r\n```python\r\nimport os\r\nimport requests\r\n\r\nos.environ['REQUESTS_CA_BUNDLE'] = 'asd.pem'  # Must be an existing file\r\n\r\nr = requests.get('https://self-signed.badssl.com/', verify=False)\r\nprint(r)\r\n# Prints: <Response [200]>\r\n\r\nsession = requests.Session()\r\nsession.verify = False\r\n\r\nr = session.get('https://self-signed.badssl.com/')\r\nprint(r)\r\n# Fails: requests.exceptions.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:749)\r\n```\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/3829/reactions",
      "total_count": 27,
      "+1": 27,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/3829/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/3759",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/3759/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/3759/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/3759/events",
    "html_url": "https://github.com/psf/requests/issues/3759",
    "id": 194476114,
    "node_id": "MDU6SXNzdWUxOTQ0NzYxMTQ=",
    "number": 3759,
    "title": "cookies.py why replace escaped quote with nothing?",
    "user": {
      "login": "saft",
      "id": 664265,
      "node_id": "MDQ6VXNlcjY2NDI2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/664265?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saft",
      "html_url": "https://github.com/saft",
      "followers_url": "https://api.github.com/users/saft/followers",
      "following_url": "https://api.github.com/users/saft/following{/other_user}",
      "gists_url": "https://api.github.com/users/saft/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saft/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saft/subscriptions",
      "organizations_url": "https://api.github.com/users/saft/orgs",
      "repos_url": "https://api.github.com/users/saft/repos",
      "events_url": "https://api.github.com/users/saft/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saft/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 21,
    "created_at": "2016-12-08T23:47:56Z",
    "updated_at": "2023-11-27T13:30:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "https://github.com/kennethreitz/requests/blob/master/requests/cookies.py#L346\r\n\r\nWhy do this? An escaped quote can be sent in the case of sending json in the cookie and this code mangles that json. I'm raising this because the http library seems to think that formatting the json this way on the server is the right way to do it. See http/cookies.py function _quote line 225 in my 3.4 version.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/3759/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/3759/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/3669",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/3669/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/3669/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/3669/events",
    "html_url": "https://github.com/psf/requests/issues/3669",
    "id": 188539424,
    "node_id": "MDU6SXNzdWUxODg1Mzk0MjQ=",
    "number": 3669,
    "title": "Setting Session Cookies",
    "user": {
      "login": "nateprewitt",
      "id": 5271761,
      "node_id": "MDQ6VXNlcjUyNzE3NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5271761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateprewitt",
      "html_url": "https://github.com/nateprewitt",
      "followers_url": "https://api.github.com/users/nateprewitt/followers",
      "following_url": "https://api.github.com/users/nateprewitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateprewitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateprewitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateprewitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nateprewitt/orgs",
      "repos_url": "https://api.github.com/users/nateprewitt/repos",
      "events_url": "https://api.github.com/users/nateprewitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateprewitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2016-11-10T15:33:34Z",
    "updated_at": "2016-11-10T15:33:34Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "This is a continuation of the original PR (#3595) to address how we set Session cookies in Requests. The PR had enough disagreement on how this should be addressed that I felt it was better to move this into a discussion.\r\n\r\nAs noted in #3595, Requests currently allows the user to provide cookies as a dictionary. While we've allowed this for individual requests, because their domain is (mostly) scoped, there are some real security concerns for supporting this for Sessions.\r\n\r\nThe issues\r\n=========\r\n\r\n1. If the user sets Session's `cookies` attribute to a `dict`, it will happily accept it, but crashes when you try to send anything. To correct this issue, the cookies need to be supplied as a `CookieJar` instance as noted in the [documentation](http://docs.python-requests.org/en/master/user/advanced/#session-objects). This is unideal because we allow users to use an idiom supported everywhere else in the API, and then fail later with a fairly unhelpful exception.\r\n\r\n2. #3595 automated this suggested process from the documentation, as we do elsewhere in Requests, but it allows you to easily set session-wide cookies that aren't bounded by a domain. This means it's easy to unintentionally send sensitive cookie information to unintended recipients.\r\n\r\n3. The currently proposed solution of using `add_dict_to_cookiejar` or `cookiejar_from_dict` provides no extra protection against the security issues raised in #3595.\r\n\r\nSolutions(?)\r\n==========\r\n\r\n1. I think this is a two step process. For Requests 2.x, I'm suggesting we add a warning to the user when they set Session `cookies` attribute to a `dict`. This points them at the documentation so they can at least *try* to do the right things. Otherwise, they're none the wiser until their program crashes with an error in a separate module and only minor clues on the cause. In 3.0.0, I think this warning should be raised an actual exception since we don't support cookies as dicts for Sessions.\r\n\r\n2. (and also 3.) If we're going to require the extra step of making the user explicitly use `add_dict_to_cookiejar` or `cookie_from_dict`, then let's make them useful. They currently don't provide any benefit over the dictionary approach in #3595. We can emulate some of the functionality of how a browser handles cookies by allowing users to supply cookie parameters on a per-dictionary basis. This is similar to cookies set by individual page requests.\r\n\r\n```python\r\n    cookies = {'SessionID': '1234',\r\n               'SecretToken': 'efe077444d17b2de7feee356601d'}\r\n\r\n    s = Session()\r\n    add_dict_to_cookiejar(\r\n        s.cookies, cookies, domain='auth.myauthsite.com', \r\n        secure=True, expires='123456789'\r\n    )\r\n```\r\n\r\nThis is a relatively simple changed as shown in an initial mockup in e2a4f9f & 4454849. This would need to be accompanied by a documentation update (something like 3e4e5b7) to explain how to do this properly.\r\n\r\n\r\n----\r\n@sigmavirus24, when you've got a moment, could you confirm this issue properly encapsulates your concerns and I didn't leave anything out? As for the possible solutions, are any of these amenable? I know your work in #2714 will help this a little bit with the default cookie policy change, but we still need to provide a way for the user to easily adhere to the safeguards we're putting in place.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/3669/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/3669/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/3296",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/3296/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/3296/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/3296/events",
    "html_url": "https://github.com/psf/requests/issues/3296",
    "id": 159287397,
    "node_id": "MDU6SXNzdWUxNTkyODczOTc=",
    "number": 3296,
    "title": "no_proxy env ignored on 302 redirect",
    "user": {
      "login": "Gaasmann",
      "id": 13124500,
      "node_id": "MDQ6VXNlcjEzMTI0NTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/13124500?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gaasmann",
      "html_url": "https://github.com/Gaasmann",
      "followers_url": "https://api.github.com/users/Gaasmann/followers",
      "following_url": "https://api.github.com/users/Gaasmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gaasmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gaasmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gaasmann/subscriptions",
      "organizations_url": "https://api.github.com/users/Gaasmann/orgs",
      "repos_url": "https://api.github.com/users/Gaasmann/repos",
      "events_url": "https://api.github.com/users/Gaasmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gaasmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2016-06-08T22:17:20Z",
    "updated_at": "2016-09-06T00:00:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hello,\n\nI have a weird problem using Requests and proxies.\nI have https_proxy and no_proxy env variable for a domain and it seems the no_proxy is ignored on a HTTP 302 redirect target.\nWhat I do is basically:\n\n```\ns = requests.Session()\nr = s.get(\"https://use-the-proxy.com\")\n```\n\nThe response is 302 Found (Location: https://do-not-use-the-proxy.com) and Requests tries to follow.\nHere the problem: even if do-not-use-the-proxy.com is present in no_proxy, Requests still use the proxy for the request following a 302(the 302 \"target\").\nIf I directly request https://do-not-use-the-proxy.com, the proxy is not used as expected.\n\nThanks,\n## \n\nNico\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/3296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/3296/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/3186",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/3186/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/3186/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/3186/events",
    "html_url": "https://github.com/psf/requests/issues/3186",
    "id": 154319859,
    "node_id": "MDU6SXNzdWUxNTQzMTk4NTk=",
    "number": 3186,
    "title": "Response.content iterates in needlessly small chunks",
    "user": {
      "login": "vfaronov",
      "id": 300211,
      "node_id": "MDQ6VXNlcjMwMDIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/300211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vfaronov",
      "html_url": "https://github.com/vfaronov",
      "followers_url": "https://api.github.com/users/vfaronov/followers",
      "following_url": "https://api.github.com/users/vfaronov/following{/other_user}",
      "gists_url": "https://api.github.com/users/vfaronov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vfaronov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vfaronov/subscriptions",
      "organizations_url": "https://api.github.com/users/vfaronov/orgs",
      "repos_url": "https://api.github.com/users/vfaronov/repos",
      "events_url": "https://api.github.com/users/vfaronov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vfaronov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2016-05-11T19:12:34Z",
    "updated_at": "2024-07-08T10:55:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`Response.content` [iterates over the response data in chunks of 10240 bytes](https://github.com/kennethreitz/requests/blob/87704105af65b382b86f168f6a54192eab91faf2/requests/models.py#L741). The number 10240 was set in commit [`62d2ea8`](https://github.com/kennethreitz/requests/commit/62d2ea8).\n\nAfter tracing the source code of urllib3 and httplib, I can\u2019t see a reason for this behavior. It all ultimately goes through httplib\u2019s [`HTTPResponse.readinto`](https://hg.python.org/cpython/file/87130512ef34/Lib/http/client.py#l469), which automatically limits the read size according to `Content-Length` or the `chunked` framing.\n\nTherefore, it seems that, if you simply set `CONTENT_CHUNK_SIZE` to a much larger number (like 10240000), nothing should change, except `Response.content` will become more efficient on large responses.\n\n**Update:** it seems like httplib allocates a buffer of the requested size (to be read into), so simply setting `CONTENT_CHUNK_SIZE` to a large value will cause large chunks of memory to be allocated, which is probably a bad idea.\n\nThis is not a problem for me and I have not researched it thoroughly. I\u2019m filing this issue after investigating [a Stack Overflow question](http://stackoverflow.com/questions/37135880/python-3-urllib-vs-requests-performance) where this caused an unexpected slowdown for the poster, and a subsequent [IRC exchange](https://botbot.me/freenode/python-requests/2016-05-11/?msg=65874287&page=1) with @Lukasa. Feel free to do (or not do) whatever you think is right here.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/3186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/3186/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2716",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2716/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2716/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2716/events",
    "html_url": "https://github.com/psf/requests/issues/2716",
    "id": 99878720,
    "node_id": "MDU6SXNzdWU5OTg3ODcyMA==",
    "number": 2716,
    "title": "Strange behavior when setting cookie value to None in the method-level parameter",
    "user": {
      "login": "mcpwlk",
      "id": 10273733,
      "node_id": "MDQ6VXNlcjEwMjczNzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/10273733?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcpwlk",
      "html_url": "https://github.com/mcpwlk",
      "followers_url": "https://api.github.com/users/mcpwlk/followers",
      "following_url": "https://api.github.com/users/mcpwlk/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcpwlk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcpwlk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcpwlk/subscriptions",
      "organizations_url": "https://api.github.com/users/mcpwlk/orgs",
      "repos_url": "https://api.github.com/users/mcpwlk/repos",
      "events_url": "https://api.github.com/users/mcpwlk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcpwlk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2015-08-09T09:27:56Z",
    "updated_at": "2015-08-28T17:36:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "After running the following code\n\n```\ns = requests.Session()\ns.cookies.update({'from-my': 'browser'})\nr = s.get('http://httpbin.org/cookies', cookies={'another': 'cookie', 'from-my': None})\nprint r.text\n```\n\nthe output is\n\n```\n{\n  \"cookies\": {\n    \"from-my; another\": \"cookie\"\n  }\n}\n```\n\nI used Python 2.7.6 and requests 2.7.0.\n\nFor more information, please see http://stackoverflow.com/questions/31902510/strange-requests-behavior-when-setting-cookie-value-to-none-in-the-method-level\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2716/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2638",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2638/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2638/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2638/events",
    "html_url": "https://github.com/psf/requests/issues/2638",
    "id": 87745606,
    "node_id": "MDU6SXNzdWU4Nzc0NTYwNg==",
    "number": 2638,
    "title": "Behaviors are different when data is a list(dict) and text",
    "user": {
      "login": "zhaoguixu",
      "id": 4114154,
      "node_id": "MDQ6VXNlcjQxMTQxNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4114154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zhaoguixu",
      "html_url": "https://github.com/zhaoguixu",
      "followers_url": "https://api.github.com/users/zhaoguixu/followers",
      "following_url": "https://api.github.com/users/zhaoguixu/following{/other_user}",
      "gists_url": "https://api.github.com/users/zhaoguixu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zhaoguixu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zhaoguixu/subscriptions",
      "organizations_url": "https://api.github.com/users/zhaoguixu/orgs",
      "repos_url": "https://api.github.com/users/zhaoguixu/repos",
      "events_url": "https://api.github.com/users/zhaoguixu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zhaoguixu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 5,
    "created_at": "2015-06-12T14:25:11Z",
    "updated_at": "2015-06-12T20:36:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When data is unicode, it gives traceback.\nA simple test case:\n\n``` python\nrequest = requests.Request(method='GET', url='https://httpbin.org/get')\nrequest.data =  u'x=f\u00f8\u00f8'\nprepared = request.prepare()\nrequests.Session().send(prepared)\n```\n\n```\nTraceback (most recent call last):\n...\n    requests.Session().send(prepared)\n  File \"/usr/lib/python2.7/dist-packages/requests/sessions.py\", line 566, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/requests/adapters.py\", line 331, in send\n    timeout=timeout\n  File \"/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py\", line 558, in urlopen\n    body=body, headers=headers)\n  File \"/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py\", line 383, in _make_request\n    conn.request(method, url, **httplib_request_kw)\n  File \"/usr/lib/python2.7/httplib.py\", line 975, in request\n    self._send_request(method, url, body, headers)\n  File \"/usr/lib/python2.7/httplib.py\", line 1009, in _send_request\n    self.endheaders(body)\n  File \"/usr/lib/python2.7/httplib.py\", line 971, in endheaders\n    self._send_output(message_body)\n  File \"/usr/lib/python2.7/httplib.py\", line 835, in _send_output\n    self.send(message_body)\n  File \"/usr/lib/python2.7/httplib.py\", line 805, in send\n    self.sock.sendall(data)\n  File \"/usr/lib/python2.7/ssl.py\", line 329, in sendall\n    v = self.send(data[count:])\n  File \"/usr/lib/python2.7/ssl.py\", line 298, in send\n    v = self._sslobj.write(data)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 3-4: ordinal not in range(128)\n```\n\nWhen data is a list, it works fine.\n\n``` python\n    request = requests.Request(method='GET', url='https://httpbin.org/get')\n    request.data = [(u'x', u'f\u00f8\u00f8')]\n    prepared = request.prepare()\n    requests.Session().send(prepared)\n```\n\nRequests seems to be supporting unicode data, shown in the code. However, it seems not work well, and the behavior differs when the data is a list-like type and a text-like type, one try to encode using 'uft-8' and the other just pass through(in _encode_params).\n\n``` python\n    def prepare_body(self, data, files, json=None):\n            ...\n            if files:\n                (body, content_type) = self._encode_files(files, data)\n            else:\n                if data and json is None:\n                    body = self._encode_params(data)     #===> check data\n                    if isinstance(data, basestring) or hasattr(data, 'read'):\n                        content_type = None\n                    else:\n                        content_type = 'application/x-www-form-urlencoded'\n                    ...\n    @staticmethod\n    def _encode_params(data):\n        if isinstance(data, (str, bytes)):   #===> allows unicode\n            return data                              #===> simply return\n        elif hasattr(data, 'read'):\n            return data\n        elif hasattr(data, '__iter__'):        #===> the behavior is different.\n            result = []\n            for k, vs in to_key_val_list(data):\n                if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):\n                    vs = [vs]\n                for v in vs:\n                    if v is not None:\n                        result.append(\n                            (k.encode('utf-8') if isinstance(k, str) else k,\n                             v.encode('utf-8') if isinstance(v, str) else v))   #===>you try to encode as 'utf8'\n            return urlencode(result, doseq=True)\n        else:\n            return data\n```\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2638/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2638/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2585",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2585/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2585/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2585/events",
    "html_url": "https://github.com/psf/requests/issues/2585",
    "id": 72459274,
    "node_id": "MDU6SXNzdWU3MjQ1OTI3NA==",
    "number": 2585,
    "title": "Session.get_adapter won't work correctly for case-sensitive URLs",
    "user": {
      "login": "agilevic",
      "id": 1110390,
      "node_id": "MDQ6VXNlcjExMTAzOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1110390?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agilevic",
      "html_url": "https://github.com/agilevic",
      "followers_url": "https://api.github.com/users/agilevic/followers",
      "following_url": "https://api.github.com/users/agilevic/following{/other_user}",
      "gists_url": "https://api.github.com/users/agilevic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agilevic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agilevic/subscriptions",
      "organizations_url": "https://api.github.com/users/agilevic/orgs",
      "repos_url": "https://api.github.com/users/agilevic/repos",
      "events_url": "https://api.github.com/users/agilevic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agilevic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117745,
        "node_id": "MDU6TGFiZWwxMTc3NDU=",
        "url": "https://api.github.com/repos/psf/requests/labels/Planned",
        "name": "Planned",
        "color": "e102d8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 6,
    "created_at": "2015-05-01T15:44:12Z",
    "updated_at": "2015-07-18T14:22:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "In its current implementation Session.get_adapter turns url to lowercase in line 637. If it is aiming for case-insensitive compare it should also turn prefix variable to lowercase in the same line or do that at registration in the mount() method. But this whole idea seems incorrect because URL paths can be case sensitive and one might register different adapters for different paths on the same site.\n\nThe fix should most likely be spliting the URL into components and using that tuple as a key in the self.adapters dictionary. Changes mount() and get_adapter().\n\n``` python\nIn [48]: urlparse.urlparse('HTTP://lala.mi.do/path')\nOut[48]: ParseResult(scheme='http', netloc='lala.mi.do', path='/path', params='', query='', fragment='')\n\nIn [49]: d = {}\n\nIn [50]: purl = urlparse.urlparse('HTTP://lala.mi.do/path')\n\nIn [51]: d[purl] = 'myadapter'\n\nIn [52]: purl = urlparse.urlparse('HTTP://lala.mi.do/Path2')\n\nIn [53]: purl\nOut[53]: ParseResult(scheme='http', netloc='lala.mi.do', path='/Path2', params='', query='', fragment='')\n\nIn [54]: d[purl] = 'myadapter2'\n\nIn [55]: d\nOut[55]:\n{ParseResult(scheme='http', netloc='lala.mi.do', path='/Path2', params='', query='', fragment=''): 'myadapter2',\n ParseResult(scheme='http', netloc='lala.mi.do', path='/path', params='', query='', fragment=''): 'myadapter'}\n```\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2585/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2433",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2433/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2433/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2433/events",
    "html_url": "https://github.com/psf/requests/issues/2433",
    "id": 56194102,
    "node_id": "MDU6SXNzdWU1NjE5NDEwMg==",
    "number": 2433,
    "title": "iter_lines method will always hold the last response in the server in a buffer",
    "user": {
      "login": "larsks",
      "id": 82622,
      "node_id": "MDQ6VXNlcjgyNjIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/82622?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/larsks",
      "html_url": "https://github.com/larsks",
      "followers_url": "https://api.github.com/users/larsks/followers",
      "following_url": "https://api.github.com/users/larsks/following{/other_user}",
      "gists_url": "https://api.github.com/users/larsks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/larsks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/larsks/subscriptions",
      "organizations_url": "https://api.github.com/users/larsks/orgs",
      "repos_url": "https://api.github.com/users/larsks/repos",
      "events_url": "https://api.github.com/users/larsks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/larsks/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 10,
    "created_at": "2015-02-02T04:09:56Z",
    "updated_at": "2019-12-11T22:42:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The implementation of the `iter_lines` and `iter_content` methods in `requests` means that when receiving line-by-line data from a server in \"push\" mode, the latest line received from the server will almost invariably be smaller than the `chunk_size` parameter, causing the final read operation to block.\n\n A good example of this is the Kubernetes `watch` api, which produces one line of JSON output per event, like this:\n\n```\n{\"type\":\"ADDED\",\"object\":{\"kind\":\"Service\",\"id\":\"kubernetes-ro\",\"uid\":\"5718d954-a31a-11e4-8c74-20cf30467e62\",\"creationTimestamp\":\"2015-01-23T11:10:25-05:00\",\"selfLink\":\"/api/v1beta1/services/kubernetes-ro\",\"resourceVersion\":4,\"apiVersion\":\"v1beta1\",\"namespace\":\"default\",\"port\":80,\"protocol\":\"TCP\",\"labels\":{\"component\":\"apiserver\",\"provider\":\"kubernetes\"},\"selector\":null,\"containerPort\":0,\"portalIP\":\"10.254.6.100\"}}\n```\n\nIf you compare the output of:\n\n```\nimport requests\nr = requests.get('http://localhost:8080/api/v1beta1/watch/services',\n                 stream=True)\n\nfor line in r.iter_lines():\n    print line\n```\n\nWith the output of `curl` running against the same URL, you will see\nthat the output from the Python code lags behind the output seen by\n`curl` by one line.\n\nI was able to work around this behavior by writing my own `iter_lines`\nmethod, which looks like this:\n\n```\ndef iter_lines(fd, chunk_size=1024):\n    '''Iterates over the content of a file-like object line-by-line.'''\n\n    pending = None\n\n    while True:\n        chunk = os.read(fd.fileno(), chunk_size)\n        if not chunk:\n            break\n\n        if pending is not None:\n            chunk = pending + chunk\n            pending = None\n\n        lines = chunk.splitlines()\n\n        if lines and lines[-1]:\n            pending = lines.pop()\n\n        for line in lines:\n            yield line\n\n    if pending:\n        yield(pending)\n```\n\nThis works around the problem partly by calling `os.read`, which will\nhappily return fewer bytes than requested in `chunk_size`.  With the\nabove routing available, the following code behaves correctly:\n\n```\nimport requests\nr = requests.get('http://localhost:8080/api/v1beta1/watch/services',\n                 stream=True)\n\nfor line in iter_lines(r.raw):\n    print line\n```\n\nThis code will always print out the most recent reply from the server\nwhen it is received.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2433/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2433/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2392",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2392/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2392/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2392/events",
    "html_url": "https://github.com/psf/requests/issues/2392",
    "id": 52934168,
    "node_id": "MDU6SXNzdWU1MjkzNDE2OA==",
    "number": 2392,
    "title": "requests.exceptions.ReadTimeout is not raised when response is chunked",
    "user": {
      "login": "nickjoyce-wf",
      "id": 1444666,
      "node_id": "MDQ6VXNlcjE0NDQ2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1444666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickjoyce-wf",
      "html_url": "https://github.com/nickjoyce-wf",
      "followers_url": "https://api.github.com/users/nickjoyce-wf/followers",
      "following_url": "https://api.github.com/users/nickjoyce-wf/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickjoyce-wf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickjoyce-wf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickjoyce-wf/subscriptions",
      "organizations_url": "https://api.github.com/users/nickjoyce-wf/orgs",
      "repos_url": "https://api.github.com/users/nickjoyce-wf/repos",
      "events_url": "https://api.github.com/users/nickjoyce-wf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickjoyce-wf/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      },
      {
        "id": 117745,
        "node_id": "MDU6TGFiZWwxMTc3NDU=",
        "url": "https://api.github.com/repos/psf/requests/labels/Planned",
        "name": "Planned",
        "color": "e102d8",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 5,
    "created_at": "2014-12-26T18:19:10Z",
    "updated_at": "2018-01-12T23:43:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "https://gist.github.com/nickjoyce-wf/c536f2573ef124115f86\n\nWhen a request has a timeout param supplied and the response is chunked but does not return enough data in time, `requests.exceptions.ReadTimeout` should be raised.\n\n``` shell\n$ mkvirtualenv test\n(test)$ pip install requests werkzeug\n(test)$ python server.py\n```\n\nIn another terminal:\n\n``` shell\n$ workon test\n(test)$ python client.py\n```\n\nExpected results:\n\n`requests.exceptions.ReadTimeout` is raised due to response not being sent within the timeout specified by `requests.get`.\n\nActual results:\n\n```\nTraceback (most recent call last):\n  File \"client.py\", line 3, in <module>\n    requests.get('http://127.0.0.1:8000/', timeout=0.5)\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/api.py\", line 65, in get\n    return request('get', url, **kwargs)\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/api.py\", line 49, in request\n    response = session.request(method=method, url=url, **kwargs)\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/sessions.py\", line 461, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/sessions.py\", line 610, in send\n    r.content\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/models.py\", line 730, in content\n    self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n  File \"/Users/nick/.virtualenvs/test/lib/python2.7/site-packages/requests/models.py\", line 662, in generate\n    raise ConnectionError(e)\nrequests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8000): Read timed out.\n```\n\nRecorded http request/response via Wireshark:\n\n```\nGET / HTTP/1.1\nHost: 127.0.0.1:8000\nConnection: keep-alive\nAccept-Encoding: gzip, deflate\nAccept: */*\nUser-Agent: python-requests/2.5.1 CPython/2.7.9 Darwin/13.4.0\n\nHTTP/1.0 200 OK\nContent-type: text/plain\nTransfer-Encoding: chunked\nConnection: close\nServer: Werkzeug/0.9.6 Python/2.7.9\nDate: Fri, 26 Dec 2014 17:51:21 GMT\n```\n\nTested with requests==2.5.1\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2392/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2235",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2235/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2235/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2235/events",
    "html_url": "https://github.com/psf/requests/issues/2235",
    "id": 43205423,
    "node_id": "MDU6SXNzdWU0MzIwNTQyMw==",
    "number": 2235,
    "title": "chunk size error for unicode content",
    "user": {
      "login": "ilovenwd",
      "id": 32542,
      "node_id": "MDQ6VXNlcjMyNTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/32542?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ilovenwd",
      "html_url": "https://github.com/ilovenwd",
      "followers_url": "https://api.github.com/users/ilovenwd/followers",
      "following_url": "https://api.github.com/users/ilovenwd/following{/other_user}",
      "gists_url": "https://api.github.com/users/ilovenwd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ilovenwd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ilovenwd/subscriptions",
      "organizations_url": "https://api.github.com/users/ilovenwd/orgs",
      "repos_url": "https://api.github.com/users/ilovenwd/repos",
      "events_url": "https://api.github.com/users/ilovenwd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ilovenwd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117745,
        "node_id": "MDU6TGFiZWwxMTc3NDU=",
        "url": "https://api.github.com/repos/psf/requests/labels/Planned",
        "name": "Planned",
        "color": "e102d8",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 6,
    "created_at": "2014-09-19T05:27:53Z",
    "updated_at": "2014-10-10T16:46:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I found this code in requests/adapters.py (latest version installed by pip): \n\nhttps://github.com/kennethreitz/requests/blob/master/requests/adapters.py#L383\n\n``` python\nfor i in request.body:                                                     \n       low_conn.send(hex(len(i))[2:].encode('utf-8'))\n```\n\nif `i` is a unicode,  the low_conn send utf8 encoding byte string, but the chunk size is wrong.\nI think it should change to:\n\n``` python\nif isinstance(i, unicode):\n  i = i.encode('utf8')\nlow_conn.send(hex(len(i))[2:].encode('utf-8'))\n```\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2235/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2235/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2233",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2233/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2233/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2233/events",
    "html_url": "https://github.com/psf/requests/issues/2233",
    "id": 43191940,
    "node_id": "MDU6SXNzdWU0MzE5MTk0MA==",
    "number": 2233,
    "title": "Refactoring exception hierarchy",
    "user": {
      "login": "kevinburke",
      "id": 234019,
      "node_id": "MDQ6VXNlcjIzNDAxOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/234019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinburke",
      "html_url": "https://github.com/kevinburke",
      "followers_url": "https://api.github.com/users/kevinburke/followers",
      "following_url": "https://api.github.com/users/kevinburke/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinburke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinburke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinburke/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinburke/orgs",
      "repos_url": "https://api.github.com/users/kevinburke/repos",
      "events_url": "https://api.github.com/users/kevinburke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinburke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 44501249,
        "node_id": "MDU6TGFiZWw0NDUwMTI0OQ==",
        "url": "https://api.github.com/repos/psf/requests/labels/Needs%20BDFL%20Input",
        "name": "Needs BDFL Input",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 5,
    "created_at": "2014-09-19T00:00:11Z",
    "updated_at": "2016-01-26T10:17:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This was mentioned in #2230 as a project for requests 3.0, but it probably should get its own thread.\n\nI wrote a lot of words about what I'd like exception hierarchy to look like, here:\n\nhttps://gist.github.com/kevinburke/b98e053a4bf9835c67bb\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2233/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2155",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2155/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2155/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2155/events",
    "html_url": "https://github.com/psf/requests/issues/2155",
    "id": 39202386,
    "node_id": "MDU6SXNzdWUzOTIwMjM4Ng==",
    "number": 2155,
    "title": "Streaming gzipped responses",
    "user": {
      "login": "hheimbuerger",
      "id": 159414,
      "node_id": "MDQ6VXNlcjE1OTQxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159414?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hheimbuerger",
      "html_url": "https://github.com/hheimbuerger",
      "followers_url": "https://api.github.com/users/hheimbuerger/followers",
      "following_url": "https://api.github.com/users/hheimbuerger/following{/other_user}",
      "gists_url": "https://api.github.com/users/hheimbuerger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hheimbuerger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hheimbuerger/subscriptions",
      "organizations_url": "https://api.github.com/users/hheimbuerger/orgs",
      "repos_url": "https://api.github.com/users/hheimbuerger/repos",
      "events_url": "https://api.github.com/users/hheimbuerger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hheimbuerger/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117745,
        "node_id": "MDU6TGFiZWwxMTc3NDU=",
        "url": "https://api.github.com/repos/psf/requests/labels/Planned",
        "name": "Planned",
        "color": "e102d8",
        "default": false,
        "description": null
      },
      {
        "id": 191274,
        "node_id": "MDU6TGFiZWwxOTEyNzQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Contributor%20Friendly",
        "name": "Contributor Friendly",
        "color": "0b02e1",
        "default": false,
        "description": null
      },
      {
        "id": 136616769,
        "node_id": "MDU6TGFiZWwxMzY2MTY3Njk=",
        "url": "https://api.github.com/repos/psf/requests/labels/Documentation",
        "name": "Documentation",
        "color": "fad8c7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2014-07-31T14:55:22Z",
    "updated_at": "2018-09-24T09:33:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I need to process big XML responses as a stream. The uncompressed responses can be multiple hundred megabytes in size, so loading them entirely into memory before handing them to the XML parser is not an option.\n\nI'm using lxml to parse and I just hand the `response.raw` to its `iterparse()` function, as described somewhere in the requests docs. This works fine for uncompressed responses.\n\nUnfortunately, the API I'm calling isn't particularly good. So it will sometimes return `Content-Encoding: gzip` even if I explicitly ask for uncompressed data. Also, the compression ratio on these extremely repetitive and verbose XML files is really good (10x+), so I'd really like to make use of compressed responses.\n\nIs this possible with requests? I couldn't find it in the documentation. Researching deeper into urllib3, its [HTTPResponse.read()](https://github.com/shazow/urllib3/blob/master/urllib3/response.py#L140) method seems to support a `decode_content` parameter. If not set, urllib3 falls back to what's set in the constructor. When requests calls the constructor in [requests.adapters.HTTPAdapter.send()](https://github.com/kennethreitz/requests/blob/fe693c492242ae532211e0c173324f09ca8cf227/requests/adapters.py#L343), it explicitly sets `decode_content` to False.\n\nIs there a reason why requests does that?\n\nStrangely, `iter_content()` actually sets `decode_content=True` while reading. Why here? It all appears a bit arbitrary. I don't really understand the motivation for doing it one way here and another way there.  \nPersonally, I can't really use `iter_content()` of course because I need a file-like object for lxml.\n\nI previously wrote my own file-like object that I can hook in between requests and lxml, but of course buffering is hard and I feel like smarter people than me have written this before, so I'd prefer to not have to roll my own.\n\nWhat's your advice how to handle this? Should requests be changed to default to setting `decode_content=True` in urllib3?\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2155/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2155/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2109",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2109/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2109/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2109/events",
    "html_url": "https://github.com/psf/requests/issues/2109",
    "id": 36326374,
    "node_id": "MDU6SXNzdWUzNjMyNjM3NA==",
    "number": 2109,
    "title": "[idea] Change how we merge request and session settings",
    "user": {
      "login": "sigmavirus24",
      "id": 240830,
      "node_id": "MDQ6VXNlcjI0MDgzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/240830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigmavirus24",
      "html_url": "https://github.com/sigmavirus24",
      "followers_url": "https://api.github.com/users/sigmavirus24/followers",
      "following_url": "https://api.github.com/users/sigmavirus24/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigmavirus24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigmavirus24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigmavirus24/subscriptions",
      "organizations_url": "https://api.github.com/users/sigmavirus24/orgs",
      "repos_url": "https://api.github.com/users/sigmavirus24/repos",
      "events_url": "https://api.github.com/users/sigmavirus24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigmavirus24/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2014-06-23T20:09:09Z",
    "updated_at": "2014-10-05T17:15:42Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "# Problem\n\nCurrently, tools (e.g., [openstack/python-swiftclient](https://github.com/openstack/python-swiftclient/blob/3d0de79e26e2aa6285742c60aca3c164e9c2fbb9/swiftclient/client.py#L942..L945)) fight how requests sets the `Content-Type` header for a request. Notice that if the user of swiftclient doesn't provide their own `content_type` then the library sets the header's value to `''`. Ideally, setting `None` in a situation like this (where the Session has no default `Content-Type`) would prevent the request preparation from setting its own `Content-Type` header. This doesn't work because the per-session and per-request settings are [merged at the session level](https://github.com/kennethreitz/requests/blob/master/requests/sessions.py#L361).\n# Potential solutions\n## Split the responsibility of merging settings\n\nThe merge at the session level could just take care of ensuring that the per-request settings have priority while waiting for the request preparation to remove `None`s. The downside of this behaviour is that it breaks backwards compatibility. Why? Consider the following:\n\n``` python\nimport requests\n\ns = requests.Session()\ns.headers['Content-Type'] = 'application/json'\ns.post(url, data={'some': 'formdata'}, headers={'Content-Type': None})\n```\n\nThis allows for requests to detect that it is in fact `application/x-www-form-urlencoded` by removing the default set by the session. Keeping backwards compatibility would mean that we would have to do extra work while merging settings on the session-level. We would have to check if the header was set on the session level, and then we would delete headers with value `None`, otherwise, persist the `None` value. This is clearly a lot of extra logic.\n## Create a constant/singleton to mean \"Do not autogenerate any of this for me\"\n\nWe could potentially expose a new constant or singleton in requests to allow users to specify when they want to prevent requests from handling it for them. I dislike this idea a lot, but it's potentially easier to implement and a bit more explicit than overloading the already overloaded meaning of `None` in this context.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2109/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2086",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2086/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2086/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2086/events",
    "html_url": "https://github.com/psf/requests/issues/2086",
    "id": 35202262,
    "node_id": "MDU6SXNzdWUzNTIwMjI2Mg==",
    "number": 2086,
    "title": "Remove ISO-8859-1 charset fallback",
    "user": {
      "login": "Lukasa",
      "id": 1382556,
      "node_id": "MDQ6VXNlcjEzODI1NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lukasa",
      "html_url": "https://github.com/Lukasa",
      "followers_url": "https://api.github.com/users/Lukasa/followers",
      "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
      "organizations_url": "https://api.github.com/users/Lukasa/orgs",
      "repos_url": "https://api.github.com/users/Lukasa/repos",
      "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lukasa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      },
      {
        "id": 117745,
        "node_id": "MDU6TGFiZWwxMTc3NDU=",
        "url": "https://api.github.com/repos/psf/requests/labels/Planned",
        "name": "Planned",
        "color": "e102d8",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 37,
    "created_at": "2014-06-07T06:54:12Z",
    "updated_at": "2018-02-07T16:04:07Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "For a long time we've had a fallback value in `response.encoding` of `ISO-8859-1`, because RFC 2616 told us to. RFC 2616 is now obsolete, replaced by RFCs 7230, 7231, 7232, 7233, 7234, and 7235. The authoritative RFC on this issue is RFC 7231, which has this to say:\n\n> The default charset of ISO-8859-1 for text media types has been removed; the default is now whatever the media type definition says.\n\nThe media type definitions for `text/*` are most recently affected by RFC 6657, which has this to say:\n\n> In accordance with option (a) above, registrations for \"text/*\" media types that can transport charset information inside the corresponding payloads (such as \"text/html\" and \"text/xml\") SHOULD NOT specify the use of a \"charset\" parameter, nor any default value, in order to avoid conflicting interpretations should the \"charset\" parameter value and the value specified in the payload disagree.\n\nI checked the registration for `text/html` [here](https://www.iana.org/assignments/media-types/media-types.xhtml#text). Unsurprisingly, it provides no default values. It does allow a charset parameter which overrides anything in the content itself.\n\nI propose the following changes:\n1. Remove the ISO-8859-1 fallback, as it's no longer valid (being only enforced by RFC 2616). We should _definitely_ do this.\n2. Consider writing a module that has the appropriate fallback encodings for other `text/*` content and use them where appropriate. This isn't vital, just is a \"might be nice\".\n3. Begin checking HTML content for meta tags again, in order to appropriately fall back. This is controversial, and we'll want @kennethreitz to consider it carefully.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2086/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2086/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2061",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2061/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2061/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2061/events",
    "html_url": "https://github.com/psf/requests/issues/2061",
    "id": 34191133,
    "node_id": "MDU6SXNzdWUzNDE5MTEzMw==",
    "number": 2061,
    "title": "Making https proxies easier to deal with",
    "user": {
      "login": "asmeurer",
      "id": 71486,
      "node_id": "MDQ6VXNlcjcxNDg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asmeurer",
      "html_url": "https://github.com/asmeurer",
      "followers_url": "https://api.github.com/users/asmeurer/followers",
      "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
      "organizations_url": "https://api.github.com/users/asmeurer/orgs",
      "repos_url": "https://api.github.com/users/asmeurer/repos",
      "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asmeurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 19,
    "created_at": "2014-05-23T16:35:02Z",
    "updated_at": "2021-02-28T04:03:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm trying to add support for proxies to conda, in particular, automatically prompting for a username and password on a 407. For http proxies, it's all fine. I can detect the 407 error code on `HTTPError` from `raise_for_status` and inject `HTTPProxyAuth` and try again.\n\nBut for https, it raises `ConnectionError` on `get`. Adding `HTTPProxyAuth` does not work. I have to parse the URL and add it in as `https://username:password@proxy:port`. `urlparse` does not make this particularly easy.\n\nFurthermore, the only way I can tell to actually detect the the `ConnectionError` is a 407 is to do\n\n``` py\ntry:\n    # do request\nexcept ConnectionError as e:\n    if \"407\" in str(e):\n        # get username and password\n```\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2061/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2018",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2018/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2018/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2018/events",
    "html_url": "https://github.com/psf/requests/issues/2018",
    "id": 32203116,
    "node_id": "MDU6SXNzdWUzMjIwMzExNg==",
    "number": 2018,
    "title": "Re-order proxy precedence.",
    "user": {
      "login": "ouroborus",
      "id": 392047,
      "node_id": "MDQ6VXNlcjM5MjA0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/392047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ouroborus",
      "html_url": "https://github.com/ouroborus",
      "followers_url": "https://api.github.com/users/ouroborus/followers",
      "following_url": "https://api.github.com/users/ouroborus/following{/other_user}",
      "gists_url": "https://api.github.com/users/ouroborus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ouroborus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ouroborus/subscriptions",
      "organizations_url": "https://api.github.com/users/ouroborus/orgs",
      "repos_url": "https://api.github.com/users/ouroborus/repos",
      "events_url": "https://api.github.com/users/ouroborus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ouroborus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 117744,
        "node_id": "MDU6TGFiZWwxMTc3NDQ=",
        "url": "https://api.github.com/repos/psf/requests/labels/Bug",
        "name": "Bug",
        "color": "e10c02",
        "default": false,
        "description": null
      },
      {
        "id": 117745,
        "node_id": "MDU6TGFiZWwxMTc3NDU=",
        "url": "https://api.github.com/repos/psf/requests/labels/Planned",
        "name": "Planned",
        "color": "e102d8",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 16,
    "created_at": "2014-04-25T03:09:20Z",
    "updated_at": "2022-02-17T19:17:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "`Session.trust_env = False` turns off the checking of environment variables for options including proxy settings (`*_proxy`). But `urllib` picks up and uses these environment proxy settings anyway. `requests` should pass the `trust_env` setting on to `urllib`. (Although I'm not sure if `urllib` has a similar override.)\n\n(Proxy setting precedence should be sorted out here as well. They way it is now, environment proxy settings will interfere with (rather than be over-ridden by) the `proxies` argument in `Session.request` or `requests.request` calls and the `Session.proxies` config regardless of `trust_env` settings.)\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2018/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/2002",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/2002/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/2002/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/2002/events",
    "html_url": "https://github.com/psf/requests/issues/2002",
    "id": 31505086,
    "node_id": "MDU6SXNzdWUzMTUwNTA4Ng==",
    "number": 2002,
    "title": "bool(failure response) is False",
    "user": {
      "login": "slinkp",
      "id": 98610,
      "node_id": "MDQ6VXNlcjk4NjEw",
      "avatar_url": "https://avatars.githubusercontent.com/u/98610?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slinkp",
      "html_url": "https://github.com/slinkp",
      "followers_url": "https://api.github.com/users/slinkp/followers",
      "following_url": "https://api.github.com/users/slinkp/following{/other_user}",
      "gists_url": "https://api.github.com/users/slinkp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slinkp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slinkp/subscriptions",
      "organizations_url": "https://api.github.com/users/slinkp/orgs",
      "repos_url": "https://api.github.com/users/slinkp/repos",
      "events_url": "https://api.github.com/users/slinkp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slinkp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 20,
    "created_at": "2014-04-14T21:09:55Z",
    "updated_at": "2016-04-15T21:39:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This is rather surprising, and not documented that I've seen (though I could certainly have missed it):\n\n```\n>>> r = requests.request('get', 'http://google.com/aopsdufsaf')\n>>> r\n<Response [404]>\n>>> bool(r)\nFalse\n```\n\nTo me, \"failure = false\" is neither intuitive nor expected.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/2002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/2002/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/1953",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/1953/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/1953/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/1953/events",
    "html_url": "https://github.com/psf/requests/issues/1953",
    "id": 29363729,
    "node_id": "MDU6SXNzdWUyOTM2MzcyOQ==",
    "number": 1953,
    "title": "The iterable produced by `Session.resolve_redirects` does not include the very first response",
    "user": {
      "login": "zackw",
      "id": 325899,
      "node_id": "MDQ6VXNlcjMyNTg5OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zackw",
      "html_url": "https://github.com/zackw",
      "followers_url": "https://api.github.com/users/zackw/followers",
      "following_url": "https://api.github.com/users/zackw/following{/other_user}",
      "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zackw/subscriptions",
      "organizations_url": "https://api.github.com/users/zackw/orgs",
      "repos_url": "https://api.github.com/users/zackw/repos",
      "events_url": "https://api.github.com/users/zackw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zackw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 76800,
        "node_id": "MDU6TGFiZWw3NjgwMA==",
        "url": "https://api.github.com/repos/psf/requests/labels/Feature%20Request",
        "name": "Feature Request",
        "color": "02e10c",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 14,
    "created_at": "2014-03-13T16:06:54Z",
    "updated_at": "2015-08-31T06:50:04Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "If you are manually walking over redirects, you probably want to structure your code like this:\n\n```\nredirect_sequence = session.send_with_manual_redirect_walking(request, ...)\nfor resp in redirect_sequence:\n    # do something with 'resp'\n```\n\nThe existing API does not let you do that.  You must write either\n\n```\nfirst_response = session.send(request, ..., allow_redirects=False)\n# do something with 'first_response'\nfor resp in session.resolve_redirects(first_response, request, ...)\n    # do something with 'resp'\n```\n\nwhich involves writing the same \"do something with\" code in two places, or\n\n```\nresp = session.send(request, ..., allow_redirects=False)\nredir_iter = session.resolve_redirects(resp, request, ...)\nwhile True:\n    # do something with 'resp'\n    if not resp.is_redirect: break\n    resp = next(redir_iter)\n```\n\nwhich is un-Pythonic loop structure.\n\nSince `Session.resolve_redirects` must remain as is for compatibility's sake, the only way to fix this is to add either a new mode to `send` (`allow_redirects=MANUAL`?) or a new Session method (perhaps in fact called `send_with_manual_redirect_walking`) which returns an iterable that _does_ include the very first response.  I do not particularly care which, or what the new method is called in the second case.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/1953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/1953/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/psf/requests/issues/1737",
    "repository_url": "https://api.github.com/repos/psf/requests",
    "labels_url": "https://api.github.com/repos/psf/requests/issues/1737/labels{/name}",
    "comments_url": "https://api.github.com/repos/psf/requests/issues/1737/comments",
    "events_url": "https://api.github.com/repos/psf/requests/issues/1737/events",
    "html_url": "https://github.com/psf/requests/issues/1737",
    "id": 22655515,
    "node_id": "MDU6SXNzdWUyMjY1NTUxNQ==",
    "number": 1737,
    "title": "[Suggestion] Simplify charset handling",
    "user": {
      "login": "itsadok",
      "id": 142512,
      "node_id": "MDQ6VXNlcjE0MjUxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itsadok",
      "html_url": "https://github.com/itsadok",
      "followers_url": "https://api.github.com/users/itsadok/followers",
      "following_url": "https://api.github.com/users/itsadok/following{/other_user}",
      "gists_url": "https://api.github.com/users/itsadok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itsadok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itsadok/subscriptions",
      "organizations_url": "https://api.github.com/users/itsadok/orgs",
      "repos_url": "https://api.github.com/users/itsadok/repos",
      "events_url": "https://api.github.com/users/itsadok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itsadok/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 44501249,
        "node_id": "MDU6TGFiZWw0NDUwMTI0OQ==",
        "url": "https://api.github.com/repos/psf/requests/labels/Needs%20BDFL%20Input",
        "name": "Needs BDFL Input",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 44501256,
        "node_id": "MDU6TGFiZWw0NDUwMTI1Ng==",
        "url": "https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change",
        "name": "Breaking API Change",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/psf/requests/milestones/20",
      "html_url": "https://github.com/psf/requests/milestone/20",
      "labels_url": "https://api.github.com/repos/psf/requests/milestones/20/labels",
      "id": 487518,
      "node_id": "MDk6TWlsZXN0b25lNDg3NTE4",
      "number": 20,
      "title": "3.0.0",
      "description": null,
      "creator": {
        "login": "Lukasa",
        "id": 1382556,
        "node_id": "MDQ6VXNlcjEzODI1NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1382556?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lukasa",
        "html_url": "https://github.com/Lukasa",
        "followers_url": "https://api.github.com/users/Lukasa/followers",
        "following_url": "https://api.github.com/users/Lukasa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lukasa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lukasa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lukasa/subscriptions",
        "organizations_url": "https://api.github.com/users/Lukasa/orgs",
        "repos_url": "https://api.github.com/users/Lukasa/repos",
        "events_url": "https://api.github.com/users/Lukasa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lukasa/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 12,
      "closed_issues": 29,
      "state": "open",
      "created_at": "2013-11-17T11:29:34Z",
      "updated_at": "2024-05-19T18:43:00Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 6,
    "created_at": "2013-11-14T10:56:19Z",
    "updated_at": "2014-10-05T17:26:54Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "To cut to the chase, here are my suggestions:\n- Remove automatic character set detection (charade) from the library\n- Have response.encoding represent the charset from the Content-Type header\n- Mention the caveat in the documentation\n### Long version\n\nThere seems to be a lot of confusion regarding how the `.text` property works. After getting into some trouble with it myself, I searched the issues list, and found a dozen or so issues, all boiling down to the same mismatch between users' expectations and the intent of the library designers.\n#147 - bytecode string returned when page has charset=UTF-8\n#156 - get_unicode_from_response does not check charsets from meta tags\n#592 - Internal encoding detection doesn't match external chardet call\n#654 - requests.get() ignores charset=UTF-8 and BOM\n#765 - Chardet sometimes fails and force the wrong encoding\n#861 - parsing encoding utf-8 page doesn't as expected\n#1087 - Encodings from content\n#1150 - On some pages requests detect encoding incorrectly\n#1546 - use a default encoding in Response's text property\n#1589 - Make sure content is checked when setting encoding\n#1604 - Response.text returns improperly decoded text\n#1683 - models.text Behaviour (encoding choice)\n\n(It must be tiring to have the same conversation over and over again. I hope I'm being helpful here and not just piling on).\n\nThe argument seems to be:\n- As an HTTP library, requests should not know or care about HTML and META attributes\n- RFC 2616 states that if no charset is defined, \"text/*\" media types should be regarded as ISO-8859-1\n\nI accept both these arguments. However, the documentation seems a bit coy, saying that \"Requests makes an educated guess about the encoding\", implying chardet/charade. In practice, for any content with a \"text\" media subtype, charade will not be used unless the user explicitly sets the `response.encoding` to None before reading the `.text` property.\n\nAdditionally, while ISO-8859-1 can be used as a default, won't it make more sense to handle that default in `.text` and not in the `get_encoding_from_headers` method? This way, the `encoding` property will be None if indeed no encoding is specified, allowing the user to make the decision on how to proceed.\n\nIf you're going to keep the `.text` property, I think it should do a simple decoding if the charset is specified in the headers, and throw an exception otherwise. This way is much less confusing than the state of affairs now. Additionally, the documentation should contain a warning not to use it for arbitrary web pages, and perhaps a code sample showing the proper way to do it.\n\n``` python\n\nimport re\nimport charade\nimport requests\n\ndef get_encodings_from_content(content):\n    charset_re = re.compile(r'<meta.*?charset=[\"\\']*(.+?)[\"\\'>]', flags=re.I)\n    pragma_re = re.compile(r'<meta.*?content=[\"\\']*;?charset=(.+?)[\"\\'>]', flags=re.I)\n    xml_re = re.compile(r'^<\\?xml.*?encoding=[\"\\']*(.+?)[\"\\'>]')\n\n    # FIXME: Does not work in python 3\n    return (charset_re.findall(content) +\n            pragma_re.findall(content) +\n            xml_re.findall(content))\n\nr = requests.get('https://example.com/page.html')\nif \"charset\" not in r.headers.get(\"content-type\", \"\"):\n    encodings = get_encodings_from_content(r.content)\n    if encodings:\n        r.encoding = encodings[0]\n    else:\n        r.encoding = charade.detect(r.content)['encoding']\n\nhtml = r.text\n\n```\n",
    "closed_by": {
      "login": "itsadok",
      "id": 142512,
      "node_id": "MDQ6VXNlcjE0MjUxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itsadok",
      "html_url": "https://github.com/itsadok",
      "followers_url": "https://api.github.com/users/itsadok/followers",
      "following_url": "https://api.github.com/users/itsadok/following{/other_user}",
      "gists_url": "https://api.github.com/users/itsadok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itsadok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itsadok/subscriptions",
      "organizations_url": "https://api.github.com/users/itsadok/orgs",
      "repos_url": "https://api.github.com/users/itsadok/repos",
      "events_url": "https://api.github.com/users/itsadok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itsadok/received_events",
      "type": "User",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/psf/requests/issues/1737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/psf/requests/issues/1737/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]